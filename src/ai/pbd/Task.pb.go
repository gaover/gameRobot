// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Task.proto

package pbd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 任务结构
type TaskInfo struct {
	TaskId               *int32        `protobuf:"zigzag32,1,opt,name=task_id" json:"task_id,omitempty"`
	TaskType             *int32        `protobuf:"zigzag32,2,opt,name=task_type" json:"task_type,omitempty"`
	TaskNameId           []byte        `protobuf:"bytes,3,opt,name=task_name_id" json:"task_name_id,omitempty"`
	TaskDes              []byte        `protobuf:"bytes,4,opt,name=task_des" json:"task_des,omitempty"`
	TaskNpc              *int32        `protobuf:"zigzag32,5,opt,name=task_npc" json:"task_npc,omitempty"`
	TaskReward           []*ItemConfig `protobuf:"bytes,6,rep,name=task_reward" json:"task_reward,omitempty"`
	TaskProgressParam    []int64       `protobuf:"zigzag64,7,rep,name=task_progress_param" json:"task_progress_param,omitempty"`
	TaskCanComplete      *bool         `protobuf:"varint,8,opt,name=task_can_complete" json:"task_can_complete,omitempty"`
	PreTalkId            *int32        `protobuf:"zigzag32,9,opt,name=pre_talk_id" json:"pre_talk_id,omitempty"`
	NexTalkId            *int32        `protobuf:"zigzag32,10,opt,name=nex_talk_id" json:"nex_talk_id,omitempty"`
	CompleteTalkId       *int32        `protobuf:"zigzag32,11,opt,name=complete_talk_id" json:"complete_talk_id,omitempty"`
	CanGiveUp            *bool         `protobuf:"varint,12,opt,name=can_give_up" json:"can_give_up,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TaskInfo) Reset()         { *m = TaskInfo{} }
func (m *TaskInfo) String() string { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()    {}
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{0}
}
func (m *TaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfo.Merge(m, src)
}
func (m *TaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfo proto.InternalMessageInfo

func (m *TaskInfo) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *TaskInfo) GetTaskType() int32 {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return 0
}

func (m *TaskInfo) GetTaskNameId() []byte {
	if m != nil {
		return m.TaskNameId
	}
	return nil
}

func (m *TaskInfo) GetTaskDes() []byte {
	if m != nil {
		return m.TaskDes
	}
	return nil
}

func (m *TaskInfo) GetTaskNpc() int32 {
	if m != nil && m.TaskNpc != nil {
		return *m.TaskNpc
	}
	return 0
}

func (m *TaskInfo) GetTaskReward() []*ItemConfig {
	if m != nil {
		return m.TaskReward
	}
	return nil
}

func (m *TaskInfo) GetTaskProgressParam() []int64 {
	if m != nil {
		return m.TaskProgressParam
	}
	return nil
}

func (m *TaskInfo) GetTaskCanComplete() bool {
	if m != nil && m.TaskCanComplete != nil {
		return *m.TaskCanComplete
	}
	return false
}

func (m *TaskInfo) GetPreTalkId() int32 {
	if m != nil && m.PreTalkId != nil {
		return *m.PreTalkId
	}
	return 0
}

func (m *TaskInfo) GetNexTalkId() int32 {
	if m != nil && m.NexTalkId != nil {
		return *m.NexTalkId
	}
	return 0
}

func (m *TaskInfo) GetCompleteTalkId() int32 {
	if m != nil && m.CompleteTalkId != nil {
		return *m.CompleteTalkId
	}
	return 0
}

func (m *TaskInfo) GetCanGiveUp() bool {
	if m != nil && m.CanGiveUp != nil {
		return *m.CanGiveUp
	}
	return false
}

// 玩家计数相关
type RoleCountInfo struct {
	InteractCount        *int32           `protobuf:"zigzag32,1,opt,name=interact_count" json:"interact_count,omitempty"`
	TotalNpcCount        *int32           `protobuf:"zigzag32,2,opt,name=total_npc_count" json:"total_npc_count,omitempty"`
	NpcCount             []*InteractNpc   `protobuf:"bytes,3,rep,name=npc_count" json:"npc_count,omitempty"`
	ArenaJoinCount       *int32           `protobuf:"zigzag32,4,opt,name=arena_join_count" json:"arena_join_count,omitempty"`
	ArenaSuccessCount    *int32           `protobuf:"zigzag32,5,opt,name=arena_success_count" json:"arena_success_count,omitempty"`
	BathWashCount        *int32           `protobuf:"zigzag32,6,opt,name=bath_wash_count" json:"bath_wash_count,omitempty"`
	SwordJoinCount       *int32           `protobuf:"zigzag32,7,opt,name=sword_join_count" json:"sword_join_count,omitempty"`
	SwordSuccessCount    *int32           `protobuf:"zigzag32,8,opt,name=sword_success_count" json:"sword_success_count,omitempty"`
	ActCount             []*InteractCount `protobuf:"bytes,9,rep,name=act_count" json:"act_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RoleCountInfo) Reset()         { *m = RoleCountInfo{} }
func (m *RoleCountInfo) String() string { return proto.CompactTextString(m) }
func (*RoleCountInfo) ProtoMessage()    {}
func (*RoleCountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{1}
}
func (m *RoleCountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleCountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleCountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleCountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleCountInfo.Merge(m, src)
}
func (m *RoleCountInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoleCountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleCountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoleCountInfo proto.InternalMessageInfo

func (m *RoleCountInfo) GetInteractCount() int32 {
	if m != nil && m.InteractCount != nil {
		return *m.InteractCount
	}
	return 0
}

func (m *RoleCountInfo) GetTotalNpcCount() int32 {
	if m != nil && m.TotalNpcCount != nil {
		return *m.TotalNpcCount
	}
	return 0
}

func (m *RoleCountInfo) GetNpcCount() []*InteractNpc {
	if m != nil {
		return m.NpcCount
	}
	return nil
}

func (m *RoleCountInfo) GetArenaJoinCount() int32 {
	if m != nil && m.ArenaJoinCount != nil {
		return *m.ArenaJoinCount
	}
	return 0
}

func (m *RoleCountInfo) GetArenaSuccessCount() int32 {
	if m != nil && m.ArenaSuccessCount != nil {
		return *m.ArenaSuccessCount
	}
	return 0
}

func (m *RoleCountInfo) GetBathWashCount() int32 {
	if m != nil && m.BathWashCount != nil {
		return *m.BathWashCount
	}
	return 0
}

func (m *RoleCountInfo) GetSwordJoinCount() int32 {
	if m != nil && m.SwordJoinCount != nil {
		return *m.SwordJoinCount
	}
	return 0
}

func (m *RoleCountInfo) GetSwordSuccessCount() int32 {
	if m != nil && m.SwordSuccessCount != nil {
		return *m.SwordSuccessCount
	}
	return 0
}

func (m *RoleCountInfo) GetActCount() []*InteractCount {
	if m != nil {
		return m.ActCount
	}
	return nil
}

// 任务进度信息缓存
type TaskProgressInfo struct {
	Type                 *MAIN_TASK_TYPE `protobuf:"varint,1,opt,name=type,enum=pbd.MAIN_TASK_TYPE" json:"type,omitempty"`
	Param                []int32         `protobuf:"zigzag32,2,rep,name=param" json:"param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TaskProgressInfo) Reset()         { *m = TaskProgressInfo{} }
func (m *TaskProgressInfo) String() string { return proto.CompactTextString(m) }
func (*TaskProgressInfo) ProtoMessage()    {}
func (*TaskProgressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{2}
}
func (m *TaskProgressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskProgressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskProgressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskProgressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskProgressInfo.Merge(m, src)
}
func (m *TaskProgressInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskProgressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskProgressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskProgressInfo proto.InternalMessageInfo

func (m *TaskProgressInfo) GetType() MAIN_TASK_TYPE {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MAIN_TASK_TYPE_EMTT_MONSTER_NUM
}

func (m *TaskProgressInfo) GetParam() []int32 {
	if m != nil {
		return m.Param
	}
	return nil
}

// 同步可接受任务
type S2C_SyncCanAcceptTaskInfo struct {
	TaskList             []*TaskInfo `protobuf:"bytes,1,rep,name=task_list" json:"task_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *S2C_SyncCanAcceptTaskInfo) Reset()         { *m = S2C_SyncCanAcceptTaskInfo{} }
func (m *S2C_SyncCanAcceptTaskInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncCanAcceptTaskInfo) ProtoMessage()    {}
func (*S2C_SyncCanAcceptTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{3}
}
func (m *S2C_SyncCanAcceptTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncCanAcceptTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncCanAcceptTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncCanAcceptTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncCanAcceptTaskInfo.Merge(m, src)
}
func (m *S2C_SyncCanAcceptTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncCanAcceptTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncCanAcceptTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncCanAcceptTaskInfo proto.InternalMessageInfo

func (m *S2C_SyncCanAcceptTaskInfo) GetTaskList() []*TaskInfo {
	if m != nil {
		return m.TaskList
	}
	return nil
}

// 同步已接受任务
type S2C_SyncAcceptedTaskInfo struct {
	TaskList             []*TaskInfo `protobuf:"bytes,1,rep,name=task_list" json:"task_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *S2C_SyncAcceptedTaskInfo) Reset()         { *m = S2C_SyncAcceptedTaskInfo{} }
func (m *S2C_SyncAcceptedTaskInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncAcceptedTaskInfo) ProtoMessage()    {}
func (*S2C_SyncAcceptedTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{4}
}
func (m *S2C_SyncAcceptedTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncAcceptedTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncAcceptedTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncAcceptedTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncAcceptedTaskInfo.Merge(m, src)
}
func (m *S2C_SyncAcceptedTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncAcceptedTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncAcceptedTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncAcceptedTaskInfo proto.InternalMessageInfo

func (m *S2C_SyncAcceptedTaskInfo) GetTaskList() []*TaskInfo {
	if m != nil {
		return m.TaskList
	}
	return nil
}

// 请求接受任务
type C2S_AcceptTask struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32   `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AcceptTask) Reset()         { *m = C2S_AcceptTask{} }
func (m *C2S_AcceptTask) String() string { return proto.CompactTextString(m) }
func (*C2S_AcceptTask) ProtoMessage()    {}
func (*C2S_AcceptTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{5}
}
func (m *C2S_AcceptTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AcceptTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AcceptTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AcceptTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AcceptTask.Merge(m, src)
}
func (m *C2S_AcceptTask) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AcceptTask) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AcceptTask.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AcceptTask proto.InternalMessageInfo

func (m *C2S_AcceptTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_AcceptTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

// 回复接受任务
type S2C_AcceptTask struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32          `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NexTalkId            *int32          `protobuf:"zigzag32,4,opt,name=nex_talk_id" json:"nex_talk_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_AcceptTask) Reset()         { *m = S2C_AcceptTask{} }
func (m *S2C_AcceptTask) String() string { return proto.CompactTextString(m) }
func (*S2C_AcceptTask) ProtoMessage()    {}
func (*S2C_AcceptTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{6}
}
func (m *S2C_AcceptTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AcceptTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AcceptTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AcceptTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AcceptTask.Merge(m, src)
}
func (m *S2C_AcceptTask) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AcceptTask) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AcceptTask.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AcceptTask proto.InternalMessageInfo

func (m *S2C_AcceptTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_AcceptTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *S2C_AcceptTask) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_AcceptTask) GetNexTalkId() int32 {
	if m != nil && m.NexTalkId != nil {
		return *m.NexTalkId
	}
	return 0
}

// 请求完成任务
type C2S_CompleteTask struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32   `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_CompleteTask) Reset()         { *m = C2S_CompleteTask{} }
func (m *C2S_CompleteTask) String() string { return proto.CompactTextString(m) }
func (*C2S_CompleteTask) ProtoMessage()    {}
func (*C2S_CompleteTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{7}
}
func (m *C2S_CompleteTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_CompleteTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_CompleteTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_CompleteTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_CompleteTask.Merge(m, src)
}
func (m *C2S_CompleteTask) XXX_Size() int {
	return m.Size()
}
func (m *C2S_CompleteTask) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_CompleteTask.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_CompleteTask proto.InternalMessageInfo

func (m *C2S_CompleteTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_CompleteTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

// 回复完成任务
type S2C_CompleteTask struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32          `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_CompleteTask) Reset()         { *m = S2C_CompleteTask{} }
func (m *S2C_CompleteTask) String() string { return proto.CompactTextString(m) }
func (*S2C_CompleteTask) ProtoMessage()    {}
func (*S2C_CompleteTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{8}
}
func (m *S2C_CompleteTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CompleteTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CompleteTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CompleteTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CompleteTask.Merge(m, src)
}
func (m *S2C_CompleteTask) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CompleteTask) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CompleteTask.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CompleteTask proto.InternalMessageInfo

func (m *S2C_CompleteTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_CompleteTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *S2C_CompleteTask) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 通知对话任务完成状态
type C2S_InformTalkTask struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32   `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_InformTalkTask) Reset()         { *m = C2S_InformTalkTask{} }
func (m *C2S_InformTalkTask) String() string { return proto.CompactTextString(m) }
func (*C2S_InformTalkTask) ProtoMessage()    {}
func (*C2S_InformTalkTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{9}
}
func (m *C2S_InformTalkTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_InformTalkTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_InformTalkTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_InformTalkTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_InformTalkTask.Merge(m, src)
}
func (m *C2S_InformTalkTask) XXX_Size() int {
	return m.Size()
}
func (m *C2S_InformTalkTask) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_InformTalkTask.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_InformTalkTask proto.InternalMessageInfo

func (m *C2S_InformTalkTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_InformTalkTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

// 通知服务玩家正在与npc交互
type C2S_NPCInteractCount struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NpcId                *int32   `protobuf:"zigzag32,2,opt,name=npc_id" json:"npc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_NPCInteractCount) Reset()         { *m = C2S_NPCInteractCount{} }
func (m *C2S_NPCInteractCount) String() string { return proto.CompactTextString(m) }
func (*C2S_NPCInteractCount) ProtoMessage()    {}
func (*C2S_NPCInteractCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{10}
}
func (m *C2S_NPCInteractCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_NPCInteractCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_NPCInteractCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_NPCInteractCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_NPCInteractCount.Merge(m, src)
}
func (m *C2S_NPCInteractCount) XXX_Size() int {
	return m.Size()
}
func (m *C2S_NPCInteractCount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_NPCInteractCount.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_NPCInteractCount proto.InternalMessageInfo

func (m *C2S_NPCInteractCount) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_NPCInteractCount) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

// 每日任务通知
type C2S_DailyTaskStatus struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DailyTaskStatus) Reset()         { *m = C2S_DailyTaskStatus{} }
func (m *C2S_DailyTaskStatus) String() string { return proto.CompactTextString(m) }
func (*C2S_DailyTaskStatus) ProtoMessage()    {}
func (*C2S_DailyTaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{11}
}
func (m *C2S_DailyTaskStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DailyTaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DailyTaskStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DailyTaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DailyTaskStatus.Merge(m, src)
}
func (m *C2S_DailyTaskStatus) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DailyTaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DailyTaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DailyTaskStatus proto.InternalMessageInfo

func (m *C2S_DailyTaskStatus) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_DailyTaskStatus struct {
	Status               *bool    `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_DailyTaskStatus) Reset()         { *m = S2C_DailyTaskStatus{} }
func (m *S2C_DailyTaskStatus) String() string { return proto.CompactTextString(m) }
func (*S2C_DailyTaskStatus) ProtoMessage()    {}
func (*S2C_DailyTaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{12}
}
func (m *S2C_DailyTaskStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DailyTaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DailyTaskStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DailyTaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DailyTaskStatus.Merge(m, src)
}
func (m *S2C_DailyTaskStatus) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DailyTaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DailyTaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DailyTaskStatus proto.InternalMessageInfo

func (m *S2C_DailyTaskStatus) GetStatus() bool {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return false
}

// 对材料消耗类任务做上交操作
type C2S_UpdateCostItemTask struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32   `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_UpdateCostItemTask) Reset()         { *m = C2S_UpdateCostItemTask{} }
func (m *C2S_UpdateCostItemTask) String() string { return proto.CompactTextString(m) }
func (*C2S_UpdateCostItemTask) ProtoMessage()    {}
func (*C2S_UpdateCostItemTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{13}
}
func (m *C2S_UpdateCostItemTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UpdateCostItemTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UpdateCostItemTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_UpdateCostItemTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UpdateCostItemTask.Merge(m, src)
}
func (m *C2S_UpdateCostItemTask) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UpdateCostItemTask) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UpdateCostItemTask.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UpdateCostItemTask proto.InternalMessageInfo

func (m *C2S_UpdateCostItemTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_UpdateCostItemTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

type S2C_UpdateCostItemTask struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_UpdateCostItemTask) Reset()         { *m = S2C_UpdateCostItemTask{} }
func (m *S2C_UpdateCostItemTask) String() string { return proto.CompactTextString(m) }
func (*S2C_UpdateCostItemTask) ProtoMessage()    {}
func (*S2C_UpdateCostItemTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{14}
}
func (m *S2C_UpdateCostItemTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UpdateCostItemTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UpdateCostItemTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_UpdateCostItemTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UpdateCostItemTask.Merge(m, src)
}
func (m *S2C_UpdateCostItemTask) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UpdateCostItemTask) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UpdateCostItemTask.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UpdateCostItemTask proto.InternalMessageInfo

func (m *S2C_UpdateCostItemTask) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 通知客户端弹任务完成提示面板
type S2C_TaskIsCompleted struct {
	TaskId               *int32   `protobuf:"zigzag32,1,opt,name=task_id" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_TaskIsCompleted) Reset()         { *m = S2C_TaskIsCompleted{} }
func (m *S2C_TaskIsCompleted) String() string { return proto.CompactTextString(m) }
func (*S2C_TaskIsCompleted) ProtoMessage()    {}
func (*S2C_TaskIsCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{15}
}
func (m *S2C_TaskIsCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TaskIsCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TaskIsCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TaskIsCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TaskIsCompleted.Merge(m, src)
}
func (m *S2C_TaskIsCompleted) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TaskIsCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TaskIsCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TaskIsCompleted proto.InternalMessageInfo

func (m *S2C_TaskIsCompleted) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

// 通知服务器任务结算时机
type C2S_TaskSettle struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskModule           *int32   `protobuf:"zigzag32,2,opt,name=task_module" json:"task_module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TaskSettle) Reset()         { *m = C2S_TaskSettle{} }
func (m *C2S_TaskSettle) String() string { return proto.CompactTextString(m) }
func (*C2S_TaskSettle) ProtoMessage()    {}
func (*C2S_TaskSettle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{16}
}
func (m *C2S_TaskSettle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TaskSettle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TaskSettle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TaskSettle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TaskSettle.Merge(m, src)
}
func (m *C2S_TaskSettle) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TaskSettle) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TaskSettle.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TaskSettle proto.InternalMessageInfo

func (m *C2S_TaskSettle) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TaskSettle) GetTaskModule() int32 {
	if m != nil && m.TaskModule != nil {
		return *m.TaskModule
	}
	return 0
}

// 放弃任务
type C2S_GiveUpTask struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32   `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GiveUpTask) Reset()         { *m = C2S_GiveUpTask{} }
func (m *C2S_GiveUpTask) String() string { return proto.CompactTextString(m) }
func (*C2S_GiveUpTask) ProtoMessage()    {}
func (*C2S_GiveUpTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{17}
}
func (m *C2S_GiveUpTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GiveUpTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GiveUpTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GiveUpTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GiveUpTask.Merge(m, src)
}
func (m *C2S_GiveUpTask) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GiveUpTask) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GiveUpTask.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GiveUpTask proto.InternalMessageInfo

func (m *C2S_GiveUpTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GiveUpTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

// 回复完成任务
type S2C_GiveUpTask struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TaskId               *int32          `protobuf:"zigzag32,2,opt,name=task_id" json:"task_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GiveUpTask) Reset()         { *m = S2C_GiveUpTask{} }
func (m *S2C_GiveUpTask) String() string { return proto.CompactTextString(m) }
func (*S2C_GiveUpTask) ProtoMessage()    {}
func (*S2C_GiveUpTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a858d6d322f9aa57, []int{18}
}
func (m *S2C_GiveUpTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GiveUpTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GiveUpTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GiveUpTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GiveUpTask.Merge(m, src)
}
func (m *S2C_GiveUpTask) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GiveUpTask) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GiveUpTask.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GiveUpTask proto.InternalMessageInfo

func (m *S2C_GiveUpTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_GiveUpTask) GetTaskId() int32 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *S2C_GiveUpTask) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func init() {
	proto.RegisterType((*TaskInfo)(nil), "pbd.task_info")
	proto.RegisterType((*RoleCountInfo)(nil), "pbd.role_count_info")
	proto.RegisterType((*TaskProgressInfo)(nil), "pbd.task_progress_info")
	proto.RegisterType((*S2C_SyncCanAcceptTaskInfo)(nil), "pbd.S2C_SyncCanAcceptTaskInfo")
	proto.RegisterType((*S2C_SyncAcceptedTaskInfo)(nil), "pbd.S2C_SyncAcceptedTaskInfo")
	proto.RegisterType((*C2S_AcceptTask)(nil), "pbd.C2S_AcceptTask")
	proto.RegisterType((*S2C_AcceptTask)(nil), "pbd.S2C_AcceptTask")
	proto.RegisterType((*C2S_CompleteTask)(nil), "pbd.C2S_CompleteTask")
	proto.RegisterType((*S2C_CompleteTask)(nil), "pbd.S2C_CompleteTask")
	proto.RegisterType((*C2S_InformTalkTask)(nil), "pbd.C2S_InformTalkTask")
	proto.RegisterType((*C2S_NPCInteractCount)(nil), "pbd.C2S_NPCInteractCount")
	proto.RegisterType((*C2S_DailyTaskStatus)(nil), "pbd.C2S_DailyTaskStatus")
	proto.RegisterType((*S2C_DailyTaskStatus)(nil), "pbd.S2C_DailyTaskStatus")
	proto.RegisterType((*C2S_UpdateCostItemTask)(nil), "pbd.C2S_UpdateCostItemTask")
	proto.RegisterType((*S2C_UpdateCostItemTask)(nil), "pbd.S2C_UpdateCostItemTask")
	proto.RegisterType((*S2C_TaskIsCompleted)(nil), "pbd.S2C_TaskIsCompleted")
	proto.RegisterType((*C2S_TaskSettle)(nil), "pbd.C2S_TaskSettle")
	proto.RegisterType((*C2S_GiveUpTask)(nil), "pbd.C2S_GiveUpTask")
	proto.RegisterType((*S2C_GiveUpTask)(nil), "pbd.S2C_GiveUpTask")
}

func init() { proto.RegisterFile("Task.proto", fileDescriptor_a858d6d322f9aa57) }

var fileDescriptor_a858d6d322f9aa57 = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x4e, 0xdb, 0x30,
	0x14, 0x5e, 0x5a, 0x28, 0xed, 0x29, 0x84, 0xd6, 0x41, 0x2c, 0x80, 0x54, 0x75, 0xd1, 0x40, 0xdd,
	0x0d, 0x17, 0x48, 0xd3, 0xc4, 0x24, 0x36, 0xb1, 0xd0, 0xa1, 0x6a, 0x82, 0xa1, 0xb5, 0x5c, 0x4c,
	0x9a, 0x66, 0x99, 0xc4, 0x40, 0x46, 0xe2, 0x78, 0x89, 0xcb, 0xcf, 0x93, 0x6c, 0xb7, 0x7b, 0x9b,
	0x5d, 0xee, 0x11, 0x26, 0xf6, 0x22, 0x93, 0xed, 0xa4, 0x50, 0xd6, 0x49, 0xe9, 0x55, 0x9b, 0x73,
	0xce, 0x77, 0xce, 0x77, 0x3e, 0x7f, 0x36, 0xc0, 0x80, 0xa4, 0x17, 0x9b, 0x3c, 0x89, 0x45, 0x8c,
	0xca, 0xfc, 0xc4, 0x5f, 0x5d, 0xe8, 0xb2, 0x61, 0xb4, 0x47, 0x4f, 0x75, 0x6c, 0xd5, 0x3c, 0x92,
	0x3f, 0xa3, 0x6f, 0xe7, 0x47, 0x09, 0x6a, 0x82, 0xa4, 0x17, 0x38, 0x60, 0xa7, 0x31, 0x5a, 0x84,
	0x39, 0xfd, 0xe1, 0xdb, 0x46, 0xdb, 0xe8, 0x34, 0x51, 0x33, 0xcb, 0x8a, 0x1b, 0x4e, 0xed, 0x92,
	0x0a, 0x2d, 0xc1, 0xbc, 0x0a, 0x31, 0x12, 0x51, 0x59, 0x58, 0x6e, 0x1b, 0x9d, 0x79, 0xd4, 0x80,
	0xaa, 0x8a, 0xfa, 0x34, 0xb5, 0x67, 0xc6, 0x22, 0x8c, 0x7b, 0xf6, 0xac, 0x42, 0xae, 0x43, 0x5d,
	0x45, 0x12, 0x7a, 0x45, 0x12, 0xdf, 0xae, 0xb4, 0xcb, 0x9d, 0xfa, 0x56, 0x63, 0x93, 0x9f, 0xf8,
	0x9b, 0x81, 0xa0, 0x11, 0xf6, 0x62, 0x76, 0x1a, 0x9c, 0xa1, 0x35, 0xb0, 0x54, 0x19, 0x4f, 0xe2,
	0xb3, 0x84, 0xa6, 0x29, 0xe6, 0x24, 0x21, 0x91, 0x3d, 0xd7, 0x2e, 0x77, 0x10, 0x5a, 0x81, 0xa6,
	0x4a, 0x7a, 0x84, 0x61, 0x2f, 0x8e, 0x78, 0x48, 0x05, 0xb5, 0xab, 0x6d, 0xa3, 0x53, 0x45, 0x16,
	0xd4, 0x79, 0x42, 0xb1, 0x20, 0xa1, 0x5a, 0xa0, 0xa6, 0x66, 0x5a, 0x50, 0x67, 0xf4, 0x7a, 0x14,
	0x04, 0x15, 0xb4, 0xa1, 0x91, 0x63, 0x47, 0x99, 0x7a, 0x5e, 0x2e, 0x3b, 0x9f, 0x05, 0x97, 0x14,
	0x0f, 0xb9, 0x3d, 0x2f, 0x1b, 0x3b, 0xdf, 0x4a, 0xb0, 0x98, 0xc4, 0x21, 0xc5, 0x5e, 0x3c, 0x64,
	0x42, 0x2b, 0xb5, 0x0c, 0x66, 0xc0, 0x04, 0x4d, 0x88, 0x27, 0x74, 0x38, 0x13, 0xec, 0x31, 0x2c,
	0x8a, 0x58, 0x90, 0x50, 0xae, 0x9d, 0x25, 0xb4, 0x6c, 0x4f, 0xa1, 0x76, 0x17, 0x2a, 0xab, 0xd5,
	0x9b, 0x7a, 0xf5, 0xbc, 0x0d, 0xe3, 0x9e, 0x64, 0x46, 0x12, 0xca, 0x08, 0xfe, 0x12, 0x07, 0x2c,
	0x2b, 0x9e, 0x51, 0xf8, 0x35, 0xb0, 0x74, 0x26, 0x1d, 0x7a, 0x9e, 0x54, 0x45, 0x27, 0x67, 0xf3,
	0xa9, 0x27, 0x44, 0x9c, 0xe3, 0x2b, 0x92, 0x9e, 0x67, 0x89, 0x4a, 0xbe, 0x69, 0x7a, 0x15, 0x27,
	0xfe, 0xfd, 0x7e, 0x73, 0x79, 0x3f, 0x9d, 0x19, 0xef, 0x57, 0x55, 0xc9, 0x0d, 0xa8, 0xdd, 0x2d,
	0x56, 0x53, 0x64, 0xad, 0x71, 0xb2, 0x2a, 0xe5, 0xbc, 0x05, 0x34, 0x7e, 0x54, 0x4a, 0x9b, 0x27,
	0x30, 0xa3, 0xfc, 0x22, 0x15, 0x31, 0x33, 0xe0, 0xc1, 0x6e, 0xef, 0x10, 0x0f, 0x76, 0xfb, 0xef,
	0xf0, 0xe0, 0xe3, 0x51, 0x17, 0x2d, 0xc0, 0xac, 0x3e, 0xd5, 0x52, 0xbb, 0xdc, 0x69, 0x3a, 0xaf,
	0x60, 0xa5, 0xbf, 0xe5, 0xe2, 0xfe, 0x0d, 0xf3, 0x5c, 0xc2, 0x76, 0x3d, 0x8f, 0x72, 0x21, 0x8d,
	0xdc, 0xd3, 0xed, 0xb4, 0x07, 0xc3, 0x20, 0x95, 0x2a, 0x4b, 0x32, 0xa6, 0xea, 0x39, 0xf2, 0xad,
	0xb3, 0x03, 0x76, 0x8e, 0xd7, 0x60, 0xea, 0x4f, 0x03, 0x7f, 0x0e, 0xa6, 0xbb, 0xd5, 0xc7, 0x77,
	0x73, 0x11, 0x02, 0x50, 0x27, 0x1e, 0x30, 0x9f, 0x5e, 0xab, 0x45, 0xd0, 0xfd, 0xcb, 0xa1, 0x8e,
	0xd4, 0xf9, 0x0a, 0xa6, 0x9c, 0x3a, 0x25, 0x0c, 0xad, 0x43, 0x35, 0xa1, 0x52, 0x41, 0x9f, 0xaa,
	0xcb, 0x93, 0x4b, 0xd4, 0xc5, 0x07, 0xfd, 0x7d, 0xfc, 0xa1, 0x3b, 0xc0, 0xee, 0xfb, 0xbd, 0xee,
	0x43, 0xe7, 0x2a, 0x17, 0x38, 0x2f, 0xa0, 0x21, 0x99, 0xba, 0x99, 0x7b, 0x8b, 0x73, 0xfd, 0x0c,
	0x0d, 0xc9, 0x75, 0x6a, 0x60, 0x41, 0xb6, 0xce, 0x36, 0x20, 0x49, 0x4c, 0x2a, 0x9e, 0x44, 0x03,
	0x12, 0x5e, 0x14, 0xa7, 0xf6, 0x12, 0x96, 0x24, 0xf4, 0xf0, 0xc8, 0xed, 0x65, 0xee, 0x72, 0xa5,
	0xb9, 0x26, 0x82, 0x4d, 0xa8, 0xc8, 0x5b, 0x34, 0xc2, 0x3e, 0x03, 0x4b, 0x62, 0xf7, 0x48, 0x10,
	0xde, 0xc8, 0x89, 0x7d, 0x41, 0xc4, 0x30, 0x9d, 0x04, 0x75, 0xd6, 0xc1, 0x92, 0x0a, 0x3c, 0x2c,
	0x35, 0xa1, 0x92, 0xaa, 0x7f, 0xaa, 0xac, 0xea, 0xec, 0xc0, 0xb2, 0xec, 0x78, 0xcc, 0x7d, 0x22,
	0xa8, 0x1b, 0xa7, 0xa2, 0x27, 0x68, 0x54, 0x7c, 0x99, 0xd7, 0xb0, 0x2c, 0xa7, 0x4c, 0x80, 0xdf,
	0x17, 0xd2, 0xf8, 0xbf, 0x90, 0x1b, 0x9a, 0xa6, 0xb2, 0x6f, 0x9a, 0x1f, 0x97, 0xff, 0xcf, 0xcb,
	0xec, 0x6c, 0x6b, 0xcf, 0xaa, 0x4d, 0xa8, 0x10, 0x21, 0x9d, 0xc8, 0xcf, 0xca, 0x9e, 0xdc, 0x28,
	0xf6, 0x87, 0x61, 0xf6, 0x82, 0xe7, 0x76, 0xdf, 0x0f, 0x2e, 0xe9, 0x31, 0x2f, 0xbe, 0xda, 0x27,
	0x6d, 0xf7, 0x29, 0x61, 0x05, 0x0d, 0xf4, 0xa6, 0xf1, 0xf3, 0xb6, 0x65, 0xfc, 0xba, 0x6d, 0x19,
	0xbf, 0x6f, 0x5b, 0xc6, 0xf7, 0x3f, 0xad, 0x47, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xc6,
	0x40, 0xc9, 0xcb, 0x06, 0x00, 0x00,
}

func (m *TaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CanGiveUp != nil {
		i--
		if *m.CanGiveUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.CompleteTalkId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.CompleteTalkId)<<1)^uint32((*m.CompleteTalkId>>31))))
		i--
		dAtA[i] = 0x58
	}
	if m.NexTalkId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.NexTalkId)<<1)^uint32((*m.NexTalkId>>31))))
		i--
		dAtA[i] = 0x50
	}
	if m.PreTalkId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.PreTalkId)<<1)^uint32((*m.PreTalkId>>31))))
		i--
		dAtA[i] = 0x48
	}
	if m.TaskCanComplete != nil {
		i--
		if *m.TaskCanComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.TaskProgressParam) > 0 {
		for iNdEx := len(m.TaskProgressParam) - 1; iNdEx >= 0; iNdEx-- {
			x1 := (uint64(m.TaskProgressParam[iNdEx]) << 1) ^ uint64((m.TaskProgressParam[iNdEx] >> 63))
			i = encodeVarintTask(dAtA, i, uint64(x1))
			i--
			dAtA[i] = 0x38
		}
	}
	if len(m.TaskReward) > 0 {
		for iNdEx := len(m.TaskReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TaskNpc != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskNpc)<<1)^uint32((*m.TaskNpc>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskDes != nil {
		i -= len(m.TaskDes)
		copy(dAtA[i:], m.TaskDes)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskDes)))
		i--
		dAtA[i] = 0x22
	}
	if m.TaskNameId != nil {
		i -= len(m.TaskNameId)
		copy(dAtA[i:], m.TaskNameId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.TaskNameId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskType != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskType)<<1)^uint32((*m.TaskType>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleCountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleCountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleCountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActCount) > 0 {
		for iNdEx := len(m.ActCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.SwordSuccessCount != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.SwordSuccessCount)<<1)^uint32((*m.SwordSuccessCount>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.SwordJoinCount != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.SwordJoinCount)<<1)^uint32((*m.SwordJoinCount>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.BathWashCount != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.BathWashCount)<<1)^uint32((*m.BathWashCount>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.ArenaSuccessCount != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.ArenaSuccessCount)<<1)^uint32((*m.ArenaSuccessCount>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.ArenaJoinCount != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.ArenaJoinCount)<<1)^uint32((*m.ArenaJoinCount>>31))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NpcCount) > 0 {
		for iNdEx := len(m.NpcCount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NpcCount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TotalNpcCount != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TotalNpcCount)<<1)^uint32((*m.TotalNpcCount>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.InteractCount != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.InteractCount)<<1)^uint32((*m.InteractCount>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskProgressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskProgressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskProgressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Param) > 0 {
		for iNdEx := len(m.Param) - 1; iNdEx >= 0; iNdEx-- {
			x2 := (uint32(m.Param[iNdEx]) << 1) ^ uint32((m.Param[iNdEx] >> 31))
			i = encodeVarintTask(dAtA, i, uint64(x2))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.Type != nil {
		i = encodeVarintTask(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncCanAcceptTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncCanAcceptTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncCanAcceptTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncAcceptedTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncAcceptedTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncAcceptedTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskList) > 0 {
		for iNdEx := len(m.TaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AcceptTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AcceptTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AcceptTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AcceptTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AcceptTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AcceptTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NexTalkId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.NexTalkId)<<1)^uint32((*m.NexTalkId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetCode != nil {
		i = encodeVarintTask(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_CompleteTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_CompleteTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_CompleteTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CompleteTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CompleteTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CompleteTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintTask(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_InformTalkTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_InformTalkTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_InformTalkTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_NPCInteractCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_NPCInteractCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_NPCInteractCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NpcId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DailyTaskStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DailyTaskStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DailyTaskStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DailyTaskStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DailyTaskStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DailyTaskStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i--
		if *m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_UpdateCostItemTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UpdateCostItemTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_UpdateCostItemTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_UpdateCostItemTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UpdateCostItemTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_UpdateCostItemTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintTask(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TaskIsCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TaskIsCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TaskIsCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TaskSettle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TaskSettle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TaskSettle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskModule != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskModule)<<1)^uint32((*m.TaskModule>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GiveUpTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GiveUpTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GiveUpTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GiveUpTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GiveUpTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GiveUpTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintTask(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskId != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint32(*m.TaskId)<<1)^uint32((*m.TaskId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintTask(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.TaskType != nil {
		n += 1 + sozTask(uint64(*m.TaskType))
	}
	if m.TaskNameId != nil {
		l = len(m.TaskNameId)
		n += 1 + l + sovTask(uint64(l))
	}
	if m.TaskDes != nil {
		l = len(m.TaskDes)
		n += 1 + l + sovTask(uint64(l))
	}
	if m.TaskNpc != nil {
		n += 1 + sozTask(uint64(*m.TaskNpc))
	}
	if len(m.TaskReward) > 0 {
		for _, e := range m.TaskReward {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.TaskProgressParam) > 0 {
		for _, e := range m.TaskProgressParam {
			n += 1 + sozTask(uint64(e))
		}
	}
	if m.TaskCanComplete != nil {
		n += 2
	}
	if m.PreTalkId != nil {
		n += 1 + sozTask(uint64(*m.PreTalkId))
	}
	if m.NexTalkId != nil {
		n += 1 + sozTask(uint64(*m.NexTalkId))
	}
	if m.CompleteTalkId != nil {
		n += 1 + sozTask(uint64(*m.CompleteTalkId))
	}
	if m.CanGiveUp != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoleCountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InteractCount != nil {
		n += 1 + sozTask(uint64(*m.InteractCount))
	}
	if m.TotalNpcCount != nil {
		n += 1 + sozTask(uint64(*m.TotalNpcCount))
	}
	if len(m.NpcCount) > 0 {
		for _, e := range m.NpcCount {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.ArenaJoinCount != nil {
		n += 1 + sozTask(uint64(*m.ArenaJoinCount))
	}
	if m.ArenaSuccessCount != nil {
		n += 1 + sozTask(uint64(*m.ArenaSuccessCount))
	}
	if m.BathWashCount != nil {
		n += 1 + sozTask(uint64(*m.BathWashCount))
	}
	if m.SwordJoinCount != nil {
		n += 1 + sozTask(uint64(*m.SwordJoinCount))
	}
	if m.SwordSuccessCount != nil {
		n += 1 + sozTask(uint64(*m.SwordSuccessCount))
	}
	if len(m.ActCount) > 0 {
		for _, e := range m.ActCount {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskProgressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovTask(uint64(*m.Type))
	}
	if len(m.Param) > 0 {
		for _, e := range m.Param {
			n += 1 + sozTask(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncCanAcceptTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncAcceptedTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskList) > 0 {
		for _, e := range m.TaskList {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AcceptTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AcceptTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.RetCode != nil {
		n += 1 + sovTask(uint64(*m.RetCode))
	}
	if m.NexTalkId != nil {
		n += 1 + sozTask(uint64(*m.NexTalkId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_CompleteTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CompleteTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.RetCode != nil {
		n += 1 + sovTask(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_InformTalkTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_NPCInteractCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.NpcId != nil {
		n += 1 + sozTask(uint64(*m.NpcId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DailyTaskStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DailyTaskStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_UpdateCostItemTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_UpdateCostItemTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovTask(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TaskIsCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TaskSettle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskModule != nil {
		n += 1 + sozTask(uint64(*m.TaskModule))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GiveUpTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GiveUpTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozTask(uint64(*m.RoleIndex))
	}
	if m.TaskId != nil {
		n += 1 + sozTask(uint64(*m.TaskId))
	}
	if m.RetCode != nil {
		n += 1 + sovTask(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: task_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: task_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskNameId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskNameId = append(m.TaskNameId[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskNameId == nil {
				m.TaskNameId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskDes = append(m.TaskDes[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskDes == nil {
				m.TaskDes = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskNpc", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskNpc = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskReward = append(m.TaskReward, &ItemConfig{})
			if err := m.TaskReward[len(m.TaskReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.TaskProgressParam = append(m.TaskProgressParam, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTask
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TaskProgressParam) == 0 {
					m.TaskProgressParam = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.TaskProgressParam = append(m.TaskProgressParam, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskProgressParam", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskCanComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TaskCanComplete = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreTalkId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PreTalkId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexTalkId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NexTalkId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTalkId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CompleteTalkId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanGiveUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CanGiveUp = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleCountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_count_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_count_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InteractCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.InteractCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNpcCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalNpcCount = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpcCount = append(m.NpcCount, &InteractNpc{})
			if err := m.NpcCount[len(m.NpcCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaJoinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ArenaJoinCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaSuccessCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ArenaSuccessCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BathWashCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BathWashCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwordJoinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SwordJoinCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwordSuccessCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SwordSuccessCount = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActCount = append(m.ActCount, &InteractCount{})
			if err := m.ActCount[len(m.ActCount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskProgressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: task_progress_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: task_progress_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v MAIN_TASK_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= MAIN_TASK_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Param = append(m.Param, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTask
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Param) == 0 {
					m.Param = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Param = append(m.Param, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncCanAcceptTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncCanAcceptTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncCanAcceptTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &TaskInfo{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncAcceptedTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncAcceptedTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncAcceptedTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = append(m.TaskList, &TaskInfo{})
			if err := m.TaskList[len(m.TaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AcceptTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AcceptTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AcceptTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AcceptTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AcceptTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AcceptTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexTalkId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NexTalkId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_CompleteTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_CompleteTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_CompleteTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CompleteTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CompleteTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CompleteTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_InformTalkTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_InformTalkTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_InformTalkTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_NPCInteractCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_NPCInteractCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_NPCInteractCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DailyTaskStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DailyTaskStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DailyTaskStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DailyTaskStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DailyTaskStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DailyTaskStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Status = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UpdateCostItemTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UpdateCostItemTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UpdateCostItemTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UpdateCostItemTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UpdateCostItemTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UpdateCostItemTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TaskIsCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TaskIsCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TaskIsCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TaskSettle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TaskSettle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TaskSettle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskModule", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskModule = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GiveUpTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GiveUpTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GiveUpTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GiveUpTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GiveUpTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GiveUpTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TaskId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
