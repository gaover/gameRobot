// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Net_Game.proto

package pbd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 底层
type C2S_HeartBeat struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_HeartBeat) Reset()         { *m = C2S_HeartBeat{} }
func (m *C2S_HeartBeat) String() string { return proto.CompactTextString(m) }
func (*C2S_HeartBeat) ProtoMessage()    {}
func (*C2S_HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{0}
}
func (m *C2S_HeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_HeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_HeartBeat.Merge(m, src)
}
func (m *C2S_HeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *C2S_HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_HeartBeat proto.InternalMessageInfo

// 获取区服id
type C2S_GetServerId struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetServerId) Reset()         { *m = C2S_GetServerId{} }
func (m *C2S_GetServerId) String() string { return proto.CompactTextString(m) }
func (*C2S_GetServerId) ProtoMessage()    {}
func (*C2S_GetServerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{1}
}
func (m *C2S_GetServerId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetServerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetServerId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetServerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetServerId.Merge(m, src)
}
func (m *C2S_GetServerId) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetServerId) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetServerId.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetServerId proto.InternalMessageInfo

func (m *C2S_GetServerId) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GetServerId struct {
	ServerId             *int32   `protobuf:"zigzag32,1,opt,name=server_id" json:"server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_GetServerId) Reset()         { *m = S2C_GetServerId{} }
func (m *S2C_GetServerId) String() string { return proto.CompactTextString(m) }
func (*S2C_GetServerId) ProtoMessage()    {}
func (*S2C_GetServerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{2}
}
func (m *S2C_GetServerId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetServerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetServerId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetServerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetServerId.Merge(m, src)
}
func (m *S2C_GetServerId) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetServerId) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetServerId.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetServerId proto.InternalMessageInfo

func (m *S2C_GetServerId) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

// 检查账号是否存在
type C2S_CheckAccount struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,2,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,3,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_CheckAccount) Reset()         { *m = C2S_CheckAccount{} }
func (m *C2S_CheckAccount) String() string { return proto.CompactTextString(m) }
func (*C2S_CheckAccount) ProtoMessage()    {}
func (*C2S_CheckAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{3}
}
func (m *C2S_CheckAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_CheckAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_CheckAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_CheckAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_CheckAccount.Merge(m, src)
}
func (m *C2S_CheckAccount) XXX_Size() int {
	return m.Size()
}
func (m *C2S_CheckAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_CheckAccount.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_CheckAccount proto.InternalMessageInfo

func (m *C2S_CheckAccount) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_CheckAccount) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_CheckAccount) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_CheckAccount struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Account              []byte          `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_CheckAccount) Reset()         { *m = S2C_CheckAccount{} }
func (m *S2C_CheckAccount) String() string { return proto.CompactTextString(m) }
func (*S2C_CheckAccount) ProtoMessage()    {}
func (*S2C_CheckAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{4}
}
func (m *S2C_CheckAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CheckAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CheckAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CheckAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CheckAccount.Merge(m, src)
}
func (m *S2C_CheckAccount) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CheckAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CheckAccount.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CheckAccount proto.InternalMessageInfo

func (m *S2C_CheckAccount) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_CheckAccount) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

// 登录
type C2S_Login struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Password             []byte   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Login) Reset()         { *m = C2S_Login{} }
func (m *C2S_Login) String() string { return proto.CompactTextString(m) }
func (*C2S_Login) ProtoMessage()    {}
func (*C2S_Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{5}
}
func (m *C2S_Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Login.Merge(m, src)
}
func (m *C2S_Login) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Login) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Login.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Login proto.InternalMessageInfo

func (m *C2S_Login) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_Login) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *C2S_Login) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_Login) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_Login struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Account              []byte          `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	ServerTime           *int64          `protobuf:"zigzag64,3,opt,name=server_time" json:"server_time,omitempty"`
	ForbiddenTime        *int64          `protobuf:"zigzag64,4,opt,name=forbidden_time" json:"forbidden_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Login) Reset()         { *m = S2C_Login{} }
func (m *S2C_Login) String() string { return proto.CompactTextString(m) }
func (*S2C_Login) ProtoMessage()    {}
func (*S2C_Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{6}
}
func (m *S2C_Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Login.Merge(m, src)
}
func (m *S2C_Login) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Login) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Login.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Login proto.InternalMessageInfo

func (m *S2C_Login) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Login) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *S2C_Login) GetServerTime() int64 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *S2C_Login) GetForbiddenTime() int64 {
	if m != nil && m.ForbiddenTime != nil {
		return *m.ForbiddenTime
	}
	return 0
}

// 注册
type C2S_Register struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Password             []byte   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Register) Reset()         { *m = C2S_Register{} }
func (m *C2S_Register) String() string { return proto.CompactTextString(m) }
func (*C2S_Register) ProtoMessage()    {}
func (*C2S_Register) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{7}
}
func (m *C2S_Register) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Register) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Register.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Register) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Register.Merge(m, src)
}
func (m *C2S_Register) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Register) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Register.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Register proto.InternalMessageInfo

func (m *C2S_Register) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_Register) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *C2S_Register) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_Register) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_Register struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Account              []byte          `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Register) Reset()         { *m = S2C_Register{} }
func (m *S2C_Register) String() string { return proto.CompactTextString(m) }
func (*S2C_Register) ProtoMessage()    {}
func (*S2C_Register) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{8}
}
func (m *S2C_Register) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Register) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Register.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Register) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Register.Merge(m, src)
}
func (m *S2C_Register) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Register) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Register.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Register proto.InternalMessageInfo

func (m *S2C_Register) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Register) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

// 角色数量
type C2S_RoleSum struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,2,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,3,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RoleSum) Reset()         { *m = C2S_RoleSum{} }
func (m *C2S_RoleSum) String() string { return proto.CompactTextString(m) }
func (*C2S_RoleSum) ProtoMessage()    {}
func (*C2S_RoleSum) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{9}
}
func (m *C2S_RoleSum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RoleSum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RoleSum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RoleSum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RoleSum.Merge(m, src)
}
func (m *C2S_RoleSum) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RoleSum) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RoleSum.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RoleSum proto.InternalMessageInfo

func (m *C2S_RoleSum) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_RoleSum) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_RoleSum) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_RoleSum struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	ListRoleIndex        []int64  `protobuf:"zigzag64,2,rep,name=list_role_index" json:"list_role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_RoleSum) Reset()         { *m = S2C_RoleSum{} }
func (m *S2C_RoleSum) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleSum) ProtoMessage()    {}
func (*S2C_RoleSum) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{10}
}
func (m *S2C_RoleSum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleSum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleSum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleSum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleSum.Merge(m, src)
}
func (m *S2C_RoleSum) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleSum) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleSum.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleSum proto.InternalMessageInfo

func (m *S2C_RoleSum) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *S2C_RoleSum) GetListRoleIndex() []int64 {
	if m != nil {
		return m.ListRoleIndex
	}
	return nil
}

// 清空角色
type C2S_ClearRole struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,2,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,3,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ClearRole) Reset()         { *m = C2S_ClearRole{} }
func (m *C2S_ClearRole) String() string { return proto.CompactTextString(m) }
func (*C2S_ClearRole) ProtoMessage()    {}
func (*C2S_ClearRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{11}
}
func (m *C2S_ClearRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ClearRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ClearRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ClearRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ClearRole.Merge(m, src)
}
func (m *C2S_ClearRole) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ClearRole) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ClearRole.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ClearRole proto.InternalMessageInfo

func (m *C2S_ClearRole) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_ClearRole) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_ClearRole) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_ClearRole struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	IsOk                 *bool    `protobuf:"varint,2,opt,name=is_ok" json:"is_ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_ClearRole) Reset()         { *m = S2C_ClearRole{} }
func (m *S2C_ClearRole) String() string { return proto.CompactTextString(m) }
func (*S2C_ClearRole) ProtoMessage()    {}
func (*S2C_ClearRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{12}
}
func (m *S2C_ClearRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ClearRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ClearRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ClearRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ClearRole.Merge(m, src)
}
func (m *S2C_ClearRole) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ClearRole) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ClearRole.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ClearRole proto.InternalMessageInfo

func (m *S2C_ClearRole) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *S2C_ClearRole) GetIsOk() bool {
	if m != nil && m.IsOk != nil {
		return *m.IsOk
	}
	return false
}

// 请求随机昵称
type C2S_RandNickName struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,2,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,3,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RandNickName) Reset()         { *m = C2S_RandNickName{} }
func (m *C2S_RandNickName) String() string { return proto.CompactTextString(m) }
func (*C2S_RandNickName) ProtoMessage()    {}
func (*C2S_RandNickName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{13}
}
func (m *C2S_RandNickName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RandNickName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RandNickName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RandNickName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RandNickName.Merge(m, src)
}
func (m *C2S_RandNickName) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RandNickName) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RandNickName.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RandNickName proto.InternalMessageInfo

func (m *C2S_RandNickName) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_RandNickName) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_RandNickName) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_RandNickName struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	ListNickName         [][]byte `protobuf:"bytes,2,rep,name=list_nick_name" json:"list_nick_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_RandNickName) Reset()         { *m = S2C_RandNickName{} }
func (m *S2C_RandNickName) String() string { return proto.CompactTextString(m) }
func (*S2C_RandNickName) ProtoMessage()    {}
func (*S2C_RandNickName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{14}
}
func (m *S2C_RandNickName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RandNickName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RandNickName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RandNickName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RandNickName.Merge(m, src)
}
func (m *S2C_RandNickName) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RandNickName) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RandNickName.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RandNickName proto.InternalMessageInfo

func (m *S2C_RandNickName) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *S2C_RandNickName) GetListNickName() [][]byte {
	if m != nil {
		return m.ListNickName
	}
	return nil
}

// 创建角色
type C2S_CreateRole struct {
	NickName             []byte             `protobuf:"bytes,1,opt,name=nick_name" json:"nick_name,omitempty"`
	Account              []byte             `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	DeviceKey            []byte             `protobuf:"bytes,3,opt,name=device_key" json:"device_key,omitempty"`
	DeviceToken          []byte             `protobuf:"bytes,4,opt,name=device_token" json:"device_token,omitempty"`
	DeviceType           []byte             `protobuf:"bytes,5,opt,name=device_type" json:"device_type,omitempty"`
	PlatformType         []byte             `protobuf:"bytes,6,opt,name=platform_type" json:"platform_type,omitempty"`
	HelmetId             *int32             `protobuf:"zigzag32,7,opt,name=helmet_id" json:"helmet_id,omitempty"`
	FaceId               *int32             `protobuf:"zigzag32,8,opt,name=face_id" json:"face_id,omitempty"`
	WeaponId             *int32             `protobuf:"zigzag32,9,opt,name=weapon_id" json:"weapon_id,omitempty"`
	OrnamentsId          *int32             `protobuf:"zigzag32,10,opt,name=ornaments_id" json:"ornaments_id,omitempty"`
	EggId                *int32             `protobuf:"zigzag32,11,opt,name=egg_id" json:"egg_id,omitempty"`
	Gender               *int32             `protobuf:"zigzag32,12,opt,name=gender" json:"gender,omitempty"`
	Channel              []byte             `protobuf:"bytes,13,opt,name=channel" json:"channel,omitempty"`
	RoleInfo             *SqlResultRoleinfo `protobuf:"bytes,30,opt,name=role_info" json:"role_info,omitempty"`
	RetUnitindex         *int64             `protobuf:"zigzag64,31,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64             `protobuf:"zigzag64,32,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	IsTestVip            *bool              `protobuf:"varint,33,opt,name=is_test_vip" json:"is_test_vip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *C2S_CreateRole) Reset()         { *m = C2S_CreateRole{} }
func (m *C2S_CreateRole) String() string { return proto.CompactTextString(m) }
func (*C2S_CreateRole) ProtoMessage()    {}
func (*C2S_CreateRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{15}
}
func (m *C2S_CreateRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_CreateRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_CreateRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_CreateRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_CreateRole.Merge(m, src)
}
func (m *C2S_CreateRole) XXX_Size() int {
	return m.Size()
}
func (m *C2S_CreateRole) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_CreateRole.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_CreateRole proto.InternalMessageInfo

func (m *C2S_CreateRole) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *C2S_CreateRole) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_CreateRole) GetDeviceKey() []byte {
	if m != nil {
		return m.DeviceKey
	}
	return nil
}

func (m *C2S_CreateRole) GetDeviceToken() []byte {
	if m != nil {
		return m.DeviceToken
	}
	return nil
}

func (m *C2S_CreateRole) GetDeviceType() []byte {
	if m != nil {
		return m.DeviceType
	}
	return nil
}

func (m *C2S_CreateRole) GetPlatformType() []byte {
	if m != nil {
		return m.PlatformType
	}
	return nil
}

func (m *C2S_CreateRole) GetHelmetId() int32 {
	if m != nil && m.HelmetId != nil {
		return *m.HelmetId
	}
	return 0
}

func (m *C2S_CreateRole) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *C2S_CreateRole) GetWeaponId() int32 {
	if m != nil && m.WeaponId != nil {
		return *m.WeaponId
	}
	return 0
}

func (m *C2S_CreateRole) GetOrnamentsId() int32 {
	if m != nil && m.OrnamentsId != nil {
		return *m.OrnamentsId
	}
	return 0
}

func (m *C2S_CreateRole) GetEggId() int32 {
	if m != nil && m.EggId != nil {
		return *m.EggId
	}
	return 0
}

func (m *C2S_CreateRole) GetGender() int32 {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return 0
}

func (m *C2S_CreateRole) GetChannel() []byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *C2S_CreateRole) GetRoleInfo() *SqlResultRoleinfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

func (m *C2S_CreateRole) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_CreateRole) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *C2S_CreateRole) GetIsTestVip() bool {
	if m != nil && m.IsTestVip != nil {
		return *m.IsTestVip
	}
	return false
}

type S2C_CreateRole struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NickName             []byte          `protobuf:"bytes,2,opt,name=nick_name" json:"nick_name,omitempty"`
	Account              []byte          `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_CreateRole) Reset()         { *m = S2C_CreateRole{} }
func (m *S2C_CreateRole) String() string { return proto.CompactTextString(m) }
func (*S2C_CreateRole) ProtoMessage()    {}
func (*S2C_CreateRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{16}
}
func (m *S2C_CreateRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CreateRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CreateRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CreateRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CreateRole.Merge(m, src)
}
func (m *S2C_CreateRole) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CreateRole) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CreateRole.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CreateRole proto.InternalMessageInfo

func (m *S2C_CreateRole) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_CreateRole) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *S2C_CreateRole) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

// 角色信息
type C2S_RoleInfo struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	RoleIndex            *int64   `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	ForceApplyRoleInfo   *bool    `protobuf:"varint,5,opt,name=force_apply_role_info" json:"force_apply_role_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RoleInfo) Reset()         { *m = C2S_RoleInfo{} }
func (m *C2S_RoleInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_RoleInfo) ProtoMessage()    {}
func (*C2S_RoleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{17}
}
func (m *C2S_RoleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RoleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RoleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RoleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RoleInfo.Merge(m, src)
}
func (m *C2S_RoleInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RoleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RoleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RoleInfo proto.InternalMessageInfo

func (m *C2S_RoleInfo) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *C2S_RoleInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_RoleInfo) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_RoleInfo) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *C2S_RoleInfo) GetForceApplyRoleInfo() bool {
	if m != nil && m.ForceApplyRoleInfo != nil {
		return *m.ForceApplyRoleInfo
	}
	return false
}

type S2C_RoleInfo struct {
	Account              []byte             `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	RoleIndex            *int64             `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	RoleInfo             *SqlResultRoleinfo `protobuf:"bytes,3,opt,name=role_info" json:"role_info,omitempty"`
	LoginIntaddr         *int64             `protobuf:"zigzag64,4,opt,name=login_intaddr" json:"login_intaddr,omitempty"`
	SceneIntaddr         *int64             `protobuf:"zigzag64,5,opt,name=scene_intaddr" json:"scene_intaddr,omitempty"`
	SceneInstanceId      *int64             `protobuf:"zigzag64,6,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	RetCode              *E_MSG_RET_CODE    `protobuf:"varint,7,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_RoleInfo) Reset()         { *m = S2C_RoleInfo{} }
func (m *S2C_RoleInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleInfo) ProtoMessage()    {}
func (*S2C_RoleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{18}
}
func (m *S2C_RoleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleInfo.Merge(m, src)
}
func (m *S2C_RoleInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleInfo proto.InternalMessageInfo

func (m *S2C_RoleInfo) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *S2C_RoleInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_RoleInfo) GetRoleInfo() *SqlResultRoleinfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

func (m *S2C_RoleInfo) GetLoginIntaddr() int64 {
	if m != nil && m.LoginIntaddr != nil {
		return *m.LoginIntaddr
	}
	return 0
}

func (m *S2C_RoleInfo) GetSceneIntaddr() int64 {
	if m != nil && m.SceneIntaddr != nil {
		return *m.SceneIntaddr
	}
	return 0
}

func (m *S2C_RoleInfo) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_RoleInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 准备进入场景
type C2S_ReadyEnterScene struct {
	RoleIndex            *int64             `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	LoginIntaddr         *int64             `protobuf:"zigzag64,2,opt,name=login_intaddr" json:"login_intaddr,omitempty"`
	S2SRoleInfo          *SqlResultRoleinfo `protobuf:"bytes,3,opt,name=s2s_role_info" json:"s2s_role_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *C2S_ReadyEnterScene) Reset()         { *m = C2S_ReadyEnterScene{} }
func (m *C2S_ReadyEnterScene) String() string { return proto.CompactTextString(m) }
func (*C2S_ReadyEnterScene) ProtoMessage()    {}
func (*C2S_ReadyEnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{19}
}
func (m *C2S_ReadyEnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ReadyEnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ReadyEnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ReadyEnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ReadyEnterScene.Merge(m, src)
}
func (m *C2S_ReadyEnterScene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ReadyEnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ReadyEnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ReadyEnterScene proto.InternalMessageInfo

func (m *C2S_ReadyEnterScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ReadyEnterScene) GetLoginIntaddr() int64 {
	if m != nil && m.LoginIntaddr != nil {
		return *m.LoginIntaddr
	}
	return 0
}

func (m *C2S_ReadyEnterScene) GetS2SRoleInfo() *SqlResultRoleinfo {
	if m != nil {
		return m.S2SRoleInfo
	}
	return nil
}

type S2C_ReadyEnterScene struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32          `protobuf:"zigzag32,3,opt,name=scene_id" json:"scene_id,omitempty"`
	SceneIndex           *int32          `protobuf:"zigzag32,4,opt,name=scene_index" json:"scene_index,omitempty"`
	SceneIntaddr         *int64          `protobuf:"zigzag64,5,opt,name=scene_intaddr" json:"scene_intaddr,omitempty"`
	SceneInstanceId      *int64          `protobuf:"zigzag64,6,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	MapId                *int32          `protobuf:"zigzag32,7,opt,name=map_id" json:"map_id,omitempty"`
	SceneType            *E_SCENE_TYPE   `protobuf:"varint,8,opt,name=scene_type,enum=pbd.E_SCENE_TYPE" json:"scene_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ReadyEnterScene) Reset()         { *m = S2C_ReadyEnterScene{} }
func (m *S2C_ReadyEnterScene) String() string { return proto.CompactTextString(m) }
func (*S2C_ReadyEnterScene) ProtoMessage()    {}
func (*S2C_ReadyEnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{20}
}
func (m *S2C_ReadyEnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ReadyEnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ReadyEnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ReadyEnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ReadyEnterScene.Merge(m, src)
}
func (m *S2C_ReadyEnterScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ReadyEnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ReadyEnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ReadyEnterScene proto.InternalMessageInfo

func (m *S2C_ReadyEnterScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ReadyEnterScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_ReadyEnterScene) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2C_ReadyEnterScene) GetSceneIndex() int32 {
	if m != nil && m.SceneIndex != nil {
		return *m.SceneIndex
	}
	return 0
}

func (m *S2C_ReadyEnterScene) GetSceneIntaddr() int64 {
	if m != nil && m.SceneIntaddr != nil {
		return *m.SceneIntaddr
	}
	return 0
}

func (m *S2C_ReadyEnterScene) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_ReadyEnterScene) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *S2C_ReadyEnterScene) GetSceneType() E_SCENE_TYPE {
	if m != nil && m.SceneType != nil {
		return *m.SceneType
	}
	return E_SCENE_TYPE_EST_CITY
}

// 进入场景
type C2S_EnterScene struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneInstanceId      *int64   `protobuf:"zigzag64,2,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EnterScene) Reset()         { *m = C2S_EnterScene{} }
func (m *C2S_EnterScene) String() string { return proto.CompactTextString(m) }
func (*C2S_EnterScene) ProtoMessage()    {}
func (*C2S_EnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{21}
}
func (m *C2S_EnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EnterScene.Merge(m, src)
}
func (m *C2S_EnterScene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EnterScene proto.InternalMessageInfo

func (m *C2S_EnterScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EnterScene) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

type S2C_EnterScene struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	SceneInstanceId      *int64          `protobuf:"zigzag64,3,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EnterScene) Reset()         { *m = S2C_EnterScene{} }
func (m *S2C_EnterScene) String() string { return proto.CompactTextString(m) }
func (*S2C_EnterScene) ProtoMessage()    {}
func (*S2C_EnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{22}
}
func (m *S2C_EnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EnterScene.Merge(m, src)
}
func (m *S2C_EnterScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EnterScene proto.InternalMessageInfo

func (m *S2C_EnterScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EnterScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_EnterScene) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

// 通知服务器出生特效ok
type C2S_BornEnterSceneOK struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BornEnterSceneOK) Reset()         { *m = C2S_BornEnterSceneOK{} }
func (m *C2S_BornEnterSceneOK) String() string { return proto.CompactTextString(m) }
func (*C2S_BornEnterSceneOK) ProtoMessage()    {}
func (*C2S_BornEnterSceneOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{23}
}
func (m *C2S_BornEnterSceneOK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BornEnterSceneOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BornEnterSceneOK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BornEnterSceneOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BornEnterSceneOK.Merge(m, src)
}
func (m *C2S_BornEnterSceneOK) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BornEnterSceneOK) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BornEnterSceneOK.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BornEnterSceneOK proto.InternalMessageInfo

func (m *C2S_BornEnterSceneOK) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_BornEnterSceneOK struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_BornEnterSceneOK) Reset()         { *m = S2C_BornEnterSceneOK{} }
func (m *S2C_BornEnterSceneOK) String() string { return proto.CompactTextString(m) }
func (*S2C_BornEnterSceneOK) ProtoMessage()    {}
func (*S2C_BornEnterSceneOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{24}
}
func (m *S2C_BornEnterSceneOK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BornEnterSceneOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BornEnterSceneOK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BornEnterSceneOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BornEnterSceneOK.Merge(m, src)
}
func (m *S2C_BornEnterSceneOK) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BornEnterSceneOK) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BornEnterSceneOK.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BornEnterSceneOK proto.InternalMessageInfo

// 准备进入场景
type S2S_ReadyChangeScene struct {
	RoleIndex            *int64             `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Account              []byte             `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	NickName             []byte             `protobuf:"bytes,3,opt,name=nick_name" json:"nick_name,omitempty"`
	SceneId              *int32             `protobuf:"zigzag32,4,opt,name=scene_id" json:"scene_id,omitempty"`
	SceneInstanceId      *int64             `protobuf:"zigzag64,5,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	LoginIntaddr         *int64             `protobuf:"zigzag64,6,opt,name=login_intaddr" json:"login_intaddr,omitempty"`
	OldSceneIntaddr      *int64             `protobuf:"zigzag64,7,opt,name=old_scene_intaddr" json:"old_scene_intaddr,omitempty"`
	OldSceneInstanceId   *int64             `protobuf:"zigzag64,8,opt,name=old_scene_instance_id" json:"old_scene_instance_id,omitempty"`
	S2SRoleInfo          *SqlResultRoleinfo `protobuf:"bytes,9,opt,name=s2s_role_info" json:"s2s_role_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2S_ReadyChangeScene) Reset()         { *m = S2S_ReadyChangeScene{} }
func (m *S2S_ReadyChangeScene) String() string { return proto.CompactTextString(m) }
func (*S2S_ReadyChangeScene) ProtoMessage()    {}
func (*S2S_ReadyChangeScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{25}
}
func (m *S2S_ReadyChangeScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_ReadyChangeScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_ReadyChangeScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_ReadyChangeScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_ReadyChangeScene.Merge(m, src)
}
func (m *S2S_ReadyChangeScene) XXX_Size() int {
	return m.Size()
}
func (m *S2S_ReadyChangeScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_ReadyChangeScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_ReadyChangeScene proto.InternalMessageInfo

func (m *S2S_ReadyChangeScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2S_ReadyChangeScene) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *S2S_ReadyChangeScene) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *S2S_ReadyChangeScene) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2S_ReadyChangeScene) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2S_ReadyChangeScene) GetLoginIntaddr() int64 {
	if m != nil && m.LoginIntaddr != nil {
		return *m.LoginIntaddr
	}
	return 0
}

func (m *S2S_ReadyChangeScene) GetOldSceneIntaddr() int64 {
	if m != nil && m.OldSceneIntaddr != nil {
		return *m.OldSceneIntaddr
	}
	return 0
}

func (m *S2S_ReadyChangeScene) GetOldSceneInstanceId() int64 {
	if m != nil && m.OldSceneInstanceId != nil {
		return *m.OldSceneInstanceId
	}
	return 0
}

func (m *S2S_ReadyChangeScene) GetS2SRoleInfo() *SqlResultRoleinfo {
	if m != nil {
		return m.S2SRoleInfo
	}
	return nil
}

// 通知角色下线
type S2C_OffLine struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Account              []byte          `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Reason               []byte          `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_OffLine) Reset()         { *m = S2C_OffLine{} }
func (m *S2C_OffLine) String() string { return proto.CompactTextString(m) }
func (*S2C_OffLine) ProtoMessage()    {}
func (*S2C_OffLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{26}
}
func (m *S2C_OffLine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_OffLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_OffLine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_OffLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_OffLine.Merge(m, src)
}
func (m *S2C_OffLine) XXX_Size() int {
	return m.Size()
}
func (m *S2C_OffLine) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_OffLine.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_OffLine proto.InternalMessageInfo

func (m *S2C_OffLine) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_OffLine) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *S2C_OffLine) GetReason() []byte {
	if m != nil {
		return m.Reason
	}
	return nil
}

// 通知服务器,终端是否试用UTF8编码
type C2S_Charset struct {
	Utf_8                *bool    `protobuf:"varint,1,opt,name=utf_8" json:"utf_8,omitempty"`
	MsgVersion           *int32   `protobuf:"zigzag32,2,opt,name=msg_version" json:"msg_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Charset) Reset()         { *m = C2S_Charset{} }
func (m *C2S_Charset) String() string { return proto.CompactTextString(m) }
func (*C2S_Charset) ProtoMessage()    {}
func (*C2S_Charset) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{27}
}
func (m *C2S_Charset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Charset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Charset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Charset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Charset.Merge(m, src)
}
func (m *C2S_Charset) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Charset) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Charset.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Charset proto.InternalMessageInfo

func (m *C2S_Charset) GetUtf_8() bool {
	if m != nil && m.Utf_8 != nil {
		return *m.Utf_8
	}
	return false
}

func (m *C2S_Charset) GetMsgVersion() int32 {
	if m != nil && m.MsgVersion != nil {
		return *m.MsgVersion
	}
	return 0
}

// 心跳
type C2S_Heartbeat struct {
	Time                 *int64   `protobuf:"zigzag64,1,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Heartbeat) Reset()         { *m = C2S_Heartbeat{} }
func (m *C2S_Heartbeat) String() string { return proto.CompactTextString(m) }
func (*C2S_Heartbeat) ProtoMessage()    {}
func (*C2S_Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{28}
}
func (m *C2S_Heartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Heartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Heartbeat.Merge(m, src)
}
func (m *C2S_Heartbeat) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Heartbeat proto.InternalMessageInfo

func (m *C2S_Heartbeat) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type S2C_Heartbeat struct {
	Time                 *int64   `protobuf:"zigzag64,1,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Heartbeat) Reset()         { *m = S2C_Heartbeat{} }
func (m *S2C_Heartbeat) String() string { return proto.CompactTextString(m) }
func (*S2C_Heartbeat) ProtoMessage()    {}
func (*S2C_Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{29}
}
func (m *S2C_Heartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Heartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Heartbeat.Merge(m, src)
}
func (m *S2C_Heartbeat) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Heartbeat proto.InternalMessageInfo

func (m *S2C_Heartbeat) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// 材料不足
type S2C_MaterialNotEnough struct {
	ItemId               *int32   `protobuf:"zigzag32,1,opt,name=item_id" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_MaterialNotEnough) Reset()         { *m = S2C_MaterialNotEnough{} }
func (m *S2C_MaterialNotEnough) String() string { return proto.CompactTextString(m) }
func (*S2C_MaterialNotEnough) ProtoMessage()    {}
func (*S2C_MaterialNotEnough) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{30}
}
func (m *S2C_MaterialNotEnough) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_MaterialNotEnough) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_MaterialNotEnough.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_MaterialNotEnough) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_MaterialNotEnough.Merge(m, src)
}
func (m *S2C_MaterialNotEnough) XXX_Size() int {
	return m.Size()
}
func (m *S2C_MaterialNotEnough) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_MaterialNotEnough.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_MaterialNotEnough proto.InternalMessageInfo

func (m *S2C_MaterialNotEnough) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

// 游戏币
type C2S_GameCoin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GameCoin) Reset()         { *m = C2S_GameCoin{} }
func (m *C2S_GameCoin) String() string { return proto.CompactTextString(m) }
func (*C2S_GameCoin) ProtoMessage()    {}
func (*C2S_GameCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{31}
}
func (m *C2S_GameCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GameCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GameCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GameCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GameCoin.Merge(m, src)
}
func (m *C2S_GameCoin) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GameCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GameCoin.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GameCoin proto.InternalMessageInfo

func (m *C2S_GameCoin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GameCoin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	GameCoin             *int64   `protobuf:"zigzag64,2,opt,name=game_coin" json:"game_coin,omitempty"`
	DiffGameCoin         []int64  `protobuf:"zigzag64,3,rep,name=diff_game_coin" json:"diff_game_coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_GameCoin) Reset()         { *m = S2C_GameCoin{} }
func (m *S2C_GameCoin) String() string { return proto.CompactTextString(m) }
func (*S2C_GameCoin) ProtoMessage()    {}
func (*S2C_GameCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{32}
}
func (m *S2C_GameCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GameCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GameCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GameCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GameCoin.Merge(m, src)
}
func (m *S2C_GameCoin) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GameCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GameCoin.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GameCoin proto.InternalMessageInfo

func (m *S2C_GameCoin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_GameCoin) GetGameCoin() int64 {
	if m != nil && m.GameCoin != nil {
		return *m.GameCoin
	}
	return 0
}

func (m *S2C_GameCoin) GetDiffGameCoin() []int64 {
	if m != nil {
		return m.DiffGameCoin
	}
	return nil
}

// 钻石币
type C2S_DiamondCoin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DiamondCoin) Reset()         { *m = C2S_DiamondCoin{} }
func (m *C2S_DiamondCoin) String() string { return proto.CompactTextString(m) }
func (*C2S_DiamondCoin) ProtoMessage()    {}
func (*C2S_DiamondCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{33}
}
func (m *C2S_DiamondCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DiamondCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DiamondCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DiamondCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DiamondCoin.Merge(m, src)
}
func (m *C2S_DiamondCoin) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DiamondCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DiamondCoin.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DiamondCoin proto.InternalMessageInfo

func (m *C2S_DiamondCoin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_DiamondCoin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	DiamondCoin          *int64   `protobuf:"zigzag64,2,opt,name=diamond_coin" json:"diamond_coin,omitempty"`
	DiffDiamondCoin      []int64  `protobuf:"zigzag64,3,rep,name=diff_diamond_coin" json:"diff_diamond_coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_DiamondCoin) Reset()         { *m = S2C_DiamondCoin{} }
func (m *S2C_DiamondCoin) String() string { return proto.CompactTextString(m) }
func (*S2C_DiamondCoin) ProtoMessage()    {}
func (*S2C_DiamondCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{34}
}
func (m *S2C_DiamondCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DiamondCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DiamondCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DiamondCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DiamondCoin.Merge(m, src)
}
func (m *S2C_DiamondCoin) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DiamondCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DiamondCoin.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DiamondCoin proto.InternalMessageInfo

func (m *S2C_DiamondCoin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_DiamondCoin) GetDiamondCoin() int64 {
	if m != nil && m.DiamondCoin != nil {
		return *m.DiamondCoin
	}
	return 0
}

func (m *S2C_DiamondCoin) GetDiffDiamondCoin() []int64 {
	if m != nil {
		return m.DiffDiamondCoin
	}
	return nil
}

// 体力
type C2S_Endurance struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Endurance) Reset()         { *m = C2S_Endurance{} }
func (m *C2S_Endurance) String() string { return proto.CompactTextString(m) }
func (*C2S_Endurance) ProtoMessage()    {}
func (*C2S_Endurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{35}
}
func (m *C2S_Endurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Endurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Endurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Endurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Endurance.Merge(m, src)
}
func (m *C2S_Endurance) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Endurance) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Endurance.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Endurance proto.InternalMessageInfo

func (m *C2S_Endurance) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_Endurance struct {
	RoleIndex            *int64         `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Endurance            *int64         `protobuf:"zigzag64,2,opt,name=endurance" json:"endurance,omitempty"`
	DiffEndurance        []int64        `protobuf:"zigzag64,3,rep,name=diff_endurance" json:"diff_endurance,omitempty"`
	StaminaInfo          *DbStaminaInfo `protobuf:"bytes,4,opt,name=stamina_info" json:"stamina_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *S2C_Endurance) Reset()         { *m = S2C_Endurance{} }
func (m *S2C_Endurance) String() string { return proto.CompactTextString(m) }
func (*S2C_Endurance) ProtoMessage()    {}
func (*S2C_Endurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{36}
}
func (m *S2C_Endurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Endurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Endurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Endurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Endurance.Merge(m, src)
}
func (m *S2C_Endurance) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Endurance) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Endurance.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Endurance proto.InternalMessageInfo

func (m *S2C_Endurance) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Endurance) GetEndurance() int64 {
	if m != nil && m.Endurance != nil {
		return *m.Endurance
	}
	return 0
}

func (m *S2C_Endurance) GetDiffEndurance() []int64 {
	if m != nil {
		return m.DiffEndurance
	}
	return nil
}

func (m *S2C_Endurance) GetStaminaInfo() *DbStaminaInfo {
	if m != nil {
		return m.StaminaInfo
	}
	return nil
}

type S2C_RecoveryEndurance struct {
	RoleIndex            *int64         `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Endurance            *int64         `protobuf:"zigzag64,2,opt,name=endurance" json:"endurance,omitempty"`
	DiffEndurance        []int64        `protobuf:"zigzag64,3,rep,name=diff_endurance" json:"diff_endurance,omitempty"`
	StaminaInfo          *DbStaminaInfo `protobuf:"bytes,4,opt,name=stamina_info" json:"stamina_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *S2C_RecoveryEndurance) Reset()         { *m = S2C_RecoveryEndurance{} }
func (m *S2C_RecoveryEndurance) String() string { return proto.CompactTextString(m) }
func (*S2C_RecoveryEndurance) ProtoMessage()    {}
func (*S2C_RecoveryEndurance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{37}
}
func (m *S2C_RecoveryEndurance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RecoveryEndurance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RecoveryEndurance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RecoveryEndurance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RecoveryEndurance.Merge(m, src)
}
func (m *S2C_RecoveryEndurance) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RecoveryEndurance) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RecoveryEndurance.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RecoveryEndurance proto.InternalMessageInfo

func (m *S2C_RecoveryEndurance) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_RecoveryEndurance) GetEndurance() int64 {
	if m != nil && m.Endurance != nil {
		return *m.Endurance
	}
	return 0
}

func (m *S2C_RecoveryEndurance) GetDiffEndurance() []int64 {
	if m != nil {
		return m.DiffEndurance
	}
	return nil
}

func (m *S2C_RecoveryEndurance) GetStaminaInfo() *DbStaminaInfo {
	if m != nil {
		return m.StaminaInfo
	}
	return nil
}

// 经验
type C2S_Exp struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Exp) Reset()         { *m = C2S_Exp{} }
func (m *C2S_Exp) String() string { return proto.CompactTextString(m) }
func (*C2S_Exp) ProtoMessage()    {}
func (*C2S_Exp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{38}
}
func (m *C2S_Exp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Exp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Exp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Exp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Exp.Merge(m, src)
}
func (m *C2S_Exp) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Exp) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Exp.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Exp proto.InternalMessageInfo

func (m *C2S_Exp) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_Exp struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Exp                  *int64   `protobuf:"zigzag64,2,opt,name=exp" json:"exp,omitempty"`
	DiffExp              []int64  `protobuf:"zigzag64,3,rep,name=diff_exp" json:"diff_exp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Exp) Reset()         { *m = S2C_Exp{} }
func (m *S2C_Exp) String() string { return proto.CompactTextString(m) }
func (*S2C_Exp) ProtoMessage()    {}
func (*S2C_Exp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{39}
}
func (m *S2C_Exp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Exp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Exp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Exp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Exp.Merge(m, src)
}
func (m *S2C_Exp) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Exp) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Exp.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Exp proto.InternalMessageInfo

func (m *S2C_Exp) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Exp) GetExp() int64 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *S2C_Exp) GetDiffExp() []int64 {
	if m != nil {
		return m.DiffExp
	}
	return nil
}

// 等级
type C2S_Level struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Level) Reset()         { *m = C2S_Level{} }
func (m *C2S_Level) String() string { return proto.CompactTextString(m) }
func (*C2S_Level) ProtoMessage()    {}
func (*C2S_Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{40}
}
func (m *C2S_Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Level.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Level.Merge(m, src)
}
func (m *C2S_Level) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Level) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Level.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Level proto.InternalMessageInfo

func (m *C2S_Level) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_Level struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Level                *int32   `protobuf:"zigzag32,2,opt,name=level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Level) Reset()         { *m = S2C_Level{} }
func (m *S2C_Level) String() string { return proto.CompactTextString(m) }
func (*S2C_Level) ProtoMessage()    {}
func (*S2C_Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{41}
}
func (m *S2C_Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Level.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Level.Merge(m, src)
}
func (m *S2C_Level) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Level) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Level.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Level proto.InternalMessageInfo

func (m *S2C_Level) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Level) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

// 技能点
type C2S_SkillPoint struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SkillPoint) Reset()         { *m = C2S_SkillPoint{} }
func (m *C2S_SkillPoint) String() string { return proto.CompactTextString(m) }
func (*C2S_SkillPoint) ProtoMessage()    {}
func (*C2S_SkillPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{42}
}
func (m *C2S_SkillPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SkillPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SkillPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SkillPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SkillPoint.Merge(m, src)
}
func (m *C2S_SkillPoint) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SkillPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SkillPoint.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SkillPoint proto.InternalMessageInfo

func (m *C2S_SkillPoint) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_SkillPoint struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillPoint           *int64   `protobuf:"zigzag64,2,opt,name=skill_point" json:"skill_point,omitempty"`
	DiffSkillPoint       []int64  `protobuf:"zigzag64,3,rep,name=diff_skill_point" json:"diff_skill_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_SkillPoint) Reset()         { *m = S2C_SkillPoint{} }
func (m *S2C_SkillPoint) String() string { return proto.CompactTextString(m) }
func (*S2C_SkillPoint) ProtoMessage()    {}
func (*S2C_SkillPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{43}
}
func (m *S2C_SkillPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SkillPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SkillPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SkillPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SkillPoint.Merge(m, src)
}
func (m *S2C_SkillPoint) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SkillPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SkillPoint.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SkillPoint proto.InternalMessageInfo

func (m *S2C_SkillPoint) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_SkillPoint) GetSkillPoint() int64 {
	if m != nil && m.SkillPoint != nil {
		return *m.SkillPoint
	}
	return 0
}

func (m *S2C_SkillPoint) GetDiffSkillPoint() []int64 {
	if m != nil {
		return m.DiffSkillPoint
	}
	return nil
}

type S2C_ArenaScore struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ArenaScore           *int64   `protobuf:"zigzag64,2,opt,name=arena_score" json:"arena_score,omitempty"`
	DiffArenaScore       []int64  `protobuf:"zigzag64,3,rep,name=diff_arena_score" json:"diff_arena_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_ArenaScore) Reset()         { *m = S2C_ArenaScore{} }
func (m *S2C_ArenaScore) String() string { return proto.CompactTextString(m) }
func (*S2C_ArenaScore) ProtoMessage()    {}
func (*S2C_ArenaScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{44}
}
func (m *S2C_ArenaScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArenaScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArenaScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArenaScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArenaScore.Merge(m, src)
}
func (m *S2C_ArenaScore) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArenaScore) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArenaScore.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArenaScore proto.InternalMessageInfo

func (m *S2C_ArenaScore) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_ArenaScore) GetArenaScore() int64 {
	if m != nil && m.ArenaScore != nil {
		return *m.ArenaScore
	}
	return 0
}

func (m *S2C_ArenaScore) GetDiffArenaScore() []int64 {
	if m != nil {
		return m.DiffArenaScore
	}
	return nil
}

// vip等级
type S2C_Vip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Vip                  *int32   `protobuf:"zigzag32,2,opt,name=vip" json:"vip,omitempty"`
	DiffVip              []int32  `protobuf:"zigzag32,3,rep,name=diff_vip" json:"diff_vip,omitempty"`
	VipExp               *int64   `protobuf:"zigzag64,4,opt,name=vip_exp" json:"vip_exp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Vip) Reset()         { *m = S2C_Vip{} }
func (m *S2C_Vip) String() string { return proto.CompactTextString(m) }
func (*S2C_Vip) ProtoMessage()    {}
func (*S2C_Vip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{45}
}
func (m *S2C_Vip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Vip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Vip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Vip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Vip.Merge(m, src)
}
func (m *S2C_Vip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Vip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Vip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Vip proto.InternalMessageInfo

func (m *S2C_Vip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Vip) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *S2C_Vip) GetDiffVip() []int32 {
	if m != nil {
		return m.DiffVip
	}
	return nil
}

func (m *S2C_Vip) GetVipExp() int64 {
	if m != nil && m.VipExp != nil {
		return *m.VipExp
	}
	return 0
}

// 携带全角色信息进入场景
type S2C_RoleInfo_EnterScene struct {
	RetCode              *E_MSG_RET_CODE    `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleInfo             *SqlResultRoleinfo `protobuf:"bytes,2,opt,name=role_info" json:"role_info,omitempty"`
	SceneInstanceId      *int64             `protobuf:"zigzag64,3,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	BeginX               *int32             `protobuf:"zigzag32,4,opt,name=begin_x" json:"begin_x,omitempty"`
	BeginY               *int32             `protobuf:"zigzag32,5,opt,name=begin_y" json:"begin_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_RoleInfo_EnterScene) Reset()         { *m = S2C_RoleInfo_EnterScene{} }
func (m *S2C_RoleInfo_EnterScene) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleInfo_EnterScene) ProtoMessage()    {}
func (*S2C_RoleInfo_EnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{46}
}
func (m *S2C_RoleInfo_EnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleInfo_EnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleInfo_EnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleInfo_EnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleInfo_EnterScene.Merge(m, src)
}
func (m *S2C_RoleInfo_EnterScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleInfo_EnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleInfo_EnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleInfo_EnterScene proto.InternalMessageInfo

func (m *S2C_RoleInfo_EnterScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_RoleInfo_EnterScene) GetRoleInfo() *SqlResultRoleinfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

func (m *S2C_RoleInfo_EnterScene) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_RoleInfo_EnterScene) GetBeginX() int32 {
	if m != nil && m.BeginX != nil {
		return *m.BeginX
	}
	return 0
}

func (m *S2C_RoleInfo_EnterScene) GetBeginY() int32 {
	if m != nil && m.BeginY != nil {
		return *m.BeginY
	}
	return 0
}

// 玩家出生进场景
type S2C_BornRoleInfo_EnterScene struct {
	RoleInfo             *S2C_RoleInfo_EnterScene `protobuf:"bytes,1,opt,name=role_info" json:"role_info,omitempty"`
	EggId                *int32                   `protobuf:"zigzag32,2,opt,name=egg_id" json:"egg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *S2C_BornRoleInfo_EnterScene) Reset()         { *m = S2C_BornRoleInfo_EnterScene{} }
func (m *S2C_BornRoleInfo_EnterScene) String() string { return proto.CompactTextString(m) }
func (*S2C_BornRoleInfo_EnterScene) ProtoMessage()    {}
func (*S2C_BornRoleInfo_EnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{47}
}
func (m *S2C_BornRoleInfo_EnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BornRoleInfo_EnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BornRoleInfo_EnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BornRoleInfo_EnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BornRoleInfo_EnterScene.Merge(m, src)
}
func (m *S2C_BornRoleInfo_EnterScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BornRoleInfo_EnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BornRoleInfo_EnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BornRoleInfo_EnterScene proto.InternalMessageInfo

func (m *S2C_BornRoleInfo_EnterScene) GetRoleInfo() *S2C_RoleInfo_EnterScene {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

func (m *S2C_BornRoleInfo_EnterScene) GetEggId() int32 {
	if m != nil && m.EggId != nil {
		return *m.EggId
	}
	return 0
}

// 其他角色进入场景
type S2C_OtherRoleInfo_EnterScene struct {
	RoleInfo             *SceneRoleinfo `protobuf:"bytes,1,opt,name=role_info" json:"role_info,omitempty"`
	SceneInstanceId      *int64         `protobuf:"zigzag64,2,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	BeginX               *int32         `protobuf:"zigzag32,3,opt,name=begin_x" json:"begin_x,omitempty"`
	BeginY               *int32         `protobuf:"zigzag32,4,opt,name=begin_y" json:"begin_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *S2C_OtherRoleInfo_EnterScene) Reset()         { *m = S2C_OtherRoleInfo_EnterScene{} }
func (m *S2C_OtherRoleInfo_EnterScene) String() string { return proto.CompactTextString(m) }
func (*S2C_OtherRoleInfo_EnterScene) ProtoMessage()    {}
func (*S2C_OtherRoleInfo_EnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{48}
}
func (m *S2C_OtherRoleInfo_EnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_OtherRoleInfo_EnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_OtherRoleInfo_EnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_OtherRoleInfo_EnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_OtherRoleInfo_EnterScene.Merge(m, src)
}
func (m *S2C_OtherRoleInfo_EnterScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_OtherRoleInfo_EnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_OtherRoleInfo_EnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_OtherRoleInfo_EnterScene proto.InternalMessageInfo

func (m *S2C_OtherRoleInfo_EnterScene) GetRoleInfo() *SceneRoleinfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

func (m *S2C_OtherRoleInfo_EnterScene) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_OtherRoleInfo_EnterScene) GetBeginX() int32 {
	if m != nil && m.BeginX != nil {
		return *m.BeginX
	}
	return 0
}

func (m *S2C_OtherRoleInfo_EnterScene) GetBeginY() int32 {
	if m != nil && m.BeginY != nil {
		return *m.BeginY
	}
	return 0
}

// 批量玩家入场景
type S2C_ManyOtherRoleInfo_EnterScene struct {
	RoleInfo             []*S2C_OtherRoleInfo_EnterScene `protobuf:"bytes,1,rep,name=role_info" json:"role_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *S2C_ManyOtherRoleInfo_EnterScene) Reset()         { *m = S2C_ManyOtherRoleInfo_EnterScene{} }
func (m *S2C_ManyOtherRoleInfo_EnterScene) String() string { return proto.CompactTextString(m) }
func (*S2C_ManyOtherRoleInfo_EnterScene) ProtoMessage()    {}
func (*S2C_ManyOtherRoleInfo_EnterScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{49}
}
func (m *S2C_ManyOtherRoleInfo_EnterScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ManyOtherRoleInfo_EnterScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ManyOtherRoleInfo_EnterScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ManyOtherRoleInfo_EnterScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ManyOtherRoleInfo_EnterScene.Merge(m, src)
}
func (m *S2C_ManyOtherRoleInfo_EnterScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ManyOtherRoleInfo_EnterScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ManyOtherRoleInfo_EnterScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ManyOtherRoleInfo_EnterScene proto.InternalMessageInfo

func (m *S2C_ManyOtherRoleInfo_EnterScene) GetRoleInfo() []*S2C_OtherRoleInfo_EnterScene {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

// 同步场景角色信息
type S2C_SyncRoleShowInfo struct {
	RoleInfo             *SceneRoleinfo `protobuf:"bytes,1,opt,name=role_info" json:"role_info,omitempty"`
	BeginX               *int32         `protobuf:"zigzag32,2,opt,name=begin_x" json:"begin_x,omitempty"`
	BeginY               *int32         `protobuf:"zigzag32,3,opt,name=begin_y" json:"begin_y,omitempty"`
	ChangeFlag           *int32         `protobuf:"zigzag32,4,opt,name=change_flag" json:"change_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *S2C_SyncRoleShowInfo) Reset()         { *m = S2C_SyncRoleShowInfo{} }
func (m *S2C_SyncRoleShowInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncRoleShowInfo) ProtoMessage()    {}
func (*S2C_SyncRoleShowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{50}
}
func (m *S2C_SyncRoleShowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncRoleShowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncRoleShowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncRoleShowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncRoleShowInfo.Merge(m, src)
}
func (m *S2C_SyncRoleShowInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncRoleShowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncRoleShowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncRoleShowInfo proto.InternalMessageInfo

func (m *S2C_SyncRoleShowInfo) GetRoleInfo() *SceneRoleinfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

func (m *S2C_SyncRoleShowInfo) GetBeginX() int32 {
	if m != nil && m.BeginX != nil {
		return *m.BeginX
	}
	return 0
}

func (m *S2C_SyncRoleShowInfo) GetBeginY() int32 {
	if m != nil && m.BeginY != nil {
		return *m.BeginY
	}
	return 0
}

func (m *S2C_SyncRoleShowInfo) GetChangeFlag() int32 {
	if m != nil && m.ChangeFlag != nil {
		return *m.ChangeFlag
	}
	return 0
}

// 其他角色信息
type SceneRoleinfo struct {
	RoleIndex            *int64            `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MoveSpeed            *int32            `protobuf:"zigzag32,2,opt,name=move_speed" json:"move_speed,omitempty"`
	DbCardInfo           *VisitingCardInfo `protobuf:"bytes,3,opt,name=db_card_info" json:"db_card_info,omitempty"`
	MemoryInfo           *TempInfoInMemory `protobuf:"bytes,4,opt,name=memory_info" json:"memory_info,omitempty"`
	ToLeft               *bool             `protobuf:"varint,5,opt,name=to_left" json:"to_left,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SceneRoleinfo) Reset()         { *m = SceneRoleinfo{} }
func (m *SceneRoleinfo) String() string { return proto.CompactTextString(m) }
func (*SceneRoleinfo) ProtoMessage()    {}
func (*SceneRoleinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{51}
}
func (m *SceneRoleinfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SceneRoleinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SceneRoleinfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SceneRoleinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SceneRoleinfo.Merge(m, src)
}
func (m *SceneRoleinfo) XXX_Size() int {
	return m.Size()
}
func (m *SceneRoleinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SceneRoleinfo.DiscardUnknown(m)
}

var xxx_messageInfo_SceneRoleinfo proto.InternalMessageInfo

func (m *SceneRoleinfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *SceneRoleinfo) GetMoveSpeed() int32 {
	if m != nil && m.MoveSpeed != nil {
		return *m.MoveSpeed
	}
	return 0
}

func (m *SceneRoleinfo) GetDbCardInfo() *VisitingCardInfo {
	if m != nil {
		return m.DbCardInfo
	}
	return nil
}

func (m *SceneRoleinfo) GetMemoryInfo() *TempInfoInMemory {
	if m != nil {
		return m.MemoryInfo
	}
	return nil
}

func (m *SceneRoleinfo) GetToLeft() bool {
	if m != nil && m.ToLeft != nil {
		return *m.ToLeft
	}
	return false
}

// 广播角色显示信息
type S2C_BroadcastRoleShowInfo struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PlayerInfo           *PlayerShowInfo `protobuf:"bytes,2,opt,name=player_info" json:"player_info,omitempty"`
	SceneInstanceId      *int64          `protobuf:"zigzag64,3,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	BeginX               *int32          `protobuf:"zigzag32,4,opt,name=begin_x" json:"begin_x,omitempty"`
	BeginY               *int32          `protobuf:"zigzag32,5,opt,name=begin_y" json:"begin_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BroadcastRoleShowInfo) Reset()         { *m = S2C_BroadcastRoleShowInfo{} }
func (m *S2C_BroadcastRoleShowInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_BroadcastRoleShowInfo) ProtoMessage()    {}
func (*S2C_BroadcastRoleShowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{52}
}
func (m *S2C_BroadcastRoleShowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BroadcastRoleShowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BroadcastRoleShowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BroadcastRoleShowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BroadcastRoleShowInfo.Merge(m, src)
}
func (m *S2C_BroadcastRoleShowInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BroadcastRoleShowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BroadcastRoleShowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BroadcastRoleShowInfo proto.InternalMessageInfo

func (m *S2C_BroadcastRoleShowInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_BroadcastRoleShowInfo) GetPlayerInfo() *PlayerShowInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *S2C_BroadcastRoleShowInfo) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_BroadcastRoleShowInfo) GetBeginX() int32 {
	if m != nil && m.BeginX != nil {
		return *m.BeginX
	}
	return 0
}

func (m *S2C_BroadcastRoleShowInfo) GetBeginY() int32 {
	if m != nil && m.BeginY != nil {
		return *m.BeginY
	}
	return 0
}

// 携带全角色信息离开场景
type S2C_RoleInfo_LeaveScene struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	SceneInstanceId      *int64          `protobuf:"zigzag64,3,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_RoleInfo_LeaveScene) Reset()         { *m = S2C_RoleInfo_LeaveScene{} }
func (m *S2C_RoleInfo_LeaveScene) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleInfo_LeaveScene) ProtoMessage()    {}
func (*S2C_RoleInfo_LeaveScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{53}
}
func (m *S2C_RoleInfo_LeaveScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleInfo_LeaveScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleInfo_LeaveScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleInfo_LeaveScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleInfo_LeaveScene.Merge(m, src)
}
func (m *S2C_RoleInfo_LeaveScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleInfo_LeaveScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleInfo_LeaveScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleInfo_LeaveScene proto.InternalMessageInfo

func (m *S2C_RoleInfo_LeaveScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_RoleInfo_LeaveScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_RoleInfo_LeaveScene) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

// 请求移动
type C2S_Request_Move struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneInstanceId      *int64   `protobuf:"zigzag64,2,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	BeginX               *int32   `protobuf:"zigzag32,3,opt,name=begin_x" json:"begin_x,omitempty"`
	BeginY               *int32   `protobuf:"zigzag32,4,opt,name=begin_y" json:"begin_y,omitempty"`
	EndX                 *int32   `protobuf:"zigzag32,5,opt,name=end_x" json:"end_x,omitempty"`
	EndY                 *int32   `protobuf:"zigzag32,6,opt,name=end_y" json:"end_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Request_Move) Reset()         { *m = C2S_Request_Move{} }
func (m *C2S_Request_Move) String() string { return proto.CompactTextString(m) }
func (*C2S_Request_Move) ProtoMessage()    {}
func (*C2S_Request_Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{54}
}
func (m *C2S_Request_Move) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Request_Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Request_Move.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Request_Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Request_Move.Merge(m, src)
}
func (m *C2S_Request_Move) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Request_Move) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Request_Move.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Request_Move proto.InternalMessageInfo

func (m *C2S_Request_Move) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Request_Move) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *C2S_Request_Move) GetBeginX() int32 {
	if m != nil && m.BeginX != nil {
		return *m.BeginX
	}
	return 0
}

func (m *C2S_Request_Move) GetBeginY() int32 {
	if m != nil && m.BeginY != nil {
		return *m.BeginY
	}
	return 0
}

func (m *C2S_Request_Move) GetEndX() int32 {
	if m != nil && m.EndX != nil {
		return *m.EndX
	}
	return 0
}

func (m *C2S_Request_Move) GetEndY() int32 {
	if m != nil && m.EndY != nil {
		return *m.EndY
	}
	return 0
}

type S2C_Request_Move struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneInstanceId      *int64   `protobuf:"zigzag64,2,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	BeginX               *int32   `protobuf:"zigzag32,3,opt,name=begin_x" json:"begin_x,omitempty"`
	BeginY               *int32   `protobuf:"zigzag32,4,opt,name=begin_y" json:"begin_y,omitempty"`
	EndX                 *int32   `protobuf:"zigzag32,5,opt,name=end_x" json:"end_x,omitempty"`
	EndY                 *int32   `protobuf:"zigzag32,6,opt,name=end_y" json:"end_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Request_Move) Reset()         { *m = S2C_Request_Move{} }
func (m *S2C_Request_Move) String() string { return proto.CompactTextString(m) }
func (*S2C_Request_Move) ProtoMessage()    {}
func (*S2C_Request_Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{55}
}
func (m *S2C_Request_Move) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Request_Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Request_Move.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Request_Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Request_Move.Merge(m, src)
}
func (m *S2C_Request_Move) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Request_Move) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Request_Move.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Request_Move proto.InternalMessageInfo

func (m *S2C_Request_Move) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Request_Move) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_Request_Move) GetBeginX() int32 {
	if m != nil && m.BeginX != nil {
		return *m.BeginX
	}
	return 0
}

func (m *S2C_Request_Move) GetBeginY() int32 {
	if m != nil && m.BeginY != nil {
		return *m.BeginY
	}
	return 0
}

func (m *S2C_Request_Move) GetEndX() int32 {
	if m != nil && m.EndX != nil {
		return *m.EndX
	}
	return 0
}

func (m *S2C_Request_Move) GetEndY() int32 {
	if m != nil && m.EndY != nil {
		return *m.EndY
	}
	return 0
}

// 发送聊天
type C2S_Chat struct {
	RoleIndex            *int64       `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneInstanceId      *int64       `protobuf:"zigzag64,2,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	ChatType             *E_CHAT_TYPE `protobuf:"varint,3,opt,name=chat_type,enum=pbd.E_CHAT_TYPE" json:"chat_type,omitempty"`
	Msg                  []byte       `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	TarRoleIndex         *int64       `protobuf:"zigzag64,5,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	GroupId              *int32       `protobuf:"zigzag32,6,opt,name=group_id" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *C2S_Chat) Reset()         { *m = C2S_Chat{} }
func (m *C2S_Chat) String() string { return proto.CompactTextString(m) }
func (*C2S_Chat) ProtoMessage()    {}
func (*C2S_Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{56}
}
func (m *C2S_Chat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Chat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Chat.Merge(m, src)
}
func (m *C2S_Chat) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Chat proto.InternalMessageInfo

func (m *C2S_Chat) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Chat) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *C2S_Chat) GetChatType() E_CHAT_TYPE {
	if m != nil && m.ChatType != nil {
		return *m.ChatType
	}
	return E_CHAT_TYPE_ECT_SCENE
}

func (m *C2S_Chat) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *C2S_Chat) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *C2S_Chat) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

// 回复聊天
type S2C_Chat struct {
	RetCode              *E_MSG_RET_CODE   `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SrcRoleIndex         *int64            `protobuf:"zigzag64,2,opt,name=src_role_index" json:"src_role_index,omitempty"`
	TarRoleIndex         *int64            `protobuf:"zigzag64,3,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	SceneInstanceId      *int64            `protobuf:"zigzag64,4,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	ChatType             *E_CHAT_TYPE      `protobuf:"varint,5,opt,name=chat_type,enum=pbd.E_CHAT_TYPE" json:"chat_type,omitempty"`
	Msg                  []byte            `protobuf:"bytes,6,opt,name=msg" json:"msg,omitempty"`
	IsGm                 *bool             `protobuf:"varint,7,opt,name=is_gm" json:"is_gm,omitempty"`
	GroupId              *int32            `protobuf:"zigzag32,8,opt,name=group_id" json:"group_id,omitempty"`
	SrcVisitInfo         *VisitingCardInfo `protobuf:"bytes,9,opt,name=src_visit_info" json:"src_visit_info,omitempty"`
	ForbiddenTime        *int64            `protobuf:"zigzag64,10,opt,name=forbidden_time" json:"forbidden_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_Chat) Reset()         { *m = S2C_Chat{} }
func (m *S2C_Chat) String() string { return proto.CompactTextString(m) }
func (*S2C_Chat) ProtoMessage()    {}
func (*S2C_Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{57}
}
func (m *S2C_Chat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Chat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Chat.Merge(m, src)
}
func (m *S2C_Chat) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Chat proto.InternalMessageInfo

func (m *S2C_Chat) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Chat) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

func (m *S2C_Chat) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *S2C_Chat) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_Chat) GetChatType() E_CHAT_TYPE {
	if m != nil && m.ChatType != nil {
		return *m.ChatType
	}
	return E_CHAT_TYPE_ECT_SCENE
}

func (m *S2C_Chat) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *S2C_Chat) GetIsGm() bool {
	if m != nil && m.IsGm != nil {
		return *m.IsGm
	}
	return false
}

func (m *S2C_Chat) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *S2C_Chat) GetSrcVisitInfo() *VisitingCardInfo {
	if m != nil {
		return m.SrcVisitInfo
	}
	return nil
}

func (m *S2C_Chat) GetForbiddenTime() int64 {
	if m != nil && m.ForbiddenTime != nil {
		return *m.ForbiddenTime
	}
	return 0
}

// 特殊道具使用
type C2S_Use_SPItem struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ItemIndex            *int64   `protobuf:"zigzag64,2,opt,name=item_index" json:"item_index,omitempty"`
	SpId                 *int32   `protobuf:"zigzag32,3,opt,name=sp_id" json:"sp_id,omitempty"`
	Stamp                *int64   `protobuf:"zigzag64,4,opt,name=stamp" json:"stamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Use_SPItem) Reset()         { *m = C2S_Use_SPItem{} }
func (m *C2S_Use_SPItem) String() string { return proto.CompactTextString(m) }
func (*C2S_Use_SPItem) ProtoMessage()    {}
func (*C2S_Use_SPItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{58}
}
func (m *C2S_Use_SPItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Use_SPItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Use_SPItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Use_SPItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Use_SPItem.Merge(m, src)
}
func (m *C2S_Use_SPItem) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Use_SPItem) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Use_SPItem.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Use_SPItem proto.InternalMessageInfo

func (m *C2S_Use_SPItem) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Use_SPItem) GetItemIndex() int64 {
	if m != nil && m.ItemIndex != nil {
		return *m.ItemIndex
	}
	return 0
}

func (m *C2S_Use_SPItem) GetSpId() int32 {
	if m != nil && m.SpId != nil {
		return *m.SpId
	}
	return 0
}

func (m *C2S_Use_SPItem) GetStamp() int64 {
	if m != nil && m.Stamp != nil {
		return *m.Stamp
	}
	return 0
}

// 广播特殊道具使用
type S2C_Use_SPItem struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Info                 []*SpInfo `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *S2C_Use_SPItem) Reset()         { *m = S2C_Use_SPItem{} }
func (m *S2C_Use_SPItem) String() string { return proto.CompactTextString(m) }
func (*S2C_Use_SPItem) ProtoMessage()    {}
func (*S2C_Use_SPItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{59}
}
func (m *S2C_Use_SPItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Use_SPItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Use_SPItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Use_SPItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Use_SPItem.Merge(m, src)
}
func (m *S2C_Use_SPItem) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Use_SPItem) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Use_SPItem.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Use_SPItem proto.InternalMessageInfo

func (m *S2C_Use_SPItem) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Use_SPItem) GetInfo() []*SpInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 切换场景
type C2S_Change_Scene struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarSceneId           *uint32  `protobuf:"varint,2,opt,name=tar_scene_id" json:"tar_scene_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,3,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	DefaultFlag          *bool    `protobuf:"varint,4,opt,name=default_flag" json:"default_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Change_Scene) Reset()         { *m = C2S_Change_Scene{} }
func (m *C2S_Change_Scene) String() string { return proto.CompactTextString(m) }
func (*C2S_Change_Scene) ProtoMessage()    {}
func (*C2S_Change_Scene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{60}
}
func (m *C2S_Change_Scene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Change_Scene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Change_Scene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Change_Scene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Change_Scene.Merge(m, src)
}
func (m *C2S_Change_Scene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Change_Scene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Change_Scene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Change_Scene proto.InternalMessageInfo

func (m *C2S_Change_Scene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Change_Scene) GetTarSceneId() uint32 {
	if m != nil && m.TarSceneId != nil {
		return *m.TarSceneId
	}
	return 0
}

func (m *C2S_Change_Scene) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

func (m *C2S_Change_Scene) GetDefaultFlag() bool {
	if m != nil && m.DefaultFlag != nil {
		return *m.DefaultFlag
	}
	return false
}

// 查询场景分线
type C2S_QuerySceneLineInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_QuerySceneLineInfo) Reset()         { *m = C2S_QuerySceneLineInfo{} }
func (m *C2S_QuerySceneLineInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_QuerySceneLineInfo) ProtoMessage()    {}
func (*C2S_QuerySceneLineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{61}
}
func (m *C2S_QuerySceneLineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QuerySceneLineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QuerySceneLineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QuerySceneLineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QuerySceneLineInfo.Merge(m, src)
}
func (m *C2S_QuerySceneLineInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QuerySceneLineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QuerySceneLineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QuerySceneLineInfo proto.InternalMessageInfo

func (m *C2S_QuerySceneLineInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QuerySceneLineInfo) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

type S2C_QuerySceneLineInfo struct {
	SceneId              *int32   `protobuf:"zigzag32,1,opt,name=scene_id" json:"scene_id,omitempty"`
	SceneIndex           []int32  `protobuf:"zigzag32,2,rep,name=scene_index" json:"scene_index,omitempty"`
	Loads                []int32  `protobuf:"zigzag32,3,rep,name=loads" json:"loads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_QuerySceneLineInfo) Reset()         { *m = S2C_QuerySceneLineInfo{} }
func (m *S2C_QuerySceneLineInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_QuerySceneLineInfo) ProtoMessage()    {}
func (*S2C_QuerySceneLineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{62}
}
func (m *S2C_QuerySceneLineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QuerySceneLineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QuerySceneLineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QuerySceneLineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QuerySceneLineInfo.Merge(m, src)
}
func (m *S2C_QuerySceneLineInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QuerySceneLineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QuerySceneLineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QuerySceneLineInfo proto.InternalMessageInfo

func (m *S2C_QuerySceneLineInfo) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2C_QuerySceneLineInfo) GetSceneIndex() []int32 {
	if m != nil {
		return m.SceneIndex
	}
	return nil
}

func (m *S2C_QuerySceneLineInfo) GetLoads() []int32 {
	if m != nil {
		return m.Loads
	}
	return nil
}

// 切换分线
type C2S_ChangeSceneLine struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarSceneId           *uint32  `protobuf:"varint,2,opt,name=tar_scene_id" json:"tar_scene_id,omitempty"`
	TarSceneIndex        *uint32  `protobuf:"varint,3,opt,name=tar_scene_index" json:"tar_scene_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ChangeSceneLine) Reset()         { *m = C2S_ChangeSceneLine{} }
func (m *C2S_ChangeSceneLine) String() string { return proto.CompactTextString(m) }
func (*C2S_ChangeSceneLine) ProtoMessage()    {}
func (*C2S_ChangeSceneLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{63}
}
func (m *C2S_ChangeSceneLine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ChangeSceneLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ChangeSceneLine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ChangeSceneLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ChangeSceneLine.Merge(m, src)
}
func (m *C2S_ChangeSceneLine) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ChangeSceneLine) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ChangeSceneLine.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ChangeSceneLine proto.InternalMessageInfo

func (m *C2S_ChangeSceneLine) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ChangeSceneLine) GetTarSceneId() uint32 {
	if m != nil && m.TarSceneId != nil {
		return *m.TarSceneId
	}
	return 0
}

func (m *C2S_ChangeSceneLine) GetTarSceneIndex() uint32 {
	if m != nil && m.TarSceneIndex != nil {
		return *m.TarSceneIndex
	}
	return 0
}

type S2C_ChangeSceneLine struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ChangeSceneLine) Reset()         { *m = S2C_ChangeSceneLine{} }
func (m *S2C_ChangeSceneLine) String() string { return proto.CompactTextString(m) }
func (*S2C_ChangeSceneLine) ProtoMessage()    {}
func (*S2C_ChangeSceneLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{64}
}
func (m *S2C_ChangeSceneLine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ChangeSceneLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ChangeSceneLine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ChangeSceneLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ChangeSceneLine.Merge(m, src)
}
func (m *S2C_ChangeSceneLine) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ChangeSceneLine) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ChangeSceneLine.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ChangeSceneLine proto.InternalMessageInfo

func (m *S2C_ChangeSceneLine) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 请求传送点切换场景
type C2S_TransPortChangeScene struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TransportId          *int32   `protobuf:"zigzag32,2,opt,name=transport_id" json:"transport_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,3,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TransPortChangeScene) Reset()         { *m = C2S_TransPortChangeScene{} }
func (m *C2S_TransPortChangeScene) String() string { return proto.CompactTextString(m) }
func (*C2S_TransPortChangeScene) ProtoMessage()    {}
func (*C2S_TransPortChangeScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{65}
}
func (m *C2S_TransPortChangeScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TransPortChangeScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TransPortChangeScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TransPortChangeScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TransPortChangeScene.Merge(m, src)
}
func (m *C2S_TransPortChangeScene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TransPortChangeScene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TransPortChangeScene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TransPortChangeScene proto.InternalMessageInfo

func (m *C2S_TransPortChangeScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TransPortChangeScene) GetTransportId() int32 {
	if m != nil && m.TransportId != nil {
		return *m.TransportId
	}
	return 0
}

func (m *C2S_TransPortChangeScene) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

// 请求传送点切换场景
type S2C_TransPortChangeScene struct {
	Ret                  *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	TransportId          *int32          `protobuf:"zigzag32,3,opt,name=transport_id" json:"transport_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TransPortChangeScene) Reset()         { *m = S2C_TransPortChangeScene{} }
func (m *S2C_TransPortChangeScene) String() string { return proto.CompactTextString(m) }
func (*S2C_TransPortChangeScene) ProtoMessage()    {}
func (*S2C_TransPortChangeScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{66}
}
func (m *S2C_TransPortChangeScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TransPortChangeScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TransPortChangeScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TransPortChangeScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TransPortChangeScene.Merge(m, src)
}
func (m *S2C_TransPortChangeScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TransPortChangeScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TransPortChangeScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TransPortChangeScene proto.InternalMessageInfo

func (m *S2C_TransPortChangeScene) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TransPortChangeScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_TransPortChangeScene) GetTransportId() int32 {
	if m != nil && m.TransportId != nil {
		return *m.TransportId
	}
	return 0
}

// 请求NPC切换场景
type C2S_NPC_ChangeScene struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NpcId                *int32   `protobuf:"zigzag32,2,opt,name=npc_id" json:"npc_id,omitempty"`
	SceneType            *int32   `protobuf:"zigzag32,3,opt,name=scene_type" json:"scene_type,omitempty"`
	TransInfoId          *int32   `protobuf:"zigzag32,4,opt,name=trans_info_id" json:"trans_info_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,5,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_NPC_ChangeScene) Reset()         { *m = C2S_NPC_ChangeScene{} }
func (m *C2S_NPC_ChangeScene) String() string { return proto.CompactTextString(m) }
func (*C2S_NPC_ChangeScene) ProtoMessage()    {}
func (*C2S_NPC_ChangeScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{67}
}
func (m *C2S_NPC_ChangeScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_NPC_ChangeScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_NPC_ChangeScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_NPC_ChangeScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_NPC_ChangeScene.Merge(m, src)
}
func (m *C2S_NPC_ChangeScene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_NPC_ChangeScene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_NPC_ChangeScene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_NPC_ChangeScene proto.InternalMessageInfo

func (m *C2S_NPC_ChangeScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_NPC_ChangeScene) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *C2S_NPC_ChangeScene) GetSceneType() int32 {
	if m != nil && m.SceneType != nil {
		return *m.SceneType
	}
	return 0
}

func (m *C2S_NPC_ChangeScene) GetTransInfoId() int32 {
	if m != nil && m.TransInfoId != nil {
		return *m.TransInfoId
	}
	return 0
}

func (m *C2S_NPC_ChangeScene) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

// 请求NPC切换场景
type S2C_NPC_ChangeScene struct {
	Ret                  *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	NpcId                *int32          `protobuf:"zigzag32,3,opt,name=npc_id" json:"npc_id,omitempty"`
	SceneType            *int32          `protobuf:"zigzag32,4,opt,name=scene_type" json:"scene_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_NPC_ChangeScene) Reset()         { *m = S2C_NPC_ChangeScene{} }
func (m *S2C_NPC_ChangeScene) String() string { return proto.CompactTextString(m) }
func (*S2C_NPC_ChangeScene) ProtoMessage()    {}
func (*S2C_NPC_ChangeScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{68}
}
func (m *S2C_NPC_ChangeScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_NPC_ChangeScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_NPC_ChangeScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_NPC_ChangeScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_NPC_ChangeScene.Merge(m, src)
}
func (m *S2C_NPC_ChangeScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_NPC_ChangeScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_NPC_ChangeScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_NPC_ChangeScene proto.InternalMessageInfo

func (m *S2C_NPC_ChangeScene) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_NPC_ChangeScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_NPC_ChangeScene) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *S2C_NPC_ChangeScene) GetSceneType() int32 {
	if m != nil && m.SceneType != nil {
		return *m.SceneType
	}
	return 0
}

// 请求,回复背包道具
type C2S_Bag_Item struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Bag_Item) Reset()         { *m = C2S_Bag_Item{} }
func (m *C2S_Bag_Item) String() string { return proto.CompactTextString(m) }
func (*C2S_Bag_Item) ProtoMessage()    {}
func (*C2S_Bag_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{69}
}
func (m *C2S_Bag_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Bag_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Bag_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Bag_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Bag_Item.Merge(m, src)
}
func (m *C2S_Bag_Item) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Bag_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Bag_Item.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Bag_Item proto.InternalMessageInfo

func (m *C2S_Bag_Item) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_Bag_Item struct {
	Items                *ListDbBagItems `protobuf:"bytes,1,opt,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Bag_Item) Reset()         { *m = S2C_Bag_Item{} }
func (m *S2C_Bag_Item) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Item) ProtoMessage()    {}
func (*S2C_Bag_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{70}
}
func (m *S2C_Bag_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Item.Merge(m, src)
}
func (m *S2C_Bag_Item) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Item.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Item proto.InternalMessageInfo

func (m *S2C_Bag_Item) GetItems() *ListDbBagItems {
	if m != nil {
		return m.Items
	}
	return nil
}

type C2S_Use_Item struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ItemIndex            *int64   `protobuf:"zigzag64,2,opt,name=item_index" json:"item_index,omitempty"`
	ItemCount            *int32   `protobuf:"zigzag32,3,opt,name=item_count" json:"item_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Use_Item) Reset()         { *m = C2S_Use_Item{} }
func (m *C2S_Use_Item) String() string { return proto.CompactTextString(m) }
func (*C2S_Use_Item) ProtoMessage()    {}
func (*C2S_Use_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{71}
}
func (m *C2S_Use_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Use_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Use_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Use_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Use_Item.Merge(m, src)
}
func (m *C2S_Use_Item) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Use_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Use_Item.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Use_Item proto.InternalMessageInfo

func (m *C2S_Use_Item) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Use_Item) GetItemIndex() int64 {
	if m != nil && m.ItemIndex != nil {
		return *m.ItemIndex
	}
	return 0
}

func (m *C2S_Use_Item) GetItemCount() int32 {
	if m != nil && m.ItemCount != nil {
		return *m.ItemCount
	}
	return 0
}

type S2C_Use_Item struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ItemIndex            *int64          `protobuf:"zigzag64,2,opt,name=item_index" json:"item_index,omitempty"`
	NewItemInfo          *DbBagItem      `protobuf:"bytes,3,opt,name=new_item_info" json:"new_item_info,omitempty"`
	ItemType             *int32          `protobuf:"zigzag32,4,opt,name=item_type" json:"item_type,omitempty"`
	InsertItem           []*DbBagEquip   `protobuf:"bytes,5,rep,name=insert_item" json:"insert_item,omitempty"`
	RemoveItem           []*DbBagEquip   `protobuf:"bytes,6,rep,name=remove_item" json:"remove_item,omitempty"`
	DressItem            []*DbRoleEquip  `protobuf:"bytes,7,rep,name=dress_item" json:"dress_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Use_Item) Reset()         { *m = S2C_Use_Item{} }
func (m *S2C_Use_Item) String() string { return proto.CompactTextString(m) }
func (*S2C_Use_Item) ProtoMessage()    {}
func (*S2C_Use_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{72}
}
func (m *S2C_Use_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Use_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Use_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Use_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Use_Item.Merge(m, src)
}
func (m *S2C_Use_Item) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Use_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Use_Item.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Use_Item proto.InternalMessageInfo

func (m *S2C_Use_Item) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Use_Item) GetItemIndex() int64 {
	if m != nil && m.ItemIndex != nil {
		return *m.ItemIndex
	}
	return 0
}

func (m *S2C_Use_Item) GetNewItemInfo() *DbBagItem {
	if m != nil {
		return m.NewItemInfo
	}
	return nil
}

func (m *S2C_Use_Item) GetItemType() int32 {
	if m != nil && m.ItemType != nil {
		return *m.ItemType
	}
	return 0
}

func (m *S2C_Use_Item) GetInsertItem() []*DbBagEquip {
	if m != nil {
		return m.InsertItem
	}
	return nil
}

func (m *S2C_Use_Item) GetRemoveItem() []*DbBagEquip {
	if m != nil {
		return m.RemoveItem
	}
	return nil
}

func (m *S2C_Use_Item) GetDressItem() []*DbRoleEquip {
	if m != nil {
		return m.DressItem
	}
	return nil
}

// 卖道具
type C2S_Sell_Item struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ItemIndex            *int64   `protobuf:"zigzag64,2,opt,name=item_index" json:"item_index,omitempty"`
	ItemCount            *int32   `protobuf:"zigzag32,3,opt,name=item_count" json:"item_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Sell_Item) Reset()         { *m = C2S_Sell_Item{} }
func (m *C2S_Sell_Item) String() string { return proto.CompactTextString(m) }
func (*C2S_Sell_Item) ProtoMessage()    {}
func (*C2S_Sell_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{73}
}
func (m *C2S_Sell_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Sell_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Sell_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Sell_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Sell_Item.Merge(m, src)
}
func (m *C2S_Sell_Item) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Sell_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Sell_Item.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Sell_Item proto.InternalMessageInfo

func (m *C2S_Sell_Item) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Sell_Item) GetItemIndex() int64 {
	if m != nil && m.ItemIndex != nil {
		return *m.ItemIndex
	}
	return 0
}

func (m *C2S_Sell_Item) GetItemCount() int32 {
	if m != nil && m.ItemCount != nil {
		return *m.ItemCount
	}
	return 0
}

type S2C_Sell_Item struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ItemIndex            *int64          `protobuf:"zigzag64,2,opt,name=item_index" json:"item_index,omitempty"`
	ItemCount            *int32          `protobuf:"zigzag32,3,opt,name=item_count" json:"item_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Sell_Item) Reset()         { *m = S2C_Sell_Item{} }
func (m *S2C_Sell_Item) String() string { return proto.CompactTextString(m) }
func (*S2C_Sell_Item) ProtoMessage()    {}
func (*S2C_Sell_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{74}
}
func (m *S2C_Sell_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Sell_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Sell_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Sell_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Sell_Item.Merge(m, src)
}
func (m *S2C_Sell_Item) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Sell_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Sell_Item.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Sell_Item proto.InternalMessageInfo

func (m *S2C_Sell_Item) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Sell_Item) GetItemIndex() int64 {
	if m != nil && m.ItemIndex != nil {
		return *m.ItemIndex
	}
	return 0
}

func (m *S2C_Sell_Item) GetItemCount() int32 {
	if m != nil && m.ItemCount != nil {
		return *m.ItemCount
	}
	return 0
}

//卖装备
type C2S_Sell_Equip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64   `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Sell_Equip) Reset()         { *m = C2S_Sell_Equip{} }
func (m *C2S_Sell_Equip) String() string { return proto.CompactTextString(m) }
func (*C2S_Sell_Equip) ProtoMessage()    {}
func (*C2S_Sell_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{75}
}
func (m *C2S_Sell_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Sell_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Sell_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Sell_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Sell_Equip.Merge(m, src)
}
func (m *C2S_Sell_Equip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Sell_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Sell_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Sell_Equip proto.InternalMessageInfo

func (m *C2S_Sell_Equip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Sell_Equip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

type S2C_Sell_Equip struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipIndex           *int64          `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Sell_Equip) Reset()         { *m = S2C_Sell_Equip{} }
func (m *S2C_Sell_Equip) String() string { return proto.CompactTextString(m) }
func (*S2C_Sell_Equip) ProtoMessage()    {}
func (*S2C_Sell_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{76}
}
func (m *S2C_Sell_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Sell_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Sell_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Sell_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Sell_Equip.Merge(m, src)
}
func (m *S2C_Sell_Equip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Sell_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Sell_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Sell_Equip proto.InternalMessageInfo

func (m *S2C_Sell_Equip) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Sell_Equip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

// 请求,回复背包装备
type C2S_Bag_Equip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Bag_Equip) Reset()         { *m = C2S_Bag_Equip{} }
func (m *C2S_Bag_Equip) String() string { return proto.CompactTextString(m) }
func (*C2S_Bag_Equip) ProtoMessage()    {}
func (*C2S_Bag_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{77}
}
func (m *C2S_Bag_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Bag_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Bag_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Bag_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Bag_Equip.Merge(m, src)
}
func (m *C2S_Bag_Equip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Bag_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Bag_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Bag_Equip proto.InternalMessageInfo

func (m *C2S_Bag_Equip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_Bag_Equip struct {
	Equips               *ListDbBagEquips `protobuf:"bytes,1,opt,name=equips" json:"equips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *S2C_Bag_Equip) Reset()         { *m = S2C_Bag_Equip{} }
func (m *S2C_Bag_Equip) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Equip) ProtoMessage()    {}
func (*S2C_Bag_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{78}
}
func (m *S2C_Bag_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Equip.Merge(m, src)
}
func (m *S2C_Bag_Equip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Equip proto.InternalMessageInfo

func (m *S2C_Bag_Equip) GetEquips() *ListDbBagEquips {
	if m != nil {
		return m.Equips
	}
	return nil
}

type C2S_Dress_Equip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64   `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Dress_Equip) Reset()         { *m = C2S_Dress_Equip{} }
func (m *C2S_Dress_Equip) String() string { return proto.CompactTextString(m) }
func (*C2S_Dress_Equip) ProtoMessage()    {}
func (*C2S_Dress_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{79}
}
func (m *C2S_Dress_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Dress_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Dress_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Dress_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Dress_Equip.Merge(m, src)
}
func (m *C2S_Dress_Equip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Dress_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Dress_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Dress_Equip proto.InternalMessageInfo

func (m *C2S_Dress_Equip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Dress_Equip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

type S2C_Dress_Equip struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipIndex           *int64          `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	EquipInfo            *DbRoleEquip    `protobuf:"bytes,3,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Dress_Equip) Reset()         { *m = S2C_Dress_Equip{} }
func (m *S2C_Dress_Equip) String() string { return proto.CompactTextString(m) }
func (*S2C_Dress_Equip) ProtoMessage()    {}
func (*S2C_Dress_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{80}
}
func (m *S2C_Dress_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Dress_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Dress_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Dress_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Dress_Equip.Merge(m, src)
}
func (m *S2C_Dress_Equip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Dress_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Dress_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Dress_Equip proto.InternalMessageInfo

func (m *S2C_Dress_Equip) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Dress_Equip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

func (m *S2C_Dress_Equip) GetEquipInfo() *DbRoleEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 请求,回复角色装备
type C2S_Role_Equip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Role_Equip) Reset()         { *m = C2S_Role_Equip{} }
func (m *C2S_Role_Equip) String() string { return proto.CompactTextString(m) }
func (*C2S_Role_Equip) ProtoMessage()    {}
func (*C2S_Role_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{81}
}
func (m *C2S_Role_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Role_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Role_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Role_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Role_Equip.Merge(m, src)
}
func (m *C2S_Role_Equip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Role_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Role_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Role_Equip proto.InternalMessageInfo

func (m *C2S_Role_Equip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_Role_Equip struct {
	Equips               *ListDbRoleEquips `protobuf:"bytes,1,opt,name=equips" json:"equips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_Role_Equip) Reset()         { *m = S2C_Role_Equip{} }
func (m *S2C_Role_Equip) String() string { return proto.CompactTextString(m) }
func (*S2C_Role_Equip) ProtoMessage()    {}
func (*S2C_Role_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{82}
}
func (m *S2C_Role_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Role_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Role_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Role_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Role_Equip.Merge(m, src)
}
func (m *S2C_Role_Equip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Role_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Role_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Role_Equip proto.InternalMessageInfo

func (m *S2C_Role_Equip) GetEquips() *ListDbRoleEquips {
	if m != nil {
		return m.Equips
	}
	return nil
}

type C2S_TakeOff_Equip struct {
	RoleIndex            *int64             `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64             `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	SiteType             *E_EQUIP_SITE_TYPE `protobuf:"varint,3,opt,name=site_type,enum=pbd.E_EQUIP_SITE_TYPE" json:"site_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *C2S_TakeOff_Equip) Reset()         { *m = C2S_TakeOff_Equip{} }
func (m *C2S_TakeOff_Equip) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeOff_Equip) ProtoMessage()    {}
func (*C2S_TakeOff_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{83}
}
func (m *C2S_TakeOff_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeOff_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeOff_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeOff_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeOff_Equip.Merge(m, src)
}
func (m *C2S_TakeOff_Equip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeOff_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeOff_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeOff_Equip proto.InternalMessageInfo

func (m *C2S_TakeOff_Equip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeOff_Equip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

func (m *C2S_TakeOff_Equip) GetSiteType() E_EQUIP_SITE_TYPE {
	if m != nil && m.SiteType != nil {
		return *m.SiteType
	}
	return E_EQUIP_SITE_TYPE_EEST_HELMET
}

type S2C_TakeOff_Equip struct {
	RetCode              *E_MSG_RET_CODE    `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipIndex           *int64             `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	SiteType             *E_EQUIP_SITE_TYPE `protobuf:"varint,3,opt,name=site_type,enum=pbd.E_EQUIP_SITE_TYPE" json:"site_type,omitempty"`
	EquipInfo            *DbRoleEquip       `protobuf:"bytes,4,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_TakeOff_Equip) Reset()         { *m = S2C_TakeOff_Equip{} }
func (m *S2C_TakeOff_Equip) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeOff_Equip) ProtoMessage()    {}
func (*S2C_TakeOff_Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{84}
}
func (m *S2C_TakeOff_Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeOff_Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeOff_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeOff_Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeOff_Equip.Merge(m, src)
}
func (m *S2C_TakeOff_Equip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeOff_Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeOff_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeOff_Equip proto.InternalMessageInfo

func (m *S2C_TakeOff_Equip) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeOff_Equip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

func (m *S2C_TakeOff_Equip) GetSiteType() E_EQUIP_SITE_TYPE {
	if m != nil && m.SiteType != nil {
		return *m.SiteType
	}
	return E_EQUIP_SITE_TYPE_EEST_HELMET
}

func (m *S2C_TakeOff_Equip) GetEquipInfo() *DbRoleEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 通知背包物品变更
type S2C_Bag_Item_Insert struct {
	ItemInfo             *DbBagItem `protobuf:"bytes,1,opt,name=item_info" json:"item_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2C_Bag_Item_Insert) Reset()         { *m = S2C_Bag_Item_Insert{} }
func (m *S2C_Bag_Item_Insert) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Item_Insert) ProtoMessage()    {}
func (*S2C_Bag_Item_Insert) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{85}
}
func (m *S2C_Bag_Item_Insert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Item_Insert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Item_Insert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Item_Insert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Item_Insert.Merge(m, src)
}
func (m *S2C_Bag_Item_Insert) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Item_Insert) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Item_Insert.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Item_Insert proto.InternalMessageInfo

func (m *S2C_Bag_Item_Insert) GetItemInfo() *DbBagItem {
	if m != nil {
		return m.ItemInfo
	}
	return nil
}

type S2C_Bag_Item_Remove struct {
	ItemInfo             *DbBagItem `protobuf:"bytes,1,opt,name=item_info" json:"item_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2C_Bag_Item_Remove) Reset()         { *m = S2C_Bag_Item_Remove{} }
func (m *S2C_Bag_Item_Remove) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Item_Remove) ProtoMessage()    {}
func (*S2C_Bag_Item_Remove) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{86}
}
func (m *S2C_Bag_Item_Remove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Item_Remove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Item_Remove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Item_Remove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Item_Remove.Merge(m, src)
}
func (m *S2C_Bag_Item_Remove) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Item_Remove) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Item_Remove.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Item_Remove proto.InternalMessageInfo

func (m *S2C_Bag_Item_Remove) GetItemInfo() *DbBagItem {
	if m != nil {
		return m.ItemInfo
	}
	return nil
}

// 通知背包装备变更
type S2C_Bag_Equip_Insert struct {
	EquipInfo            []*DbBagEquip `protobuf:"bytes,1,rep,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_Bag_Equip_Insert) Reset()         { *m = S2C_Bag_Equip_Insert{} }
func (m *S2C_Bag_Equip_Insert) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Equip_Insert) ProtoMessage()    {}
func (*S2C_Bag_Equip_Insert) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{87}
}
func (m *S2C_Bag_Equip_Insert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Equip_Insert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Equip_Insert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Equip_Insert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Equip_Insert.Merge(m, src)
}
func (m *S2C_Bag_Equip_Insert) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Equip_Insert) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Equip_Insert.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Equip_Insert proto.InternalMessageInfo

func (m *S2C_Bag_Equip_Insert) GetEquipInfo() []*DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

type S2C_Bag_Equip_Remove struct {
	EquipInfo            []*DbBagEquip `protobuf:"bytes,1,rep,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_Bag_Equip_Remove) Reset()         { *m = S2C_Bag_Equip_Remove{} }
func (m *S2C_Bag_Equip_Remove) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Equip_Remove) ProtoMessage()    {}
func (*S2C_Bag_Equip_Remove) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{88}
}
func (m *S2C_Bag_Equip_Remove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Equip_Remove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Equip_Remove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Equip_Remove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Equip_Remove.Merge(m, src)
}
func (m *S2C_Bag_Equip_Remove) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Equip_Remove) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Equip_Remove.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Equip_Remove proto.InternalMessageInfo

func (m *S2C_Bag_Equip_Remove) GetEquipInfo() []*DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 通知client包裹增加道具
type S2C_Bag_Item_Add struct {
	ItemInfo             *DbBagItem `protobuf:"bytes,1,opt,name=item_info" json:"item_info,omitempty"`
	CountDiff            []int32    `protobuf:"zigzag32,2,rep,name=count_diff" json:"count_diff,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2C_Bag_Item_Add) Reset()         { *m = S2C_Bag_Item_Add{} }
func (m *S2C_Bag_Item_Add) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Item_Add) ProtoMessage()    {}
func (*S2C_Bag_Item_Add) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{89}
}
func (m *S2C_Bag_Item_Add) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Item_Add) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Item_Add.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Item_Add) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Item_Add.Merge(m, src)
}
func (m *S2C_Bag_Item_Add) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Item_Add) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Item_Add.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Item_Add proto.InternalMessageInfo

func (m *S2C_Bag_Item_Add) GetItemInfo() *DbBagItem {
	if m != nil {
		return m.ItemInfo
	}
	return nil
}

func (m *S2C_Bag_Item_Add) GetCountDiff() []int32 {
	if m != nil {
		return m.CountDiff
	}
	return nil
}

// 通知client包裹增加一件装备
type S2C_Bag_Equip_Add struct {
	EquipInfo            []*DbBagEquip `protobuf:"bytes,1,rep,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_Bag_Equip_Add) Reset()         { *m = S2C_Bag_Equip_Add{} }
func (m *S2C_Bag_Equip_Add) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Equip_Add) ProtoMessage()    {}
func (*S2C_Bag_Equip_Add) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{90}
}
func (m *S2C_Bag_Equip_Add) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Equip_Add) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Equip_Add.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Equip_Add) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Equip_Add.Merge(m, src)
}
func (m *S2C_Bag_Equip_Add) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Equip_Add) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Equip_Add.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Equip_Add proto.InternalMessageInfo

func (m *S2C_Bag_Equip_Add) GetEquipInfo() []*DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 通知client包裹指定装备更新
type S2C_Bag_Equip_Update struct {
	EquipInfo            []*DbBagEquip `protobuf:"bytes,1,rep,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_Bag_Equip_Update) Reset()         { *m = S2C_Bag_Equip_Update{} }
func (m *S2C_Bag_Equip_Update) String() string { return proto.CompactTextString(m) }
func (*S2C_Bag_Equip_Update) ProtoMessage()    {}
func (*S2C_Bag_Equip_Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{91}
}
func (m *S2C_Bag_Equip_Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Bag_Equip_Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Bag_Equip_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Bag_Equip_Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Bag_Equip_Update.Merge(m, src)
}
func (m *S2C_Bag_Equip_Update) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Bag_Equip_Update) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Bag_Equip_Update.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Bag_Equip_Update proto.InternalMessageInfo

func (m *S2C_Bag_Equip_Update) GetEquipInfo() []*DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 通知client玩家身上装备更新
type S2C_Role_Equip_Update struct {
	RoleEquip            *DbRoleEquip `protobuf:"bytes,1,opt,name=role_equip" json:"role_equip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *S2C_Role_Equip_Update) Reset()         { *m = S2C_Role_Equip_Update{} }
func (m *S2C_Role_Equip_Update) String() string { return proto.CompactTextString(m) }
func (*S2C_Role_Equip_Update) ProtoMessage()    {}
func (*S2C_Role_Equip_Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{92}
}
func (m *S2C_Role_Equip_Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Role_Equip_Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Role_Equip_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Role_Equip_Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Role_Equip_Update.Merge(m, src)
}
func (m *S2C_Role_Equip_Update) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Role_Equip_Update) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Role_Equip_Update.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Role_Equip_Update proto.InternalMessageInfo

func (m *S2C_Role_Equip_Update) GetRoleEquip() *DbRoleEquip {
	if m != nil {
		return m.RoleEquip
	}
	return nil
}

// 请求套装商店信息
type C2S_SuitShopInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SuitShopInfo) Reset()         { *m = C2S_SuitShopInfo{} }
func (m *C2S_SuitShopInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_SuitShopInfo) ProtoMessage()    {}
func (*C2S_SuitShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{93}
}
func (m *C2S_SuitShopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SuitShopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SuitShopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SuitShopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SuitShopInfo.Merge(m, src)
}
func (m *C2S_SuitShopInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SuitShopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SuitShopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SuitShopInfo proto.InternalMessageInfo

func (m *C2S_SuitShopInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_SuitShopInfo struct {
	RoleIndex                 *int64           `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	BuySuit                   []*SuitGoodsInfo `protobuf:"bytes,2,rep,name=buy_suit" json:"buy_suit,omitempty"`
	SuitShopSurplusUpdateTime *int64           `protobuf:"zigzag64,3,opt,name=suit_shop_surplus_update_time" json:"suit_shop_surplus_update_time,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}         `json:"-"`
	XXX_unrecognized          []byte           `json:"-"`
	XXX_sizecache             int32            `json:"-"`
}

func (m *S2C_SuitShopInfo) Reset()         { *m = S2C_SuitShopInfo{} }
func (m *S2C_SuitShopInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SuitShopInfo) ProtoMessage()    {}
func (*S2C_SuitShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{94}
}
func (m *S2C_SuitShopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SuitShopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SuitShopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SuitShopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SuitShopInfo.Merge(m, src)
}
func (m *S2C_SuitShopInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SuitShopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SuitShopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SuitShopInfo proto.InternalMessageInfo

func (m *S2C_SuitShopInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_SuitShopInfo) GetBuySuit() []*SuitGoodsInfo {
	if m != nil {
		return m.BuySuit
	}
	return nil
}

func (m *S2C_SuitShopInfo) GetSuitShopSurplusUpdateTime() int64 {
	if m != nil && m.SuitShopSurplusUpdateTime != nil {
		return *m.SuitShopSurplusUpdateTime
	}
	return 0
}

// 请求购买套装
type C2S_BuySuitInShop struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SuitShopId           *int32   `protobuf:"zigzag32,2,opt,name=suit_shop_id" json:"suit_shop_id,omitempty"`
	SuitDuration         *int32   `protobuf:"zigzag32,3,opt,name=suit_duration" json:"suit_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BuySuitInShop) Reset()         { *m = C2S_BuySuitInShop{} }
func (m *C2S_BuySuitInShop) String() string { return proto.CompactTextString(m) }
func (*C2S_BuySuitInShop) ProtoMessage()    {}
func (*C2S_BuySuitInShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{95}
}
func (m *C2S_BuySuitInShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BuySuitInShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BuySuitInShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BuySuitInShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BuySuitInShop.Merge(m, src)
}
func (m *C2S_BuySuitInShop) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BuySuitInShop) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BuySuitInShop.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BuySuitInShop proto.InternalMessageInfo

func (m *C2S_BuySuitInShop) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_BuySuitInShop) GetSuitShopId() int32 {
	if m != nil && m.SuitShopId != nil {
		return *m.SuitShopId
	}
	return 0
}

func (m *C2S_BuySuitInShop) GetSuitDuration() int32 {
	if m != nil && m.SuitDuration != nil {
		return *m.SuitDuration
	}
	return 0
}

type S2C_BuySuitInShop struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	SuitShopId           *int32          `protobuf:"zigzag32,3,opt,name=suit_shop_id" json:"suit_shop_id,omitempty"`
	SuitDuration         *int32          `protobuf:"zigzag32,4,opt,name=suit_duration" json:"suit_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BuySuitInShop) Reset()         { *m = S2C_BuySuitInShop{} }
func (m *S2C_BuySuitInShop) String() string { return proto.CompactTextString(m) }
func (*S2C_BuySuitInShop) ProtoMessage()    {}
func (*S2C_BuySuitInShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{96}
}
func (m *S2C_BuySuitInShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BuySuitInShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BuySuitInShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BuySuitInShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BuySuitInShop.Merge(m, src)
}
func (m *S2C_BuySuitInShop) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BuySuitInShop) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BuySuitInShop.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BuySuitInShop proto.InternalMessageInfo

func (m *S2C_BuySuitInShop) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_BuySuitInShop) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_BuySuitInShop) GetSuitShopId() int32 {
	if m != nil && m.SuitShopId != nil {
		return *m.SuitShopId
	}
	return 0
}

func (m *S2C_BuySuitInShop) GetSuitDuration() int32 {
	if m != nil && m.SuitDuration != nil {
		return *m.SuitDuration
	}
	return 0
}

// 请求套装信息
type C2S_RoleSuitInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RoleSuitInfo) Reset()         { *m = C2S_RoleSuitInfo{} }
func (m *C2S_RoleSuitInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_RoleSuitInfo) ProtoMessage()    {}
func (*C2S_RoleSuitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{97}
}
func (m *C2S_RoleSuitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RoleSuitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RoleSuitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RoleSuitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RoleSuitInfo.Merge(m, src)
}
func (m *C2S_RoleSuitInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RoleSuitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RoleSuitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RoleSuitInfo proto.InternalMessageInfo

func (m *C2S_RoleSuitInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_RoleSuitInfo struct {
	RoleIndex            *int64              `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RoleSuitInfo         *ListDbRoleSuitInfo `protobuf:"bytes,3,opt,name=role_suit_info" json:"role_suit_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *S2C_RoleSuitInfo) Reset()         { *m = S2C_RoleSuitInfo{} }
func (m *S2C_RoleSuitInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleSuitInfo) ProtoMessage()    {}
func (*S2C_RoleSuitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{98}
}
func (m *S2C_RoleSuitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleSuitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleSuitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleSuitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleSuitInfo.Merge(m, src)
}
func (m *S2C_RoleSuitInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleSuitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleSuitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleSuitInfo proto.InternalMessageInfo

func (m *S2C_RoleSuitInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_RoleSuitInfo) GetRoleSuitInfo() *ListDbRoleSuitInfo {
	if m != nil {
		return m.RoleSuitInfo
	}
	return nil
}

// 请求穿套装
type C2S_DressSuit struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SuitId               *int32   `protobuf:"zigzag32,2,opt,name=suit_id" json:"suit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DressSuit) Reset()         { *m = C2S_DressSuit{} }
func (m *C2S_DressSuit) String() string { return proto.CompactTextString(m) }
func (*C2S_DressSuit) ProtoMessage()    {}
func (*C2S_DressSuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{99}
}
func (m *C2S_DressSuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DressSuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DressSuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DressSuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DressSuit.Merge(m, src)
}
func (m *C2S_DressSuit) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DressSuit) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DressSuit.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DressSuit proto.InternalMessageInfo

func (m *C2S_DressSuit) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DressSuit) GetSuitId() int32 {
	if m != nil && m.SuitId != nil {
		return *m.SuitId
	}
	return 0
}

type S2C_DressSuit struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	SuitId               *int32          `protobuf:"zigzag32,3,opt,name=suit_id" json:"suit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DressSuit) Reset()         { *m = S2C_DressSuit{} }
func (m *S2C_DressSuit) String() string { return proto.CompactTextString(m) }
func (*S2C_DressSuit) ProtoMessage()    {}
func (*S2C_DressSuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{100}
}
func (m *S2C_DressSuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DressSuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DressSuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DressSuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DressSuit.Merge(m, src)
}
func (m *S2C_DressSuit) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DressSuit) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DressSuit.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DressSuit proto.InternalMessageInfo

func (m *S2C_DressSuit) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DressSuit) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_DressSuit) GetSuitId() int32 {
	if m != nil && m.SuitId != nil {
		return *m.SuitId
	}
	return 0
}

// 请求脱套装
type C2S_TakeOffSuit struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SuitId               *int32   `protobuf:"zigzag32,2,opt,name=suit_id" json:"suit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TakeOffSuit) Reset()         { *m = C2S_TakeOffSuit{} }
func (m *C2S_TakeOffSuit) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeOffSuit) ProtoMessage()    {}
func (*C2S_TakeOffSuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{101}
}
func (m *C2S_TakeOffSuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeOffSuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeOffSuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeOffSuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeOffSuit.Merge(m, src)
}
func (m *C2S_TakeOffSuit) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeOffSuit) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeOffSuit.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeOffSuit proto.InternalMessageInfo

func (m *C2S_TakeOffSuit) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeOffSuit) GetSuitId() int32 {
	if m != nil && m.SuitId != nil {
		return *m.SuitId
	}
	return 0
}

type S2C_TakeOffSuit struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	SuitId               *int32          `protobuf:"zigzag32,3,opt,name=suit_id" json:"suit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TakeOffSuit) Reset()         { *m = S2C_TakeOffSuit{} }
func (m *S2C_TakeOffSuit) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeOffSuit) ProtoMessage()    {}
func (*S2C_TakeOffSuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{102}
}
func (m *S2C_TakeOffSuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeOffSuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeOffSuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeOffSuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeOffSuit.Merge(m, src)
}
func (m *S2C_TakeOffSuit) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeOffSuit) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeOffSuit.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeOffSuit proto.InternalMessageInfo

func (m *S2C_TakeOffSuit) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeOffSuit) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_TakeOffSuit) GetSuitId() int32 {
	if m != nil && m.SuitId != nil {
		return *m.SuitId
	}
	return 0
}

// 请求表情商店信息
type C2S_FaceShopInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FaceShopInfo) Reset()         { *m = C2S_FaceShopInfo{} }
func (m *C2S_FaceShopInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_FaceShopInfo) ProtoMessage()    {}
func (*C2S_FaceShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{103}
}
func (m *C2S_FaceShopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FaceShopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FaceShopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FaceShopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FaceShopInfo.Merge(m, src)
}
func (m *C2S_FaceShopInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FaceShopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FaceShopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FaceShopInfo proto.InternalMessageInfo

func (m *C2S_FaceShopInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_FaceShopInfo struct {
	RoleIndex                 *int64           `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	OriginalBuyFace           []*FaceGoodsInfo `protobuf:"bytes,2,rep,name=original_buy_face" json:"original_buy_face,omitempty"`
	DiscountBuyFace           []*FaceGoodsInfo `protobuf:"bytes,3,rep,name=discount_buy_face" json:"discount_buy_face,omitempty"`
	FaceShopSurplusUpdateTime *int32           `protobuf:"zigzag32,4,opt,name=face_shop_surplus_update_time" json:"face_shop_surplus_update_time,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}         `json:"-"`
	XXX_unrecognized          []byte           `json:"-"`
	XXX_sizecache             int32            `json:"-"`
}

func (m *S2C_FaceShopInfo) Reset()         { *m = S2C_FaceShopInfo{} }
func (m *S2C_FaceShopInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_FaceShopInfo) ProtoMessage()    {}
func (*S2C_FaceShopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{104}
}
func (m *S2C_FaceShopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FaceShopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FaceShopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FaceShopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FaceShopInfo.Merge(m, src)
}
func (m *S2C_FaceShopInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FaceShopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FaceShopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FaceShopInfo proto.InternalMessageInfo

func (m *S2C_FaceShopInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_FaceShopInfo) GetOriginalBuyFace() []*FaceGoodsInfo {
	if m != nil {
		return m.OriginalBuyFace
	}
	return nil
}

func (m *S2C_FaceShopInfo) GetDiscountBuyFace() []*FaceGoodsInfo {
	if m != nil {
		return m.DiscountBuyFace
	}
	return nil
}

func (m *S2C_FaceShopInfo) GetFaceShopSurplusUpdateTime() int32 {
	if m != nil && m.FaceShopSurplusUpdateTime != nil {
		return *m.FaceShopSurplusUpdateTime
	}
	return 0
}

// 请求购买表情
type C2S_BuyFaceInShop struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	FaceShopId           *int32   `protobuf:"zigzag32,2,opt,name=face_shop_id" json:"face_shop_id,omitempty"`
	FaceDuration         *int32   `protobuf:"zigzag32,3,opt,name=face_duration" json:"face_duration,omitempty"`
	FaceIsdiscount       *bool    `protobuf:"varint,4,opt,name=face_isdiscount" json:"face_isdiscount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BuyFaceInShop) Reset()         { *m = C2S_BuyFaceInShop{} }
func (m *C2S_BuyFaceInShop) String() string { return proto.CompactTextString(m) }
func (*C2S_BuyFaceInShop) ProtoMessage()    {}
func (*C2S_BuyFaceInShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{105}
}
func (m *C2S_BuyFaceInShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BuyFaceInShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BuyFaceInShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BuyFaceInShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BuyFaceInShop.Merge(m, src)
}
func (m *C2S_BuyFaceInShop) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BuyFaceInShop) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BuyFaceInShop.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BuyFaceInShop proto.InternalMessageInfo

func (m *C2S_BuyFaceInShop) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_BuyFaceInShop) GetFaceShopId() int32 {
	if m != nil && m.FaceShopId != nil {
		return *m.FaceShopId
	}
	return 0
}

func (m *C2S_BuyFaceInShop) GetFaceDuration() int32 {
	if m != nil && m.FaceDuration != nil {
		return *m.FaceDuration
	}
	return 0
}

func (m *C2S_BuyFaceInShop) GetFaceIsdiscount() bool {
	if m != nil && m.FaceIsdiscount != nil {
		return *m.FaceIsdiscount
	}
	return false
}

type S2C_BuyFaceInShop struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	FaceShopId           *int32          `protobuf:"zigzag32,3,opt,name=face_shop_id" json:"face_shop_id,omitempty"`
	FaceDuration         *int32          `protobuf:"zigzag32,4,opt,name=face_duration" json:"face_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BuyFaceInShop) Reset()         { *m = S2C_BuyFaceInShop{} }
func (m *S2C_BuyFaceInShop) String() string { return proto.CompactTextString(m) }
func (*S2C_BuyFaceInShop) ProtoMessage()    {}
func (*S2C_BuyFaceInShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{106}
}
func (m *S2C_BuyFaceInShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BuyFaceInShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BuyFaceInShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BuyFaceInShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BuyFaceInShop.Merge(m, src)
}
func (m *S2C_BuyFaceInShop) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BuyFaceInShop) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BuyFaceInShop.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BuyFaceInShop proto.InternalMessageInfo

func (m *S2C_BuyFaceInShop) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_BuyFaceInShop) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_BuyFaceInShop) GetFaceShopId() int32 {
	if m != nil && m.FaceShopId != nil {
		return *m.FaceShopId
	}
	return 0
}

func (m *S2C_BuyFaceInShop) GetFaceDuration() int32 {
	if m != nil && m.FaceDuration != nil {
		return *m.FaceDuration
	}
	return 0
}

// 请求表情信息
type C2S_RoleFaceInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RoleFaceInfo) Reset()         { *m = C2S_RoleFaceInfo{} }
func (m *C2S_RoleFaceInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_RoleFaceInfo) ProtoMessage()    {}
func (*C2S_RoleFaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{107}
}
func (m *C2S_RoleFaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RoleFaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RoleFaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RoleFaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RoleFaceInfo.Merge(m, src)
}
func (m *C2S_RoleFaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RoleFaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RoleFaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RoleFaceInfo proto.InternalMessageInfo

func (m *C2S_RoleFaceInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_RoleFaceInfo struct {
	RoleIndex            *int64              `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RoleFaceInfo         *ListDbRoleFaceInfo `protobuf:"bytes,3,opt,name=role_face_info" json:"role_face_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *S2C_RoleFaceInfo) Reset()         { *m = S2C_RoleFaceInfo{} }
func (m *S2C_RoleFaceInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleFaceInfo) ProtoMessage()    {}
func (*S2C_RoleFaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{108}
}
func (m *S2C_RoleFaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleFaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleFaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleFaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleFaceInfo.Merge(m, src)
}
func (m *S2C_RoleFaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleFaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleFaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleFaceInfo proto.InternalMessageInfo

func (m *S2C_RoleFaceInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_RoleFaceInfo) GetRoleFaceInfo() *ListDbRoleFaceInfo {
	if m != nil {
		return m.RoleFaceInfo
	}
	return nil
}

// 请求穿表情
type C2S_DressFace struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	FaceId               *int32   `protobuf:"zigzag32,2,opt,name=face_id" json:"face_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DressFace) Reset()         { *m = C2S_DressFace{} }
func (m *C2S_DressFace) String() string { return proto.CompactTextString(m) }
func (*C2S_DressFace) ProtoMessage()    {}
func (*C2S_DressFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{109}
}
func (m *C2S_DressFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DressFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DressFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DressFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DressFace.Merge(m, src)
}
func (m *C2S_DressFace) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DressFace) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DressFace.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DressFace proto.InternalMessageInfo

func (m *C2S_DressFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DressFace) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

type S2C_DressFace struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	FaceId               *int32          `protobuf:"zigzag32,3,opt,name=face_id" json:"face_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DressFace) Reset()         { *m = S2C_DressFace{} }
func (m *S2C_DressFace) String() string { return proto.CompactTextString(m) }
func (*S2C_DressFace) ProtoMessage()    {}
func (*S2C_DressFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{110}
}
func (m *S2C_DressFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DressFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DressFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DressFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DressFace.Merge(m, src)
}
func (m *S2C_DressFace) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DressFace) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DressFace.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DressFace proto.InternalMessageInfo

func (m *S2C_DressFace) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DressFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_DressFace) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

// 请求脱表情
type C2S_TakeOffFace struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	FaceId               *int32   `protobuf:"zigzag32,2,opt,name=face_id" json:"face_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TakeOffFace) Reset()         { *m = C2S_TakeOffFace{} }
func (m *C2S_TakeOffFace) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeOffFace) ProtoMessage()    {}
func (*C2S_TakeOffFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{111}
}
func (m *C2S_TakeOffFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeOffFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeOffFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeOffFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeOffFace.Merge(m, src)
}
func (m *C2S_TakeOffFace) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeOffFace) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeOffFace.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeOffFace proto.InternalMessageInfo

func (m *C2S_TakeOffFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeOffFace) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

type S2C_TakeOffFace struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	FaceId               *int32          `protobuf:"zigzag32,3,opt,name=face_id" json:"face_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TakeOffFace) Reset()         { *m = S2C_TakeOffFace{} }
func (m *S2C_TakeOffFace) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeOffFace) ProtoMessage()    {}
func (*S2C_TakeOffFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{112}
}
func (m *S2C_TakeOffFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeOffFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeOffFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeOffFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeOffFace.Merge(m, src)
}
func (m *S2C_TakeOffFace) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeOffFace) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeOffFace.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeOffFace proto.InternalMessageInfo

func (m *S2C_TakeOffFace) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeOffFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_TakeOffFace) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

// 手动刷新表情商店
type C2S_ManualUpdateFaceShop struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ManualUpdateFaceShop) Reset()         { *m = C2S_ManualUpdateFaceShop{} }
func (m *C2S_ManualUpdateFaceShop) String() string { return proto.CompactTextString(m) }
func (*C2S_ManualUpdateFaceShop) ProtoMessage()    {}
func (*C2S_ManualUpdateFaceShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{113}
}
func (m *C2S_ManualUpdateFaceShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ManualUpdateFaceShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ManualUpdateFaceShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ManualUpdateFaceShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ManualUpdateFaceShop.Merge(m, src)
}
func (m *C2S_ManualUpdateFaceShop) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ManualUpdateFaceShop) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ManualUpdateFaceShop.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ManualUpdateFaceShop proto.InternalMessageInfo

func (m *C2S_ManualUpdateFaceShop) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ManualUpdateFaceShop struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ManualUpdateFaceShop) Reset()         { *m = S2C_ManualUpdateFaceShop{} }
func (m *S2C_ManualUpdateFaceShop) String() string { return proto.CompactTextString(m) }
func (*S2C_ManualUpdateFaceShop) ProtoMessage()    {}
func (*S2C_ManualUpdateFaceShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{114}
}
func (m *S2C_ManualUpdateFaceShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ManualUpdateFaceShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ManualUpdateFaceShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ManualUpdateFaceShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ManualUpdateFaceShop.Merge(m, src)
}
func (m *S2C_ManualUpdateFaceShop) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ManualUpdateFaceShop) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ManualUpdateFaceShop.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ManualUpdateFaceShop proto.InternalMessageInfo

func (m *S2C_ManualUpdateFaceShop) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ManualUpdateFaceShop) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type KillMonster struct {
	Id                   *int32   `protobuf:"zigzag32,1,opt,name=id" json:"id,omitempty"`
	Count                *int32   `protobuf:"zigzag32,2,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KillMonster) Reset()         { *m = KillMonster{} }
func (m *KillMonster) String() string { return proto.CompactTextString(m) }
func (*KillMonster) ProtoMessage()    {}
func (*KillMonster) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{115}
}
func (m *KillMonster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KillMonster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KillMonster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KillMonster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillMonster.Merge(m, src)
}
func (m *KillMonster) XXX_Size() int {
	return m.Size()
}
func (m *KillMonster) XXX_DiscardUnknown() {
	xxx_messageInfo_KillMonster.DiscardUnknown(m)
}

var xxx_messageInfo_KillMonster proto.InternalMessageInfo

func (m *KillMonster) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *KillMonster) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 副本相关
type C2S_PassRisk struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Passed               *bool           `protobuf:"varint,2,opt,name=passed" json:"passed,omitempty"`
	ChapId               *int32          `protobuf:"zigzag32,3,opt,name=chap_id" json:"chap_id,omitempty"`
	LevelId              *int32          `protobuf:"zigzag32,4,opt,name=level_id" json:"level_id,omitempty"`
	SkillUseInfos        []*SkillUseInfo `protobuf:"bytes,5,rep,name=skill_use_infos" json:"skill_use_infos,omitempty"`
	BoxCount             *int32          `protobuf:"zigzag32,6,opt,name=box_count" json:"box_count,omitempty"`
	MonsterInfo          []*KillMonster  `protobuf:"bytes,7,rep,name=monster_info" json:"monster_info,omitempty"`
	Randomseed           []byte          `protobuf:"bytes,8,opt,name=randomseed" json:"randomseed,omitempty"`
	IsUseComposeSkill    *bool           `protobuf:"varint,9,opt,name=is_use_compose_skill" json:"is_use_compose_skill,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *C2S_PassRisk) Reset()         { *m = C2S_PassRisk{} }
func (m *C2S_PassRisk) String() string { return proto.CompactTextString(m) }
func (*C2S_PassRisk) ProtoMessage()    {}
func (*C2S_PassRisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{116}
}
func (m *C2S_PassRisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PassRisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PassRisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PassRisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PassRisk.Merge(m, src)
}
func (m *C2S_PassRisk) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PassRisk) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PassRisk.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PassRisk proto.InternalMessageInfo

func (m *C2S_PassRisk) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PassRisk) GetPassed() bool {
	if m != nil && m.Passed != nil {
		return *m.Passed
	}
	return false
}

func (m *C2S_PassRisk) GetChapId() int32 {
	if m != nil && m.ChapId != nil {
		return *m.ChapId
	}
	return 0
}

func (m *C2S_PassRisk) GetLevelId() int32 {
	if m != nil && m.LevelId != nil {
		return *m.LevelId
	}
	return 0
}

func (m *C2S_PassRisk) GetSkillUseInfos() []*SkillUseInfo {
	if m != nil {
		return m.SkillUseInfos
	}
	return nil
}

func (m *C2S_PassRisk) GetBoxCount() int32 {
	if m != nil && m.BoxCount != nil {
		return *m.BoxCount
	}
	return 0
}

func (m *C2S_PassRisk) GetMonsterInfo() []*KillMonster {
	if m != nil {
		return m.MonsterInfo
	}
	return nil
}

func (m *C2S_PassRisk) GetRandomseed() []byte {
	if m != nil {
		return m.Randomseed
	}
	return nil
}

func (m *C2S_PassRisk) GetIsUseComposeSkill() bool {
	if m != nil && m.IsUseComposeSkill != nil {
		return *m.IsUseComposeSkill
	}
	return false
}

type S2C_PassRisk struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	ChapterReward        *int32          `protobuf:"zigzag32,3,opt,name=chapter_reward" json:"chapter_reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PassRisk) Reset()         { *m = S2C_PassRisk{} }
func (m *S2C_PassRisk) String() string { return proto.CompactTextString(m) }
func (*S2C_PassRisk) ProtoMessage()    {}
func (*S2C_PassRisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{117}
}
func (m *S2C_PassRisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PassRisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PassRisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PassRisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PassRisk.Merge(m, src)
}
func (m *S2C_PassRisk) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PassRisk) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PassRisk.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PassRisk proto.InternalMessageInfo

const Default_S2C_PassRisk_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_PassRisk) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_PassRisk_RetCode
}

func (m *S2C_PassRisk) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *S2C_PassRisk) GetChapterReward() int32 {
	if m != nil && m.ChapterReward != nil {
		return *m.ChapterReward
	}
	return 0
}

// 开章节奖励宝箱
type C2S_OpenChapterBox struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ChapId               *int32   `protobuf:"zigzag32,2,opt,name=chap_id" json:"chap_id,omitempty"`
	Danger               *bool    `protobuf:"varint,3,opt,name=danger" json:"danger,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_OpenChapterBox) Reset()         { *m = C2S_OpenChapterBox{} }
func (m *C2S_OpenChapterBox) String() string { return proto.CompactTextString(m) }
func (*C2S_OpenChapterBox) ProtoMessage()    {}
func (*C2S_OpenChapterBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{118}
}
func (m *C2S_OpenChapterBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_OpenChapterBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_OpenChapterBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_OpenChapterBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_OpenChapterBox.Merge(m, src)
}
func (m *C2S_OpenChapterBox) XXX_Size() int {
	return m.Size()
}
func (m *C2S_OpenChapterBox) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_OpenChapterBox.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_OpenChapterBox proto.InternalMessageInfo

func (m *C2S_OpenChapterBox) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_OpenChapterBox) GetChapId() int32 {
	if m != nil && m.ChapId != nil {
		return *m.ChapId
	}
	return 0
}

func (m *C2S_OpenChapterBox) GetDanger() bool {
	if m != nil && m.Danger != nil {
		return *m.Danger
	}
	return false
}

type S2C_OpenChapterBox struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_OpenChapterBox) Reset()         { *m = S2C_OpenChapterBox{} }
func (m *S2C_OpenChapterBox) String() string { return proto.CompactTextString(m) }
func (*S2C_OpenChapterBox) ProtoMessage()    {}
func (*S2C_OpenChapterBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{119}
}
func (m *S2C_OpenChapterBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_OpenChapterBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_OpenChapterBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_OpenChapterBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_OpenChapterBox.Merge(m, src)
}
func (m *S2C_OpenChapterBox) XXX_Size() int {
	return m.Size()
}
func (m *S2C_OpenChapterBox) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_OpenChapterBox.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_OpenChapterBox proto.InternalMessageInfo

func (m *S2C_OpenChapterBox) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_OpenChapterBox) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 开章时空宝箱
type C2S_OpenRiskBox struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_OpenRiskBox) Reset()         { *m = C2S_OpenRiskBox{} }
func (m *C2S_OpenRiskBox) String() string { return proto.CompactTextString(m) }
func (*C2S_OpenRiskBox) ProtoMessage()    {}
func (*C2S_OpenRiskBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{120}
}
func (m *C2S_OpenRiskBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_OpenRiskBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_OpenRiskBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_OpenRiskBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_OpenRiskBox.Merge(m, src)
}
func (m *C2S_OpenRiskBox) XXX_Size() int {
	return m.Size()
}
func (m *C2S_OpenRiskBox) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_OpenRiskBox.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_OpenRiskBox proto.InternalMessageInfo

func (m *C2S_OpenRiskBox) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_OpenRiskBox struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_OpenRiskBox) Reset()         { *m = S2C_OpenRiskBox{} }
func (m *S2C_OpenRiskBox) String() string { return proto.CompactTextString(m) }
func (*S2C_OpenRiskBox) ProtoMessage()    {}
func (*S2C_OpenRiskBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{121}
}
func (m *S2C_OpenRiskBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_OpenRiskBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_OpenRiskBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_OpenRiskBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_OpenRiskBox.Merge(m, src)
}
func (m *S2C_OpenRiskBox) XXX_Size() int {
	return m.Size()
}
func (m *S2C_OpenRiskBox) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_OpenRiskBox.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_OpenRiskBox proto.InternalMessageInfo

func (m *S2C_OpenRiskBox) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_OpenRiskBox) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 重置精英副本已打斗次数
type C2S_ResetRiskFightCount struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ChapId               *int32   `protobuf:"zigzag32,2,opt,name=chap_id" json:"chap_id,omitempty"`
	RiskId               *int32   `protobuf:"zigzag32,3,opt,name=risk_id" json:"risk_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ResetRiskFightCount) Reset()         { *m = C2S_ResetRiskFightCount{} }
func (m *C2S_ResetRiskFightCount) String() string { return proto.CompactTextString(m) }
func (*C2S_ResetRiskFightCount) ProtoMessage()    {}
func (*C2S_ResetRiskFightCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{122}
}
func (m *C2S_ResetRiskFightCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ResetRiskFightCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ResetRiskFightCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ResetRiskFightCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ResetRiskFightCount.Merge(m, src)
}
func (m *C2S_ResetRiskFightCount) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ResetRiskFightCount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ResetRiskFightCount.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ResetRiskFightCount proto.InternalMessageInfo

func (m *C2S_ResetRiskFightCount) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ResetRiskFightCount) GetChapId() int32 {
	if m != nil && m.ChapId != nil {
		return *m.ChapId
	}
	return 0
}

func (m *C2S_ResetRiskFightCount) GetRiskId() int32 {
	if m != nil && m.RiskId != nil {
		return *m.RiskId
	}
	return 0
}

type S2C_ResetRiskFightCount struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ResetRiskFightCount) Reset()         { *m = S2C_ResetRiskFightCount{} }
func (m *S2C_ResetRiskFightCount) String() string { return proto.CompactTextString(m) }
func (*S2C_ResetRiskFightCount) ProtoMessage()    {}
func (*S2C_ResetRiskFightCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{123}
}
func (m *S2C_ResetRiskFightCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ResetRiskFightCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ResetRiskFightCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ResetRiskFightCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ResetRiskFightCount.Merge(m, src)
}
func (m *S2C_ResetRiskFightCount) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ResetRiskFightCount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ResetRiskFightCount.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ResetRiskFightCount proto.InternalMessageInfo

func (m *S2C_ResetRiskFightCount) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 准备进入冒险
type C2S_ReadyEnterRisk struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ChapId               *int32   `protobuf:"zigzag32,2,opt,name=chap_id" json:"chap_id,omitempty"`
	RiskId               *int32   `protobuf:"zigzag32,3,opt,name=risk_id" json:"risk_id,omitempty"`
	NpcId                *int32   `protobuf:"zigzag32,4,opt,name=npc_id" json:"npc_id,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,5,opt,name=scene_id" json:"scene_id,omitempty"`
	SceneType            *int32   `protobuf:"zigzag32,6,opt,name=scene_type" json:"scene_type,omitempty"`
	TransInfoId          *int32   `protobuf:"zigzag32,7,opt,name=trans_info_id" json:"trans_info_id,omitempty"`
	FriendId             *int64   `protobuf:"zigzag64,8,opt,name=friend_id" json:"friend_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,9,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	Danger               *bool    `protobuf:"varint,10,opt,name=danger" json:"danger,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ReadyEnterRisk) Reset()         { *m = C2S_ReadyEnterRisk{} }
func (m *C2S_ReadyEnterRisk) String() string { return proto.CompactTextString(m) }
func (*C2S_ReadyEnterRisk) ProtoMessage()    {}
func (*C2S_ReadyEnterRisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{124}
}
func (m *C2S_ReadyEnterRisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ReadyEnterRisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ReadyEnterRisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ReadyEnterRisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ReadyEnterRisk.Merge(m, src)
}
func (m *C2S_ReadyEnterRisk) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ReadyEnterRisk) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ReadyEnterRisk.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ReadyEnterRisk proto.InternalMessageInfo

func (m *C2S_ReadyEnterRisk) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetChapId() int32 {
	if m != nil && m.ChapId != nil {
		return *m.ChapId
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetRiskId() int32 {
	if m != nil && m.RiskId != nil {
		return *m.RiskId
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetSceneType() int32 {
	if m != nil && m.SceneType != nil {
		return *m.SceneType
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetTransInfoId() int32 {
	if m != nil && m.TransInfoId != nil {
		return *m.TransInfoId
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetFriendId() int64 {
	if m != nil && m.FriendId != nil {
		return *m.FriendId
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

func (m *C2S_ReadyEnterRisk) GetDanger() bool {
	if m != nil && m.Danger != nil {
		return *m.Danger
	}
	return false
}

type S2C_ReadyEnterRisk struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	RiskId               *int32          `protobuf:"zigzag32,3,opt,name=risk_id" json:"risk_id,omitempty"`
	NpcId                *int32          `protobuf:"zigzag32,4,opt,name=npc_id" json:"npc_id,omitempty"`
	SceneId              *int32          `protobuf:"zigzag32,5,opt,name=scene_id" json:"scene_id,omitempty"`
	TransInfoId          *int32          `protobuf:"zigzag32,6,opt,name=trans_info_id" json:"trans_info_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ReadyEnterRisk) Reset()         { *m = S2C_ReadyEnterRisk{} }
func (m *S2C_ReadyEnterRisk) String() string { return proto.CompactTextString(m) }
func (*S2C_ReadyEnterRisk) ProtoMessage()    {}
func (*S2C_ReadyEnterRisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{125}
}
func (m *S2C_ReadyEnterRisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ReadyEnterRisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ReadyEnterRisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ReadyEnterRisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ReadyEnterRisk.Merge(m, src)
}
func (m *S2C_ReadyEnterRisk) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ReadyEnterRisk) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ReadyEnterRisk.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ReadyEnterRisk proto.InternalMessageInfo

func (m *S2C_ReadyEnterRisk) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ReadyEnterRisk) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_ReadyEnterRisk) GetRiskId() int32 {
	if m != nil && m.RiskId != nil {
		return *m.RiskId
	}
	return 0
}

func (m *S2C_ReadyEnterRisk) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *S2C_ReadyEnterRisk) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2C_ReadyEnterRisk) GetTransInfoId() int32 {
	if m != nil && m.TransInfoId != nil {
		return *m.TransInfoId
	}
	return 0
}

// 通知好友助战冷却信息
type S2C_FriendAssistTime struct {
	LeftAssistTime       *int32   `protobuf:"zigzag32,1,opt,name=left_assist_time" json:"left_assist_time,omitempty"`
	FriendIndex          *int64   `protobuf:"zigzag64,2,opt,name=friend_index" json:"friend_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_FriendAssistTime) Reset()         { *m = S2C_FriendAssistTime{} }
func (m *S2C_FriendAssistTime) String() string { return proto.CompactTextString(m) }
func (*S2C_FriendAssistTime) ProtoMessage()    {}
func (*S2C_FriendAssistTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{126}
}
func (m *S2C_FriendAssistTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FriendAssistTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FriendAssistTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FriendAssistTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FriendAssistTime.Merge(m, src)
}
func (m *S2C_FriendAssistTime) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FriendAssistTime) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FriendAssistTime.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FriendAssistTime proto.InternalMessageInfo

func (m *S2C_FriendAssistTime) GetLeftAssistTime() int32 {
	if m != nil && m.LeftAssistTime != nil {
		return *m.LeftAssistTime
	}
	return 0
}

func (m *S2C_FriendAssistTime) GetFriendIndex() int64 {
	if m != nil && m.FriendIndex != nil {
		return *m.FriendIndex
	}
	return 0
}

// 增加NPC记录队列
type S2C_NPC_Add_RecordQueue struct {
	NpcId                *int32          `protobuf:"zigzag32,1,opt,name=npc_id" json:"npc_id,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	ShowInfo             *PlayerShowInfo `protobuf:"bytes,3,opt,name=show_info" json:"show_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_NPC_Add_RecordQueue) Reset()         { *m = S2C_NPC_Add_RecordQueue{} }
func (m *S2C_NPC_Add_RecordQueue) String() string { return proto.CompactTextString(m) }
func (*S2C_NPC_Add_RecordQueue) ProtoMessage()    {}
func (*S2C_NPC_Add_RecordQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{127}
}
func (m *S2C_NPC_Add_RecordQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_NPC_Add_RecordQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_NPC_Add_RecordQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_NPC_Add_RecordQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_NPC_Add_RecordQueue.Merge(m, src)
}
func (m *S2C_NPC_Add_RecordQueue) XXX_Size() int {
	return m.Size()
}
func (m *S2C_NPC_Add_RecordQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_NPC_Add_RecordQueue.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_NPC_Add_RecordQueue proto.InternalMessageInfo

func (m *S2C_NPC_Add_RecordQueue) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *S2C_NPC_Add_RecordQueue) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_NPC_Add_RecordQueue) GetShowInfo() *PlayerShowInfo {
	if m != nil {
		return m.ShowInfo
	}
	return nil
}

// 移除NPC记录队列
type S2C_NPC_Go_RecordQueue struct {
	NpcId                *int32   `protobuf:"zigzag32,1,opt,name=npc_id" json:"npc_id,omitempty"`
	RoleIndex            *int64   `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_NPC_Go_RecordQueue) Reset()         { *m = S2C_NPC_Go_RecordQueue{} }
func (m *S2C_NPC_Go_RecordQueue) String() string { return proto.CompactTextString(m) }
func (*S2C_NPC_Go_RecordQueue) ProtoMessage()    {}
func (*S2C_NPC_Go_RecordQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{128}
}
func (m *S2C_NPC_Go_RecordQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_NPC_Go_RecordQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_NPC_Go_RecordQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_NPC_Go_RecordQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_NPC_Go_RecordQueue.Merge(m, src)
}
func (m *S2C_NPC_Go_RecordQueue) XXX_Size() int {
	return m.Size()
}
func (m *S2C_NPC_Go_RecordQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_NPC_Go_RecordQueue.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_NPC_Go_RecordQueue proto.InternalMessageInfo

func (m *S2C_NPC_Go_RecordQueue) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *S2C_NPC_Go_RecordQueue) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 查询推荐好友
type C2S_Select_Recommend_Friends struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,2,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,3,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	FriendsCnt           *int32   `protobuf:"zigzag32,4,opt,name=friends_cnt" json:"friends_cnt,omitempty"`
	MinLvl               *int32   `protobuf:"zigzag32,5,opt,name=min_lvl" json:"min_lvl,omitempty"`
	MaxLvl               *int32   `protobuf:"zigzag32,6,opt,name=max_lvl" json:"max_lvl,omitempty"`
	FriendInfoIndex      []int64  `protobuf:"zigzag64,7,rep,name=friend_info_index" json:"friend_info_index,omitempty"`
	FriendNumLimit       *int32   `protobuf:"zigzag32,8,opt,name=friend_num_limit" json:"friend_num_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Select_Recommend_Friends) Reset()         { *m = C2S_Select_Recommend_Friends{} }
func (m *C2S_Select_Recommend_Friends) String() string { return proto.CompactTextString(m) }
func (*C2S_Select_Recommend_Friends) ProtoMessage()    {}
func (*C2S_Select_Recommend_Friends) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{129}
}
func (m *C2S_Select_Recommend_Friends) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Select_Recommend_Friends) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Select_Recommend_Friends.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Select_Recommend_Friends) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Select_Recommend_Friends.Merge(m, src)
}
func (m *C2S_Select_Recommend_Friends) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Select_Recommend_Friends) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Select_Recommend_Friends.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Select_Recommend_Friends proto.InternalMessageInfo

func (m *C2S_Select_Recommend_Friends) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Select_Recommend_Friends) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_Select_Recommend_Friends) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *C2S_Select_Recommend_Friends) GetFriendsCnt() int32 {
	if m != nil && m.FriendsCnt != nil {
		return *m.FriendsCnt
	}
	return 0
}

func (m *C2S_Select_Recommend_Friends) GetMinLvl() int32 {
	if m != nil && m.MinLvl != nil {
		return *m.MinLvl
	}
	return 0
}

func (m *C2S_Select_Recommend_Friends) GetMaxLvl() int32 {
	if m != nil && m.MaxLvl != nil {
		return *m.MaxLvl
	}
	return 0
}

func (m *C2S_Select_Recommend_Friends) GetFriendInfoIndex() []int64 {
	if m != nil {
		return m.FriendInfoIndex
	}
	return nil
}

func (m *C2S_Select_Recommend_Friends) GetFriendNumLimit() int32 {
	if m != nil && m.FriendNumLimit != nil {
		return *m.FriendNumLimit
	}
	return 0
}

type S2C_Select_Recommend_Friends struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	FriendInfos          []*DbFriendInfo `protobuf:"bytes,2,rep,name=friend_infos" json:"friend_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Select_Recommend_Friends) Reset()         { *m = S2C_Select_Recommend_Friends{} }
func (m *S2C_Select_Recommend_Friends) String() string { return proto.CompactTextString(m) }
func (*S2C_Select_Recommend_Friends) ProtoMessage()    {}
func (*S2C_Select_Recommend_Friends) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{130}
}
func (m *S2C_Select_Recommend_Friends) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Select_Recommend_Friends) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Select_Recommend_Friends.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Select_Recommend_Friends) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Select_Recommend_Friends.Merge(m, src)
}
func (m *S2C_Select_Recommend_Friends) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Select_Recommend_Friends) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Select_Recommend_Friends.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Select_Recommend_Friends proto.InternalMessageInfo

func (m *S2C_Select_Recommend_Friends) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Select_Recommend_Friends) GetFriendInfos() []*DbFriendInfo {
	if m != nil {
		return m.FriendInfos
	}
	return nil
}

// 好友上下线通知
type C2S_FindFriend struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NickName             []byte   `protobuf:"bytes,2,opt,name=nick_name" json:"nick_name,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FindFriend) Reset()         { *m = C2S_FindFriend{} }
func (m *C2S_FindFriend) String() string { return proto.CompactTextString(m) }
func (*C2S_FindFriend) ProtoMessage()    {}
func (*C2S_FindFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{131}
}
func (m *C2S_FindFriend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FindFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FindFriend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FindFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FindFriend.Merge(m, src)
}
func (m *C2S_FindFriend) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FindFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FindFriend.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FindFriend proto.InternalMessageInfo

func (m *C2S_FindFriend) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FindFriend) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *C2S_FindFriend) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_FindFriend) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_FindFriend struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	FriendInfo           *DbFriendInfo   `protobuf:"bytes,2,opt,name=friend_info" json:"friend_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_FindFriend) Reset()         { *m = S2C_FindFriend{} }
func (m *S2C_FindFriend) String() string { return proto.CompactTextString(m) }
func (*S2C_FindFriend) ProtoMessage()    {}
func (*S2C_FindFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{132}
}
func (m *S2C_FindFriend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FindFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FindFriend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FindFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FindFriend.Merge(m, src)
}
func (m *S2C_FindFriend) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FindFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FindFriend.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FindFriend proto.InternalMessageInfo

func (m *S2C_FindFriend) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_FindFriend) GetFriendInfo() *DbFriendInfo {
	if m != nil {
		return m.FriendInfo
	}
	return nil
}

// 加好友
type C2S_Add_Friend struct {
	RoleIndex            *int64            `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarRoleIndex         *int64            `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	RetUnitindex         *int64            `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64            `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	CardInfo             *VisitingCardInfo `protobuf:"bytes,5,opt,name=card_info" json:"card_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *C2S_Add_Friend) Reset()         { *m = C2S_Add_Friend{} }
func (m *C2S_Add_Friend) String() string { return proto.CompactTextString(m) }
func (*C2S_Add_Friend) ProtoMessage()    {}
func (*C2S_Add_Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{133}
}
func (m *C2S_Add_Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Add_Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Add_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Add_Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Add_Friend.Merge(m, src)
}
func (m *C2S_Add_Friend) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Add_Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Add_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Add_Friend proto.InternalMessageInfo

func (m *C2S_Add_Friend) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Add_Friend) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *C2S_Add_Friend) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_Add_Friend) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *C2S_Add_Friend) GetCardInfo() *VisitingCardInfo {
	if m != nil {
		return m.CardInfo
	}
	return nil
}

type S2C_Add_Friend struct {
	TarRoleIndex         *int64          `protobuf:"zigzag64,1,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	TarFriendInfo        *DbFriendInfo   `protobuf:"bytes,3,opt,name=tar_friend_info" json:"tar_friend_info,omitempty"`
	TarSceneAddr         *int64          `protobuf:"zigzag64,4,opt,name=tar_scene_addr" json:"tar_scene_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Add_Friend) Reset()         { *m = S2C_Add_Friend{} }
func (m *S2C_Add_Friend) String() string { return proto.CompactTextString(m) }
func (*S2C_Add_Friend) ProtoMessage()    {}
func (*S2C_Add_Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{134}
}
func (m *S2C_Add_Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Add_Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Add_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Add_Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Add_Friend.Merge(m, src)
}
func (m *S2C_Add_Friend) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Add_Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Add_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Add_Friend proto.InternalMessageInfo

func (m *S2C_Add_Friend) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *S2C_Add_Friend) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Add_Friend) GetTarFriendInfo() *DbFriendInfo {
	if m != nil {
		return m.TarFriendInfo
	}
	return nil
}

func (m *S2C_Add_Friend) GetTarSceneAddr() int64 {
	if m != nil && m.TarSceneAddr != nil {
		return *m.TarSceneAddr
	}
	return 0
}

// 对方给自己的反馈,需要中心服务器透传
type S2S_Add_Friend_Ret struct {
	AnsRoleIndex         *int64          `protobuf:"zigzag64,1,opt,name=ans_role_index" json:"ans_role_index,omitempty"`
	TarRoleIndex         *int64          `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2S_Add_Friend_Ret) Reset()         { *m = S2S_Add_Friend_Ret{} }
func (m *S2S_Add_Friend_Ret) String() string { return proto.CompactTextString(m) }
func (*S2S_Add_Friend_Ret) ProtoMessage()    {}
func (*S2S_Add_Friend_Ret) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{135}
}
func (m *S2S_Add_Friend_Ret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_Add_Friend_Ret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_Add_Friend_Ret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_Add_Friend_Ret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_Add_Friend_Ret.Merge(m, src)
}
func (m *S2S_Add_Friend_Ret) XXX_Size() int {
	return m.Size()
}
func (m *S2S_Add_Friend_Ret) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_Add_Friend_Ret.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_Add_Friend_Ret proto.InternalMessageInfo

func (m *S2S_Add_Friend_Ret) GetAnsRoleIndex() int64 {
	if m != nil && m.AnsRoleIndex != nil {
		return *m.AnsRoleIndex
	}
	return 0
}

func (m *S2S_Add_Friend_Ret) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *S2S_Add_Friend_Ret) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 删好友
type C2S_Remove_Friend struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarRoleIndex         *int64   `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Remove_Friend) Reset()         { *m = C2S_Remove_Friend{} }
func (m *C2S_Remove_Friend) String() string { return proto.CompactTextString(m) }
func (*C2S_Remove_Friend) ProtoMessage()    {}
func (*C2S_Remove_Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{136}
}
func (m *C2S_Remove_Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Remove_Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Remove_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Remove_Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Remove_Friend.Merge(m, src)
}
func (m *C2S_Remove_Friend) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Remove_Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Remove_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Remove_Friend proto.InternalMessageInfo

func (m *C2S_Remove_Friend) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Remove_Friend) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

type S2C_Remove_Friend struct {
	TarRoleIndex         *int64          `protobuf:"zigzag64,1,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Remove_Friend) Reset()         { *m = S2C_Remove_Friend{} }
func (m *S2C_Remove_Friend) String() string { return proto.CompactTextString(m) }
func (*S2C_Remove_Friend) ProtoMessage()    {}
func (*S2C_Remove_Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{137}
}
func (m *S2C_Remove_Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Remove_Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Remove_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Remove_Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Remove_Friend.Merge(m, src)
}
func (m *S2C_Remove_Friend) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Remove_Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Remove_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Remove_Friend proto.InternalMessageInfo

func (m *S2C_Remove_Friend) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *S2C_Remove_Friend) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type S2S_Remove_Friend struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SrcRoleIndex         *int64   `protobuf:"zigzag64,2,opt,name=src_role_index" json:"src_role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2S_Remove_Friend) Reset()         { *m = S2S_Remove_Friend{} }
func (m *S2S_Remove_Friend) String() string { return proto.CompactTextString(m) }
func (*S2S_Remove_Friend) ProtoMessage()    {}
func (*S2S_Remove_Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{138}
}
func (m *S2S_Remove_Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_Remove_Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_Remove_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_Remove_Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_Remove_Friend.Merge(m, src)
}
func (m *S2S_Remove_Friend) XXX_Size() int {
	return m.Size()
}
func (m *S2S_Remove_Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_Remove_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_Remove_Friend proto.InternalMessageInfo

func (m *S2S_Remove_Friend) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2S_Remove_Friend) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

// 请求确认好友
type S2C_Request_Add_Friend struct {
	SrcRoleIndex         *int64        `protobuf:"zigzag64,1,opt,name=src_role_index" json:"src_role_index,omitempty"`
	SrcFriendInfo        *DbFriendInfo `protobuf:"bytes,2,opt,name=src_friend_info" json:"src_friend_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_Request_Add_Friend) Reset()         { *m = S2C_Request_Add_Friend{} }
func (m *S2C_Request_Add_Friend) String() string { return proto.CompactTextString(m) }
func (*S2C_Request_Add_Friend) ProtoMessage()    {}
func (*S2C_Request_Add_Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{139}
}
func (m *S2C_Request_Add_Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Request_Add_Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Request_Add_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Request_Add_Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Request_Add_Friend.Merge(m, src)
}
func (m *S2C_Request_Add_Friend) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Request_Add_Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Request_Add_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Request_Add_Friend proto.InternalMessageInfo

func (m *S2C_Request_Add_Friend) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

func (m *S2C_Request_Add_Friend) GetSrcFriendInfo() *DbFriendInfo {
	if m != nil {
		return m.SrcFriendInfo
	}
	return nil
}

type C2S_Request_Add_Friend struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SrcRoleIndex         *int64   `protobuf:"zigzag64,2,opt,name=src_role_index" json:"src_role_index,omitempty"`
	IsRefuse             *bool    `protobuf:"varint,3,opt,name=is_refuse" json:"is_refuse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Request_Add_Friend) Reset()         { *m = C2S_Request_Add_Friend{} }
func (m *C2S_Request_Add_Friend) String() string { return proto.CompactTextString(m) }
func (*C2S_Request_Add_Friend) ProtoMessage()    {}
func (*C2S_Request_Add_Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{140}
}
func (m *C2S_Request_Add_Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Request_Add_Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Request_Add_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Request_Add_Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Request_Add_Friend.Merge(m, src)
}
func (m *C2S_Request_Add_Friend) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Request_Add_Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Request_Add_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Request_Add_Friend proto.InternalMessageInfo

func (m *C2S_Request_Add_Friend) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Request_Add_Friend) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

func (m *C2S_Request_Add_Friend) GetIsRefuse() bool {
	if m != nil && m.IsRefuse != nil {
		return *m.IsRefuse
	}
	return false
}

type S2S_Friend_Online struct {
	FriendRoleIndex      *int64        `protobuf:"zigzag64,1,opt,name=friend_role_index" json:"friend_role_index,omitempty"`
	SrcFriendInfo        *DbFriendInfo `protobuf:"bytes,2,opt,name=src_friend_info" json:"src_friend_info,omitempty"`
	FirstEnterGame       *bool         `protobuf:"varint,3,opt,name=first_enter_game" json:"first_enter_game,omitempty"`
	RetUnitindex         *int64        `protobuf:"zigzag64,4,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64        `protobuf:"zigzag64,5,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2S_Friend_Online) Reset()         { *m = S2S_Friend_Online{} }
func (m *S2S_Friend_Online) String() string { return proto.CompactTextString(m) }
func (*S2S_Friend_Online) ProtoMessage()    {}
func (*S2S_Friend_Online) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{141}
}
func (m *S2S_Friend_Online) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_Friend_Online) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_Friend_Online.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_Friend_Online) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_Friend_Online.Merge(m, src)
}
func (m *S2S_Friend_Online) XXX_Size() int {
	return m.Size()
}
func (m *S2S_Friend_Online) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_Friend_Online.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_Friend_Online proto.InternalMessageInfo

func (m *S2S_Friend_Online) GetFriendRoleIndex() int64 {
	if m != nil && m.FriendRoleIndex != nil {
		return *m.FriendRoleIndex
	}
	return 0
}

func (m *S2S_Friend_Online) GetSrcFriendInfo() *DbFriendInfo {
	if m != nil {
		return m.SrcFriendInfo
	}
	return nil
}

func (m *S2S_Friend_Online) GetFirstEnterGame() bool {
	if m != nil && m.FirstEnterGame != nil {
		return *m.FirstEnterGame
	}
	return false
}

func (m *S2S_Friend_Online) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *S2S_Friend_Online) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_Friend_Online struct {
	IsAleadyOnline       *bool         `protobuf:"varint,1,opt,name=is_aleady_online" json:"is_aleady_online,omitempty"`
	FriendRoleIndex      *int64        `protobuf:"zigzag64,2,opt,name=friend_role_index" json:"friend_role_index,omitempty"`
	SrcFriendInfo        *DbFriendInfo `protobuf:"bytes,3,opt,name=src_friend_info" json:"src_friend_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_Friend_Online) Reset()         { *m = S2C_Friend_Online{} }
func (m *S2C_Friend_Online) String() string { return proto.CompactTextString(m) }
func (*S2C_Friend_Online) ProtoMessage()    {}
func (*S2C_Friend_Online) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{142}
}
func (m *S2C_Friend_Online) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Friend_Online) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Friend_Online.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Friend_Online) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Friend_Online.Merge(m, src)
}
func (m *S2C_Friend_Online) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Friend_Online) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Friend_Online.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Friend_Online proto.InternalMessageInfo

func (m *S2C_Friend_Online) GetIsAleadyOnline() bool {
	if m != nil && m.IsAleadyOnline != nil {
		return *m.IsAleadyOnline
	}
	return false
}

func (m *S2C_Friend_Online) GetFriendRoleIndex() int64 {
	if m != nil && m.FriendRoleIndex != nil {
		return *m.FriendRoleIndex
	}
	return 0
}

func (m *S2C_Friend_Online) GetSrcFriendInfo() *DbFriendInfo {
	if m != nil {
		return m.SrcFriendInfo
	}
	return nil
}

type S2C_Friend_Offline struct {
	RoleIndex            *int64        `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	FriendRoleIndex      *int64        `protobuf:"zigzag64,2,opt,name=friend_role_index" json:"friend_role_index,omitempty"`
	FriendInfo           *DbFriendInfo `protobuf:"bytes,3,opt,name=friend_info" json:"friend_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_Friend_Offline) Reset()         { *m = S2C_Friend_Offline{} }
func (m *S2C_Friend_Offline) String() string { return proto.CompactTextString(m) }
func (*S2C_Friend_Offline) ProtoMessage()    {}
func (*S2C_Friend_Offline) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{143}
}
func (m *S2C_Friend_Offline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Friend_Offline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Friend_Offline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Friend_Offline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Friend_Offline.Merge(m, src)
}
func (m *S2C_Friend_Offline) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Friend_Offline) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Friend_Offline.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Friend_Offline proto.InternalMessageInfo

func (m *S2C_Friend_Offline) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Friend_Offline) GetFriendRoleIndex() int64 {
	if m != nil && m.FriendRoleIndex != nil {
		return *m.FriendRoleIndex
	}
	return 0
}

func (m *S2C_Friend_Offline) GetFriendInfo() *DbFriendInfo {
	if m != nil {
		return m.FriendInfo
	}
	return nil
}

type C2S_ReadyEnterFriendFightScene struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,3,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ReadyEnterFriendFightScene) Reset()         { *m = C2S_ReadyEnterFriendFightScene{} }
func (m *C2S_ReadyEnterFriendFightScene) String() string { return proto.CompactTextString(m) }
func (*C2S_ReadyEnterFriendFightScene) ProtoMessage()    {}
func (*C2S_ReadyEnterFriendFightScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{144}
}
func (m *C2S_ReadyEnterFriendFightScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ReadyEnterFriendFightScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ReadyEnterFriendFightScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ReadyEnterFriendFightScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ReadyEnterFriendFightScene.Merge(m, src)
}
func (m *C2S_ReadyEnterFriendFightScene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ReadyEnterFriendFightScene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ReadyEnterFriendFightScene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ReadyEnterFriendFightScene proto.InternalMessageInfo

func (m *C2S_ReadyEnterFriendFightScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ReadyEnterFriendFightScene) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *C2S_ReadyEnterFriendFightScene) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

type S2C_ReadyEnterFriendFightScene struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ReadyEnterFriendFightScene) Reset()         { *m = S2C_ReadyEnterFriendFightScene{} }
func (m *S2C_ReadyEnterFriendFightScene) String() string { return proto.CompactTextString(m) }
func (*S2C_ReadyEnterFriendFightScene) ProtoMessage()    {}
func (*S2C_ReadyEnterFriendFightScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{145}
}
func (m *S2C_ReadyEnterFriendFightScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ReadyEnterFriendFightScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ReadyEnterFriendFightScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ReadyEnterFriendFightScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ReadyEnterFriendFightScene.Merge(m, src)
}
func (m *S2C_ReadyEnterFriendFightScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ReadyEnterFriendFightScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ReadyEnterFriendFightScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ReadyEnterFriendFightScene proto.InternalMessageInfo

func (m *S2C_ReadyEnterFriendFightScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 好友切磋
type C2S_Friend_Fight struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	FriendRoleIndex      *int64   `protobuf:"zigzag64,2,opt,name=friend_role_index" json:"friend_role_index,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Friend_Fight) Reset()         { *m = C2S_Friend_Fight{} }
func (m *C2S_Friend_Fight) String() string { return proto.CompactTextString(m) }
func (*C2S_Friend_Fight) ProtoMessage()    {}
func (*C2S_Friend_Fight) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{146}
}
func (m *C2S_Friend_Fight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Friend_Fight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Friend_Fight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Friend_Fight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Friend_Fight.Merge(m, src)
}
func (m *C2S_Friend_Fight) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Friend_Fight) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Friend_Fight.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Friend_Fight proto.InternalMessageInfo

func (m *C2S_Friend_Fight) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Friend_Fight) GetFriendRoleIndex() int64 {
	if m != nil && m.FriendRoleIndex != nil {
		return *m.FriendRoleIndex
	}
	return 0
}

func (m *C2S_Friend_Fight) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_Friend_Fight) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_Friend_Fight struct {
	RetCode              *E_MSG_RET_CODE     `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SelfPlayerInfo       []*BattlePlayerInfo `protobuf:"bytes,2,rep,name=self_player_info" json:"self_player_info,omitempty"`
	FriendPlayerInfo     []*BattlePlayerInfo `protobuf:"bytes,3,rep,name=friend_player_info" json:"friend_player_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *S2C_Friend_Fight) Reset()         { *m = S2C_Friend_Fight{} }
func (m *S2C_Friend_Fight) String() string { return proto.CompactTextString(m) }
func (*S2C_Friend_Fight) ProtoMessage()    {}
func (*S2C_Friend_Fight) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{147}
}
func (m *S2C_Friend_Fight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Friend_Fight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Friend_Fight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Friend_Fight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Friend_Fight.Merge(m, src)
}
func (m *S2C_Friend_Fight) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Friend_Fight) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Friend_Fight.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Friend_Fight proto.InternalMessageInfo

func (m *S2C_Friend_Fight) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Friend_Fight) GetSelfPlayerInfo() []*BattlePlayerInfo {
	if m != nil {
		return m.SelfPlayerInfo
	}
	return nil
}

func (m *S2C_Friend_Fight) GetFriendPlayerInfo() []*BattlePlayerInfo {
	if m != nil {
		return m.FriendPlayerInfo
	}
	return nil
}

// 请求个人通用商店
type C2S_CommonShopGoodsInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ShopId               *int32   `protobuf:"zigzag32,2,opt,name=shop_id" json:"shop_id,omitempty"`
	IsManual             *bool    `protobuf:"varint,3,opt,name=is_manual" json:"is_manual,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_CommonShopGoodsInfo) Reset()         { *m = C2S_CommonShopGoodsInfo{} }
func (m *C2S_CommonShopGoodsInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_CommonShopGoodsInfo) ProtoMessage()    {}
func (*C2S_CommonShopGoodsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{148}
}
func (m *C2S_CommonShopGoodsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_CommonShopGoodsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_CommonShopGoodsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_CommonShopGoodsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_CommonShopGoodsInfo.Merge(m, src)
}
func (m *C2S_CommonShopGoodsInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_CommonShopGoodsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_CommonShopGoodsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_CommonShopGoodsInfo proto.InternalMessageInfo

func (m *C2S_CommonShopGoodsInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_CommonShopGoodsInfo) GetShopId() int32 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *C2S_CommonShopGoodsInfo) GetIsManual() bool {
	if m != nil && m.IsManual != nil {
		return *m.IsManual
	}
	return false
}

// 通用商店协议
type S2C_CommonShopGoodsInfo struct {
	RetCode                 *E_MSG_RET_CODE        `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ShopId                  *int32                 `protobuf:"zigzag32,2,opt,name=shop_id" json:"shop_id,omitempty"`
	GoodsInfo               []*CommonShopGoodsInfo `protobuf:"bytes,3,rep,name=goods_info" json:"goods_info,omitempty"`
	NextRefreshPrice        *int32                 `protobuf:"zigzag32,4,opt,name=next_refresh_price" json:"next_refresh_price,omitempty"`
	ManualRefreshCount      *int32                 `protobuf:"zigzag32,5,opt,name=manual_refresh_count" json:"manual_refresh_count,omitempty"`
	ManualTotalRefreshCount *int32                 `protobuf:"zigzag32,6,opt,name=manual_total_refresh_count" json:"manual_total_refresh_count,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}               `json:"-"`
	XXX_unrecognized        []byte                 `json:"-"`
	XXX_sizecache           int32                  `json:"-"`
}

func (m *S2C_CommonShopGoodsInfo) Reset()         { *m = S2C_CommonShopGoodsInfo{} }
func (m *S2C_CommonShopGoodsInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_CommonShopGoodsInfo) ProtoMessage()    {}
func (*S2C_CommonShopGoodsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{149}
}
func (m *S2C_CommonShopGoodsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CommonShopGoodsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CommonShopGoodsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CommonShopGoodsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CommonShopGoodsInfo.Merge(m, src)
}
func (m *S2C_CommonShopGoodsInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CommonShopGoodsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CommonShopGoodsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CommonShopGoodsInfo proto.InternalMessageInfo

func (m *S2C_CommonShopGoodsInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_CommonShopGoodsInfo) GetShopId() int32 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *S2C_CommonShopGoodsInfo) GetGoodsInfo() []*CommonShopGoodsInfo {
	if m != nil {
		return m.GoodsInfo
	}
	return nil
}

func (m *S2C_CommonShopGoodsInfo) GetNextRefreshPrice() int32 {
	if m != nil && m.NextRefreshPrice != nil {
		return *m.NextRefreshPrice
	}
	return 0
}

func (m *S2C_CommonShopGoodsInfo) GetManualRefreshCount() int32 {
	if m != nil && m.ManualRefreshCount != nil {
		return *m.ManualRefreshCount
	}
	return 0
}

func (m *S2C_CommonShopGoodsInfo) GetManualTotalRefreshCount() int32 {
	if m != nil && m.ManualTotalRefreshCount != nil {
		return *m.ManualTotalRefreshCount
	}
	return 0
}

// 请求抢车位商店信息
type C2S_ParkShop struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ParkShop) Reset()         { *m = C2S_ParkShop{} }
func (m *C2S_ParkShop) String() string { return proto.CompactTextString(m) }
func (*C2S_ParkShop) ProtoMessage()    {}
func (*C2S_ParkShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{150}
}
func (m *C2S_ParkShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ParkShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ParkShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ParkShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ParkShop.Merge(m, src)
}
func (m *C2S_ParkShop) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ParkShop) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ParkShop.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ParkShop proto.InternalMessageInfo

func (m *C2S_ParkShop) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ParkShop struct {
	RetCode              *E_MSG_RET_CODE        `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	GoodsList            []*CommonShopGoodsInfo `protobuf:"bytes,2,rep,name=goods_list" json:"goods_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *S2C_ParkShop) Reset()         { *m = S2C_ParkShop{} }
func (m *S2C_ParkShop) String() string { return proto.CompactTextString(m) }
func (*S2C_ParkShop) ProtoMessage()    {}
func (*S2C_ParkShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{151}
}
func (m *S2C_ParkShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ParkShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ParkShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ParkShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ParkShop.Merge(m, src)
}
func (m *S2C_ParkShop) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ParkShop) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ParkShop.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ParkShop proto.InternalMessageInfo

func (m *S2C_ParkShop) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ParkShop) GetGoodsList() []*CommonShopGoodsInfo {
	if m != nil {
		return m.GoodsList
	}
	return nil
}

// 购买技能书商店物品
type C2S_BuyCommonShopGoods struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ShopId               *int32   `protobuf:"zigzag32,2,opt,name=shop_id" json:"shop_id,omitempty"`
	ShopIndex            *int32   `protobuf:"zigzag32,3,opt,name=shop_index" json:"shop_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BuyCommonShopGoods) Reset()         { *m = C2S_BuyCommonShopGoods{} }
func (m *C2S_BuyCommonShopGoods) String() string { return proto.CompactTextString(m) }
func (*C2S_BuyCommonShopGoods) ProtoMessage()    {}
func (*C2S_BuyCommonShopGoods) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{152}
}
func (m *C2S_BuyCommonShopGoods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BuyCommonShopGoods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BuyCommonShopGoods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BuyCommonShopGoods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BuyCommonShopGoods.Merge(m, src)
}
func (m *C2S_BuyCommonShopGoods) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BuyCommonShopGoods) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BuyCommonShopGoods.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BuyCommonShopGoods proto.InternalMessageInfo

func (m *C2S_BuyCommonShopGoods) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_BuyCommonShopGoods) GetShopId() int32 {
	if m != nil && m.ShopId != nil {
		return *m.ShopId
	}
	return 0
}

func (m *C2S_BuyCommonShopGoods) GetShopIndex() int32 {
	if m != nil && m.ShopIndex != nil {
		return *m.ShopIndex
	}
	return 0
}

type S2C_BuyCommonShopGoods struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BuyCommonShopGoods) Reset()         { *m = S2C_BuyCommonShopGoods{} }
func (m *S2C_BuyCommonShopGoods) String() string { return proto.CompactTextString(m) }
func (*S2C_BuyCommonShopGoods) ProtoMessage()    {}
func (*S2C_BuyCommonShopGoods) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{153}
}
func (m *S2C_BuyCommonShopGoods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BuyCommonShopGoods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BuyCommonShopGoods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BuyCommonShopGoods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BuyCommonShopGoods.Merge(m, src)
}
func (m *S2C_BuyCommonShopGoods) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BuyCommonShopGoods) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BuyCommonShopGoods.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BuyCommonShopGoods proto.InternalMessageInfo

func (m *S2C_BuyCommonShopGoods) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 请求学习技能
type C2S_Skill_Study struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32   `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Skill_Study) Reset()         { *m = C2S_Skill_Study{} }
func (m *C2S_Skill_Study) String() string { return proto.CompactTextString(m) }
func (*C2S_Skill_Study) ProtoMessage()    {}
func (*C2S_Skill_Study) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{154}
}
func (m *C2S_Skill_Study) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Skill_Study) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Skill_Study.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Skill_Study) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Skill_Study.Merge(m, src)
}
func (m *C2S_Skill_Study) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Skill_Study) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Skill_Study.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Skill_Study proto.InternalMessageInfo

func (m *C2S_Skill_Study) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Skill_Study) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

type S2C_Skill_Study struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32          `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Skill_Study) Reset()         { *m = S2C_Skill_Study{} }
func (m *S2C_Skill_Study) String() string { return proto.CompactTextString(m) }
func (*S2C_Skill_Study) ProtoMessage()    {}
func (*S2C_Skill_Study) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{155}
}
func (m *S2C_Skill_Study) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Skill_Study) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Skill_Study.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Skill_Study) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Skill_Study.Merge(m, src)
}
func (m *S2C_Skill_Study) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Skill_Study) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Skill_Study.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Skill_Study proto.InternalMessageInfo

func (m *S2C_Skill_Study) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Skill_Study) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *S2C_Skill_Study) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 请求升级技能
type C2S_Skill_LevelUp struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32   `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	IsExcharge           *bool    `protobuf:"varint,3,opt,name=is_excharge" json:"is_excharge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Skill_LevelUp) Reset()         { *m = C2S_Skill_LevelUp{} }
func (m *C2S_Skill_LevelUp) String() string { return proto.CompactTextString(m) }
func (*C2S_Skill_LevelUp) ProtoMessage()    {}
func (*C2S_Skill_LevelUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{156}
}
func (m *C2S_Skill_LevelUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Skill_LevelUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Skill_LevelUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Skill_LevelUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Skill_LevelUp.Merge(m, src)
}
func (m *C2S_Skill_LevelUp) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Skill_LevelUp) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Skill_LevelUp.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Skill_LevelUp proto.InternalMessageInfo

func (m *C2S_Skill_LevelUp) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Skill_LevelUp) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *C2S_Skill_LevelUp) GetIsExcharge() bool {
	if m != nil && m.IsExcharge != nil {
		return *m.IsExcharge
	}
	return false
}

type S2C_Skill_LevelUp struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32          `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Skill_LevelUp) Reset()         { *m = S2C_Skill_LevelUp{} }
func (m *S2C_Skill_LevelUp) String() string { return proto.CompactTextString(m) }
func (*S2C_Skill_LevelUp) ProtoMessage()    {}
func (*S2C_Skill_LevelUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{157}
}
func (m *S2C_Skill_LevelUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Skill_LevelUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Skill_LevelUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Skill_LevelUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Skill_LevelUp.Merge(m, src)
}
func (m *S2C_Skill_LevelUp) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Skill_LevelUp) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Skill_LevelUp.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Skill_LevelUp proto.InternalMessageInfo

func (m *S2C_Skill_LevelUp) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Skill_LevelUp) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *S2C_Skill_LevelUp) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 请求装备天赋技能
type C2S_Skill_DressTalent struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32   `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Skill_DressTalent) Reset()         { *m = C2S_Skill_DressTalent{} }
func (m *C2S_Skill_DressTalent) String() string { return proto.CompactTextString(m) }
func (*C2S_Skill_DressTalent) ProtoMessage()    {}
func (*C2S_Skill_DressTalent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{158}
}
func (m *C2S_Skill_DressTalent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Skill_DressTalent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Skill_DressTalent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Skill_DressTalent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Skill_DressTalent.Merge(m, src)
}
func (m *C2S_Skill_DressTalent) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Skill_DressTalent) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Skill_DressTalent.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Skill_DressTalent proto.InternalMessageInfo

func (m *C2S_Skill_DressTalent) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Skill_DressTalent) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

type S2C_Skill_DressTalent struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32          `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Skill_DressTalent) Reset()         { *m = S2C_Skill_DressTalent{} }
func (m *S2C_Skill_DressTalent) String() string { return proto.CompactTextString(m) }
func (*S2C_Skill_DressTalent) ProtoMessage()    {}
func (*S2C_Skill_DressTalent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{159}
}
func (m *S2C_Skill_DressTalent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Skill_DressTalent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Skill_DressTalent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Skill_DressTalent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Skill_DressTalent.Merge(m, src)
}
func (m *S2C_Skill_DressTalent) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Skill_DressTalent) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Skill_DressTalent.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Skill_DressTalent proto.InternalMessageInfo

func (m *S2C_Skill_DressTalent) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Skill_DressTalent) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *S2C_Skill_DressTalent) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 请求脱下天赋技能
type C2S_Skill_TakeOffTalent struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32   `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Skill_TakeOffTalent) Reset()         { *m = C2S_Skill_TakeOffTalent{} }
func (m *C2S_Skill_TakeOffTalent) String() string { return proto.CompactTextString(m) }
func (*C2S_Skill_TakeOffTalent) ProtoMessage()    {}
func (*C2S_Skill_TakeOffTalent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{160}
}
func (m *C2S_Skill_TakeOffTalent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Skill_TakeOffTalent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Skill_TakeOffTalent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Skill_TakeOffTalent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Skill_TakeOffTalent.Merge(m, src)
}
func (m *C2S_Skill_TakeOffTalent) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Skill_TakeOffTalent) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Skill_TakeOffTalent.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Skill_TakeOffTalent proto.InternalMessageInfo

func (m *C2S_Skill_TakeOffTalent) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Skill_TakeOffTalent) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

type S2C_Skill_TakeOffTalent struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32          `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Skill_TakeOffTalent) Reset()         { *m = S2C_Skill_TakeOffTalent{} }
func (m *S2C_Skill_TakeOffTalent) String() string { return proto.CompactTextString(m) }
func (*S2C_Skill_TakeOffTalent) ProtoMessage()    {}
func (*S2C_Skill_TakeOffTalent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{161}
}
func (m *S2C_Skill_TakeOffTalent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Skill_TakeOffTalent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Skill_TakeOffTalent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Skill_TakeOffTalent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Skill_TakeOffTalent.Merge(m, src)
}
func (m *S2C_Skill_TakeOffTalent) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Skill_TakeOffTalent) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Skill_TakeOffTalent.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Skill_TakeOffTalent proto.InternalMessageInfo

func (m *S2C_Skill_TakeOffTalent) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Skill_TakeOffTalent) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *S2C_Skill_TakeOffTalent) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 请求装备秘籍技能
type C2S_Skill_DressBook struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32   `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	Site                 *int32   `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Skill_DressBook) Reset()         { *m = C2S_Skill_DressBook{} }
func (m *C2S_Skill_DressBook) String() string { return proto.CompactTextString(m) }
func (*C2S_Skill_DressBook) ProtoMessage()    {}
func (*C2S_Skill_DressBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{162}
}
func (m *C2S_Skill_DressBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Skill_DressBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Skill_DressBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Skill_DressBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Skill_DressBook.Merge(m, src)
}
func (m *C2S_Skill_DressBook) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Skill_DressBook) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Skill_DressBook.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Skill_DressBook proto.InternalMessageInfo

func (m *C2S_Skill_DressBook) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Skill_DressBook) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *C2S_Skill_DressBook) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

type S2C_Skill_DressBook struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SkillId              *int32          `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	Site                 *int32          `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Skill_DressBook) Reset()         { *m = S2C_Skill_DressBook{} }
func (m *S2C_Skill_DressBook) String() string { return proto.CompactTextString(m) }
func (*S2C_Skill_DressBook) ProtoMessage()    {}
func (*S2C_Skill_DressBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{163}
}
func (m *S2C_Skill_DressBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Skill_DressBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Skill_DressBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Skill_DressBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Skill_DressBook.Merge(m, src)
}
func (m *S2C_Skill_DressBook) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Skill_DressBook) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Skill_DressBook.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Skill_DressBook proto.InternalMessageInfo

func (m *S2C_Skill_DressBook) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Skill_DressBook) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *S2C_Skill_DressBook) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

// 请求脱下秘籍技能
type C2S_Skill_TakeOffBook struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SkillId              *int32   `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	Site                 *int32   `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Skill_TakeOffBook) Reset()         { *m = C2S_Skill_TakeOffBook{} }
func (m *C2S_Skill_TakeOffBook) String() string { return proto.CompactTextString(m) }
func (*C2S_Skill_TakeOffBook) ProtoMessage()    {}
func (*C2S_Skill_TakeOffBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{164}
}
func (m *C2S_Skill_TakeOffBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Skill_TakeOffBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Skill_TakeOffBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Skill_TakeOffBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Skill_TakeOffBook.Merge(m, src)
}
func (m *C2S_Skill_TakeOffBook) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Skill_TakeOffBook) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Skill_TakeOffBook.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Skill_TakeOffBook proto.InternalMessageInfo

func (m *C2S_Skill_TakeOffBook) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Skill_TakeOffBook) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *C2S_Skill_TakeOffBook) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

type S2C_Skill_TakeOffBook struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SkillId              *int32          `protobuf:"zigzag32,2,opt,name=skill_id" json:"skill_id,omitempty"`
	Site                 *int32          `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Skill_TakeOffBook) Reset()         { *m = S2C_Skill_TakeOffBook{} }
func (m *S2C_Skill_TakeOffBook) String() string { return proto.CompactTextString(m) }
func (*S2C_Skill_TakeOffBook) ProtoMessage()    {}
func (*S2C_Skill_TakeOffBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{165}
}
func (m *S2C_Skill_TakeOffBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Skill_TakeOffBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Skill_TakeOffBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Skill_TakeOffBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Skill_TakeOffBook.Merge(m, src)
}
func (m *S2C_Skill_TakeOffBook) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Skill_TakeOffBook) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Skill_TakeOffBook.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Skill_TakeOffBook proto.InternalMessageInfo

func (m *S2C_Skill_TakeOffBook) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Skill_TakeOffBook) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *S2C_Skill_TakeOffBook) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

// 请求更换技能
type C2S_Skill_ChangeBook struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	OldSkillId           *int32   `protobuf:"zigzag32,2,opt,name=old_skill_id" json:"old_skill_id,omitempty"`
	NewSkillId           *int32   `protobuf:"zigzag32,3,opt,name=new_skill_id" json:"new_skill_id,omitempty"`
	Site                 *int32   `protobuf:"zigzag32,4,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Skill_ChangeBook) Reset()         { *m = C2S_Skill_ChangeBook{} }
func (m *C2S_Skill_ChangeBook) String() string { return proto.CompactTextString(m) }
func (*C2S_Skill_ChangeBook) ProtoMessage()    {}
func (*C2S_Skill_ChangeBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{166}
}
func (m *C2S_Skill_ChangeBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Skill_ChangeBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Skill_ChangeBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Skill_ChangeBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Skill_ChangeBook.Merge(m, src)
}
func (m *C2S_Skill_ChangeBook) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Skill_ChangeBook) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Skill_ChangeBook.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Skill_ChangeBook proto.InternalMessageInfo

func (m *C2S_Skill_ChangeBook) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Skill_ChangeBook) GetOldSkillId() int32 {
	if m != nil && m.OldSkillId != nil {
		return *m.OldSkillId
	}
	return 0
}

func (m *C2S_Skill_ChangeBook) GetNewSkillId() int32 {
	if m != nil && m.NewSkillId != nil {
		return *m.NewSkillId
	}
	return 0
}

func (m *C2S_Skill_ChangeBook) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

type S2C_Skill_ChangeBook struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	OldSkillId           *int32          `protobuf:"zigzag32,2,opt,name=old_skill_id" json:"old_skill_id,omitempty"`
	NewSkillId           *int32          `protobuf:"zigzag32,3,opt,name=new_skill_id" json:"new_skill_id,omitempty"`
	Site                 *int32          `protobuf:"zigzag32,4,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Skill_ChangeBook) Reset()         { *m = S2C_Skill_ChangeBook{} }
func (m *S2C_Skill_ChangeBook) String() string { return proto.CompactTextString(m) }
func (*S2C_Skill_ChangeBook) ProtoMessage()    {}
func (*S2C_Skill_ChangeBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{167}
}
func (m *S2C_Skill_ChangeBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Skill_ChangeBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Skill_ChangeBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Skill_ChangeBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Skill_ChangeBook.Merge(m, src)
}
func (m *S2C_Skill_ChangeBook) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Skill_ChangeBook) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Skill_ChangeBook.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Skill_ChangeBook proto.InternalMessageInfo

func (m *S2C_Skill_ChangeBook) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Skill_ChangeBook) GetOldSkillId() int32 {
	if m != nil && m.OldSkillId != nil {
		return *m.OldSkillId
	}
	return 0
}

func (m *S2C_Skill_ChangeBook) GetNewSkillId() int32 {
	if m != nil && m.NewSkillId != nil {
		return *m.NewSkillId
	}
	return 0
}

func (m *S2C_Skill_ChangeBook) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

// 小游戏相关
type C2S_PassMiniGame struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Passed               *int32   `protobuf:"zigzag32,2,opt,name=passed" json:"passed,omitempty"`
	ChapId               *int32   `protobuf:"zigzag32,3,opt,name=chap_id" json:"chap_id,omitempty"`
	LevelId              *int32   `protobuf:"zigzag32,4,opt,name=level_id" json:"level_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PassMiniGame) Reset()         { *m = C2S_PassMiniGame{} }
func (m *C2S_PassMiniGame) String() string { return proto.CompactTextString(m) }
func (*C2S_PassMiniGame) ProtoMessage()    {}
func (*C2S_PassMiniGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{168}
}
func (m *C2S_PassMiniGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PassMiniGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PassMiniGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PassMiniGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PassMiniGame.Merge(m, src)
}
func (m *C2S_PassMiniGame) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PassMiniGame) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PassMiniGame.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PassMiniGame proto.InternalMessageInfo

func (m *C2S_PassMiniGame) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PassMiniGame) GetPassed() int32 {
	if m != nil && m.Passed != nil {
		return *m.Passed
	}
	return 0
}

func (m *C2S_PassMiniGame) GetChapId() int32 {
	if m != nil && m.ChapId != nil {
		return *m.ChapId
	}
	return 0
}

func (m *C2S_PassMiniGame) GetLevelId() int32 {
	if m != nil && m.LevelId != nil {
		return *m.LevelId
	}
	return 0
}

type S2C_PassMiniGame struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PassMiniGame) Reset()         { *m = S2C_PassMiniGame{} }
func (m *S2C_PassMiniGame) String() string { return proto.CompactTextString(m) }
func (*S2C_PassMiniGame) ProtoMessage()    {}
func (*S2C_PassMiniGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{169}
}
func (m *S2C_PassMiniGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PassMiniGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PassMiniGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PassMiniGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PassMiniGame.Merge(m, src)
}
func (m *S2C_PassMiniGame) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PassMiniGame) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PassMiniGame.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PassMiniGame proto.InternalMessageInfo

func (m *S2C_PassMiniGame) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PassMiniGame) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 查询小游戏排行榜
type C2S_QueryMiniGameRank struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MiniGameId           *int32   `protobuf:"zigzag32,2,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	LoginAddr            *int64   `protobuf:"zigzag64,3,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64   `protobuf:"zigzag64,4,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_QueryMiniGameRank) Reset()         { *m = C2S_QueryMiniGameRank{} }
func (m *C2S_QueryMiniGameRank) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryMiniGameRank) ProtoMessage()    {}
func (*C2S_QueryMiniGameRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{170}
}
func (m *C2S_QueryMiniGameRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryMiniGameRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryMiniGameRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryMiniGameRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryMiniGameRank.Merge(m, src)
}
func (m *C2S_QueryMiniGameRank) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryMiniGameRank) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryMiniGameRank.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryMiniGameRank proto.InternalMessageInfo

func (m *C2S_QueryMiniGameRank) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QueryMiniGameRank) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

func (m *C2S_QueryMiniGameRank) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_QueryMiniGameRank) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_QueryMiniGameRank struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	MiniGameId           *int32          `protobuf:"zigzag32,2,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	RankInfos            []*RankInfo     `protobuf:"bytes,3,rep,name=rank_infos" json:"rank_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryMiniGameRank) Reset()         { *m = S2C_QueryMiniGameRank{} }
func (m *S2C_QueryMiniGameRank) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryMiniGameRank) ProtoMessage()    {}
func (*S2C_QueryMiniGameRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{171}
}
func (m *S2C_QueryMiniGameRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryMiniGameRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryMiniGameRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryMiniGameRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryMiniGameRank.Merge(m, src)
}
func (m *S2C_QueryMiniGameRank) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryMiniGameRank) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryMiniGameRank.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryMiniGameRank proto.InternalMessageInfo

func (m *S2C_QueryMiniGameRank) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryMiniGameRank) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

func (m *S2C_QueryMiniGameRank) GetRankInfos() []*RankInfo {
	if m != nil {
		return m.RankInfos
	}
	return nil
}

// 查询小游戏个人排行榜
type C2S_QuerySelfGameRank struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MiniGameId           *int32   `protobuf:"zigzag32,2,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	HistoryMaxScore      *int32   `protobuf:"zigzag32,3,opt,name=history_max_score" json:"history_max_score,omitempty"`
	LoginAddr            *int64   `protobuf:"zigzag64,4,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64   `protobuf:"zigzag64,5,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_QuerySelfGameRank) Reset()         { *m = C2S_QuerySelfGameRank{} }
func (m *C2S_QuerySelfGameRank) String() string { return proto.CompactTextString(m) }
func (*C2S_QuerySelfGameRank) ProtoMessage()    {}
func (*C2S_QuerySelfGameRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{172}
}
func (m *C2S_QuerySelfGameRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QuerySelfGameRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QuerySelfGameRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QuerySelfGameRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QuerySelfGameRank.Merge(m, src)
}
func (m *C2S_QuerySelfGameRank) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QuerySelfGameRank) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QuerySelfGameRank.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QuerySelfGameRank proto.InternalMessageInfo

func (m *C2S_QuerySelfGameRank) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QuerySelfGameRank) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

func (m *C2S_QuerySelfGameRank) GetHistoryMaxScore() int32 {
	if m != nil && m.HistoryMaxScore != nil {
		return *m.HistoryMaxScore
	}
	return 0
}

func (m *C2S_QuerySelfGameRank) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_QuerySelfGameRank) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_QuerySelfGameRank struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	MiniGameId           *int32          `protobuf:"zigzag32,2,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	CurrRank             *int32          `protobuf:"zigzag32,3,opt,name=curr_rank" json:"curr_rank,omitempty"`
	HistoryMaxScore      *int32          `protobuf:"zigzag32,4,opt,name=history_max_score" json:"history_max_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QuerySelfGameRank) Reset()         { *m = S2C_QuerySelfGameRank{} }
func (m *S2C_QuerySelfGameRank) String() string { return proto.CompactTextString(m) }
func (*S2C_QuerySelfGameRank) ProtoMessage()    {}
func (*S2C_QuerySelfGameRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{173}
}
func (m *S2C_QuerySelfGameRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QuerySelfGameRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QuerySelfGameRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QuerySelfGameRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QuerySelfGameRank.Merge(m, src)
}
func (m *S2C_QuerySelfGameRank) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QuerySelfGameRank) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QuerySelfGameRank.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QuerySelfGameRank proto.InternalMessageInfo

func (m *S2C_QuerySelfGameRank) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QuerySelfGameRank) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

func (m *S2C_QuerySelfGameRank) GetCurrRank() int32 {
	if m != nil && m.CurrRank != nil {
		return *m.CurrRank
	}
	return 0
}

func (m *S2C_QuerySelfGameRank) GetHistoryMaxScore() int32 {
	if m != nil && m.HistoryMaxScore != nil {
		return *m.HistoryMaxScore
	}
	return 0
}

// 再玩一次小游戏
type C2S_PlayMiniGameAgain struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MiniGameId           *int32   `protobuf:"zigzag32,2,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PlayMiniGameAgain) Reset()         { *m = C2S_PlayMiniGameAgain{} }
func (m *C2S_PlayMiniGameAgain) String() string { return proto.CompactTextString(m) }
func (*C2S_PlayMiniGameAgain) ProtoMessage()    {}
func (*C2S_PlayMiniGameAgain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{174}
}
func (m *C2S_PlayMiniGameAgain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PlayMiniGameAgain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PlayMiniGameAgain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PlayMiniGameAgain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PlayMiniGameAgain.Merge(m, src)
}
func (m *C2S_PlayMiniGameAgain) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PlayMiniGameAgain) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PlayMiniGameAgain.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PlayMiniGameAgain proto.InternalMessageInfo

func (m *C2S_PlayMiniGameAgain) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PlayMiniGameAgain) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

type S2C_PlayMiniGameAgain struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PlayMiniGameAgain) Reset()         { *m = S2C_PlayMiniGameAgain{} }
func (m *S2C_PlayMiniGameAgain) String() string { return proto.CompactTextString(m) }
func (*S2C_PlayMiniGameAgain) ProtoMessage()    {}
func (*S2C_PlayMiniGameAgain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{175}
}
func (m *S2C_PlayMiniGameAgain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PlayMiniGameAgain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PlayMiniGameAgain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PlayMiniGameAgain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PlayMiniGameAgain.Merge(m, src)
}
func (m *S2C_PlayMiniGameAgain) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PlayMiniGameAgain) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PlayMiniGameAgain.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PlayMiniGameAgain proto.InternalMessageInfo

func (m *S2C_PlayMiniGameAgain) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 小游戏相关
type C2S_SubmitMiniGameScore struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MiniGameId           *int32   `protobuf:"zigzag32,2,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	Score                *int32   `protobuf:"zigzag32,3,opt,name=score" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SubmitMiniGameScore) Reset()         { *m = C2S_SubmitMiniGameScore{} }
func (m *C2S_SubmitMiniGameScore) String() string { return proto.CompactTextString(m) }
func (*C2S_SubmitMiniGameScore) ProtoMessage()    {}
func (*C2S_SubmitMiniGameScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{176}
}
func (m *C2S_SubmitMiniGameScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SubmitMiniGameScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SubmitMiniGameScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SubmitMiniGameScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SubmitMiniGameScore.Merge(m, src)
}
func (m *C2S_SubmitMiniGameScore) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SubmitMiniGameScore) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SubmitMiniGameScore.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SubmitMiniGameScore proto.InternalMessageInfo

func (m *C2S_SubmitMiniGameScore) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SubmitMiniGameScore) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

func (m *C2S_SubmitMiniGameScore) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type S2C_SubmitMiniGameScore struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	HistoryMaxScore      *int32          `protobuf:"zigzag32,3,opt,name=history_max_score" json:"history_max_score,omitempty"`
	CurrScore            *int32          `protobuf:"zigzag32,4,opt,name=curr_score" json:"curr_score,omitempty"`
	FightPercent         *int32          `protobuf:"zigzag32,5,opt,name=fight_percent" json:"fight_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SubmitMiniGameScore) Reset()         { *m = S2C_SubmitMiniGameScore{} }
func (m *S2C_SubmitMiniGameScore) String() string { return proto.CompactTextString(m) }
func (*S2C_SubmitMiniGameScore) ProtoMessage()    {}
func (*S2C_SubmitMiniGameScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{177}
}
func (m *S2C_SubmitMiniGameScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SubmitMiniGameScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SubmitMiniGameScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SubmitMiniGameScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SubmitMiniGameScore.Merge(m, src)
}
func (m *S2C_SubmitMiniGameScore) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SubmitMiniGameScore) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SubmitMiniGameScore.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SubmitMiniGameScore proto.InternalMessageInfo

func (m *S2C_SubmitMiniGameScore) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SubmitMiniGameScore) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *S2C_SubmitMiniGameScore) GetHistoryMaxScore() int32 {
	if m != nil && m.HistoryMaxScore != nil {
		return *m.HistoryMaxScore
	}
	return 0
}

func (m *S2C_SubmitMiniGameScore) GetCurrScore() int32 {
	if m != nil && m.CurrScore != nil {
		return *m.CurrScore
	}
	return 0
}

func (m *S2C_SubmitMiniGameScore) GetFightPercent() int32 {
	if m != nil && m.FightPercent != nil {
		return *m.FightPercent
	}
	return 0
}

// 准备进入小游戏
type C2S_ReadyEnterMiniGame struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MiniGameId           *int32   `protobuf:"zigzag32,2,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	NpcId                *int32   `protobuf:"zigzag32,3,opt,name=npc_id" json:"npc_id,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,4,opt,name=scene_id" json:"scene_id,omitempty"`
	SceneType            *int32   `protobuf:"zigzag32,5,opt,name=scene_type" json:"scene_type,omitempty"`
	TransInfoId          *int32   `protobuf:"zigzag32,6,opt,name=trans_info_id" json:"trans_info_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,7,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ReadyEnterMiniGame) Reset()         { *m = C2S_ReadyEnterMiniGame{} }
func (m *C2S_ReadyEnterMiniGame) String() string { return proto.CompactTextString(m) }
func (*C2S_ReadyEnterMiniGame) ProtoMessage()    {}
func (*C2S_ReadyEnterMiniGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{178}
}
func (m *C2S_ReadyEnterMiniGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ReadyEnterMiniGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ReadyEnterMiniGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ReadyEnterMiniGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ReadyEnterMiniGame.Merge(m, src)
}
func (m *C2S_ReadyEnterMiniGame) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ReadyEnterMiniGame) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ReadyEnterMiniGame.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ReadyEnterMiniGame proto.InternalMessageInfo

func (m *C2S_ReadyEnterMiniGame) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ReadyEnterMiniGame) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

func (m *C2S_ReadyEnterMiniGame) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *C2S_ReadyEnterMiniGame) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *C2S_ReadyEnterMiniGame) GetSceneType() int32 {
	if m != nil && m.SceneType != nil {
		return *m.SceneType
	}
	return 0
}

func (m *C2S_ReadyEnterMiniGame) GetTransInfoId() int32 {
	if m != nil && m.TransInfoId != nil {
		return *m.TransInfoId
	}
	return 0
}

func (m *C2S_ReadyEnterMiniGame) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

type S2C_ReadyEnterMiniGame struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	MiniGameId           *int32          `protobuf:"zigzag32,3,opt,name=mini_game_id" json:"mini_game_id,omitempty"`
	NpcId                *int32          `protobuf:"zigzag32,4,opt,name=npc_id" json:"npc_id,omitempty"`
	SceneId              *int32          `protobuf:"zigzag32,5,opt,name=scene_id" json:"scene_id,omitempty"`
	TransInfoId          *int32          `protobuf:"zigzag32,6,opt,name=trans_info_id" json:"trans_info_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ReadyEnterMiniGame) Reset()         { *m = S2C_ReadyEnterMiniGame{} }
func (m *S2C_ReadyEnterMiniGame) String() string { return proto.CompactTextString(m) }
func (*S2C_ReadyEnterMiniGame) ProtoMessage()    {}
func (*S2C_ReadyEnterMiniGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{179}
}
func (m *S2C_ReadyEnterMiniGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ReadyEnterMiniGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ReadyEnterMiniGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ReadyEnterMiniGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ReadyEnterMiniGame.Merge(m, src)
}
func (m *S2C_ReadyEnterMiniGame) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ReadyEnterMiniGame) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ReadyEnterMiniGame.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ReadyEnterMiniGame proto.InternalMessageInfo

func (m *S2C_ReadyEnterMiniGame) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ReadyEnterMiniGame) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_ReadyEnterMiniGame) GetMiniGameId() int32 {
	if m != nil && m.MiniGameId != nil {
		return *m.MiniGameId
	}
	return 0
}

func (m *S2C_ReadyEnterMiniGame) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *S2C_ReadyEnterMiniGame) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2C_ReadyEnterMiniGame) GetTransInfoId() int32 {
	if m != nil && m.TransInfoId != nil {
		return *m.TransInfoId
	}
	return 0
}

// 表情交互
type C2S_InteractAct struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	TarRoleIndex         []int64  `protobuf:"zigzag64,3,rep,name=tar_role_index" json:"tar_role_index,omitempty"`
	TarX                 *int32   `protobuf:"zigzag32,4,opt,name=tar_x" json:"tar_x,omitempty"`
	TarY                 *int32   `protobuf:"zigzag32,5,opt,name=tar_y" json:"tar_y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_InteractAct) Reset()         { *m = C2S_InteractAct{} }
func (m *C2S_InteractAct) String() string { return proto.CompactTextString(m) }
func (*C2S_InteractAct) ProtoMessage()    {}
func (*C2S_InteractAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{180}
}
func (m *C2S_InteractAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_InteractAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_InteractAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_InteractAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_InteractAct.Merge(m, src)
}
func (m *C2S_InteractAct) XXX_Size() int {
	return m.Size()
}
func (m *C2S_InteractAct) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_InteractAct.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_InteractAct proto.InternalMessageInfo

func (m *C2S_InteractAct) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_InteractAct) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *C2S_InteractAct) GetTarRoleIndex() []int64 {
	if m != nil {
		return m.TarRoleIndex
	}
	return nil
}

func (m *C2S_InteractAct) GetTarX() int32 {
	if m != nil && m.TarX != nil {
		return *m.TarX
	}
	return 0
}

func (m *C2S_InteractAct) GetTarY() int32 {
	if m != nil && m.TarY != nil {
		return *m.TarY
	}
	return 0
}

type S2C_InteractAct struct {
	SrcRoleIndex         *int64          `protobuf:"zigzag64,1,opt,name=src_role_index" json:"src_role_index,omitempty"`
	ActId                *int32          `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	TarRoleIndex         []int64         `protobuf:"zigzag64,3,rep,name=tar_role_index" json:"tar_role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,4,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_InteractAct) Reset()         { *m = S2C_InteractAct{} }
func (m *S2C_InteractAct) String() string { return proto.CompactTextString(m) }
func (*S2C_InteractAct) ProtoMessage()    {}
func (*S2C_InteractAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{181}
}
func (m *S2C_InteractAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_InteractAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_InteractAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_InteractAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_InteractAct.Merge(m, src)
}
func (m *S2C_InteractAct) XXX_Size() int {
	return m.Size()
}
func (m *S2C_InteractAct) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_InteractAct.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_InteractAct proto.InternalMessageInfo

func (m *S2C_InteractAct) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

func (m *S2C_InteractAct) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *S2C_InteractAct) GetTarRoleIndex() []int64 {
	if m != nil {
		return m.TarRoleIndex
	}
	return nil
}

func (m *S2C_InteractAct) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 刚刚的自嗨动作
type C2S_SelfHiAct struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SelfHiAct) Reset()         { *m = C2S_SelfHiAct{} }
func (m *C2S_SelfHiAct) String() string { return proto.CompactTextString(m) }
func (*C2S_SelfHiAct) ProtoMessage()    {}
func (*C2S_SelfHiAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{182}
}
func (m *C2S_SelfHiAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SelfHiAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SelfHiAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SelfHiAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SelfHiAct.Merge(m, src)
}
func (m *C2S_SelfHiAct) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SelfHiAct) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SelfHiAct.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SelfHiAct proto.InternalMessageInfo

func (m *C2S_SelfHiAct) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SelfHiAct) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

type S2C_SelfHiAct struct {
	SrcRoleIndex         *int64          `protobuf:"zigzag64,1,opt,name=src_role_index" json:"src_role_index,omitempty"`
	ActId                *int32          `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,3,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SelfHiAct) Reset()         { *m = S2C_SelfHiAct{} }
func (m *S2C_SelfHiAct) String() string { return proto.CompactTextString(m) }
func (*S2C_SelfHiAct) ProtoMessage()    {}
func (*S2C_SelfHiAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{183}
}
func (m *S2C_SelfHiAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SelfHiAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SelfHiAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SelfHiAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SelfHiAct.Merge(m, src)
}
func (m *S2C_SelfHiAct) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SelfHiAct) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SelfHiAct.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SelfHiAct proto.InternalMessageInfo

func (m *S2C_SelfHiAct) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

func (m *S2C_SelfHiAct) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *S2C_SelfHiAct) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 澡堂交互
type C2S_BathroomInteract struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,3,opt,name=act_id" json:"act_id,omitempty"`
	TarRoleIndex         []int64  `protobuf:"zigzag64,4,rep,name=tar_role_index" json:"tar_role_index,omitempty"`
	TarX                 *int32   `protobuf:"zigzag32,5,opt,name=tar_x" json:"tar_x,omitempty"`
	TarY                 *int32   `protobuf:"zigzag32,6,opt,name=tar_y" json:"tar_y,omitempty"`
	Direction            *int32   `protobuf:"zigzag32,7,opt,name=direction" json:"direction,omitempty"`
	LeftTime             *int32   `protobuf:"zigzag32,8,opt,name=left_time" json:"left_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BathroomInteract) Reset()         { *m = C2S_BathroomInteract{} }
func (m *C2S_BathroomInteract) String() string { return proto.CompactTextString(m) }
func (*C2S_BathroomInteract) ProtoMessage()    {}
func (*C2S_BathroomInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{184}
}
func (m *C2S_BathroomInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BathroomInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BathroomInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BathroomInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BathroomInteract.Merge(m, src)
}
func (m *C2S_BathroomInteract) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BathroomInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BathroomInteract.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BathroomInteract proto.InternalMessageInfo

func (m *C2S_BathroomInteract) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_BathroomInteract) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *C2S_BathroomInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *C2S_BathroomInteract) GetTarRoleIndex() []int64 {
	if m != nil {
		return m.TarRoleIndex
	}
	return nil
}

func (m *C2S_BathroomInteract) GetTarX() int32 {
	if m != nil && m.TarX != nil {
		return *m.TarX
	}
	return 0
}

func (m *C2S_BathroomInteract) GetTarY() int32 {
	if m != nil && m.TarY != nil {
		return *m.TarY
	}
	return 0
}

func (m *C2S_BathroomInteract) GetDirection() int32 {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return 0
}

func (m *C2S_BathroomInteract) GetLeftTime() int32 {
	if m != nil && m.LeftTime != nil {
		return *m.LeftTime
	}
	return 0
}

type S2C_BathroomInteract struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SrcRoleIndex         *int64          `protobuf:"zigzag64,2,opt,name=src_role_index" json:"src_role_index,omitempty"`
	ActId                *int32          `protobuf:"zigzag32,3,opt,name=act_id" json:"act_id,omitempty"`
	TarRoleIndex         []int64         `protobuf:"zigzag64,4,rep,name=tar_role_index" json:"tar_role_index,omitempty"`
	LeftTime             *int32          `protobuf:"zigzag32,5,opt,name=left_time" json:"left_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BathroomInteract) Reset()         { *m = S2C_BathroomInteract{} }
func (m *S2C_BathroomInteract) String() string { return proto.CompactTextString(m) }
func (*S2C_BathroomInteract) ProtoMessage()    {}
func (*S2C_BathroomInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{185}
}
func (m *S2C_BathroomInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BathroomInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BathroomInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BathroomInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BathroomInteract.Merge(m, src)
}
func (m *S2C_BathroomInteract) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BathroomInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BathroomInteract.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BathroomInteract proto.InternalMessageInfo

func (m *S2C_BathroomInteract) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_BathroomInteract) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

func (m *S2C_BathroomInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *S2C_BathroomInteract) GetTarRoleIndex() []int64 {
	if m != nil {
		return m.TarRoleIndex
	}
	return nil
}

func (m *S2C_BathroomInteract) GetLeftTime() int32 {
	if m != nil && m.LeftTime != nil {
		return *m.LeftTime
	}
	return 0
}

// 转发交互
type S2S_BathroomInteract struct {
	SrcRoleIndex         *int64   `protobuf:"zigzag64,1,opt,name=src_role_index" json:"src_role_index,omitempty"`
	TarRoleIndex         *int64   `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,3,opt,name=act_id" json:"act_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2S_BathroomInteract) Reset()         { *m = S2S_BathroomInteract{} }
func (m *S2S_BathroomInteract) String() string { return proto.CompactTextString(m) }
func (*S2S_BathroomInteract) ProtoMessage()    {}
func (*S2S_BathroomInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{186}
}
func (m *S2S_BathroomInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_BathroomInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_BathroomInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_BathroomInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_BathroomInteract.Merge(m, src)
}
func (m *S2S_BathroomInteract) XXX_Size() int {
	return m.Size()
}
func (m *S2S_BathroomInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_BathroomInteract.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_BathroomInteract proto.InternalMessageInfo

func (m *S2S_BathroomInteract) GetSrcRoleIndex() int64 {
	if m != nil && m.SrcRoleIndex != nil {
		return *m.SrcRoleIndex
	}
	return 0
}

func (m *S2S_BathroomInteract) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *S2S_BathroomInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

// 穿脱PVE卡牌
type C2S_Dress_Card_PVE struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CardId               *int32   `protobuf:"zigzag32,2,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Dress_Card_PVE) Reset()         { *m = C2S_Dress_Card_PVE{} }
func (m *C2S_Dress_Card_PVE) String() string { return proto.CompactTextString(m) }
func (*C2S_Dress_Card_PVE) ProtoMessage()    {}
func (*C2S_Dress_Card_PVE) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{187}
}
func (m *C2S_Dress_Card_PVE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Dress_Card_PVE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Dress_Card_PVE.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Dress_Card_PVE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Dress_Card_PVE.Merge(m, src)
}
func (m *C2S_Dress_Card_PVE) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Dress_Card_PVE) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Dress_Card_PVE.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Dress_Card_PVE proto.InternalMessageInfo

func (m *C2S_Dress_Card_PVE) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Dress_Card_PVE) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

type S2C_Dress_Card_PVE struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CardId               *int32          `protobuf:"zigzag32,3,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Dress_Card_PVE) Reset()         { *m = S2C_Dress_Card_PVE{} }
func (m *S2C_Dress_Card_PVE) String() string { return proto.CompactTextString(m) }
func (*S2C_Dress_Card_PVE) ProtoMessage()    {}
func (*S2C_Dress_Card_PVE) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{188}
}
func (m *S2C_Dress_Card_PVE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Dress_Card_PVE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Dress_Card_PVE.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Dress_Card_PVE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Dress_Card_PVE.Merge(m, src)
}
func (m *S2C_Dress_Card_PVE) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Dress_Card_PVE) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Dress_Card_PVE.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Dress_Card_PVE proto.InternalMessageInfo

func (m *S2C_Dress_Card_PVE) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Dress_Card_PVE) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Dress_Card_PVE) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

type C2S_TakeOff_Card_PVE struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CardId               *int32   `protobuf:"zigzag32,2,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TakeOff_Card_PVE) Reset()         { *m = C2S_TakeOff_Card_PVE{} }
func (m *C2S_TakeOff_Card_PVE) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeOff_Card_PVE) ProtoMessage()    {}
func (*C2S_TakeOff_Card_PVE) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{189}
}
func (m *C2S_TakeOff_Card_PVE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeOff_Card_PVE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeOff_Card_PVE.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeOff_Card_PVE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeOff_Card_PVE.Merge(m, src)
}
func (m *C2S_TakeOff_Card_PVE) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeOff_Card_PVE) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeOff_Card_PVE.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeOff_Card_PVE proto.InternalMessageInfo

func (m *C2S_TakeOff_Card_PVE) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeOff_Card_PVE) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

type S2C_TakeOff_Card_PVE struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CardId               *int32          `protobuf:"zigzag32,3,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TakeOff_Card_PVE) Reset()         { *m = S2C_TakeOff_Card_PVE{} }
func (m *S2C_TakeOff_Card_PVE) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeOff_Card_PVE) ProtoMessage()    {}
func (*S2C_TakeOff_Card_PVE) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{190}
}
func (m *S2C_TakeOff_Card_PVE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeOff_Card_PVE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeOff_Card_PVE.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeOff_Card_PVE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeOff_Card_PVE.Merge(m, src)
}
func (m *S2C_TakeOff_Card_PVE) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeOff_Card_PVE) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeOff_Card_PVE.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeOff_Card_PVE proto.InternalMessageInfo

func (m *S2C_TakeOff_Card_PVE) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_TakeOff_Card_PVE) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeOff_Card_PVE) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

// 穿脱PVP卡牌
type C2S_Dress_Card_PVP struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CardId               *int32   `protobuf:"zigzag32,2,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Dress_Card_PVP) Reset()         { *m = C2S_Dress_Card_PVP{} }
func (m *C2S_Dress_Card_PVP) String() string { return proto.CompactTextString(m) }
func (*C2S_Dress_Card_PVP) ProtoMessage()    {}
func (*C2S_Dress_Card_PVP) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{191}
}
func (m *C2S_Dress_Card_PVP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Dress_Card_PVP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Dress_Card_PVP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Dress_Card_PVP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Dress_Card_PVP.Merge(m, src)
}
func (m *C2S_Dress_Card_PVP) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Dress_Card_PVP) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Dress_Card_PVP.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Dress_Card_PVP proto.InternalMessageInfo

func (m *C2S_Dress_Card_PVP) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Dress_Card_PVP) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

type S2C_Dress_Card_PVP struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CardId               *int32          `protobuf:"zigzag32,3,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Dress_Card_PVP) Reset()         { *m = S2C_Dress_Card_PVP{} }
func (m *S2C_Dress_Card_PVP) String() string { return proto.CompactTextString(m) }
func (*S2C_Dress_Card_PVP) ProtoMessage()    {}
func (*S2C_Dress_Card_PVP) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{192}
}
func (m *S2C_Dress_Card_PVP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Dress_Card_PVP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Dress_Card_PVP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Dress_Card_PVP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Dress_Card_PVP.Merge(m, src)
}
func (m *S2C_Dress_Card_PVP) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Dress_Card_PVP) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Dress_Card_PVP.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Dress_Card_PVP proto.InternalMessageInfo

func (m *S2C_Dress_Card_PVP) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Dress_Card_PVP) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Dress_Card_PVP) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

type C2S_TakeOff_Card_PVP struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CardId               *int32   `protobuf:"zigzag32,2,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TakeOff_Card_PVP) Reset()         { *m = C2S_TakeOff_Card_PVP{} }
func (m *C2S_TakeOff_Card_PVP) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeOff_Card_PVP) ProtoMessage()    {}
func (*C2S_TakeOff_Card_PVP) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{193}
}
func (m *C2S_TakeOff_Card_PVP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeOff_Card_PVP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeOff_Card_PVP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeOff_Card_PVP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeOff_Card_PVP.Merge(m, src)
}
func (m *C2S_TakeOff_Card_PVP) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeOff_Card_PVP) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeOff_Card_PVP.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeOff_Card_PVP proto.InternalMessageInfo

func (m *C2S_TakeOff_Card_PVP) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeOff_Card_PVP) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

type S2C_TakeOff_Card_PVP struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CardId               *int32          `protobuf:"zigzag32,3,opt,name=card_id" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TakeOff_Card_PVP) Reset()         { *m = S2C_TakeOff_Card_PVP{} }
func (m *S2C_TakeOff_Card_PVP) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeOff_Card_PVP) ProtoMessage()    {}
func (*S2C_TakeOff_Card_PVP) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{194}
}
func (m *S2C_TakeOff_Card_PVP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeOff_Card_PVP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeOff_Card_PVP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeOff_Card_PVP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeOff_Card_PVP.Merge(m, src)
}
func (m *S2C_TakeOff_Card_PVP) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeOff_Card_PVP) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeOff_Card_PVP.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeOff_Card_PVP proto.InternalMessageInfo

func (m *S2C_TakeOff_Card_PVP) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_TakeOff_Card_PVP) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeOff_Card_PVP) GetCardId() int32 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

// 竞技场相关
// 请求竞技场玩家列表
type C2S_ArenaPlayers struct {
	RoleIndex            *int64            `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetUnitindex         *int64            `protobuf:"zigzag64,2,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64            `protobuf:"zigzag64,3,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	RetLoginaddr         *int64            `protobuf:"zigzag64,4,opt,name=ret_loginaddr" json:"ret_loginaddr,omitempty"`
	SelfBattleInfo       *BattlePlayerInfo `protobuf:"bytes,5,opt,name=self_battle_info" json:"self_battle_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *C2S_ArenaPlayers) Reset()         { *m = C2S_ArenaPlayers{} }
func (m *C2S_ArenaPlayers) String() string { return proto.CompactTextString(m) }
func (*C2S_ArenaPlayers) ProtoMessage()    {}
func (*C2S_ArenaPlayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{195}
}
func (m *C2S_ArenaPlayers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ArenaPlayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ArenaPlayers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ArenaPlayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ArenaPlayers.Merge(m, src)
}
func (m *C2S_ArenaPlayers) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ArenaPlayers) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ArenaPlayers.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ArenaPlayers proto.InternalMessageInfo

func (m *C2S_ArenaPlayers) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ArenaPlayers) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_ArenaPlayers) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *C2S_ArenaPlayers) GetRetLoginaddr() int64 {
	if m != nil && m.RetLoginaddr != nil {
		return *m.RetLoginaddr
	}
	return 0
}

func (m *C2S_ArenaPlayers) GetSelfBattleInfo() *BattlePlayerInfo {
	if m != nil {
		return m.SelfBattleInfo
	}
	return nil
}

type S2C_ArenaPlayers struct {
	RetCode              *E_MSG_RET_CODE    `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SelfBattle           *ArenaBattleInfo   `protobuf:"bytes,2,opt,name=self_battle" json:"self_battle,omitempty"`
	Players              []*ArenaBattleInfo `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_ArenaPlayers) Reset()         { *m = S2C_ArenaPlayers{} }
func (m *S2C_ArenaPlayers) String() string { return proto.CompactTextString(m) }
func (*S2C_ArenaPlayers) ProtoMessage()    {}
func (*S2C_ArenaPlayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{196}
}
func (m *S2C_ArenaPlayers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArenaPlayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArenaPlayers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArenaPlayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArenaPlayers.Merge(m, src)
}
func (m *S2C_ArenaPlayers) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArenaPlayers) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArenaPlayers.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArenaPlayers proto.InternalMessageInfo

func (m *S2C_ArenaPlayers) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ArenaPlayers) GetSelfBattle() *ArenaBattleInfo {
	if m != nil {
		return m.SelfBattle
	}
	return nil
}

func (m *S2C_ArenaPlayers) GetPlayers() []*ArenaBattleInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

type C2S_StopArena struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_StopArena) Reset()         { *m = C2S_StopArena{} }
func (m *C2S_StopArena) String() string { return proto.CompactTextString(m) }
func (*C2S_StopArena) ProtoMessage()    {}
func (*C2S_StopArena) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{197}
}
func (m *C2S_StopArena) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_StopArena) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_StopArena.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_StopArena) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_StopArena.Merge(m, src)
}
func (m *C2S_StopArena) XXX_Size() int {
	return m.Size()
}
func (m *C2S_StopArena) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_StopArena.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_StopArena proto.InternalMessageInfo

func (m *C2S_StopArena) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type C2S_Arena_NearSelf struct {
	RoleIndex            *int64           `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SelfInfo             *ArenaPlayerInfo `protobuf:"bytes,2,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64           `protobuf:"zigzag64,3,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64           `protobuf:"zigzag64,4,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *C2S_Arena_NearSelf) Reset()         { *m = C2S_Arena_NearSelf{} }
func (m *C2S_Arena_NearSelf) String() string { return proto.CompactTextString(m) }
func (*C2S_Arena_NearSelf) ProtoMessage()    {}
func (*C2S_Arena_NearSelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{198}
}
func (m *C2S_Arena_NearSelf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Arena_NearSelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Arena_NearSelf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Arena_NearSelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Arena_NearSelf.Merge(m, src)
}
func (m *C2S_Arena_NearSelf) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Arena_NearSelf) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Arena_NearSelf.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Arena_NearSelf proto.InternalMessageInfo

func (m *C2S_Arena_NearSelf) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Arena_NearSelf) GetSelfInfo() *ArenaPlayerInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_Arena_NearSelf) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_Arena_NearSelf) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_Arena_NearSelf struct {
	Players              []*ArenaPlayerInfo `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_Arena_NearSelf) Reset()         { *m = S2C_Arena_NearSelf{} }
func (m *S2C_Arena_NearSelf) String() string { return proto.CompactTextString(m) }
func (*S2C_Arena_NearSelf) ProtoMessage()    {}
func (*S2C_Arena_NearSelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{199}
}
func (m *S2C_Arena_NearSelf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Arena_NearSelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Arena_NearSelf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Arena_NearSelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Arena_NearSelf.Merge(m, src)
}
func (m *S2C_Arena_NearSelf) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Arena_NearSelf) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Arena_NearSelf.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Arena_NearSelf proto.InternalMessageInfo

func (m *S2C_Arena_NearSelf) GetPlayers() []*ArenaPlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

// 准备进入竞技场
type C2S_ReadyEnterArenaScene struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,3,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ReadyEnterArenaScene) Reset()         { *m = C2S_ReadyEnterArenaScene{} }
func (m *C2S_ReadyEnterArenaScene) String() string { return proto.CompactTextString(m) }
func (*C2S_ReadyEnterArenaScene) ProtoMessage()    {}
func (*C2S_ReadyEnterArenaScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{200}
}
func (m *C2S_ReadyEnterArenaScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ReadyEnterArenaScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ReadyEnterArenaScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ReadyEnterArenaScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ReadyEnterArenaScene.Merge(m, src)
}
func (m *C2S_ReadyEnterArenaScene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ReadyEnterArenaScene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ReadyEnterArenaScene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ReadyEnterArenaScene proto.InternalMessageInfo

func (m *C2S_ReadyEnterArenaScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ReadyEnterArenaScene) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *C2S_ReadyEnterArenaScene) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

type S2C_ReadyEnterArenaScene struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ReadyEnterArenaScene) Reset()         { *m = S2C_ReadyEnterArenaScene{} }
func (m *S2C_ReadyEnterArenaScene) String() string { return proto.CompactTextString(m) }
func (*S2C_ReadyEnterArenaScene) ProtoMessage()    {}
func (*S2C_ReadyEnterArenaScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{201}
}
func (m *S2C_ReadyEnterArenaScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ReadyEnterArenaScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ReadyEnterArenaScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ReadyEnterArenaScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ReadyEnterArenaScene.Merge(m, src)
}
func (m *S2C_ReadyEnterArenaScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ReadyEnterArenaScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ReadyEnterArenaScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ReadyEnterArenaScene proto.InternalMessageInfo

func (m *S2C_ReadyEnterArenaScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 刷新竞技场玩家列表
type C2S_RefreshArena struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RefreshArena) Reset()         { *m = C2S_RefreshArena{} }
func (m *C2S_RefreshArena) String() string { return proto.CompactTextString(m) }
func (*C2S_RefreshArena) ProtoMessage()    {}
func (*C2S_RefreshArena) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{202}
}
func (m *C2S_RefreshArena) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RefreshArena) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RefreshArena.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RefreshArena) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RefreshArena.Merge(m, src)
}
func (m *C2S_RefreshArena) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RefreshArena) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RefreshArena.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RefreshArena proto.InternalMessageInfo

func (m *C2S_RefreshArena) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_RefreshArena struct {
	Players              []*ArenaPlayerInfo `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_RefreshArena) Reset()         { *m = S2C_RefreshArena{} }
func (m *S2C_RefreshArena) String() string { return proto.CompactTextString(m) }
func (*S2C_RefreshArena) ProtoMessage()    {}
func (*S2C_RefreshArena) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{203}
}
func (m *S2C_RefreshArena) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RefreshArena) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RefreshArena.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RefreshArena) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RefreshArena.Merge(m, src)
}
func (m *S2C_RefreshArena) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RefreshArena) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RefreshArena.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RefreshArena proto.InternalMessageInfo

func (m *S2C_RefreshArena) GetPlayers() []*ArenaPlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

// 请求竞技场信息
type C2S_ArenaInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ArenaInfo) Reset()         { *m = C2S_ArenaInfo{} }
func (m *C2S_ArenaInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_ArenaInfo) ProtoMessage()    {}
func (*C2S_ArenaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{204}
}
func (m *C2S_ArenaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ArenaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ArenaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ArenaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ArenaInfo.Merge(m, src)
}
func (m *C2S_ArenaInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ArenaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ArenaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ArenaInfo proto.InternalMessageInfo

func (m *C2S_ArenaInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ArenaInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ArenaInfo            *DbArenaInfo    `protobuf:"bytes,2,opt,name=arena_info" json:"arena_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ArenaInfo) Reset()         { *m = S2C_ArenaInfo{} }
func (m *S2C_ArenaInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_ArenaInfo) ProtoMessage()    {}
func (*S2C_ArenaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{205}
}
func (m *S2C_ArenaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArenaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArenaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArenaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArenaInfo.Merge(m, src)
}
func (m *S2C_ArenaInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArenaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArenaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArenaInfo proto.InternalMessageInfo

func (m *S2C_ArenaInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ArenaInfo) GetArenaInfo() *DbArenaInfo {
	if m != nil {
		return m.ArenaInfo
	}
	return nil
}

// 请求竞技
type C2S_ArenaFight struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarRoleIndex         *int64   `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	TarArenaRank         *int32   `protobuf:"zigzag32,3,opt,name=tar_arena_rank" json:"tar_arena_rank,omitempty"`
	RetAddr              *int64   `protobuf:"zigzag64,4,opt,name=ret_addr" json:"ret_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ArenaFight) Reset()         { *m = C2S_ArenaFight{} }
func (m *C2S_ArenaFight) String() string { return proto.CompactTextString(m) }
func (*C2S_ArenaFight) ProtoMessage()    {}
func (*C2S_ArenaFight) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{206}
}
func (m *C2S_ArenaFight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ArenaFight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ArenaFight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ArenaFight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ArenaFight.Merge(m, src)
}
func (m *C2S_ArenaFight) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ArenaFight) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ArenaFight.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ArenaFight proto.InternalMessageInfo

func (m *C2S_ArenaFight) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ArenaFight) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *C2S_ArenaFight) GetTarArenaRank() int32 {
	if m != nil && m.TarArenaRank != nil {
		return *m.TarArenaRank
	}
	return 0
}

func (m *C2S_ArenaFight) GetRetAddr() int64 {
	if m != nil && m.RetAddr != nil {
		return *m.RetAddr
	}
	return 0
}

type S2C_ArenaFight struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	TarRoleIndex         *int64          `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	TarArenaRank         *int32          `protobuf:"zigzag32,3,opt,name=tar_arena_rank" json:"tar_arena_rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ArenaFight) Reset()         { *m = S2C_ArenaFight{} }
func (m *S2C_ArenaFight) String() string { return proto.CompactTextString(m) }
func (*S2C_ArenaFight) ProtoMessage()    {}
func (*S2C_ArenaFight) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{207}
}
func (m *S2C_ArenaFight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArenaFight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArenaFight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArenaFight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArenaFight.Merge(m, src)
}
func (m *S2C_ArenaFight) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArenaFight) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArenaFight.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArenaFight proto.InternalMessageInfo

func (m *S2C_ArenaFight) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ArenaFight) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *S2C_ArenaFight) GetTarArenaRank() int32 {
	if m != nil && m.TarArenaRank != nil {
		return *m.TarArenaRank
	}
	return 0
}

// 竞技结果
type C2S_ArenaFightEnd struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarRoleIndex         *int64          `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	Passed               *bool           `protobuf:"varint,3,opt,name=passed" json:"passed,omitempty"`
	SkillUseInfos        []*SkillUseInfo `protobuf:"bytes,4,rep,name=skill_use_infos" json:"skill_use_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *C2S_ArenaFightEnd) Reset()         { *m = C2S_ArenaFightEnd{} }
func (m *C2S_ArenaFightEnd) String() string { return proto.CompactTextString(m) }
func (*C2S_ArenaFightEnd) ProtoMessage()    {}
func (*C2S_ArenaFightEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{208}
}
func (m *C2S_ArenaFightEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ArenaFightEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ArenaFightEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ArenaFightEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ArenaFightEnd.Merge(m, src)
}
func (m *C2S_ArenaFightEnd) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ArenaFightEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ArenaFightEnd.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ArenaFightEnd proto.InternalMessageInfo

func (m *C2S_ArenaFightEnd) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ArenaFightEnd) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *C2S_ArenaFightEnd) GetPassed() bool {
	if m != nil && m.Passed != nil {
		return *m.Passed
	}
	return false
}

func (m *C2S_ArenaFightEnd) GetSkillUseInfos() []*SkillUseInfo {
	if m != nil {
		return m.SkillUseInfos
	}
	return nil
}

type S2C_ArenaFightEnd struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	AtkOldRank           *int32          `protobuf:"zigzag32,3,opt,name=atk_old_rank" json:"atk_old_rank,omitempty"`
	DefOldRank           *int32          `protobuf:"zigzag32,4,opt,name=def_old_rank" json:"def_old_rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ArenaFightEnd) Reset()         { *m = S2C_ArenaFightEnd{} }
func (m *S2C_ArenaFightEnd) String() string { return proto.CompactTextString(m) }
func (*S2C_ArenaFightEnd) ProtoMessage()    {}
func (*S2C_ArenaFightEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{209}
}
func (m *S2C_ArenaFightEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArenaFightEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArenaFightEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArenaFightEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArenaFightEnd.Merge(m, src)
}
func (m *S2C_ArenaFightEnd) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArenaFightEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArenaFightEnd.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArenaFightEnd proto.InternalMessageInfo

func (m *S2C_ArenaFightEnd) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ArenaFightEnd) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *S2C_ArenaFightEnd) GetAtkOldRank() int32 {
	if m != nil && m.AtkOldRank != nil {
		return *m.AtkOldRank
	}
	return 0
}

func (m *S2C_ArenaFightEnd) GetDefOldRank() int32 {
	if m != nil && m.DefOldRank != nil {
		return *m.DefOldRank
	}
	return 0
}

// 好友切磋竞技结果
type C2S_FriendFightEnd struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarRoleIndex         *int64          `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	Passed               *bool           `protobuf:"varint,3,opt,name=passed" json:"passed,omitempty"`
	SkillUseInfos        []*SkillUseInfo `protobuf:"bytes,4,rep,name=skill_use_infos" json:"skill_use_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *C2S_FriendFightEnd) Reset()         { *m = C2S_FriendFightEnd{} }
func (m *C2S_FriendFightEnd) String() string { return proto.CompactTextString(m) }
func (*C2S_FriendFightEnd) ProtoMessage()    {}
func (*C2S_FriendFightEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{210}
}
func (m *C2S_FriendFightEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FriendFightEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FriendFightEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FriendFightEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FriendFightEnd.Merge(m, src)
}
func (m *C2S_FriendFightEnd) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FriendFightEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FriendFightEnd.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FriendFightEnd proto.InternalMessageInfo

func (m *C2S_FriendFightEnd) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FriendFightEnd) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *C2S_FriendFightEnd) GetPassed() bool {
	if m != nil && m.Passed != nil {
		return *m.Passed
	}
	return false
}

func (m *C2S_FriendFightEnd) GetSkillUseInfos() []*SkillUseInfo {
	if m != nil {
		return m.SkillUseInfos
	}
	return nil
}

type S2C_FriendFightEnd struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,2,rep,name=reward" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_FriendFightEnd) Reset()         { *m = S2C_FriendFightEnd{} }
func (m *S2C_FriendFightEnd) String() string { return proto.CompactTextString(m) }
func (*S2C_FriendFightEnd) ProtoMessage()    {}
func (*S2C_FriendFightEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{211}
}
func (m *S2C_FriendFightEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FriendFightEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FriendFightEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FriendFightEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FriendFightEnd.Merge(m, src)
}
func (m *S2C_FriendFightEnd) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FriendFightEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FriendFightEnd.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FriendFightEnd proto.InternalMessageInfo

func (m *S2C_FriendFightEnd) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_FriendFightEnd) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 历史排名上升奖励，仅服务器推送
type S2C_HistoryRankReward struct {
	Reward               []*RewardInfo `protobuf:"bytes,1,rep,name=reward" json:"reward,omitempty"`
	CurrRank             *int32        `protobuf:"zigzag32,2,opt,name=curr_rank" json:"curr_rank,omitempty"`
	HistoryRank          *int32        `protobuf:"zigzag32,3,opt,name=history_rank" json:"history_rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_HistoryRankReward) Reset()         { *m = S2C_HistoryRankReward{} }
func (m *S2C_HistoryRankReward) String() string { return proto.CompactTextString(m) }
func (*S2C_HistoryRankReward) ProtoMessage()    {}
func (*S2C_HistoryRankReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{212}
}
func (m *S2C_HistoryRankReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_HistoryRankReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_HistoryRankReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_HistoryRankReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_HistoryRankReward.Merge(m, src)
}
func (m *S2C_HistoryRankReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_HistoryRankReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_HistoryRankReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_HistoryRankReward proto.InternalMessageInfo

func (m *S2C_HistoryRankReward) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *S2C_HistoryRankReward) GetCurrRank() int32 {
	if m != nil && m.CurrRank != nil {
		return *m.CurrRank
	}
	return 0
}

func (m *S2C_HistoryRankReward) GetHistoryRank() int32 {
	if m != nil && m.HistoryRank != nil {
		return *m.HistoryRank
	}
	return 0
}

// 竞技场杀人榜信息
type C2S_KillListInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarRoleIndex         *int64   `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_KillListInfo) Reset()         { *m = C2S_KillListInfo{} }
func (m *C2S_KillListInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_KillListInfo) ProtoMessage()    {}
func (*C2S_KillListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{213}
}
func (m *C2S_KillListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_KillListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_KillListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_KillListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_KillListInfo.Merge(m, src)
}
func (m *C2S_KillListInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_KillListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_KillListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_KillListInfo proto.InternalMessageInfo

func (m *C2S_KillListInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_KillListInfo) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

type S2C_KillListInfo struct {
	RetCode              *E_MSG_RET_CODE    `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ShowMyself           *PlayerShowInfo    `protobuf:"bytes,2,opt,name=show_myself" json:"show_myself,omitempty"`
	KillList             []*DbArenaKillInfo `protobuf:"bytes,3,rep,name=kill_list" json:"kill_list,omitempty"`
	TotalNum             *int32             `protobuf:"zigzag32,4,opt,name=total_num" json:"total_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_KillListInfo) Reset()         { *m = S2C_KillListInfo{} }
func (m *S2C_KillListInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_KillListInfo) ProtoMessage()    {}
func (*S2C_KillListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{214}
}
func (m *S2C_KillListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_KillListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_KillListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_KillListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_KillListInfo.Merge(m, src)
}
func (m *S2C_KillListInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_KillListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_KillListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_KillListInfo proto.InternalMessageInfo

func (m *S2C_KillListInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_KillListInfo) GetShowMyself() *PlayerShowInfo {
	if m != nil {
		return m.ShowMyself
	}
	return nil
}

func (m *S2C_KillListInfo) GetKillList() []*DbArenaKillInfo {
	if m != nil {
		return m.KillList
	}
	return nil
}

func (m *S2C_KillListInfo) GetTotalNum() int32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

// 请求名片
type C2S_VisitingCard struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TarRoleIndex         *int64   `protobuf:"zigzag64,2,opt,name=tar_role_index" json:"tar_role_index,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_VisitingCard) Reset()         { *m = C2S_VisitingCard{} }
func (m *C2S_VisitingCard) String() string { return proto.CompactTextString(m) }
func (*C2S_VisitingCard) ProtoMessage()    {}
func (*C2S_VisitingCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{215}
}
func (m *C2S_VisitingCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_VisitingCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_VisitingCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_VisitingCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_VisitingCard.Merge(m, src)
}
func (m *C2S_VisitingCard) XXX_Size() int {
	return m.Size()
}
func (m *C2S_VisitingCard) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_VisitingCard.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_VisitingCard proto.InternalMessageInfo

func (m *C2S_VisitingCard) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_VisitingCard) GetTarRoleIndex() int64 {
	if m != nil && m.TarRoleIndex != nil {
		return *m.TarRoleIndex
	}
	return 0
}

func (m *C2S_VisitingCard) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_VisitingCard) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_VisitingCard struct {
	RetCode              *E_MSG_RET_CODE   `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	DbCardInfo           *VisitingCardInfo `protobuf:"bytes,2,opt,name=db_card_info" json:"db_card_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_VisitingCard) Reset()         { *m = S2C_VisitingCard{} }
func (m *S2C_VisitingCard) String() string { return proto.CompactTextString(m) }
func (*S2C_VisitingCard) ProtoMessage()    {}
func (*S2C_VisitingCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{216}
}
func (m *S2C_VisitingCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_VisitingCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_VisitingCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_VisitingCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_VisitingCard.Merge(m, src)
}
func (m *S2C_VisitingCard) XXX_Size() int {
	return m.Size()
}
func (m *S2C_VisitingCard) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_VisitingCard.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_VisitingCard proto.InternalMessageInfo

func (m *S2C_VisitingCard) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_VisitingCard) GetDbCardInfo() *VisitingCardInfo {
	if m != nil {
		return m.DbCardInfo
	}
	return nil
}

// 购买竞技场次数
type C2S_BuyArenaCount struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BuyArenaCount) Reset()         { *m = C2S_BuyArenaCount{} }
func (m *C2S_BuyArenaCount) String() string { return proto.CompactTextString(m) }
func (*C2S_BuyArenaCount) ProtoMessage()    {}
func (*C2S_BuyArenaCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{217}
}
func (m *C2S_BuyArenaCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BuyArenaCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BuyArenaCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BuyArenaCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BuyArenaCount.Merge(m, src)
}
func (m *C2S_BuyArenaCount) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BuyArenaCount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BuyArenaCount.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BuyArenaCount proto.InternalMessageInfo

func (m *C2S_BuyArenaCount) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_BuyArenaCount struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	BuyCount             *int32          `protobuf:"zigzag32,2,opt,name=buy_count" json:"buy_count,omitempty"`
	TotalCount           *int32          `protobuf:"zigzag32,3,opt,name=total_count" json:"total_count,omitempty"`
	LeftCount            *int32          `protobuf:"zigzag32,4,opt,name=left_count" json:"left_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BuyArenaCount) Reset()         { *m = S2C_BuyArenaCount{} }
func (m *S2C_BuyArenaCount) String() string { return proto.CompactTextString(m) }
func (*S2C_BuyArenaCount) ProtoMessage()    {}
func (*S2C_BuyArenaCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{218}
}
func (m *S2C_BuyArenaCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BuyArenaCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BuyArenaCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BuyArenaCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BuyArenaCount.Merge(m, src)
}
func (m *S2C_BuyArenaCount) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BuyArenaCount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BuyArenaCount.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BuyArenaCount proto.InternalMessageInfo

func (m *S2C_BuyArenaCount) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_BuyArenaCount) GetBuyCount() int32 {
	if m != nil && m.BuyCount != nil {
		return *m.BuyCount
	}
	return 0
}

func (m *S2C_BuyArenaCount) GetTotalCount() int32 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *S2C_BuyArenaCount) GetLeftCount() int32 {
	if m != nil && m.LeftCount != nil {
		return *m.LeftCount
	}
	return 0
}

// 清理竞技场CD时间
type C2S_ClearArenaCD struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ClearArenaCD) Reset()         { *m = C2S_ClearArenaCD{} }
func (m *C2S_ClearArenaCD) String() string { return proto.CompactTextString(m) }
func (*C2S_ClearArenaCD) ProtoMessage()    {}
func (*C2S_ClearArenaCD) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{219}
}
func (m *C2S_ClearArenaCD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ClearArenaCD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ClearArenaCD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ClearArenaCD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ClearArenaCD.Merge(m, src)
}
func (m *C2S_ClearArenaCD) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ClearArenaCD) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ClearArenaCD.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ClearArenaCD proto.InternalMessageInfo

func (m *C2S_ClearArenaCD) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ClearArenaCD struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ClearArenaCD) Reset()         { *m = S2C_ClearArenaCD{} }
func (m *S2C_ClearArenaCD) String() string { return proto.CompactTextString(m) }
func (*S2C_ClearArenaCD) ProtoMessage()    {}
func (*S2C_ClearArenaCD) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{220}
}
func (m *S2C_ClearArenaCD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ClearArenaCD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ClearArenaCD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ClearArenaCD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ClearArenaCD.Merge(m, src)
}
func (m *S2C_ClearArenaCD) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ClearArenaCD) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ClearArenaCD.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ClearArenaCD proto.InternalMessageInfo

func (m *S2C_ClearArenaCD) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 琅琊榜
type C2S_OpenStar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	LoginAddr            *int64   `protobuf:"zigzag64,2,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64   `protobuf:"zigzag64,3,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_OpenStar) Reset()         { *m = C2S_OpenStar{} }
func (m *C2S_OpenStar) String() string { return proto.CompactTextString(m) }
func (*C2S_OpenStar) ProtoMessage()    {}
func (*C2S_OpenStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{221}
}
func (m *C2S_OpenStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_OpenStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_OpenStar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_OpenStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_OpenStar.Merge(m, src)
}
func (m *C2S_OpenStar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_OpenStar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_OpenStar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_OpenStar proto.InternalMessageInfo

func (m *C2S_OpenStar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_OpenStar) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_OpenStar) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_OpenStar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RisenPlayInfo        *PlayerShowInfo `protobuf:"bytes,2,opt,name=risen_play_info" json:"risen_play_info,omitempty"`
	ArenaPlayInfo        *PlayerShowInfo `protobuf:"bytes,3,opt,name=arena_play_info" json:"arena_play_info,omitempty"`
	DiamondPlayInfo      *PlayerShowInfo `protobuf:"bytes,4,opt,name=diamond_play_info" json:"diamond_play_info,omitempty"`
	KillPlayInfo         *PlayerShowInfo `protobuf:"bytes,5,opt,name=kill_play_info" json:"kill_play_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_OpenStar) Reset()         { *m = S2C_OpenStar{} }
func (m *S2C_OpenStar) String() string { return proto.CompactTextString(m) }
func (*S2C_OpenStar) ProtoMessage()    {}
func (*S2C_OpenStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{222}
}
func (m *S2C_OpenStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_OpenStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_OpenStar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_OpenStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_OpenStar.Merge(m, src)
}
func (m *S2C_OpenStar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_OpenStar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_OpenStar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_OpenStar proto.InternalMessageInfo

func (m *S2C_OpenStar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_OpenStar) GetRisenPlayInfo() *PlayerShowInfo {
	if m != nil {
		return m.RisenPlayInfo
	}
	return nil
}

func (m *S2C_OpenStar) GetArenaPlayInfo() *PlayerShowInfo {
	if m != nil {
		return m.ArenaPlayInfo
	}
	return nil
}

func (m *S2C_OpenStar) GetDiamondPlayInfo() *PlayerShowInfo {
	if m != nil {
		return m.DiamondPlayInfo
	}
	return nil
}

func (m *S2C_OpenStar) GetKillPlayInfo() *PlayerShowInfo {
	if m != nil {
		return m.KillPlayInfo
	}
	return nil
}

// 崛起星排行查询
type C2S_QueryRisenStar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_QueryRisenStar) Reset()         { *m = C2S_QueryRisenStar{} }
func (m *C2S_QueryRisenStar) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryRisenStar) ProtoMessage()    {}
func (*C2S_QueryRisenStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{223}
}
func (m *C2S_QueryRisenStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryRisenStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryRisenStar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryRisenStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryRisenStar.Merge(m, src)
}
func (m *C2S_QueryRisenStar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryRisenStar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryRisenStar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryRisenStar proto.InternalMessageInfo

func (m *C2S_QueryRisenStar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_QueryRisenStar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RankInfos            []*RankInfo     `protobuf:"bytes,2,rep,name=rank_infos" json:"rank_infos,omitempty"`
	HistoryTopRank       *int32          `protobuf:"zigzag32,3,opt,name=history_top_rank" json:"history_top_rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryRisenStar) Reset()         { *m = S2C_QueryRisenStar{} }
func (m *S2C_QueryRisenStar) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryRisenStar) ProtoMessage()    {}
func (*S2C_QueryRisenStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{224}
}
func (m *S2C_QueryRisenStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryRisenStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryRisenStar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryRisenStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryRisenStar.Merge(m, src)
}
func (m *S2C_QueryRisenStar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryRisenStar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryRisenStar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryRisenStar proto.InternalMessageInfo

func (m *S2C_QueryRisenStar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryRisenStar) GetRankInfos() []*RankInfo {
	if m != nil {
		return m.RankInfos
	}
	return nil
}

func (m *S2C_QueryRisenStar) GetHistoryTopRank() int32 {
	if m != nil && m.HistoryTopRank != nil {
		return *m.HistoryTopRank
	}
	return 0
}

// 崛起星排行查询(等级排行改版协议)
type C2S_QueryLevelRankListInfo struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PageNum              *int32    `protobuf:"zigzag32,2,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,3,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,4,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,5,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_QueryLevelRankListInfo) Reset()         { *m = C2S_QueryLevelRankListInfo{} }
func (m *C2S_QueryLevelRankListInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryLevelRankListInfo) ProtoMessage()    {}
func (*C2S_QueryLevelRankListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{225}
}
func (m *C2S_QueryLevelRankListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryLevelRankListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryLevelRankListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryLevelRankListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryLevelRankListInfo.Merge(m, src)
}
func (m *C2S_QueryLevelRankListInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryLevelRankListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryLevelRankListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryLevelRankListInfo proto.InternalMessageInfo

func (m *C2S_QueryLevelRankListInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QueryLevelRankListInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *C2S_QueryLevelRankListInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_QueryLevelRankListInfo) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_QueryLevelRankListInfo) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_QueryLevelRankListInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryLevelRankListInfo) Reset()         { *m = S2C_QueryLevelRankListInfo{} }
func (m *S2C_QueryLevelRankListInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryLevelRankListInfo) ProtoMessage()    {}
func (*S2C_QueryLevelRankListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{226}
}
func (m *S2C_QueryLevelRankListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryLevelRankListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryLevelRankListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryLevelRankListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryLevelRankListInfo.Merge(m, src)
}
func (m *S2C_QueryLevelRankListInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryLevelRankListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryLevelRankListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryLevelRankListInfo proto.InternalMessageInfo

func (m *S2C_QueryLevelRankListInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryLevelRankListInfo) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_QueryLevelRankListInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_QueryLevelRankListInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_QueryLevelRankListInfo) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_QueryLevelRankListInfo) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 定位自己所在排行页
type C2S_LevelRankLocationSelf struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,2,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,3,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,4,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_LevelRankLocationSelf) Reset()         { *m = C2S_LevelRankLocationSelf{} }
func (m *C2S_LevelRankLocationSelf) String() string { return proto.CompactTextString(m) }
func (*C2S_LevelRankLocationSelf) ProtoMessage()    {}
func (*C2S_LevelRankLocationSelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{227}
}
func (m *C2S_LevelRankLocationSelf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_LevelRankLocationSelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_LevelRankLocationSelf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_LevelRankLocationSelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_LevelRankLocationSelf.Merge(m, src)
}
func (m *C2S_LevelRankLocationSelf) XXX_Size() int {
	return m.Size()
}
func (m *C2S_LevelRankLocationSelf) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_LevelRankLocationSelf.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_LevelRankLocationSelf proto.InternalMessageInfo

func (m *C2S_LevelRankLocationSelf) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_LevelRankLocationSelf) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_LevelRankLocationSelf) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_LevelRankLocationSelf) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_LevelRankLocationSelf struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_LevelRankLocationSelf) Reset()         { *m = S2C_LevelRankLocationSelf{} }
func (m *S2C_LevelRankLocationSelf) String() string { return proto.CompactTextString(m) }
func (*S2C_LevelRankLocationSelf) ProtoMessage()    {}
func (*S2C_LevelRankLocationSelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{228}
}
func (m *S2C_LevelRankLocationSelf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_LevelRankLocationSelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_LevelRankLocationSelf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_LevelRankLocationSelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_LevelRankLocationSelf.Merge(m, src)
}
func (m *S2C_LevelRankLocationSelf) XXX_Size() int {
	return m.Size()
}
func (m *S2C_LevelRankLocationSelf) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_LevelRankLocationSelf.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_LevelRankLocationSelf proto.InternalMessageInfo

func (m *S2C_LevelRankLocationSelf) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_LevelRankLocationSelf) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_LevelRankLocationSelf) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_LevelRankLocationSelf) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_LevelRankLocationSelf) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_LevelRankLocationSelf) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 水管星排行查询
type C2S_QueryArenaStar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_QueryArenaStar) Reset()         { *m = C2S_QueryArenaStar{} }
func (m *C2S_QueryArenaStar) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryArenaStar) ProtoMessage()    {}
func (*C2S_QueryArenaStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{229}
}
func (m *C2S_QueryArenaStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryArenaStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryArenaStar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryArenaStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryArenaStar.Merge(m, src)
}
func (m *C2S_QueryArenaStar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryArenaStar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryArenaStar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryArenaStar proto.InternalMessageInfo

func (m *C2S_QueryArenaStar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_QueryArenaStar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RankInfos            []*RankInfo     `protobuf:"bytes,2,rep,name=rank_infos" json:"rank_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryArenaStar) Reset()         { *m = S2C_QueryArenaStar{} }
func (m *S2C_QueryArenaStar) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryArenaStar) ProtoMessage()    {}
func (*S2C_QueryArenaStar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{230}
}
func (m *S2C_QueryArenaStar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryArenaStar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryArenaStar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryArenaStar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryArenaStar.Merge(m, src)
}
func (m *S2C_QueryArenaStar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryArenaStar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryArenaStar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryArenaStar proto.InternalMessageInfo

func (m *S2C_QueryArenaStar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryArenaStar) GetRankInfos() []*RankInfo {
	if m != nil {
		return m.RankInfos
	}
	return nil
}

// 新排行榜协议
// 按页码查询排行榜信息
type C2S_QueryArenaRankListInfo struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PageNum              *int32    `protobuf:"zigzag32,2,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,3,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,4,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,5,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_QueryArenaRankListInfo) Reset()         { *m = C2S_QueryArenaRankListInfo{} }
func (m *C2S_QueryArenaRankListInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryArenaRankListInfo) ProtoMessage()    {}
func (*C2S_QueryArenaRankListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{231}
}
func (m *C2S_QueryArenaRankListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryArenaRankListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryArenaRankListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryArenaRankListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryArenaRankListInfo.Merge(m, src)
}
func (m *C2S_QueryArenaRankListInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryArenaRankListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryArenaRankListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryArenaRankListInfo proto.InternalMessageInfo

func (m *C2S_QueryArenaRankListInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QueryArenaRankListInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *C2S_QueryArenaRankListInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_QueryArenaRankListInfo) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_QueryArenaRankListInfo) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_QueryArenaRankListInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryArenaRankListInfo) Reset()         { *m = S2C_QueryArenaRankListInfo{} }
func (m *S2C_QueryArenaRankListInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryArenaRankListInfo) ProtoMessage()    {}
func (*S2C_QueryArenaRankListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{232}
}
func (m *S2C_QueryArenaRankListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryArenaRankListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryArenaRankListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryArenaRankListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryArenaRankListInfo.Merge(m, src)
}
func (m *S2C_QueryArenaRankListInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryArenaRankListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryArenaRankListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryArenaRankListInfo proto.InternalMessageInfo

func (m *S2C_QueryArenaRankListInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryArenaRankListInfo) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_QueryArenaRankListInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_QueryArenaRankListInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_QueryArenaRankListInfo) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_QueryArenaRankListInfo) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 定位自己所在排行页
type C2S_ArenaRankLocationSelf struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,2,opt,name=self_info" json:"self_info,omitempty"`
	SelfRank             *int32    `protobuf:"zigzag32,3,opt,name=self_rank" json:"self_rank,omitempty"`
	SelfSeqRank          *int32    `protobuf:"zigzag32,4,opt,name=self_seq_rank" json:"self_seq_rank,omitempty"`
	TotalNum             *int32    `protobuf:"zigzag32,5,opt,name=total_num" json:"total_num,omitempty"`
	TheOneRank           *int32    `protobuf:"zigzag32,6,opt,name=the_one_rank" json:"the_one_rank,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,7,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,8,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_ArenaRankLocationSelf) Reset()         { *m = C2S_ArenaRankLocationSelf{} }
func (m *C2S_ArenaRankLocationSelf) String() string { return proto.CompactTextString(m) }
func (*C2S_ArenaRankLocationSelf) ProtoMessage()    {}
func (*C2S_ArenaRankLocationSelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{233}
}
func (m *C2S_ArenaRankLocationSelf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ArenaRankLocationSelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ArenaRankLocationSelf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ArenaRankLocationSelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ArenaRankLocationSelf.Merge(m, src)
}
func (m *C2S_ArenaRankLocationSelf) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ArenaRankLocationSelf) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ArenaRankLocationSelf.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ArenaRankLocationSelf proto.InternalMessageInfo

func (m *C2S_ArenaRankLocationSelf) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ArenaRankLocationSelf) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_ArenaRankLocationSelf) GetSelfRank() int32 {
	if m != nil && m.SelfRank != nil {
		return *m.SelfRank
	}
	return 0
}

func (m *C2S_ArenaRankLocationSelf) GetSelfSeqRank() int32 {
	if m != nil && m.SelfSeqRank != nil {
		return *m.SelfSeqRank
	}
	return 0
}

func (m *C2S_ArenaRankLocationSelf) GetTotalNum() int32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *C2S_ArenaRankLocationSelf) GetTheOneRank() int32 {
	if m != nil && m.TheOneRank != nil {
		return *m.TheOneRank
	}
	return 0
}

func (m *C2S_ArenaRankLocationSelf) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_ArenaRankLocationSelf) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_ArenaRankLocationSelf struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ArenaRankLocationSelf) Reset()         { *m = S2C_ArenaRankLocationSelf{} }
func (m *S2C_ArenaRankLocationSelf) String() string { return proto.CompactTextString(m) }
func (*S2C_ArenaRankLocationSelf) ProtoMessage()    {}
func (*S2C_ArenaRankLocationSelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{234}
}
func (m *S2C_ArenaRankLocationSelf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArenaRankLocationSelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArenaRankLocationSelf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArenaRankLocationSelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArenaRankLocationSelf.Merge(m, src)
}
func (m *S2C_ArenaRankLocationSelf) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArenaRankLocationSelf) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArenaRankLocationSelf.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArenaRankLocationSelf proto.InternalMessageInfo

func (m *S2C_ArenaRankLocationSelf) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ArenaRankLocationSelf) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_ArenaRankLocationSelf) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_ArenaRankLocationSelf) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_ArenaRankLocationSelf) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_ArenaRankLocationSelf) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 土豪榜排行
type C2S_QueryDiamondRankInfo struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PageNum              *int32    `protobuf:"zigzag32,2,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,3,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,4,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,5,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_QueryDiamondRankInfo) Reset()         { *m = C2S_QueryDiamondRankInfo{} }
func (m *C2S_QueryDiamondRankInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryDiamondRankInfo) ProtoMessage()    {}
func (*C2S_QueryDiamondRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{235}
}
func (m *C2S_QueryDiamondRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryDiamondRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryDiamondRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryDiamondRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryDiamondRankInfo.Merge(m, src)
}
func (m *C2S_QueryDiamondRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryDiamondRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryDiamondRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryDiamondRankInfo proto.InternalMessageInfo

func (m *C2S_QueryDiamondRankInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QueryDiamondRankInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *C2S_QueryDiamondRankInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_QueryDiamondRankInfo) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_QueryDiamondRankInfo) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_QueryDiamondRankInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryDiamondRankInfo) Reset()         { *m = S2C_QueryDiamondRankInfo{} }
func (m *S2C_QueryDiamondRankInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryDiamondRankInfo) ProtoMessage()    {}
func (*S2C_QueryDiamondRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{236}
}
func (m *S2C_QueryDiamondRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryDiamondRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryDiamondRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryDiamondRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryDiamondRankInfo.Merge(m, src)
}
func (m *S2C_QueryDiamondRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryDiamondRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryDiamondRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryDiamondRankInfo proto.InternalMessageInfo

func (m *S2C_QueryDiamondRankInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryDiamondRankInfo) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_QueryDiamondRankInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_QueryDiamondRankInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_QueryDiamondRankInfo) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_QueryDiamondRankInfo) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 定位自己所在排行页
type C2S_DiamondRankLocationInfo struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,2,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,3,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,4,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_DiamondRankLocationInfo) Reset()         { *m = C2S_DiamondRankLocationInfo{} }
func (m *C2S_DiamondRankLocationInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_DiamondRankLocationInfo) ProtoMessage()    {}
func (*C2S_DiamondRankLocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{237}
}
func (m *C2S_DiamondRankLocationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DiamondRankLocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DiamondRankLocationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DiamondRankLocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DiamondRankLocationInfo.Merge(m, src)
}
func (m *C2S_DiamondRankLocationInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DiamondRankLocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DiamondRankLocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DiamondRankLocationInfo proto.InternalMessageInfo

func (m *C2S_DiamondRankLocationInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DiamondRankLocationInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_DiamondRankLocationInfo) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_DiamondRankLocationInfo) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_DiamondRankLocationInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DiamondRankLocationInfo) Reset()         { *m = S2C_DiamondRankLocationInfo{} }
func (m *S2C_DiamondRankLocationInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_DiamondRankLocationInfo) ProtoMessage()    {}
func (*S2C_DiamondRankLocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{238}
}
func (m *S2C_DiamondRankLocationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DiamondRankLocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DiamondRankLocationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DiamondRankLocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DiamondRankLocationInfo.Merge(m, src)
}
func (m *S2C_DiamondRankLocationInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DiamondRankLocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DiamondRankLocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DiamondRankLocationInfo proto.InternalMessageInfo

func (m *S2C_DiamondRankLocationInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DiamondRankLocationInfo) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_DiamondRankLocationInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_DiamondRankLocationInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_DiamondRankLocationInfo) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_DiamondRankLocationInfo) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 杀人榜排行
type C2S_QueryKillRankInfo struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PageNum              *int32    `protobuf:"zigzag32,2,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,3,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,4,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,5,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_QueryKillRankInfo) Reset()         { *m = C2S_QueryKillRankInfo{} }
func (m *C2S_QueryKillRankInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryKillRankInfo) ProtoMessage()    {}
func (*C2S_QueryKillRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{239}
}
func (m *C2S_QueryKillRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryKillRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryKillRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryKillRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryKillRankInfo.Merge(m, src)
}
func (m *C2S_QueryKillRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryKillRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryKillRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryKillRankInfo proto.InternalMessageInfo

func (m *C2S_QueryKillRankInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QueryKillRankInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *C2S_QueryKillRankInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_QueryKillRankInfo) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_QueryKillRankInfo) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_QueryKillRankInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryKillRankInfo) Reset()         { *m = S2C_QueryKillRankInfo{} }
func (m *S2C_QueryKillRankInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryKillRankInfo) ProtoMessage()    {}
func (*S2C_QueryKillRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{240}
}
func (m *S2C_QueryKillRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryKillRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryKillRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryKillRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryKillRankInfo.Merge(m, src)
}
func (m *S2C_QueryKillRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryKillRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryKillRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryKillRankInfo proto.InternalMessageInfo

func (m *S2C_QueryKillRankInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryKillRankInfo) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_QueryKillRankInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_QueryKillRankInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_QueryKillRankInfo) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_QueryKillRankInfo) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 定位自己所在排行页
type C2S_KillRankLocationInfo struct {
	RoleIndex            *int64    `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SelfInfo             *RankInfo `protobuf:"bytes,2,opt,name=self_info" json:"self_info,omitempty"`
	LoginAddr            *int64    `protobuf:"zigzag64,3,opt,name=login_addr" json:"login_addr,omitempty"`
	LoginIndex           *int64    `protobuf:"zigzag64,4,opt,name=login_index" json:"login_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *C2S_KillRankLocationInfo) Reset()         { *m = C2S_KillRankLocationInfo{} }
func (m *C2S_KillRankLocationInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_KillRankLocationInfo) ProtoMessage()    {}
func (*C2S_KillRankLocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{241}
}
func (m *C2S_KillRankLocationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_KillRankLocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_KillRankLocationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_KillRankLocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_KillRankLocationInfo.Merge(m, src)
}
func (m *C2S_KillRankLocationInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_KillRankLocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_KillRankLocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_KillRankLocationInfo proto.InternalMessageInfo

func (m *C2S_KillRankLocationInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_KillRankLocationInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *C2S_KillRankLocationInfo) GetLoginAddr() int64 {
	if m != nil && m.LoginAddr != nil {
		return *m.LoginAddr
	}
	return 0
}

func (m *C2S_KillRankLocationInfo) GetLoginIndex() int64 {
	if m != nil && m.LoginIndex != nil {
		return *m.LoginIndex
	}
	return 0
}

type S2C_KillRankLocationInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	IsEnd                *bool           `protobuf:"varint,2,opt,name=is_end" json:"is_end,omitempty"`
	PageNum              *int32          `protobuf:"zigzag32,3,opt,name=page_num" json:"page_num,omitempty"`
	SelfInfo             *RankInfo       `protobuf:"bytes,4,opt,name=self_info" json:"self_info,omitempty"`
	TheOne               *RankInfo       `protobuf:"bytes,5,opt,name=the_one" json:"the_one,omitempty"`
	RankList             []*RankInfo     `protobuf:"bytes,6,rep,name=rank_list" json:"rank_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_KillRankLocationInfo) Reset()         { *m = S2C_KillRankLocationInfo{} }
func (m *S2C_KillRankLocationInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_KillRankLocationInfo) ProtoMessage()    {}
func (*S2C_KillRankLocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{242}
}
func (m *S2C_KillRankLocationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_KillRankLocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_KillRankLocationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_KillRankLocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_KillRankLocationInfo.Merge(m, src)
}
func (m *S2C_KillRankLocationInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_KillRankLocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_KillRankLocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_KillRankLocationInfo proto.InternalMessageInfo

func (m *S2C_KillRankLocationInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_KillRankLocationInfo) GetIsEnd() bool {
	if m != nil && m.IsEnd != nil {
		return *m.IsEnd
	}
	return false
}

func (m *S2C_KillRankLocationInfo) GetPageNum() int32 {
	if m != nil && m.PageNum != nil {
		return *m.PageNum
	}
	return 0
}

func (m *S2C_KillRankLocationInfo) GetSelfInfo() *RankInfo {
	if m != nil {
		return m.SelfInfo
	}
	return nil
}

func (m *S2C_KillRankLocationInfo) GetTheOne() *RankInfo {
	if m != nil {
		return m.TheOne
	}
	return nil
}

func (m *S2C_KillRankLocationInfo) GetRankList() []*RankInfo {
	if m != nil {
		return m.RankList
	}
	return nil
}

// 石中剑
// 请求石中剑
type C2S_SwordInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SwordInfo) Reset()         { *m = C2S_SwordInfo{} }
func (m *C2S_SwordInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_SwordInfo) ProtoMessage()    {}
func (*C2S_SwordInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{243}
}
func (m *C2S_SwordInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SwordInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SwordInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SwordInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SwordInfo.Merge(m, src)
}
func (m *C2S_SwordInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SwordInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SwordInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SwordInfo proto.InternalMessageInfo

func (m *C2S_SwordInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_SwordInfo struct {
	Ret                  *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	SwordInfo            *DbSwordInfo    `protobuf:"bytes,2,opt,name=sword_info" json:"sword_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SwordInfo) Reset()         { *m = S2C_SwordInfo{} }
func (m *S2C_SwordInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SwordInfo) ProtoMessage()    {}
func (*S2C_SwordInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{244}
}
func (m *S2C_SwordInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SwordInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SwordInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SwordInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SwordInfo.Merge(m, src)
}
func (m *S2C_SwordInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SwordInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SwordInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SwordInfo proto.InternalMessageInfo

func (m *S2C_SwordInfo) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SwordInfo) GetSwordInfo() *DbSwordInfo {
	if m != nil {
		return m.SwordInfo
	}
	return nil
}

type C2S_AddSwordCount struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ItemId               *int32   `protobuf:"zigzag32,2,opt,name=item_id" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AddSwordCount) Reset()         { *m = C2S_AddSwordCount{} }
func (m *C2S_AddSwordCount) String() string { return proto.CompactTextString(m) }
func (*C2S_AddSwordCount) ProtoMessage()    {}
func (*C2S_AddSwordCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{245}
}
func (m *C2S_AddSwordCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AddSwordCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AddSwordCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AddSwordCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AddSwordCount.Merge(m, src)
}
func (m *C2S_AddSwordCount) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AddSwordCount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AddSwordCount.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AddSwordCount proto.InternalMessageInfo

func (m *C2S_AddSwordCount) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_AddSwordCount) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type S2C_AddSwordCount struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_AddSwordCount) Reset()         { *m = S2C_AddSwordCount{} }
func (m *S2C_AddSwordCount) String() string { return proto.CompactTextString(m) }
func (*S2C_AddSwordCount) ProtoMessage()    {}
func (*S2C_AddSwordCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{246}
}
func (m *S2C_AddSwordCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AddSwordCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AddSwordCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AddSwordCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AddSwordCount.Merge(m, src)
}
func (m *S2C_AddSwordCount) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AddSwordCount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AddSwordCount.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AddSwordCount proto.InternalMessageInfo

func (m *S2C_AddSwordCount) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type S2C_SyncSwordCount struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TotalCount           *int64   `protobuf:"zigzag64,2,opt,name=total_count" json:"total_count,omitempty"`
	LeftCount            *int64   `protobuf:"zigzag64,3,opt,name=left_count" json:"left_count,omitempty"`
	DiffCount            []int64  `protobuf:"zigzag64,4,rep,name=diff_count" json:"diff_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_SyncSwordCount) Reset()         { *m = S2C_SyncSwordCount{} }
func (m *S2C_SyncSwordCount) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncSwordCount) ProtoMessage()    {}
func (*S2C_SyncSwordCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{247}
}
func (m *S2C_SyncSwordCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncSwordCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncSwordCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncSwordCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncSwordCount.Merge(m, src)
}
func (m *S2C_SyncSwordCount) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncSwordCount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncSwordCount.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncSwordCount proto.InternalMessageInfo

func (m *S2C_SyncSwordCount) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_SyncSwordCount) GetTotalCount() int64 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *S2C_SyncSwordCount) GetLeftCount() int64 {
	if m != nil && m.LeftCount != nil {
		return *m.LeftCount
	}
	return 0
}

func (m *S2C_SyncSwordCount) GetDiffCount() []int64 {
	if m != nil {
		return m.DiffCount
	}
	return nil
}

// 拔剑结束
type C2S_SwordEnd struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	IsSuccess            *bool    `protobuf:"varint,2,opt,name=is_success" json:"is_success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SwordEnd) Reset()         { *m = C2S_SwordEnd{} }
func (m *C2S_SwordEnd) String() string { return proto.CompactTextString(m) }
func (*C2S_SwordEnd) ProtoMessage()    {}
func (*C2S_SwordEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{248}
}
func (m *C2S_SwordEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SwordEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SwordEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SwordEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SwordEnd.Merge(m, src)
}
func (m *C2S_SwordEnd) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SwordEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SwordEnd.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SwordEnd proto.InternalMessageInfo

func (m *C2S_SwordEnd) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SwordEnd) GetIsSuccess() bool {
	if m != nil && m.IsSuccess != nil {
		return *m.IsSuccess
	}
	return false
}

type S2C_SwordEnd struct {
	Ret                  *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	CaliburnInfo         *DbSwordInfo    `protobuf:"bytes,2,opt,name=caliburn_info" json:"caliburn_info,omitempty"`
	EquipInfo            *DbBagEquip     `protobuf:"bytes,3,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SwordEnd) Reset()         { *m = S2C_SwordEnd{} }
func (m *S2C_SwordEnd) String() string { return proto.CompactTextString(m) }
func (*S2C_SwordEnd) ProtoMessage()    {}
func (*S2C_SwordEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{249}
}
func (m *S2C_SwordEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SwordEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SwordEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SwordEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SwordEnd.Merge(m, src)
}
func (m *S2C_SwordEnd) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SwordEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SwordEnd.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SwordEnd proto.InternalMessageInfo

func (m *S2C_SwordEnd) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SwordEnd) GetCaliburnInfo() *DbSwordInfo {
	if m != nil {
		return m.CaliburnInfo
	}
	return nil
}

func (m *S2C_SwordEnd) GetEquipInfo() *DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 拔出武器是否要
type C2S_SelectSwordEquip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	IsSelect             *bool    `protobuf:"varint,2,opt,name=is_select" json:"is_select,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SelectSwordEquip) Reset()         { *m = C2S_SelectSwordEquip{} }
func (m *C2S_SelectSwordEquip) String() string { return proto.CompactTextString(m) }
func (*C2S_SelectSwordEquip) ProtoMessage()    {}
func (*C2S_SelectSwordEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{250}
}
func (m *C2S_SelectSwordEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SelectSwordEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SelectSwordEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SelectSwordEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SelectSwordEquip.Merge(m, src)
}
func (m *C2S_SelectSwordEquip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SelectSwordEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SelectSwordEquip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SelectSwordEquip proto.InternalMessageInfo

func (m *C2S_SelectSwordEquip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SelectSwordEquip) GetIsSelect() bool {
	if m != nil && m.IsSelect != nil {
		return *m.IsSelect
	}
	return false
}

type S2C_SelectSwordEquip struct {
	Ret                  *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	IsEvent              *bool           `protobuf:"varint,2,opt,name=is_event" json:"is_event,omitempty"`
	LeftEquipInfo        *DbBagEquip     `protobuf:"bytes,3,opt,name=left_equip_info" json:"left_equip_info,omitempty"`
	RightEquipInfo       *DbBagEquip     `protobuf:"bytes,4,opt,name=right_equip_info" json:"right_equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SelectSwordEquip) Reset()         { *m = S2C_SelectSwordEquip{} }
func (m *S2C_SelectSwordEquip) String() string { return proto.CompactTextString(m) }
func (*S2C_SelectSwordEquip) ProtoMessage()    {}
func (*S2C_SelectSwordEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{251}
}
func (m *S2C_SelectSwordEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SelectSwordEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SelectSwordEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SelectSwordEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SelectSwordEquip.Merge(m, src)
}
func (m *S2C_SelectSwordEquip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SelectSwordEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SelectSwordEquip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SelectSwordEquip proto.InternalMessageInfo

func (m *S2C_SelectSwordEquip) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SelectSwordEquip) GetIsEvent() bool {
	if m != nil && m.IsEvent != nil {
		return *m.IsEvent
	}
	return false
}

func (m *S2C_SelectSwordEquip) GetLeftEquipInfo() *DbBagEquip {
	if m != nil {
		return m.LeftEquipInfo
	}
	return nil
}

func (m *S2C_SelectSwordEquip) GetRightEquipInfo() *DbBagEquip {
	if m != nil {
		return m.RightEquipInfo
	}
	return nil
}

// 选择山神左右手武器或两者不是
type C2S_SelectMountainGodEquip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Pos                  *int32   `protobuf:"zigzag32,2,opt,name=pos" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SelectMountainGodEquip) Reset()         { *m = C2S_SelectMountainGodEquip{} }
func (m *C2S_SelectMountainGodEquip) String() string { return proto.CompactTextString(m) }
func (*C2S_SelectMountainGodEquip) ProtoMessage()    {}
func (*C2S_SelectMountainGodEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{252}
}
func (m *C2S_SelectMountainGodEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SelectMountainGodEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SelectMountainGodEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SelectMountainGodEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SelectMountainGodEquip.Merge(m, src)
}
func (m *C2S_SelectMountainGodEquip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SelectMountainGodEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SelectMountainGodEquip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SelectMountainGodEquip proto.InternalMessageInfo

func (m *C2S_SelectMountainGodEquip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SelectMountainGodEquip) GetPos() int32 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

type S2C_SelectMountainGodEquip struct {
	Ret                  *E_MSG_RET_CODE          `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	EventType            *E_MountainGodEvent_TYPE `protobuf:"varint,2,opt,name=event_type,enum=pbd.E_MountainGodEvent_TYPE,def=0" json:"event_type,omitempty"`
	EquipInfo            []*DbBagEquip            `protobuf:"bytes,3,rep,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *S2C_SelectMountainGodEquip) Reset()         { *m = S2C_SelectMountainGodEquip{} }
func (m *S2C_SelectMountainGodEquip) String() string { return proto.CompactTextString(m) }
func (*S2C_SelectMountainGodEquip) ProtoMessage()    {}
func (*S2C_SelectMountainGodEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{253}
}
func (m *S2C_SelectMountainGodEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SelectMountainGodEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SelectMountainGodEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SelectMountainGodEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SelectMountainGodEquip.Merge(m, src)
}
func (m *S2C_SelectMountainGodEquip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SelectMountainGodEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SelectMountainGodEquip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SelectMountainGodEquip proto.InternalMessageInfo

const Default_S2C_SelectMountainGodEquip_EventType E_MountainGodEvent_TYPE = E_MountainGodEvent_TYPE_EMGET_INVALID

func (m *S2C_SelectMountainGodEquip) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SelectMountainGodEquip) GetEventType() E_MountainGodEvent_TYPE {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return Default_S2C_SelectMountainGodEquip_EventType
}

func (m *S2C_SelectMountainGodEquip) GetEquipInfo() []*DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 请求日常任务信息
type C2S_DailyTask struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DailyTask) Reset()         { *m = C2S_DailyTask{} }
func (m *C2S_DailyTask) String() string { return proto.CompactTextString(m) }
func (*C2S_DailyTask) ProtoMessage()    {}
func (*C2S_DailyTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{254}
}
func (m *C2S_DailyTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DailyTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DailyTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DailyTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DailyTask.Merge(m, src)
}
func (m *C2S_DailyTask) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DailyTask) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DailyTask.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DailyTask proto.InternalMessageInfo

func (m *C2S_DailyTask) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 应答日常任务信息
type S2C_DailyTask struct {
	Ret                  *E_MSG_RET_CODE    `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	TaskInfoList         []*DbDailyTaskInfo `protobuf:"bytes,2,rep,name=task_info_list" json:"task_info_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_DailyTask) Reset()         { *m = S2C_DailyTask{} }
func (m *S2C_DailyTask) String() string { return proto.CompactTextString(m) }
func (*S2C_DailyTask) ProtoMessage()    {}
func (*S2C_DailyTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{255}
}
func (m *S2C_DailyTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DailyTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DailyTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DailyTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DailyTask.Merge(m, src)
}
func (m *S2C_DailyTask) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DailyTask) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DailyTask.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DailyTask proto.InternalMessageInfo

func (m *S2C_DailyTask) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DailyTask) GetTaskInfoList() []*DbDailyTaskInfo {
	if m != nil {
		return m.TaskInfoList
	}
	return nil
}

// 日常任务领取奖励请求
type C2S_DailyTaskReward struct {
	RoleIndex            *int64           `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	DailyTaskInfo        *DbDailyTaskInfo `protobuf:"bytes,2,opt,name=daily_task_info" json:"daily_task_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *C2S_DailyTaskReward) Reset()         { *m = C2S_DailyTaskReward{} }
func (m *C2S_DailyTaskReward) String() string { return proto.CompactTextString(m) }
func (*C2S_DailyTaskReward) ProtoMessage()    {}
func (*C2S_DailyTaskReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{256}
}
func (m *C2S_DailyTaskReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DailyTaskReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DailyTaskReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DailyTaskReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DailyTaskReward.Merge(m, src)
}
func (m *C2S_DailyTaskReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DailyTaskReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DailyTaskReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DailyTaskReward proto.InternalMessageInfo

func (m *C2S_DailyTaskReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DailyTaskReward) GetDailyTaskInfo() *DbDailyTaskInfo {
	if m != nil {
		return m.DailyTaskInfo
	}
	return nil
}

// 日常任务领取奖励应答
type S2C_DailyTaskReward struct {
	Ret                  *E_MSG_RET_CODE          `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	ActivityValue        *DailyActivityChangeInfo `protobuf:"bytes,2,opt,name=activity_value" json:"activity_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *S2C_DailyTaskReward) Reset()         { *m = S2C_DailyTaskReward{} }
func (m *S2C_DailyTaskReward) String() string { return proto.CompactTextString(m) }
func (*S2C_DailyTaskReward) ProtoMessage()    {}
func (*S2C_DailyTaskReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{257}
}
func (m *S2C_DailyTaskReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DailyTaskReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DailyTaskReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DailyTaskReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DailyTaskReward.Merge(m, src)
}
func (m *S2C_DailyTaskReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DailyTaskReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DailyTaskReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DailyTaskReward proto.InternalMessageInfo

func (m *S2C_DailyTaskReward) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DailyTaskReward) GetActivityValue() *DailyActivityChangeInfo {
	if m != nil {
		return m.ActivityValue
	}
	return nil
}

// 请求日常活跃度信息
type C2S_DailyActivity struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DailyActivity) Reset()         { *m = C2S_DailyActivity{} }
func (m *C2S_DailyActivity) String() string { return proto.CompactTextString(m) }
func (*C2S_DailyActivity) ProtoMessage()    {}
func (*C2S_DailyActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{258}
}
func (m *C2S_DailyActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DailyActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DailyActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DailyActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DailyActivity.Merge(m, src)
}
func (m *C2S_DailyActivity) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DailyActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DailyActivity.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DailyActivity proto.InternalMessageInfo

func (m *C2S_DailyActivity) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 日常活跃度信息应答
type S2C_DailyActivity struct {
	Ret                  *E_MSG_RET_CODE      `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	ActivityInfo         *DbDailyActivityInfo `protobuf:"bytes,2,opt,name=activity_info" json:"activity_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *S2C_DailyActivity) Reset()         { *m = S2C_DailyActivity{} }
func (m *S2C_DailyActivity) String() string { return proto.CompactTextString(m) }
func (*S2C_DailyActivity) ProtoMessage()    {}
func (*S2C_DailyActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{259}
}
func (m *S2C_DailyActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DailyActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DailyActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DailyActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DailyActivity.Merge(m, src)
}
func (m *S2C_DailyActivity) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DailyActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DailyActivity.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DailyActivity proto.InternalMessageInfo

func (m *S2C_DailyActivity) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DailyActivity) GetActivityInfo() *DbDailyActivityInfo {
	if m != nil {
		return m.ActivityInfo
	}
	return nil
}

// 服务器推送活跃值变化
type S2C_DailyActivityValue struct {
	ChangeInfo           *DailyActivityChangeInfo `protobuf:"bytes,1,opt,name=change_info" json:"change_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *S2C_DailyActivityValue) Reset()         { *m = S2C_DailyActivityValue{} }
func (m *S2C_DailyActivityValue) String() string { return proto.CompactTextString(m) }
func (*S2C_DailyActivityValue) ProtoMessage()    {}
func (*S2C_DailyActivityValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{260}
}
func (m *S2C_DailyActivityValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DailyActivityValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DailyActivityValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DailyActivityValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DailyActivityValue.Merge(m, src)
}
func (m *S2C_DailyActivityValue) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DailyActivityValue) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DailyActivityValue.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DailyActivityValue proto.InternalMessageInfo

func (m *S2C_DailyActivityValue) GetChangeInfo() *DailyActivityChangeInfo {
	if m != nil {
		return m.ChangeInfo
	}
	return nil
}

// 日常活跃度奖励领取请求
type C2S_DailyActivityReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ActivityId           *int32   `protobuf:"zigzag32,2,opt,name=activity_id" json:"activity_id,omitempty"`
	TotalActivity        *int32   `protobuf:"zigzag32,3,opt,name=total_activity" json:"total_activity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DailyActivityReward) Reset()         { *m = C2S_DailyActivityReward{} }
func (m *C2S_DailyActivityReward) String() string { return proto.CompactTextString(m) }
func (*C2S_DailyActivityReward) ProtoMessage()    {}
func (*C2S_DailyActivityReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{261}
}
func (m *C2S_DailyActivityReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DailyActivityReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DailyActivityReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DailyActivityReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DailyActivityReward.Merge(m, src)
}
func (m *C2S_DailyActivityReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DailyActivityReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DailyActivityReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DailyActivityReward proto.InternalMessageInfo

func (m *C2S_DailyActivityReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DailyActivityReward) GetActivityId() int32 {
	if m != nil && m.ActivityId != nil {
		return *m.ActivityId
	}
	return 0
}

func (m *C2S_DailyActivityReward) GetTotalActivity() int32 {
	if m != nil && m.TotalActivity != nil {
		return *m.TotalActivity
	}
	return 0
}

// 日常活跃度奖励领取应答
type S2C_DailyActivityReward struct {
	Ret                  *E_MSG_RET_CODE      `protobuf:"varint,1,opt,name=ret,enum=pbd.E_MSG_RET_CODE" json:"ret,omitempty"`
	ActivityInfo         *DbDailyActivityInfo `protobuf:"bytes,2,opt,name=activity_info" json:"activity_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *S2C_DailyActivityReward) Reset()         { *m = S2C_DailyActivityReward{} }
func (m *S2C_DailyActivityReward) String() string { return proto.CompactTextString(m) }
func (*S2C_DailyActivityReward) ProtoMessage()    {}
func (*S2C_DailyActivityReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{262}
}
func (m *S2C_DailyActivityReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DailyActivityReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DailyActivityReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DailyActivityReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DailyActivityReward.Merge(m, src)
}
func (m *S2C_DailyActivityReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DailyActivityReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DailyActivityReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DailyActivityReward proto.InternalMessageInfo

func (m *S2C_DailyActivityReward) GetRet() E_MSG_RET_CODE {
	if m != nil && m.Ret != nil {
		return *m.Ret
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DailyActivityReward) GetActivityInfo() *DbDailyActivityInfo {
	if m != nil {
		return m.ActivityInfo
	}
	return nil
}

// 购买体力值
type C2S_BuyStamina struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BuyStamina) Reset()         { *m = C2S_BuyStamina{} }
func (m *C2S_BuyStamina) String() string { return proto.CompactTextString(m) }
func (*C2S_BuyStamina) ProtoMessage()    {}
func (*C2S_BuyStamina) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{263}
}
func (m *C2S_BuyStamina) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BuyStamina) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BuyStamina.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BuyStamina) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BuyStamina.Merge(m, src)
}
func (m *C2S_BuyStamina) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BuyStamina) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BuyStamina.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BuyStamina proto.InternalMessageInfo

func (m *C2S_BuyStamina) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_BuyStamina struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BuyStamina) Reset()         { *m = S2C_BuyStamina{} }
func (m *S2C_BuyStamina) String() string { return proto.CompactTextString(m) }
func (*S2C_BuyStamina) ProtoMessage()    {}
func (*S2C_BuyStamina) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{264}
}
func (m *S2C_BuyStamina) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BuyStamina) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BuyStamina.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BuyStamina) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BuyStamina.Merge(m, src)
}
func (m *S2C_BuyStamina) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BuyStamina) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BuyStamina.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BuyStamina proto.InternalMessageInfo

func (m *S2C_BuyStamina) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 邮件系统
type S2C_Mail_Have_New struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_Mail_Have_New) Reset()         { *m = S2C_Mail_Have_New{} }
func (m *S2C_Mail_Have_New) String() string { return proto.CompactTextString(m) }
func (*S2C_Mail_Have_New) ProtoMessage()    {}
func (*S2C_Mail_Have_New) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{265}
}
func (m *S2C_Mail_Have_New) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Mail_Have_New) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Mail_Have_New.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Mail_Have_New) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Mail_Have_New.Merge(m, src)
}
func (m *S2C_Mail_Have_New) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Mail_Have_New) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Mail_Have_New.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Mail_Have_New proto.InternalMessageInfo

func (m *S2C_Mail_Have_New) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type C2S_Mail_Title struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	IntAddr              *int64   `protobuf:"zigzag64,2,opt,name=int_addr" json:"int_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Mail_Title) Reset()         { *m = C2S_Mail_Title{} }
func (m *C2S_Mail_Title) String() string { return proto.CompactTextString(m) }
func (*C2S_Mail_Title) ProtoMessage()    {}
func (*C2S_Mail_Title) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{266}
}
func (m *C2S_Mail_Title) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Mail_Title) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Mail_Title.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Mail_Title) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Mail_Title.Merge(m, src)
}
func (m *C2S_Mail_Title) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Mail_Title) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Mail_Title.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Mail_Title proto.InternalMessageInfo

func (m *C2S_Mail_Title) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Mail_Title) GetIntAddr() int64 {
	if m != nil && m.IntAddr != nil {
		return *m.IntAddr
	}
	return 0
}

type S2C_Mail_Title struct {
	RoleIndex            *int64            `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MailTitles           []*MinosMailTitle `protobuf:"bytes,2,rep,name=mail_titles" json:"mail_titles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_Mail_Title) Reset()         { *m = S2C_Mail_Title{} }
func (m *S2C_Mail_Title) String() string { return proto.CompactTextString(m) }
func (*S2C_Mail_Title) ProtoMessage()    {}
func (*S2C_Mail_Title) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{267}
}
func (m *S2C_Mail_Title) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Mail_Title) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Mail_Title.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Mail_Title) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Mail_Title.Merge(m, src)
}
func (m *S2C_Mail_Title) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Mail_Title) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Mail_Title.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Mail_Title proto.InternalMessageInfo

func (m *S2C_Mail_Title) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Mail_Title) GetMailTitles() []*MinosMailTitle {
	if m != nil {
		return m.MailTitles
	}
	return nil
}

type C2S_Mail_Full struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MailIndex            *int64   `protobuf:"zigzag64,2,opt,name=mail_index" json:"mail_index,omitempty"`
	IntAddr              *int64   `protobuf:"zigzag64,3,opt,name=int_addr" json:"int_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Mail_Full) Reset()         { *m = C2S_Mail_Full{} }
func (m *C2S_Mail_Full) String() string { return proto.CompactTextString(m) }
func (*C2S_Mail_Full) ProtoMessage()    {}
func (*C2S_Mail_Full) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{268}
}
func (m *C2S_Mail_Full) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Mail_Full) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Mail_Full.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Mail_Full) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Mail_Full.Merge(m, src)
}
func (m *C2S_Mail_Full) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Mail_Full) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Mail_Full.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Mail_Full proto.InternalMessageInfo

func (m *C2S_Mail_Full) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Mail_Full) GetMailIndex() int64 {
	if m != nil && m.MailIndex != nil {
		return *m.MailIndex
	}
	return 0
}

func (m *C2S_Mail_Full) GetIntAddr() int64 {
	if m != nil && m.IntAddr != nil {
		return *m.IntAddr
	}
	return 0
}

type S2C_Mail_Full struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	MailFull             *MinosMail      `protobuf:"bytes,3,opt,name=mail_full" json:"mail_full,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Mail_Full) Reset()         { *m = S2C_Mail_Full{} }
func (m *S2C_Mail_Full) String() string { return proto.CompactTextString(m) }
func (*S2C_Mail_Full) ProtoMessage()    {}
func (*S2C_Mail_Full) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{269}
}
func (m *S2C_Mail_Full) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Mail_Full) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Mail_Full.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Mail_Full) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Mail_Full.Merge(m, src)
}
func (m *S2C_Mail_Full) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Mail_Full) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Mail_Full.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Mail_Full proto.InternalMessageInfo

func (m *S2C_Mail_Full) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Mail_Full) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_Mail_Full) GetMailFull() *MinosMail {
	if m != nil {
		return m.MailFull
	}
	return nil
}

//
type S2S_Mail_Full struct {
	RoleIndex            *int64     `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MailIndex            *int64     `protobuf:"zigzag64,2,opt,name=mail_index" json:"mail_index,omitempty"`
	IntAddr              *int64     `protobuf:"zigzag64,3,opt,name=int_addr" json:"int_addr,omitempty"`
	MailFull             *MinosMail `protobuf:"bytes,4,opt,name=mail_full" json:"mail_full,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2S_Mail_Full) Reset()         { *m = S2S_Mail_Full{} }
func (m *S2S_Mail_Full) String() string { return proto.CompactTextString(m) }
func (*S2S_Mail_Full) ProtoMessage()    {}
func (*S2S_Mail_Full) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{270}
}
func (m *S2S_Mail_Full) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_Mail_Full) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_Mail_Full.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_Mail_Full) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_Mail_Full.Merge(m, src)
}
func (m *S2S_Mail_Full) XXX_Size() int {
	return m.Size()
}
func (m *S2S_Mail_Full) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_Mail_Full.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_Mail_Full proto.InternalMessageInfo

func (m *S2S_Mail_Full) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2S_Mail_Full) GetMailIndex() int64 {
	if m != nil && m.MailIndex != nil {
		return *m.MailIndex
	}
	return 0
}

func (m *S2S_Mail_Full) GetIntAddr() int64 {
	if m != nil && m.IntAddr != nil {
		return *m.IntAddr
	}
	return 0
}

func (m *S2S_Mail_Full) GetMailFull() *MinosMail {
	if m != nil {
		return m.MailFull
	}
	return nil
}

type C2S_Mail_Read struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MailIndex            *int64   `protobuf:"zigzag64,2,opt,name=mail_index" json:"mail_index,omitempty"`
	IntAddr              *int64   `protobuf:"zigzag64,3,opt,name=int_addr" json:"int_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_Mail_Read) Reset()         { *m = C2S_Mail_Read{} }
func (m *C2S_Mail_Read) String() string { return proto.CompactTextString(m) }
func (*C2S_Mail_Read) ProtoMessage()    {}
func (*C2S_Mail_Read) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{271}
}
func (m *C2S_Mail_Read) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Mail_Read) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Mail_Read.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Mail_Read) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Mail_Read.Merge(m, src)
}
func (m *C2S_Mail_Read) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Mail_Read) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Mail_Read.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Mail_Read proto.InternalMessageInfo

func (m *C2S_Mail_Read) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_Mail_Read) GetMailIndex() int64 {
	if m != nil && m.MailIndex != nil {
		return *m.MailIndex
	}
	return 0
}

func (m *C2S_Mail_Read) GetIntAddr() int64 {
	if m != nil && m.IntAddr != nil {
		return *m.IntAddr
	}
	return 0
}

type S2C_Mail_Read struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,2,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_Mail_Read) Reset()         { *m = S2C_Mail_Read{} }
func (m *S2C_Mail_Read) String() string { return proto.CompactTextString(m) }
func (*S2C_Mail_Read) ProtoMessage()    {}
func (*S2C_Mail_Read) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{272}
}
func (m *S2C_Mail_Read) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Mail_Read) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Mail_Read.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Mail_Read) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Mail_Read.Merge(m, src)
}
func (m *S2C_Mail_Read) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Mail_Read) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Mail_Read.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Mail_Read proto.InternalMessageInfo

func (m *S2C_Mail_Read) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_Mail_Read) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 签到信息
type C2S_TodaySign struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TodaySign) Reset()         { *m = C2S_TodaySign{} }
func (m *C2S_TodaySign) String() string { return proto.CompactTextString(m) }
func (*C2S_TodaySign) ProtoMessage()    {}
func (*C2S_TodaySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{273}
}
func (m *C2S_TodaySign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TodaySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TodaySign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TodaySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TodaySign.Merge(m, src)
}
func (m *C2S_TodaySign) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TodaySign) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TodaySign.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TodaySign proto.InternalMessageInfo

func (m *C2S_TodaySign) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_TodaySign struct {
	TodaySign            *bool    `protobuf:"varint,1,opt,name=today_sign" json:"today_sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_TodaySign) Reset()         { *m = S2C_TodaySign{} }
func (m *S2C_TodaySign) String() string { return proto.CompactTextString(m) }
func (*S2C_TodaySign) ProtoMessage()    {}
func (*S2C_TodaySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{274}
}
func (m *S2C_TodaySign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TodaySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TodaySign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TodaySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TodaySign.Merge(m, src)
}
func (m *S2C_TodaySign) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TodaySign) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TodaySign.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TodaySign proto.InternalMessageInfo

func (m *S2C_TodaySign) GetTodaySign() bool {
	if m != nil && m.TodaySign != nil {
		return *m.TodaySign
	}
	return false
}

type C2S_SignInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SignInfo) Reset()         { *m = C2S_SignInfo{} }
func (m *C2S_SignInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_SignInfo) ProtoMessage()    {}
func (*C2S_SignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{275}
}
func (m *C2S_SignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SignInfo.Merge(m, src)
}
func (m *C2S_SignInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SignInfo proto.InternalMessageInfo

func (m *C2S_SignInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_SignInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SignMonth            *int32          `protobuf:"zigzag32,2,opt,name=sign_month" json:"sign_month,omitempty"`
	MonthTotalDays       *int32          `protobuf:"zigzag32,3,opt,name=month_total_days" json:"month_total_days,omitempty"`
	SignCount            *int32          `protobuf:"zigzag32,4,opt,name=sign_count" json:"sign_count,omitempty"`
	RetroactiveCount     *int32          `protobuf:"zigzag32,5,opt,name=retroactive_count" json:"retroactive_count,omitempty"`
	MissCount            *int32          `protobuf:"zigzag32,6,opt,name=miss_count" json:"miss_count,omitempty"`
	LotteryCount         *int32          `protobuf:"zigzag32,7,opt,name=lottery_count" json:"lottery_count,omitempty"`
	TodaySign            *bool           `protobuf:"varint,8,opt,name=today_sign" json:"today_sign,omitempty"`
	RetroactiveLeft      *int32          `protobuf:"zigzag32,9,opt,name=retroactive_left" json:"retroactive_left,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SignInfo) Reset()         { *m = S2C_SignInfo{} }
func (m *S2C_SignInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SignInfo) ProtoMessage()    {}
func (*S2C_SignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{276}
}
func (m *S2C_SignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SignInfo.Merge(m, src)
}
func (m *S2C_SignInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SignInfo proto.InternalMessageInfo

func (m *S2C_SignInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SignInfo) GetSignMonth() int32 {
	if m != nil && m.SignMonth != nil {
		return *m.SignMonth
	}
	return 0
}

func (m *S2C_SignInfo) GetMonthTotalDays() int32 {
	if m != nil && m.MonthTotalDays != nil {
		return *m.MonthTotalDays
	}
	return 0
}

func (m *S2C_SignInfo) GetSignCount() int32 {
	if m != nil && m.SignCount != nil {
		return *m.SignCount
	}
	return 0
}

func (m *S2C_SignInfo) GetRetroactiveCount() int32 {
	if m != nil && m.RetroactiveCount != nil {
		return *m.RetroactiveCount
	}
	return 0
}

func (m *S2C_SignInfo) GetMissCount() int32 {
	if m != nil && m.MissCount != nil {
		return *m.MissCount
	}
	return 0
}

func (m *S2C_SignInfo) GetLotteryCount() int32 {
	if m != nil && m.LotteryCount != nil {
		return *m.LotteryCount
	}
	return 0
}

func (m *S2C_SignInfo) GetTodaySign() bool {
	if m != nil && m.TodaySign != nil {
		return *m.TodaySign
	}
	return false
}

func (m *S2C_SignInfo) GetRetroactiveLeft() int32 {
	if m != nil && m.RetroactiveLeft != nil {
		return *m.RetroactiveLeft
	}
	return 0
}

// 签到
type C2S_SignAction struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	IsMiss               *bool    `protobuf:"varint,2,opt,name=is_miss" json:"is_miss,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SignAction) Reset()         { *m = C2S_SignAction{} }
func (m *C2S_SignAction) String() string { return proto.CompactTextString(m) }
func (*C2S_SignAction) ProtoMessage()    {}
func (*C2S_SignAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{277}
}
func (m *C2S_SignAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SignAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SignAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SignAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SignAction.Merge(m, src)
}
func (m *C2S_SignAction) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SignAction) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SignAction.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SignAction proto.InternalMessageInfo

func (m *C2S_SignAction) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SignAction) GetIsMiss() bool {
	if m != nil && m.IsMiss != nil {
		return *m.IsMiss
	}
	return false
}

type S2C_SignAction struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SignAction) Reset()         { *m = S2C_SignAction{} }
func (m *S2C_SignAction) String() string { return proto.CompactTextString(m) }
func (*S2C_SignAction) ProtoMessage()    {}
func (*S2C_SignAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{278}
}
func (m *S2C_SignAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SignAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SignAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SignAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SignAction.Merge(m, src)
}
func (m *S2C_SignAction) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SignAction) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SignAction.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SignAction proto.InternalMessageInfo

func (m *S2C_SignAction) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 签到抽奖
type C2S_SignLottery struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SignLottery) Reset()         { *m = C2S_SignLottery{} }
func (m *C2S_SignLottery) String() string { return proto.CompactTextString(m) }
func (*C2S_SignLottery) ProtoMessage()    {}
func (*C2S_SignLottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{279}
}
func (m *C2S_SignLottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SignLottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SignLottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SignLottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SignLottery.Merge(m, src)
}
func (m *C2S_SignLottery) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SignLottery) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SignLottery.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SignLottery proto.InternalMessageInfo

func (m *C2S_SignLottery) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_SignLottery struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Reward               *RewardInfo     `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	LotteryCount         *int32          `protobuf:"zigzag32,3,opt,name=lottery_count" json:"lottery_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SignLottery) Reset()         { *m = S2C_SignLottery{} }
func (m *S2C_SignLottery) String() string { return proto.CompactTextString(m) }
func (*S2C_SignLottery) ProtoMessage()    {}
func (*S2C_SignLottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{280}
}
func (m *S2C_SignLottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SignLottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SignLottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SignLottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SignLottery.Merge(m, src)
}
func (m *S2C_SignLottery) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SignLottery) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SignLottery.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SignLottery proto.InternalMessageInfo

func (m *S2C_SignLottery) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SignLottery) GetReward() *RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *S2C_SignLottery) GetLotteryCount() int32 {
	if m != nil && m.LotteryCount != nil {
		return *m.LotteryCount
	}
	return 0
}

// 签到抽奖请求展示奖励
type C2S_SignLotteryShow struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SignLotteryShow) Reset()         { *m = C2S_SignLotteryShow{} }
func (m *C2S_SignLotteryShow) String() string { return proto.CompactTextString(m) }
func (*C2S_SignLotteryShow) ProtoMessage()    {}
func (*C2S_SignLotteryShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{281}
}
func (m *C2S_SignLotteryShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SignLotteryShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SignLotteryShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SignLotteryShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SignLotteryShow.Merge(m, src)
}
func (m *C2S_SignLotteryShow) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SignLotteryShow) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SignLotteryShow.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SignLotteryShow proto.InternalMessageInfo

func (m *C2S_SignLotteryShow) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_SignLotteryShow struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SignLotteryShow) Reset()         { *m = S2C_SignLotteryShow{} }
func (m *S2C_SignLotteryShow) String() string { return proto.CompactTextString(m) }
func (*S2C_SignLotteryShow) ProtoMessage()    {}
func (*S2C_SignLotteryShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{282}
}
func (m *S2C_SignLotteryShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SignLotteryShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SignLotteryShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SignLotteryShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SignLotteryShow.Merge(m, src)
}
func (m *S2C_SignLotteryShow) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SignLotteryShow) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SignLotteryShow.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SignLotteryShow proto.InternalMessageInfo

func (m *S2C_SignLotteryShow) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 七天登录信息
type C2S_SevenDayInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SevenDayInfo) Reset()         { *m = C2S_SevenDayInfo{} }
func (m *C2S_SevenDayInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_SevenDayInfo) ProtoMessage()    {}
func (*C2S_SevenDayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{283}
}
func (m *C2S_SevenDayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SevenDayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SevenDayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SevenDayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SevenDayInfo.Merge(m, src)
}
func (m *C2S_SevenDayInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SevenDayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SevenDayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SevenDayInfo proto.InternalMessageInfo

func (m *C2S_SevenDayInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_SevenDayInfo struct {
	RetCode              *E_MSG_RET_CODE   `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	DayTail              []*SevenDayDetail `protobuf:"bytes,2,rep,name=day_tail" json:"day_tail,omitempty"`
	TotalLoginDays       *int32            `protobuf:"zigzag32,3,opt,name=total_login_days" json:"total_login_days,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_SevenDayInfo) Reset()         { *m = S2C_SevenDayInfo{} }
func (m *S2C_SevenDayInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SevenDayInfo) ProtoMessage()    {}
func (*S2C_SevenDayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{284}
}
func (m *S2C_SevenDayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SevenDayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SevenDayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SevenDayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SevenDayInfo.Merge(m, src)
}
func (m *S2C_SevenDayInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SevenDayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SevenDayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SevenDayInfo proto.InternalMessageInfo

func (m *S2C_SevenDayInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SevenDayInfo) GetDayTail() []*SevenDayDetail {
	if m != nil {
		return m.DayTail
	}
	return nil
}

func (m *S2C_SevenDayInfo) GetTotalLoginDays() int32 {
	if m != nil && m.TotalLoginDays != nil {
		return *m.TotalLoginDays
	}
	return 0
}

// 领取指定天登录奖励
type C2S_GetSevenDayReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TheDay               *int32   `protobuf:"zigzag32,2,opt,name=the_day" json:"the_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetSevenDayReward) Reset()         { *m = C2S_GetSevenDayReward{} }
func (m *C2S_GetSevenDayReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetSevenDayReward) ProtoMessage()    {}
func (*C2S_GetSevenDayReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{285}
}
func (m *C2S_GetSevenDayReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetSevenDayReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetSevenDayReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetSevenDayReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetSevenDayReward.Merge(m, src)
}
func (m *C2S_GetSevenDayReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetSevenDayReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetSevenDayReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetSevenDayReward proto.InternalMessageInfo

func (m *C2S_GetSevenDayReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GetSevenDayReward) GetTheDay() int32 {
	if m != nil && m.TheDay != nil {
		return *m.TheDay
	}
	return 0
}

type S2C_GetSevenDayReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	TheDay               *int32          `protobuf:"zigzag32,2,opt,name=the_day" json:"the_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetSevenDayReward) Reset()         { *m = S2C_GetSevenDayReward{} }
func (m *S2C_GetSevenDayReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetSevenDayReward) ProtoMessage()    {}
func (*S2C_GetSevenDayReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{286}
}
func (m *S2C_GetSevenDayReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetSevenDayReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetSevenDayReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetSevenDayReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetSevenDayReward.Merge(m, src)
}
func (m *S2C_GetSevenDayReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetSevenDayReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetSevenDayReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetSevenDayReward proto.InternalMessageInfo

func (m *S2C_GetSevenDayReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_GetSevenDayReward) GetTheDay() int32 {
	if m != nil && m.TheDay != nil {
		return *m.TheDay
	}
	return 0
}

// GM功能
type C2S_GMSetLevel struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Value                *int32   `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GMSetLevel) Reset()         { *m = C2S_GMSetLevel{} }
func (m *C2S_GMSetLevel) String() string { return proto.CompactTextString(m) }
func (*C2S_GMSetLevel) ProtoMessage()    {}
func (*C2S_GMSetLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{287}
}
func (m *C2S_GMSetLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMSetLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMSetLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMSetLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMSetLevel.Merge(m, src)
}
func (m *C2S_GMSetLevel) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMSetLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMSetLevel.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMSetLevel proto.InternalMessageInfo

func (m *C2S_GMSetLevel) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMSetLevel) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type S2C_GMSetLevel struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMSetLevel) Reset()         { *m = S2C_GMSetLevel{} }
func (m *S2C_GMSetLevel) String() string { return proto.CompactTextString(m) }
func (*S2C_GMSetLevel) ProtoMessage()    {}
func (*S2C_GMSetLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{288}
}
func (m *S2C_GMSetLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMSetLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMSetLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMSetLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMSetLevel.Merge(m, src)
}
func (m *S2C_GMSetLevel) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMSetLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMSetLevel.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMSetLevel proto.InternalMessageInfo

func (m *S2C_GMSetLevel) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddItem struct {
	RoleIndex            *int64      `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Item                 *ItemConfig `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *C2S_GMAddItem) Reset()         { *m = C2S_GMAddItem{} }
func (m *C2S_GMAddItem) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddItem) ProtoMessage()    {}
func (*C2S_GMAddItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{289}
}
func (m *C2S_GMAddItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddItem.Merge(m, src)
}
func (m *C2S_GMAddItem) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddItem) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddItem.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddItem proto.InternalMessageInfo

func (m *C2S_GMAddItem) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddItem) GetItem() *ItemConfig {
	if m != nil {
		return m.Item
	}
	return nil
}

type S2C_GMAddItem struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddItem) Reset()         { *m = S2C_GMAddItem{} }
func (m *S2C_GMAddItem) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddItem) ProtoMessage()    {}
func (*S2C_GMAddItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{290}
}
func (m *S2C_GMAddItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddItem.Merge(m, src)
}
func (m *S2C_GMAddItem) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddItem) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddItem.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddItem proto.InternalMessageInfo

func (m *S2C_GMAddItem) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddCoin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Value                *int32   `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GMAddCoin) Reset()         { *m = C2S_GMAddCoin{} }
func (m *C2S_GMAddCoin) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddCoin) ProtoMessage()    {}
func (*C2S_GMAddCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{291}
}
func (m *C2S_GMAddCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddCoin.Merge(m, src)
}
func (m *C2S_GMAddCoin) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddCoin.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddCoin proto.InternalMessageInfo

func (m *C2S_GMAddCoin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddCoin) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type S2C_GMAddCoin struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddCoin) Reset()         { *m = S2C_GMAddCoin{} }
func (m *S2C_GMAddCoin) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddCoin) ProtoMessage()    {}
func (*S2C_GMAddCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{292}
}
func (m *S2C_GMAddCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddCoin.Merge(m, src)
}
func (m *S2C_GMAddCoin) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddCoin.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddCoin proto.InternalMessageInfo

func (m *S2C_GMAddCoin) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddStimina struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Value                *int32   `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GMAddStimina) Reset()         { *m = C2S_GMAddStimina{} }
func (m *C2S_GMAddStimina) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddStimina) ProtoMessage()    {}
func (*C2S_GMAddStimina) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{293}
}
func (m *C2S_GMAddStimina) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddStimina) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddStimina.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddStimina) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddStimina.Merge(m, src)
}
func (m *C2S_GMAddStimina) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddStimina) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddStimina.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddStimina proto.InternalMessageInfo

func (m *C2S_GMAddStimina) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddStimina) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type S2C_GMAddStimina struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddStimina) Reset()         { *m = S2C_GMAddStimina{} }
func (m *S2C_GMAddStimina) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddStimina) ProtoMessage()    {}
func (*S2C_GMAddStimina) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{294}
}
func (m *S2C_GMAddStimina) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddStimina) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddStimina.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddStimina) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddStimina.Merge(m, src)
}
func (m *S2C_GMAddStimina) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddStimina) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddStimina.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddStimina proto.InternalMessageInfo

func (m *S2C_GMAddStimina) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddDiamond struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Value                *int32   `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GMAddDiamond) Reset()         { *m = C2S_GMAddDiamond{} }
func (m *C2S_GMAddDiamond) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddDiamond) ProtoMessage()    {}
func (*C2S_GMAddDiamond) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{295}
}
func (m *C2S_GMAddDiamond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddDiamond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddDiamond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddDiamond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddDiamond.Merge(m, src)
}
func (m *C2S_GMAddDiamond) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddDiamond) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddDiamond.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddDiamond proto.InternalMessageInfo

func (m *C2S_GMAddDiamond) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddDiamond) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type S2C_GMAddDiamond struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddDiamond) Reset()         { *m = S2C_GMAddDiamond{} }
func (m *S2C_GMAddDiamond) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddDiamond) ProtoMessage()    {}
func (*S2C_GMAddDiamond) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{296}
}
func (m *S2C_GMAddDiamond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddDiamond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddDiamond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddDiamond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddDiamond.Merge(m, src)
}
func (m *S2C_GMAddDiamond) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddDiamond) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddDiamond.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddDiamond proto.InternalMessageInfo

func (m *S2C_GMAddDiamond) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddCaliburnCount struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Value                *int32   `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GMAddCaliburnCount) Reset()         { *m = C2S_GMAddCaliburnCount{} }
func (m *C2S_GMAddCaliburnCount) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddCaliburnCount) ProtoMessage()    {}
func (*C2S_GMAddCaliburnCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{297}
}
func (m *C2S_GMAddCaliburnCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddCaliburnCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddCaliburnCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddCaliburnCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddCaliburnCount.Merge(m, src)
}
func (m *C2S_GMAddCaliburnCount) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddCaliburnCount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddCaliburnCount.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddCaliburnCount proto.InternalMessageInfo

func (m *C2S_GMAddCaliburnCount) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddCaliburnCount) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type S2C_GMAddCaliburnCount struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddCaliburnCount) Reset()         { *m = S2C_GMAddCaliburnCount{} }
func (m *S2C_GMAddCaliburnCount) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddCaliburnCount) ProtoMessage()    {}
func (*S2C_GMAddCaliburnCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{298}
}
func (m *S2C_GMAddCaliburnCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddCaliburnCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddCaliburnCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddCaliburnCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddCaliburnCount.Merge(m, src)
}
func (m *S2C_GMAddCaliburnCount) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddCaliburnCount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddCaliburnCount.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddCaliburnCount proto.InternalMessageInfo

func (m *S2C_GMAddCaliburnCount) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddArenaCount struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Value                *int32   `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GMAddArenaCount) Reset()         { *m = C2S_GMAddArenaCount{} }
func (m *C2S_GMAddArenaCount) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddArenaCount) ProtoMessage()    {}
func (*C2S_GMAddArenaCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{299}
}
func (m *C2S_GMAddArenaCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddArenaCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddArenaCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddArenaCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddArenaCount.Merge(m, src)
}
func (m *C2S_GMAddArenaCount) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddArenaCount) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddArenaCount.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddArenaCount proto.InternalMessageInfo

func (m *C2S_GMAddArenaCount) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddArenaCount) GetValue() int32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type S2C_GMAddArenaCount struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddArenaCount) Reset()         { *m = S2C_GMAddArenaCount{} }
func (m *S2C_GMAddArenaCount) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddArenaCount) ProtoMessage()    {}
func (*S2C_GMAddArenaCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{300}
}
func (m *S2C_GMAddArenaCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddArenaCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddArenaCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddArenaCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddArenaCount.Merge(m, src)
}
func (m *S2C_GMAddArenaCount) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddArenaCount) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddArenaCount.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddArenaCount proto.InternalMessageInfo

func (m *S2C_GMAddArenaCount) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddFace struct {
	RoleIndex            *int64      `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Face                 *FaceConfig `protobuf:"bytes,2,opt,name=face" json:"face,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *C2S_GMAddFace) Reset()         { *m = C2S_GMAddFace{} }
func (m *C2S_GMAddFace) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddFace) ProtoMessage()    {}
func (*C2S_GMAddFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{301}
}
func (m *C2S_GMAddFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddFace.Merge(m, src)
}
func (m *C2S_GMAddFace) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddFace) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddFace.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddFace proto.InternalMessageInfo

func (m *C2S_GMAddFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddFace) GetFace() *FaceConfig {
	if m != nil {
		return m.Face
	}
	return nil
}

type S2C_GMAddFace struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddFace) Reset()         { *m = S2C_GMAddFace{} }
func (m *S2C_GMAddFace) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddFace) ProtoMessage()    {}
func (*S2C_GMAddFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{302}
}
func (m *S2C_GMAddFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddFace.Merge(m, src)
}
func (m *S2C_GMAddFace) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddFace) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddFace.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddFace proto.InternalMessageInfo

func (m *S2C_GMAddFace) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddSuit struct {
	RoleIndex            *int64      `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Suit                 *SuitConfig `protobuf:"bytes,2,opt,name=suit" json:"suit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *C2S_GMAddSuit) Reset()         { *m = C2S_GMAddSuit{} }
func (m *C2S_GMAddSuit) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddSuit) ProtoMessage()    {}
func (*C2S_GMAddSuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{303}
}
func (m *C2S_GMAddSuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddSuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddSuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddSuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddSuit.Merge(m, src)
}
func (m *C2S_GMAddSuit) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddSuit) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddSuit.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddSuit proto.InternalMessageInfo

func (m *C2S_GMAddSuit) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddSuit) GetSuit() *SuitConfig {
	if m != nil {
		return m.Suit
	}
	return nil
}

type S2C_GMAddSuit struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddSuit) Reset()         { *m = S2C_GMAddSuit{} }
func (m *S2C_GMAddSuit) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddSuit) ProtoMessage()    {}
func (*S2C_GMAddSuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{304}
}
func (m *S2C_GMAddSuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddSuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddSuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddSuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddSuit.Merge(m, src)
}
func (m *S2C_GMAddSuit) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddSuit) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddSuit.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddSuit proto.InternalMessageInfo

func (m *S2C_GMAddSuit) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_GMAddEquip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipId              *int32   `protobuf:"zigzag32,2,opt,name=equip_id" json:"equip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GMAddEquip) Reset()         { *m = C2S_GMAddEquip{} }
func (m *C2S_GMAddEquip) String() string { return proto.CompactTextString(m) }
func (*C2S_GMAddEquip) ProtoMessage()    {}
func (*C2S_GMAddEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{305}
}
func (m *C2S_GMAddEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GMAddEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GMAddEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GMAddEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GMAddEquip.Merge(m, src)
}
func (m *C2S_GMAddEquip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GMAddEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GMAddEquip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GMAddEquip proto.InternalMessageInfo

func (m *C2S_GMAddEquip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GMAddEquip) GetEquipId() int32 {
	if m != nil && m.EquipId != nil {
		return *m.EquipId
	}
	return 0
}

type S2C_GMAddEquip struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GMAddEquip) Reset()         { *m = S2C_GMAddEquip{} }
func (m *S2C_GMAddEquip) String() string { return proto.CompactTextString(m) }
func (*S2C_GMAddEquip) ProtoMessage()    {}
func (*S2C_GMAddEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{306}
}
func (m *S2C_GMAddEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GMAddEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GMAddEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GMAddEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GMAddEquip.Merge(m, src)
}
func (m *S2C_GMAddEquip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GMAddEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GMAddEquip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GMAddEquip proto.InternalMessageInfo

func (m *S2C_GMAddEquip) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type S2C_FunctionOpen struct {
	FunctionId           *int32   `protobuf:"zigzag32,1,opt,name=function_id" json:"function_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_FunctionOpen) Reset()         { *m = S2C_FunctionOpen{} }
func (m *S2C_FunctionOpen) String() string { return proto.CompactTextString(m) }
func (*S2C_FunctionOpen) ProtoMessage()    {}
func (*S2C_FunctionOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{307}
}
func (m *S2C_FunctionOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FunctionOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FunctionOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FunctionOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FunctionOpen.Merge(m, src)
}
func (m *S2C_FunctionOpen) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FunctionOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FunctionOpen.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FunctionOpen proto.InternalMessageInfo

func (m *S2C_FunctionOpen) GetFunctionId() int32 {
	if m != nil && m.FunctionId != nil {
		return *m.FunctionId
	}
	return 0
}

type C2S_FastTransfer struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FastTransfer) Reset()         { *m = C2S_FastTransfer{} }
func (m *C2S_FastTransfer) String() string { return proto.CompactTextString(m) }
func (*C2S_FastTransfer) ProtoMessage()    {}
func (*C2S_FastTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{308}
}
func (m *C2S_FastTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FastTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FastTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FastTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FastTransfer.Merge(m, src)
}
func (m *C2S_FastTransfer) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FastTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FastTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FastTransfer proto.InternalMessageInfo

func (m *C2S_FastTransfer) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FastTransfer) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

type S2C_FastTransfer struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_FastTransfer) Reset()         { *m = S2C_FastTransfer{} }
func (m *S2C_FastTransfer) String() string { return proto.CompactTextString(m) }
func (*S2C_FastTransfer) ProtoMessage()    {}
func (*S2C_FastTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{309}
}
func (m *S2C_FastTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FastTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FastTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FastTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FastTransfer.Merge(m, src)
}
func (m *S2C_FastTransfer) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FastTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FastTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FastTransfer proto.InternalMessageInfo

func (m *S2C_FastTransfer) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

type C2S_EasterEggTransfer struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EggId                *int32   `protobuf:"zigzag32,2,opt,name=egg_id" json:"egg_id,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,3,opt,name=scene_id" json:"scene_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EasterEggTransfer) Reset()         { *m = C2S_EasterEggTransfer{} }
func (m *C2S_EasterEggTransfer) String() string { return proto.CompactTextString(m) }
func (*C2S_EasterEggTransfer) ProtoMessage()    {}
func (*C2S_EasterEggTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{310}
}
func (m *C2S_EasterEggTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EasterEggTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EasterEggTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EasterEggTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EasterEggTransfer.Merge(m, src)
}
func (m *C2S_EasterEggTransfer) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EasterEggTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EasterEggTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EasterEggTransfer proto.InternalMessageInfo

func (m *C2S_EasterEggTransfer) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EasterEggTransfer) GetEggId() int32 {
	if m != nil && m.EggId != nil {
		return *m.EggId
	}
	return 0
}

func (m *C2S_EasterEggTransfer) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

type S2S_GetEasterEggTransfer struct {
	EggId                *int32   `protobuf:"zigzag32,1,opt,name=egg_id" json:"egg_id,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	LeftCdTime           *int32   `protobuf:"zigzag32,5,opt,name=left_cd_time" json:"left_cd_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2S_GetEasterEggTransfer) Reset()         { *m = S2S_GetEasterEggTransfer{} }
func (m *S2S_GetEasterEggTransfer) String() string { return proto.CompactTextString(m) }
func (*S2S_GetEasterEggTransfer) ProtoMessage()    {}
func (*S2S_GetEasterEggTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{311}
}
func (m *S2S_GetEasterEggTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_GetEasterEggTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_GetEasterEggTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_GetEasterEggTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_GetEasterEggTransfer.Merge(m, src)
}
func (m *S2S_GetEasterEggTransfer) XXX_Size() int {
	return m.Size()
}
func (m *S2S_GetEasterEggTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_GetEasterEggTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_GetEasterEggTransfer proto.InternalMessageInfo

func (m *S2S_GetEasterEggTransfer) GetEggId() int32 {
	if m != nil && m.EggId != nil {
		return *m.EggId
	}
	return 0
}

func (m *S2S_GetEasterEggTransfer) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2S_GetEasterEggTransfer) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *S2S_GetEasterEggTransfer) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *S2S_GetEasterEggTransfer) GetLeftCdTime() int32 {
	if m != nil && m.LeftCdTime != nil {
		return *m.LeftCdTime
	}
	return 0
}

type S2C_EasterEggTransfer struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EasterEggTransfer) Reset()         { *m = S2C_EasterEggTransfer{} }
func (m *S2C_EasterEggTransfer) String() string { return proto.CompactTextString(m) }
func (*S2C_EasterEggTransfer) ProtoMessage()    {}
func (*S2C_EasterEggTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{312}
}
func (m *S2C_EasterEggTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EasterEggTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EasterEggTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EasterEggTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EasterEggTransfer.Merge(m, src)
}
func (m *S2C_EasterEggTransfer) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EasterEggTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EasterEggTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EasterEggTransfer proto.InternalMessageInfo

func (m *S2C_EasterEggTransfer) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 装备强化
type C2S_EquipStrongthen struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64   `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EquipStrongthen) Reset()         { *m = C2S_EquipStrongthen{} }
func (m *C2S_EquipStrongthen) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipStrongthen) ProtoMessage()    {}
func (*C2S_EquipStrongthen) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{313}
}
func (m *C2S_EquipStrongthen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipStrongthen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipStrongthen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipStrongthen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipStrongthen.Merge(m, src)
}
func (m *C2S_EquipStrongthen) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipStrongthen) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipStrongthen.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipStrongthen proto.InternalMessageInfo

func (m *C2S_EquipStrongthen) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EquipStrongthen) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

type S2C_EquipStrongthen struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipInfo            *DbBagEquip     `protobuf:"bytes,2,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EquipStrongthen) Reset()         { *m = S2C_EquipStrongthen{} }
func (m *S2C_EquipStrongthen) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipStrongthen) ProtoMessage()    {}
func (*S2C_EquipStrongthen) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{314}
}
func (m *S2C_EquipStrongthen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipStrongthen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipStrongthen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipStrongthen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipStrongthen.Merge(m, src)
}
func (m *S2C_EquipStrongthen) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipStrongthen) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipStrongthen.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipStrongthen proto.InternalMessageInfo

func (m *S2C_EquipStrongthen) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EquipStrongthen) GetEquipInfo() *DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 强化身上装备
type C2S_EquipStrongthenEquiped struct {
	RoleIndex            *int64             `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SiteType             *E_EQUIP_SITE_TYPE `protobuf:"varint,3,opt,name=site_type,enum=pbd.E_EQUIP_SITE_TYPE" json:"site_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *C2S_EquipStrongthenEquiped) Reset()         { *m = C2S_EquipStrongthenEquiped{} }
func (m *C2S_EquipStrongthenEquiped) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipStrongthenEquiped) ProtoMessage()    {}
func (*C2S_EquipStrongthenEquiped) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{315}
}
func (m *C2S_EquipStrongthenEquiped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipStrongthenEquiped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipStrongthenEquiped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipStrongthenEquiped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipStrongthenEquiped.Merge(m, src)
}
func (m *C2S_EquipStrongthenEquiped) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipStrongthenEquiped) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipStrongthenEquiped.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipStrongthenEquiped proto.InternalMessageInfo

func (m *C2S_EquipStrongthenEquiped) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EquipStrongthenEquiped) GetSiteType() E_EQUIP_SITE_TYPE {
	if m != nil && m.SiteType != nil {
		return *m.SiteType
	}
	return E_EQUIP_SITE_TYPE_EEST_HELMET
}

type S2C_EquipStrongthenEquiped struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipInfo            *DbRoleEquip    `protobuf:"bytes,2,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EquipStrongthenEquiped) Reset()         { *m = S2C_EquipStrongthenEquiped{} }
func (m *S2C_EquipStrongthenEquiped) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipStrongthenEquiped) ProtoMessage()    {}
func (*S2C_EquipStrongthenEquiped) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{316}
}
func (m *S2C_EquipStrongthenEquiped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipStrongthenEquiped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipStrongthenEquiped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipStrongthenEquiped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipStrongthenEquiped.Merge(m, src)
}
func (m *S2C_EquipStrongthenEquiped) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipStrongthenEquiped) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipStrongthenEquiped.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipStrongthenEquiped proto.InternalMessageInfo

func (m *S2C_EquipStrongthenEquiped) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EquipStrongthenEquiped) GetEquipInfo() *DbRoleEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 装备分解
type C2S_EquipResolve struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           []int64  `protobuf:"zigzag64,2,rep,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EquipResolve) Reset()         { *m = C2S_EquipResolve{} }
func (m *C2S_EquipResolve) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipResolve) ProtoMessage()    {}
func (*C2S_EquipResolve) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{317}
}
func (m *C2S_EquipResolve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipResolve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipResolve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipResolve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipResolve.Merge(m, src)
}
func (m *C2S_EquipResolve) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipResolve) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipResolve.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipResolve proto.InternalMessageInfo

func (m *C2S_EquipResolve) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EquipResolve) GetEquipIndex() []int64 {
	if m != nil {
		return m.EquipIndex
	}
	return nil
}

type S2C_EquipResolve struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ItemList             []*ItemConfig   `protobuf:"bytes,2,rep,name=item_list" json:"item_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EquipResolve) Reset()         { *m = S2C_EquipResolve{} }
func (m *S2C_EquipResolve) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipResolve) ProtoMessage()    {}
func (*S2C_EquipResolve) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{318}
}
func (m *S2C_EquipResolve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipResolve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipResolve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipResolve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipResolve.Merge(m, src)
}
func (m *S2C_EquipResolve) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipResolve) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipResolve.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipResolve proto.InternalMessageInfo

func (m *S2C_EquipResolve) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EquipResolve) GetItemList() []*ItemConfig {
	if m != nil {
		return m.ItemList
	}
	return nil
}

// 装备修复
type C2S_EquipFix struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64   `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EquipFix) Reset()         { *m = C2S_EquipFix{} }
func (m *C2S_EquipFix) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipFix) ProtoMessage()    {}
func (*C2S_EquipFix) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{319}
}
func (m *C2S_EquipFix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipFix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipFix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipFix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipFix.Merge(m, src)
}
func (m *C2S_EquipFix) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipFix) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipFix.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipFix proto.InternalMessageInfo

func (m *C2S_EquipFix) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EquipFix) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

type S2C_EquipFix struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipInfo            *DbBagEquip     `protobuf:"bytes,2,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EquipFix) Reset()         { *m = S2C_EquipFix{} }
func (m *S2C_EquipFix) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipFix) ProtoMessage()    {}
func (*S2C_EquipFix) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{320}
}
func (m *S2C_EquipFix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipFix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipFix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipFix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipFix.Merge(m, src)
}
func (m *S2C_EquipFix) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipFix) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipFix.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipFix proto.InternalMessageInfo

func (m *S2C_EquipFix) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EquipFix) GetEquipInfo() *DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 修复身上装备
type C2S_EquipFixEquiped struct {
	RoleIndex            *int64             `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SiteType             *E_EQUIP_SITE_TYPE `protobuf:"varint,2,opt,name=site_type,enum=pbd.E_EQUIP_SITE_TYPE" json:"site_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *C2S_EquipFixEquiped) Reset()         { *m = C2S_EquipFixEquiped{} }
func (m *C2S_EquipFixEquiped) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipFixEquiped) ProtoMessage()    {}
func (*C2S_EquipFixEquiped) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{321}
}
func (m *C2S_EquipFixEquiped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipFixEquiped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipFixEquiped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipFixEquiped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipFixEquiped.Merge(m, src)
}
func (m *C2S_EquipFixEquiped) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipFixEquiped) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipFixEquiped.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipFixEquiped proto.InternalMessageInfo

func (m *C2S_EquipFixEquiped) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EquipFixEquiped) GetSiteType() E_EQUIP_SITE_TYPE {
	if m != nil && m.SiteType != nil {
		return *m.SiteType
	}
	return E_EQUIP_SITE_TYPE_EEST_HELMET
}

type S2C_EquipFixEquiped struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipInfo            *DbRoleEquip    `protobuf:"bytes,2,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EquipFixEquiped) Reset()         { *m = S2C_EquipFixEquiped{} }
func (m *S2C_EquipFixEquiped) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipFixEquiped) ProtoMessage()    {}
func (*S2C_EquipFixEquiped) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{322}
}
func (m *S2C_EquipFixEquiped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipFixEquiped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipFixEquiped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipFixEquiped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipFixEquiped.Merge(m, src)
}
func (m *S2C_EquipFixEquiped) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipFixEquiped) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipFixEquiped.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipFixEquiped proto.InternalMessageInfo

func (m *S2C_EquipFixEquiped) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EquipFixEquiped) GetEquipInfo() *DbRoleEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 请求装备修复背包信息
type C2S_AskFixEquipsInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AskFixEquipsInfo) Reset()         { *m = C2S_AskFixEquipsInfo{} }
func (m *C2S_AskFixEquipsInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_AskFixEquipsInfo) ProtoMessage()    {}
func (*C2S_AskFixEquipsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{323}
}
func (m *C2S_AskFixEquipsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AskFixEquipsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AskFixEquipsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AskFixEquipsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AskFixEquipsInfo.Merge(m, src)
}
func (m *C2S_AskFixEquipsInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AskFixEquipsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AskFixEquipsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AskFixEquipsInfo proto.InternalMessageInfo

func (m *C2S_AskFixEquipsInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_AskFixEquipsInfo struct {
	RetCode              *E_MSG_RET_CODE  `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	FixEquips            *ListDbFixEquips `protobuf:"bytes,2,opt,name=fix_equips" json:"fix_equips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *S2C_AskFixEquipsInfo) Reset()         { *m = S2C_AskFixEquipsInfo{} }
func (m *S2C_AskFixEquipsInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_AskFixEquipsInfo) ProtoMessage()    {}
func (*S2C_AskFixEquipsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{324}
}
func (m *S2C_AskFixEquipsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AskFixEquipsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AskFixEquipsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AskFixEquipsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AskFixEquipsInfo.Merge(m, src)
}
func (m *S2C_AskFixEquipsInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AskFixEquipsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AskFixEquipsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AskFixEquipsInfo proto.InternalMessageInfo

func (m *S2C_AskFixEquipsInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_AskFixEquipsInfo) GetFixEquips() *ListDbFixEquips {
	if m != nil {
		return m.FixEquips
	}
	return nil
}

// 装备快速修复
type C2S_EquipFastFix struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64   `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EquipFastFix) Reset()         { *m = C2S_EquipFastFix{} }
func (m *C2S_EquipFastFix) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipFastFix) ProtoMessage()    {}
func (*C2S_EquipFastFix) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{325}
}
func (m *C2S_EquipFastFix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipFastFix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipFastFix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipFastFix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipFastFix.Merge(m, src)
}
func (m *C2S_EquipFastFix) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipFastFix) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipFastFix.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipFastFix proto.InternalMessageInfo

func (m *C2S_EquipFastFix) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EquipFastFix) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

type S2C_EquipFastFix struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipInfo            *DbFixEquip     `protobuf:"bytes,2,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EquipFastFix) Reset()         { *m = S2C_EquipFastFix{} }
func (m *S2C_EquipFastFix) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipFastFix) ProtoMessage()    {}
func (*S2C_EquipFastFix) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{326}
}
func (m *S2C_EquipFastFix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipFastFix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipFastFix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipFastFix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipFastFix.Merge(m, src)
}
func (m *S2C_EquipFastFix) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipFastFix) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipFastFix.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipFastFix proto.InternalMessageInfo

func (m *S2C_EquipFastFix) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EquipFastFix) GetEquipInfo() *DbFixEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

// 已修理装备领取
type C2S_GetFixedEquip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64   `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetFixedEquip) Reset()         { *m = C2S_GetFixedEquip{} }
func (m *C2S_GetFixedEquip) String() string { return proto.CompactTextString(m) }
func (*C2S_GetFixedEquip) ProtoMessage()    {}
func (*C2S_GetFixedEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{327}
}
func (m *C2S_GetFixedEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetFixedEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetFixedEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetFixedEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetFixedEquip.Merge(m, src)
}
func (m *C2S_GetFixedEquip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetFixedEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetFixedEquip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetFixedEquip proto.InternalMessageInfo

func (m *C2S_GetFixedEquip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GetFixedEquip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

type S2C_GetFixedEquip struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EquipInfo            *DbBagEquip     `protobuf:"bytes,2,opt,name=equip_info" json:"equip_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetFixedEquip) Reset()         { *m = S2C_GetFixedEquip{} }
func (m *S2C_GetFixedEquip) String() string { return proto.CompactTextString(m) }
func (*S2C_GetFixedEquip) ProtoMessage()    {}
func (*S2C_GetFixedEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{328}
}
func (m *S2C_GetFixedEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetFixedEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetFixedEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetFixedEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetFixedEquip.Merge(m, src)
}
func (m *S2C_GetFixedEquip) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetFixedEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetFixedEquip.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetFixedEquip proto.InternalMessageInfo

func (m *S2C_GetFixedEquip) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_GetFixedEquip) GetEquipInfo() *DbBagEquip {
	if m != nil {
		return m.EquipInfo
	}
	return nil
}

type C2S_PointGoldInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PointGoldInfo) Reset()         { *m = C2S_PointGoldInfo{} }
func (m *C2S_PointGoldInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_PointGoldInfo) ProtoMessage()    {}
func (*C2S_PointGoldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{329}
}
func (m *C2S_PointGoldInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PointGoldInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PointGoldInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PointGoldInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PointGoldInfo.Merge(m, src)
}
func (m *C2S_PointGoldInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PointGoldInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PointGoldInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PointGoldInfo proto.InternalMessageInfo

func (m *C2S_PointGoldInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_PointGoldInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ExchangedCount       *int32          `protobuf:"zigzag32,2,opt,name=exchanged_count" json:"exchanged_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PointGoldInfo) Reset()         { *m = S2C_PointGoldInfo{} }
func (m *S2C_PointGoldInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_PointGoldInfo) ProtoMessage()    {}
func (*S2C_PointGoldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{330}
}
func (m *S2C_PointGoldInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PointGoldInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PointGoldInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PointGoldInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PointGoldInfo.Merge(m, src)
}
func (m *S2C_PointGoldInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PointGoldInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PointGoldInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PointGoldInfo proto.InternalMessageInfo

func (m *S2C_PointGoldInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PointGoldInfo) GetExchangedCount() int32 {
	if m != nil && m.ExchangedCount != nil {
		return *m.ExchangedCount
	}
	return 0
}

// 点金手（棒棒糖换金币）
type C2S_PointGold struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PointGold) Reset()         { *m = C2S_PointGold{} }
func (m *C2S_PointGold) String() string { return proto.CompactTextString(m) }
func (*C2S_PointGold) ProtoMessage()    {}
func (*C2S_PointGold) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{331}
}
func (m *C2S_PointGold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PointGold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PointGold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PointGold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PointGold.Merge(m, src)
}
func (m *C2S_PointGold) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PointGold) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PointGold.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PointGold proto.InternalMessageInfo

func (m *C2S_PointGold) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 点金手（棒棒糖换金币）
type S2C_PointGold struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PointGold) Reset()         { *m = S2C_PointGold{} }
func (m *S2C_PointGold) String() string { return proto.CompactTextString(m) }
func (*S2C_PointGold) ProtoMessage()    {}
func (*S2C_PointGold) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{332}
}
func (m *S2C_PointGold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PointGold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PointGold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PointGold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PointGold.Merge(m, src)
}
func (m *S2C_PointGold) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PointGold) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PointGold.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PointGold proto.InternalMessageInfo

func (m *S2C_PointGold) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 触发个人彩蛋
type C2S_TouchPersonEasterEgg struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EasterEggId          *int32   `protobuf:"zigzag32,2,opt,name=easter_egg_id" json:"easter_egg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TouchPersonEasterEgg) Reset()         { *m = C2S_TouchPersonEasterEgg{} }
func (m *C2S_TouchPersonEasterEgg) String() string { return proto.CompactTextString(m) }
func (*C2S_TouchPersonEasterEgg) ProtoMessage()    {}
func (*C2S_TouchPersonEasterEgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{333}
}
func (m *C2S_TouchPersonEasterEgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TouchPersonEasterEgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TouchPersonEasterEgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TouchPersonEasterEgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TouchPersonEasterEgg.Merge(m, src)
}
func (m *C2S_TouchPersonEasterEgg) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TouchPersonEasterEgg) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TouchPersonEasterEgg.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TouchPersonEasterEgg proto.InternalMessageInfo

func (m *C2S_TouchPersonEasterEgg) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TouchPersonEasterEgg) GetEasterEggId() int32 {
	if m != nil && m.EasterEggId != nil {
		return *m.EasterEggId
	}
	return 0
}

// 触发个人彩蛋
type S2C_TouchPersonEasterEgg struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EasterEggId          *int32          `protobuf:"zigzag32,2,opt,name=easter_egg_id" json:"easter_egg_id,omitempty"`
	LeftCdTime           *int32          `protobuf:"zigzag32,3,opt,name=left_cd_time" json:"left_cd_time,omitempty"`
	DayGetCount          *int32          `protobuf:"zigzag32,4,opt,name=day_get_count" json:"day_get_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TouchPersonEasterEgg) Reset()         { *m = S2C_TouchPersonEasterEgg{} }
func (m *S2C_TouchPersonEasterEgg) String() string { return proto.CompactTextString(m) }
func (*S2C_TouchPersonEasterEgg) ProtoMessage()    {}
func (*S2C_TouchPersonEasterEgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{334}
}
func (m *S2C_TouchPersonEasterEgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TouchPersonEasterEgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TouchPersonEasterEgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TouchPersonEasterEgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TouchPersonEasterEgg.Merge(m, src)
}
func (m *S2C_TouchPersonEasterEgg) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TouchPersonEasterEgg) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TouchPersonEasterEgg.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TouchPersonEasterEgg proto.InternalMessageInfo

func (m *S2C_TouchPersonEasterEgg) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TouchPersonEasterEgg) GetEasterEggId() int32 {
	if m != nil && m.EasterEggId != nil {
		return *m.EasterEggId
	}
	return 0
}

func (m *S2C_TouchPersonEasterEgg) GetLeftCdTime() int32 {
	if m != nil && m.LeftCdTime != nil {
		return *m.LeftCdTime
	}
	return 0
}

func (m *S2C_TouchPersonEasterEgg) GetDayGetCount() int32 {
	if m != nil && m.DayGetCount != nil {
		return *m.DayGetCount
	}
	return 0
}

// 重置个人彩蛋
type S2C_ResetPersonEasterEgg struct {
	EasterEggId          *int32   `protobuf:"zigzag32,1,opt,name=easter_egg_id" json:"easter_egg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_ResetPersonEasterEgg) Reset()         { *m = S2C_ResetPersonEasterEgg{} }
func (m *S2C_ResetPersonEasterEgg) String() string { return proto.CompactTextString(m) }
func (*S2C_ResetPersonEasterEgg) ProtoMessage()    {}
func (*S2C_ResetPersonEasterEgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{335}
}
func (m *S2C_ResetPersonEasterEgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ResetPersonEasterEgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ResetPersonEasterEgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ResetPersonEasterEgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ResetPersonEasterEgg.Merge(m, src)
}
func (m *S2C_ResetPersonEasterEgg) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ResetPersonEasterEgg) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ResetPersonEasterEgg.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ResetPersonEasterEgg proto.InternalMessageInfo

func (m *S2C_ResetPersonEasterEgg) GetEasterEggId() int32 {
	if m != nil && m.EasterEggId != nil {
		return *m.EasterEggId
	}
	return 0
}

// 请求全服彩蛋信息(服务器自用)
type S2S_GlobalEasterEggInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EasterEggId          *int32   `protobuf:"zigzag32,2,opt,name=easter_egg_id" json:"easter_egg_id,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2S_GlobalEasterEggInfo) Reset()         { *m = S2S_GlobalEasterEggInfo{} }
func (m *S2S_GlobalEasterEggInfo) String() string { return proto.CompactTextString(m) }
func (*S2S_GlobalEasterEggInfo) ProtoMessage()    {}
func (*S2S_GlobalEasterEggInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{336}
}
func (m *S2S_GlobalEasterEggInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_GlobalEasterEggInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_GlobalEasterEggInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_GlobalEasterEggInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_GlobalEasterEggInfo.Merge(m, src)
}
func (m *S2S_GlobalEasterEggInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2S_GlobalEasterEggInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_GlobalEasterEggInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_GlobalEasterEggInfo proto.InternalMessageInfo

func (m *S2S_GlobalEasterEggInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2S_GlobalEasterEggInfo) GetEasterEggId() int32 {
	if m != nil && m.EasterEggId != nil {
		return *m.EasterEggId
	}
	return 0
}

func (m *S2S_GlobalEasterEggInfo) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *S2S_GlobalEasterEggInfo) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

// 推送全服彩蛋信息
type S2C_GlobalEasterEggInfo struct {
	EasterEggId          *int32   `protobuf:"zigzag32,1,opt,name=easter_egg_id" json:"easter_egg_id,omitempty"`
	LeftCdTime           *int32   `protobuf:"zigzag32,2,opt,name=left_cd_time" json:"left_cd_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_GlobalEasterEggInfo) Reset()         { *m = S2C_GlobalEasterEggInfo{} }
func (m *S2C_GlobalEasterEggInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_GlobalEasterEggInfo) ProtoMessage()    {}
func (*S2C_GlobalEasterEggInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{337}
}
func (m *S2C_GlobalEasterEggInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GlobalEasterEggInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GlobalEasterEggInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GlobalEasterEggInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GlobalEasterEggInfo.Merge(m, src)
}
func (m *S2C_GlobalEasterEggInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GlobalEasterEggInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GlobalEasterEggInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GlobalEasterEggInfo proto.InternalMessageInfo

func (m *S2C_GlobalEasterEggInfo) GetEasterEggId() int32 {
	if m != nil && m.EasterEggId != nil {
		return *m.EasterEggId
	}
	return 0
}

func (m *S2C_GlobalEasterEggInfo) GetLeftCdTime() int32 {
	if m != nil && m.LeftCdTime != nil {
		return *m.LeftCdTime
	}
	return 0
}

// 触发全服彩蛋
type C2S_TouchGlobalEasterEgg struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EasterEggId          *int32   `protobuf:"zigzag32,2,opt,name=easter_egg_id" json:"easter_egg_id,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,5,opt,name=scene_id" json:"scene_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TouchGlobalEasterEgg) Reset()         { *m = C2S_TouchGlobalEasterEgg{} }
func (m *C2S_TouchGlobalEasterEgg) String() string { return proto.CompactTextString(m) }
func (*C2S_TouchGlobalEasterEgg) ProtoMessage()    {}
func (*C2S_TouchGlobalEasterEgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{338}
}
func (m *C2S_TouchGlobalEasterEgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TouchGlobalEasterEgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TouchGlobalEasterEgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TouchGlobalEasterEgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TouchGlobalEasterEgg.Merge(m, src)
}
func (m *C2S_TouchGlobalEasterEgg) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TouchGlobalEasterEgg) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TouchGlobalEasterEgg.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TouchGlobalEasterEgg proto.InternalMessageInfo

func (m *C2S_TouchGlobalEasterEgg) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TouchGlobalEasterEgg) GetEasterEggId() int32 {
	if m != nil && m.EasterEggId != nil {
		return *m.EasterEggId
	}
	return 0
}

func (m *C2S_TouchGlobalEasterEgg) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_TouchGlobalEasterEgg) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *C2S_TouchGlobalEasterEgg) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

// 触发全服彩蛋
type S2C_TouchGlobalEasterEgg struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EasterEggId          *int32          `protobuf:"zigzag32,2,opt,name=easter_egg_id" json:"easter_egg_id,omitempty"`
	LeftCdTime           *int32          `protobuf:"zigzag32,3,opt,name=left_cd_time" json:"left_cd_time,omitempty"`
	SceneId              *int32          `protobuf:"zigzag32,4,opt,name=scene_id" json:"scene_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TouchGlobalEasterEgg) Reset()         { *m = S2C_TouchGlobalEasterEgg{} }
func (m *S2C_TouchGlobalEasterEgg) String() string { return proto.CompactTextString(m) }
func (*S2C_TouchGlobalEasterEgg) ProtoMessage()    {}
func (*S2C_TouchGlobalEasterEgg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{339}
}
func (m *S2C_TouchGlobalEasterEgg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TouchGlobalEasterEgg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TouchGlobalEasterEgg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TouchGlobalEasterEgg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TouchGlobalEasterEgg.Merge(m, src)
}
func (m *S2C_TouchGlobalEasterEgg) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TouchGlobalEasterEgg) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TouchGlobalEasterEgg.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TouchGlobalEasterEgg proto.InternalMessageInfo

func (m *S2C_TouchGlobalEasterEgg) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TouchGlobalEasterEgg) GetEasterEggId() int32 {
	if m != nil && m.EasterEggId != nil {
		return *m.EasterEggId
	}
	return 0
}

func (m *S2C_TouchGlobalEasterEgg) GetLeftCdTime() int32 {
	if m != nil && m.LeftCdTime != nil {
		return *m.LeftCdTime
	}
	return 0
}

func (m *S2C_TouchGlobalEasterEgg) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

// 获取vip信息
type C2S_RechargeMoneyInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RechargeMoneyInfo) Reset()         { *m = C2S_RechargeMoneyInfo{} }
func (m *C2S_RechargeMoneyInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_RechargeMoneyInfo) ProtoMessage()    {}
func (*C2S_RechargeMoneyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{340}
}
func (m *C2S_RechargeMoneyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RechargeMoneyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RechargeMoneyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RechargeMoneyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RechargeMoneyInfo.Merge(m, src)
}
func (m *C2S_RechargeMoneyInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RechargeMoneyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RechargeMoneyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RechargeMoneyInfo proto.InternalMessageInfo

func (m *C2S_RechargeMoneyInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 获取vip信息
type S2C_RechargeMoneyInfo struct {
	RechargeInfo         *RechargeMoneyInfo `protobuf:"bytes,1,opt,name=recharge_info" json:"recharge_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_RechargeMoneyInfo) Reset()         { *m = S2C_RechargeMoneyInfo{} }
func (m *S2C_RechargeMoneyInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_RechargeMoneyInfo) ProtoMessage()    {}
func (*S2C_RechargeMoneyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{341}
}
func (m *S2C_RechargeMoneyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RechargeMoneyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RechargeMoneyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RechargeMoneyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RechargeMoneyInfo.Merge(m, src)
}
func (m *S2C_RechargeMoneyInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RechargeMoneyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RechargeMoneyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RechargeMoneyInfo proto.InternalMessageInfo

func (m *S2C_RechargeMoneyInfo) GetRechargeInfo() *RechargeMoneyInfo {
	if m != nil {
		return m.RechargeInfo
	}
	return nil
}

// 购买商品
type C2S_RechargeMoney struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	RechargeId           *int32   `protobuf:"zigzag32,2,opt,name=recharge_id" json:"recharge_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RechargeMoney) Reset()         { *m = C2S_RechargeMoney{} }
func (m *C2S_RechargeMoney) String() string { return proto.CompactTextString(m) }
func (*C2S_RechargeMoney) ProtoMessage()    {}
func (*C2S_RechargeMoney) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{342}
}
func (m *C2S_RechargeMoney) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RechargeMoney) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RechargeMoney.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RechargeMoney) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RechargeMoney.Merge(m, src)
}
func (m *C2S_RechargeMoney) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RechargeMoney) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RechargeMoney.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RechargeMoney proto.InternalMessageInfo

func (m *C2S_RechargeMoney) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_RechargeMoney) GetRechargeId() int32 {
	if m != nil && m.RechargeId != nil {
		return *m.RechargeId
	}
	return 0
}

// 购买商品
type S2C_RechargeMoney struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RechargeId           *int32          `protobuf:"zigzag32,2,opt,name=recharge_id" json:"recharge_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_RechargeMoney) Reset()         { *m = S2C_RechargeMoney{} }
func (m *S2C_RechargeMoney) String() string { return proto.CompactTextString(m) }
func (*S2C_RechargeMoney) ProtoMessage()    {}
func (*S2C_RechargeMoney) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{343}
}
func (m *S2C_RechargeMoney) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RechargeMoney) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RechargeMoney.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RechargeMoney) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RechargeMoney.Merge(m, src)
}
func (m *S2C_RechargeMoney) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RechargeMoney) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RechargeMoney.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RechargeMoney proto.InternalMessageInfo

func (m *S2C_RechargeMoney) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_RechargeMoney) GetRechargeId() int32 {
	if m != nil && m.RechargeId != nil {
		return *m.RechargeId
	}
	return 0
}

// 推送因vip等级提升引起当日奖励领取标识重置状态
type S2C_VipDailyRewardFlag struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	DailyRewardFlag      *bool    `protobuf:"varint,2,opt,name=daily_reward_flag" json:"daily_reward_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_VipDailyRewardFlag) Reset()         { *m = S2C_VipDailyRewardFlag{} }
func (m *S2C_VipDailyRewardFlag) String() string { return proto.CompactTextString(m) }
func (*S2C_VipDailyRewardFlag) ProtoMessage()    {}
func (*S2C_VipDailyRewardFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{344}
}
func (m *S2C_VipDailyRewardFlag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_VipDailyRewardFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_VipDailyRewardFlag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_VipDailyRewardFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_VipDailyRewardFlag.Merge(m, src)
}
func (m *S2C_VipDailyRewardFlag) XXX_Size() int {
	return m.Size()
}
func (m *S2C_VipDailyRewardFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_VipDailyRewardFlag.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_VipDailyRewardFlag proto.InternalMessageInfo

func (m *S2C_VipDailyRewardFlag) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_VipDailyRewardFlag) GetDailyRewardFlag() bool {
	if m != nil && m.DailyRewardFlag != nil {
		return *m.DailyRewardFlag
	}
	return false
}

// 领取当前vip每日奖励
type C2S_GetVipDailyReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetVipDailyReward) Reset()         { *m = C2S_GetVipDailyReward{} }
func (m *C2S_GetVipDailyReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetVipDailyReward) ProtoMessage()    {}
func (*C2S_GetVipDailyReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{345}
}
func (m *C2S_GetVipDailyReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetVipDailyReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetVipDailyReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetVipDailyReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetVipDailyReward.Merge(m, src)
}
func (m *C2S_GetVipDailyReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetVipDailyReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetVipDailyReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetVipDailyReward proto.InternalMessageInfo

func (m *C2S_GetVipDailyReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 领取当前vip每日奖励
type S2C_GetVipDailyReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetVipDailyReward) Reset()         { *m = S2C_GetVipDailyReward{} }
func (m *S2C_GetVipDailyReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetVipDailyReward) ProtoMessage()    {}
func (*S2C_GetVipDailyReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{346}
}
func (m *S2C_GetVipDailyReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetVipDailyReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetVipDailyReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetVipDailyReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetVipDailyReward.Merge(m, src)
}
func (m *S2C_GetVipDailyReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetVipDailyReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetVipDailyReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetVipDailyReward proto.InternalMessageInfo

func (m *S2C_GetVipDailyReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 领取当前vip永久奖励
type C2S_GetSpecialVipReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	VipLevel             *int32   `protobuf:"zigzag32,2,opt,name=vip_level" json:"vip_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetSpecialVipReward) Reset()         { *m = C2S_GetSpecialVipReward{} }
func (m *C2S_GetSpecialVipReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetSpecialVipReward) ProtoMessage()    {}
func (*C2S_GetSpecialVipReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{347}
}
func (m *C2S_GetSpecialVipReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetSpecialVipReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetSpecialVipReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetSpecialVipReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetSpecialVipReward.Merge(m, src)
}
func (m *C2S_GetSpecialVipReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetSpecialVipReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetSpecialVipReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetSpecialVipReward proto.InternalMessageInfo

func (m *C2S_GetSpecialVipReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GetSpecialVipReward) GetVipLevel() int32 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

// 领取当前vip永久奖励
type S2C_GetSpecialVipReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetSpecialVipReward) Reset()         { *m = S2C_GetSpecialVipReward{} }
func (m *S2C_GetSpecialVipReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetSpecialVipReward) ProtoMessage()    {}
func (*S2C_GetSpecialVipReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{348}
}
func (m *S2C_GetSpecialVipReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetSpecialVipReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetSpecialVipReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetSpecialVipReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetSpecialVipReward.Merge(m, src)
}
func (m *S2C_GetSpecialVipReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetSpecialVipReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetSpecialVipReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetSpecialVipReward proto.InternalMessageInfo

func (m *S2C_GetSpecialVipReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 澡堂新增加一个交互道具
type S2C_AddInterActTool struct {
	ToolInfo             []*BathhouseTool `protobuf:"bytes,1,rep,name=tool_info" json:"tool_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *S2C_AddInterActTool) Reset()         { *m = S2C_AddInterActTool{} }
func (m *S2C_AddInterActTool) String() string { return proto.CompactTextString(m) }
func (*S2C_AddInterActTool) ProtoMessage()    {}
func (*S2C_AddInterActTool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{349}
}
func (m *S2C_AddInterActTool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AddInterActTool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AddInterActTool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AddInterActTool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AddInterActTool.Merge(m, src)
}
func (m *S2C_AddInterActTool) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AddInterActTool) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AddInterActTool.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AddInterActTool proto.InternalMessageInfo

func (m *S2C_AddInterActTool) GetToolInfo() []*BathhouseTool {
	if m != nil {
		return m.ToolInfo
	}
	return nil
}

// 澡堂指定交互道具消失
type S2C_RemoveInterActTool struct {
	ToolId               *int32   `protobuf:"zigzag32,1,opt,name=tool_id" json:"tool_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_RemoveInterActTool) Reset()         { *m = S2C_RemoveInterActTool{} }
func (m *S2C_RemoveInterActTool) String() string { return proto.CompactTextString(m) }
func (*S2C_RemoveInterActTool) ProtoMessage()    {}
func (*S2C_RemoveInterActTool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{350}
}
func (m *S2C_RemoveInterActTool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RemoveInterActTool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RemoveInterActTool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RemoveInterActTool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RemoveInterActTool.Merge(m, src)
}
func (m *S2C_RemoveInterActTool) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RemoveInterActTool) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RemoveInterActTool.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RemoveInterActTool proto.InternalMessageInfo

func (m *S2C_RemoveInterActTool) GetToolId() int32 {
	if m != nil && m.ToolId != nil {
		return *m.ToolId
	}
	return 0
}

// 澡堂玩家身上交互道具移除
type S2C_RemoveOwnerTool struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_RemoveOwnerTool) Reset()         { *m = S2C_RemoveOwnerTool{} }
func (m *S2C_RemoveOwnerTool) String() string { return proto.CompactTextString(m) }
func (*S2C_RemoveOwnerTool) ProtoMessage()    {}
func (*S2C_RemoveOwnerTool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{351}
}
func (m *S2C_RemoveOwnerTool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RemoveOwnerTool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RemoveOwnerTool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RemoveOwnerTool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RemoveOwnerTool.Merge(m, src)
}
func (m *S2C_RemoveOwnerTool) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RemoveOwnerTool) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RemoveOwnerTool.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RemoveOwnerTool proto.InternalMessageInfo

func (m *S2C_RemoveOwnerTool) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 通知澡堂大战结束
type S2C_BathhouseFightEnd struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_BathhouseFightEnd) Reset()         { *m = S2C_BathhouseFightEnd{} }
func (m *S2C_BathhouseFightEnd) String() string { return proto.CompactTextString(m) }
func (*S2C_BathhouseFightEnd) ProtoMessage()    {}
func (*S2C_BathhouseFightEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{352}
}
func (m *S2C_BathhouseFightEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BathhouseFightEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BathhouseFightEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BathhouseFightEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BathhouseFightEnd.Merge(m, src)
}
func (m *S2C_BathhouseFightEnd) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BathhouseFightEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BathhouseFightEnd.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BathhouseFightEnd proto.InternalMessageInfo

func (m *S2C_BathhouseFightEnd) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 玩家点击黑衣人
type C2S_TouchManInBlack struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TouchManInBlack) Reset()         { *m = C2S_TouchManInBlack{} }
func (m *C2S_TouchManInBlack) String() string { return proto.CompactTextString(m) }
func (*C2S_TouchManInBlack) ProtoMessage()    {}
func (*C2S_TouchManInBlack) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{353}
}
func (m *C2S_TouchManInBlack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TouchManInBlack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TouchManInBlack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TouchManInBlack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TouchManInBlack.Merge(m, src)
}
func (m *C2S_TouchManInBlack) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TouchManInBlack) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TouchManInBlack.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TouchManInBlack proto.InternalMessageInfo

func (m *C2S_TouchManInBlack) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 玩家点击黑衣人
type S2C_TouchManInBlack struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CdTime               *int32          `protobuf:"zigzag32,2,opt,name=cd_time" json:"cd_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TouchManInBlack) Reset()         { *m = S2C_TouchManInBlack{} }
func (m *S2C_TouchManInBlack) String() string { return proto.CompactTextString(m) }
func (*S2C_TouchManInBlack) ProtoMessage()    {}
func (*S2C_TouchManInBlack) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{354}
}
func (m *S2C_TouchManInBlack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TouchManInBlack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TouchManInBlack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TouchManInBlack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TouchManInBlack.Merge(m, src)
}
func (m *S2C_TouchManInBlack) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TouchManInBlack) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TouchManInBlack.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TouchManInBlack proto.InternalMessageInfo

func (m *S2C_TouchManInBlack) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TouchManInBlack) GetCdTime() int32 {
	if m != nil && m.CdTime != nil {
		return *m.CdTime
	}
	return 0
}

// (服务器用)使用交互道具
type S2S_UseInterActTool struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ToolType             *int32   `protobuf:"zigzag32,2,opt,name=tool_type" json:"tool_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2S_UseInterActTool) Reset()         { *m = S2S_UseInterActTool{} }
func (m *S2S_UseInterActTool) String() string { return proto.CompactTextString(m) }
func (*S2S_UseInterActTool) ProtoMessage()    {}
func (*S2S_UseInterActTool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{355}
}
func (m *S2S_UseInterActTool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_UseInterActTool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_UseInterActTool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_UseInterActTool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_UseInterActTool.Merge(m, src)
}
func (m *S2S_UseInterActTool) XXX_Size() int {
	return m.Size()
}
func (m *S2S_UseInterActTool) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_UseInterActTool.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_UseInterActTool proto.InternalMessageInfo

func (m *S2S_UseInterActTool) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2S_UseInterActTool) GetToolType() int32 {
	if m != nil && m.ToolType != nil {
		return *m.ToolType
	}
	return 0
}

// 澡堂玩家捡起指定交互道具
type C2S_PickUpInterActTool struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ToolId               *int32   `protobuf:"zigzag32,2,opt,name=tool_id" json:"tool_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PickUpInterActTool) Reset()         { *m = C2S_PickUpInterActTool{} }
func (m *C2S_PickUpInterActTool) String() string { return proto.CompactTextString(m) }
func (*C2S_PickUpInterActTool) ProtoMessage()    {}
func (*C2S_PickUpInterActTool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{356}
}
func (m *C2S_PickUpInterActTool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PickUpInterActTool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PickUpInterActTool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PickUpInterActTool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PickUpInterActTool.Merge(m, src)
}
func (m *C2S_PickUpInterActTool) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PickUpInterActTool) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PickUpInterActTool.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PickUpInterActTool proto.InternalMessageInfo

func (m *C2S_PickUpInterActTool) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PickUpInterActTool) GetToolId() int32 {
	if m != nil && m.ToolId != nil {
		return *m.ToolId
	}
	return 0
}

// 澡堂玩家捡起指定交互道具
type S2C_PickUpInterActTool struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ToolInfo             *BathhouseTool  `protobuf:"bytes,2,opt,name=tool_info" json:"tool_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PickUpInterActTool) Reset()         { *m = S2C_PickUpInterActTool{} }
func (m *S2C_PickUpInterActTool) String() string { return proto.CompactTextString(m) }
func (*S2C_PickUpInterActTool) ProtoMessage()    {}
func (*S2C_PickUpInterActTool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{357}
}
func (m *S2C_PickUpInterActTool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PickUpInterActTool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PickUpInterActTool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PickUpInterActTool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PickUpInterActTool.Merge(m, src)
}
func (m *S2C_PickUpInterActTool) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PickUpInterActTool) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PickUpInterActTool.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PickUpInterActTool proto.InternalMessageInfo

func (m *S2C_PickUpInterActTool) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PickUpInterActTool) GetToolInfo() *BathhouseTool {
	if m != nil {
		return m.ToolInfo
	}
	return nil
}

// 同步澡堂大战阶段
type S2C_BathFightStepInfo struct {
	BathFightStep        *int32   `protobuf:"zigzag32,1,opt,name=bath_fight_step" json:"bath_fight_step,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_BathFightStepInfo) Reset()         { *m = S2C_BathFightStepInfo{} }
func (m *S2C_BathFightStepInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_BathFightStepInfo) ProtoMessage()    {}
func (*S2C_BathFightStepInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{358}
}
func (m *S2C_BathFightStepInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BathFightStepInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BathFightStepInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BathFightStepInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BathFightStepInfo.Merge(m, src)
}
func (m *S2C_BathFightStepInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BathFightStepInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BathFightStepInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BathFightStepInfo proto.InternalMessageInfo

func (m *S2C_BathFightStepInfo) GetBathFightStep() int32 {
	if m != nil && m.BathFightStep != nil {
		return *m.BathFightStep
	}
	return 0
}

// 同步澡堂是否能泼水
type S2C_CanPlayWaterBall struct {
	CanPlayWaterBall     *bool    `protobuf:"varint,1,opt,name=can_play_water_ball" json:"can_play_water_ball,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_CanPlayWaterBall) Reset()         { *m = S2C_CanPlayWaterBall{} }
func (m *S2C_CanPlayWaterBall) String() string { return proto.CompactTextString(m) }
func (*S2C_CanPlayWaterBall) ProtoMessage()    {}
func (*S2C_CanPlayWaterBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{359}
}
func (m *S2C_CanPlayWaterBall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CanPlayWaterBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CanPlayWaterBall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CanPlayWaterBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CanPlayWaterBall.Merge(m, src)
}
func (m *S2C_CanPlayWaterBall) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CanPlayWaterBall) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CanPlayWaterBall.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CanPlayWaterBall proto.InternalMessageInfo

func (m *S2C_CanPlayWaterBall) GetCanPlayWaterBall() bool {
	if m != nil && m.CanPlayWaterBall != nil {
		return *m.CanPlayWaterBall
	}
	return false
}

// 澡堂状态改变
type C2S_BathStatusChange struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	StatusId             *int32   `protobuf:"zigzag32,2,opt,name=status_id" json:"status_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BathStatusChange) Reset()         { *m = C2S_BathStatusChange{} }
func (m *C2S_BathStatusChange) String() string { return proto.CompactTextString(m) }
func (*C2S_BathStatusChange) ProtoMessage()    {}
func (*C2S_BathStatusChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{360}
}
func (m *C2S_BathStatusChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BathStatusChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BathStatusChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BathStatusChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BathStatusChange.Merge(m, src)
}
func (m *C2S_BathStatusChange) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BathStatusChange) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BathStatusChange.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BathStatusChange proto.InternalMessageInfo

func (m *C2S_BathStatusChange) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_BathStatusChange) GetStatusId() int32 {
	if m != nil && m.StatusId != nil {
		return *m.StatusId
	}
	return 0
}

// 同步澡堂状态
type S2C_SyncBathPlayerInfo struct {
	BathFullness         *int32   `protobuf:"zigzag32,1,opt,name=bath_fullness" json:"bath_fullness,omitempty"`
	BathStamina          *int32   `protobuf:"zigzag32,2,opt,name=bath_stamina" json:"bath_stamina,omitempty"`
	TodayBathStamina     *int32   `protobuf:"zigzag32,3,opt,name=today_bath_stamina" json:"today_bath_stamina,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_SyncBathPlayerInfo) Reset()         { *m = S2C_SyncBathPlayerInfo{} }
func (m *S2C_SyncBathPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncBathPlayerInfo) ProtoMessage()    {}
func (*S2C_SyncBathPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{361}
}
func (m *S2C_SyncBathPlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncBathPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncBathPlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncBathPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncBathPlayerInfo.Merge(m, src)
}
func (m *S2C_SyncBathPlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncBathPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncBathPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncBathPlayerInfo proto.InternalMessageInfo

func (m *S2C_SyncBathPlayerInfo) GetBathFullness() int32 {
	if m != nil && m.BathFullness != nil {
		return *m.BathFullness
	}
	return 0
}

func (m *S2C_SyncBathPlayerInfo) GetBathStamina() int32 {
	if m != nil && m.BathStamina != nil {
		return *m.BathStamina
	}
	return 0
}

func (m *S2C_SyncBathPlayerInfo) GetTodayBathStamina() int32 {
	if m != nil && m.TodayBathStamina != nil {
		return *m.TodayBathStamina
	}
	return 0
}

// 将表情设置为偏好
type C2S_PreferFace struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	FaceId               *int32   `protobuf:"zigzag32,2,opt,name=face_id" json:"face_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PreferFace) Reset()         { *m = C2S_PreferFace{} }
func (m *C2S_PreferFace) String() string { return proto.CompactTextString(m) }
func (*C2S_PreferFace) ProtoMessage()    {}
func (*C2S_PreferFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{362}
}
func (m *C2S_PreferFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PreferFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PreferFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PreferFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PreferFace.Merge(m, src)
}
func (m *C2S_PreferFace) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PreferFace) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PreferFace.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PreferFace proto.InternalMessageInfo

func (m *C2S_PreferFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PreferFace) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

type S2C_PreferFace struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	FaceId               *int32          `protobuf:"zigzag32,2,opt,name=face_id" json:"face_id,omitempty"`
	IsPrefer             *bool           `protobuf:"varint,3,opt,name=is_prefer" json:"is_prefer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PreferFace) Reset()         { *m = S2C_PreferFace{} }
func (m *S2C_PreferFace) String() string { return proto.CompactTextString(m) }
func (*S2C_PreferFace) ProtoMessage()    {}
func (*S2C_PreferFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{363}
}
func (m *S2C_PreferFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PreferFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PreferFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PreferFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PreferFace.Merge(m, src)
}
func (m *S2C_PreferFace) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PreferFace) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PreferFace.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PreferFace proto.InternalMessageInfo

func (m *S2C_PreferFace) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PreferFace) GetFaceId() int32 {
	if m != nil && m.FaceId != nil {
		return *m.FaceId
	}
	return 0
}

func (m *S2C_PreferFace) GetIsPrefer() bool {
	if m != nil && m.IsPrefer != nil {
		return *m.IsPrefer
	}
	return false
}

// 同步表情偏好信息
type C2S_FacePreferInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FacePreferInfo) Reset()         { *m = C2S_FacePreferInfo{} }
func (m *C2S_FacePreferInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_FacePreferInfo) ProtoMessage()    {}
func (*C2S_FacePreferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{364}
}
func (m *C2S_FacePreferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FacePreferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FacePreferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FacePreferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FacePreferInfo.Merge(m, src)
}
func (m *C2S_FacePreferInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FacePreferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FacePreferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FacePreferInfo proto.InternalMessageInfo

func (m *C2S_FacePreferInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_FacePreferInfo struct {
	FaceRandomOnoff      *bool    `protobuf:"varint,1,opt,name=face_random_onoff" json:"face_random_onoff,omitempty"`
	FaceIdList           []int32  `protobuf:"zigzag32,2,rep,name=face_id_list" json:"face_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_FacePreferInfo) Reset()         { *m = S2C_FacePreferInfo{} }
func (m *S2C_FacePreferInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_FacePreferInfo) ProtoMessage()    {}
func (*S2C_FacePreferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{365}
}
func (m *S2C_FacePreferInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FacePreferInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FacePreferInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FacePreferInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FacePreferInfo.Merge(m, src)
}
func (m *S2C_FacePreferInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FacePreferInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FacePreferInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FacePreferInfo proto.InternalMessageInfo

func (m *S2C_FacePreferInfo) GetFaceRandomOnoff() bool {
	if m != nil && m.FaceRandomOnoff != nil {
		return *m.FaceRandomOnoff
	}
	return false
}

func (m *S2C_FacePreferInfo) GetFaceIdList() []int32 {
	if m != nil {
		return m.FaceIdList
	}
	return nil
}

// 打开或关闭表情随机功能
type C2S_OnOffFaceRandom struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_OnOffFaceRandom) Reset()         { *m = C2S_OnOffFaceRandom{} }
func (m *C2S_OnOffFaceRandom) String() string { return proto.CompactTextString(m) }
func (*C2S_OnOffFaceRandom) ProtoMessage()    {}
func (*C2S_OnOffFaceRandom) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{366}
}
func (m *C2S_OnOffFaceRandom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_OnOffFaceRandom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_OnOffFaceRandom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_OnOffFaceRandom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_OnOffFaceRandom.Merge(m, src)
}
func (m *C2S_OnOffFaceRandom) XXX_Size() int {
	return m.Size()
}
func (m *C2S_OnOffFaceRandom) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_OnOffFaceRandom.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_OnOffFaceRandom proto.InternalMessageInfo

func (m *C2S_OnOffFaceRandom) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 同步交互能量
type S2C_InteractEnergy struct {
	Energy               *int32   `protobuf:"zigzag32,1,opt,name=energy" json:"energy,omitempty"`
	EnergyDiff           []int32  `protobuf:"zigzag32,2,rep,name=energy_diff" json:"energy_diff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_InteractEnergy) Reset()         { *m = S2C_InteractEnergy{} }
func (m *S2C_InteractEnergy) String() string { return proto.CompactTextString(m) }
func (*S2C_InteractEnergy) ProtoMessage()    {}
func (*S2C_InteractEnergy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{367}
}
func (m *S2C_InteractEnergy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_InteractEnergy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_InteractEnergy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_InteractEnergy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_InteractEnergy.Merge(m, src)
}
func (m *S2C_InteractEnergy) XXX_Size() int {
	return m.Size()
}
func (m *S2C_InteractEnergy) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_InteractEnergy.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_InteractEnergy proto.InternalMessageInfo

func (m *S2C_InteractEnergy) GetEnergy() int32 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *S2C_InteractEnergy) GetEnergyDiff() []int32 {
	if m != nil {
		return m.EnergyDiff
	}
	return nil
}

// 请求交互系统信息
type C2S_InterActInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_InterActInfo) Reset()         { *m = C2S_InterActInfo{} }
func (m *C2S_InterActInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_InterActInfo) ProtoMessage()    {}
func (*C2S_InterActInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{368}
}
func (m *C2S_InterActInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_InterActInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_InterActInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_InterActInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_InterActInfo.Merge(m, src)
}
func (m *C2S_InterActInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_InterActInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_InterActInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_InterActInfo proto.InternalMessageInfo

func (m *C2S_InterActInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_InterActInfo struct {
	InteractInfo         *RoleInteractInfo `protobuf:"bytes,1,opt,name=interact_info" json:"interact_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_InterActInfo) Reset()         { *m = S2C_InterActInfo{} }
func (m *S2C_InterActInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_InterActInfo) ProtoMessage()    {}
func (*S2C_InterActInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{369}
}
func (m *S2C_InterActInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_InterActInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_InterActInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_InterActInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_InterActInfo.Merge(m, src)
}
func (m *S2C_InterActInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_InterActInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_InterActInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_InterActInfo proto.InternalMessageInfo

func (m *S2C_InterActInfo) GetInteractInfo() *RoleInteractInfo {
	if m != nil {
		return m.InteractInfo
	}
	return nil
}

// 查询指定动作的解锁条件信息
type C2S_QueryUnlockInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_QueryUnlockInfo) Reset()         { *m = C2S_QueryUnlockInfo{} }
func (m *C2S_QueryUnlockInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_QueryUnlockInfo) ProtoMessage()    {}
func (*C2S_QueryUnlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{370}
}
func (m *C2S_QueryUnlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_QueryUnlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_QueryUnlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_QueryUnlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_QueryUnlockInfo.Merge(m, src)
}
func (m *C2S_QueryUnlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_QueryUnlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_QueryUnlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_QueryUnlockInfo proto.InternalMessageInfo

func (m *C2S_QueryUnlockInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_QueryUnlockInfo) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

type S2C_QueryUnlockInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Interact             []*ItemNeed     `protobuf:"bytes,2,rep,name=interact" json:"interact,omitempty"`
	Item                 []*ItemNeed     `protobuf:"bytes,3,rep,name=item" json:"item,omitempty"`
	Level                []*LevelNeed    `protobuf:"bytes,4,rep,name=level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_QueryUnlockInfo) Reset()         { *m = S2C_QueryUnlockInfo{} }
func (m *S2C_QueryUnlockInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_QueryUnlockInfo) ProtoMessage()    {}
func (*S2C_QueryUnlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{371}
}
func (m *S2C_QueryUnlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_QueryUnlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_QueryUnlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_QueryUnlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_QueryUnlockInfo.Merge(m, src)
}
func (m *S2C_QueryUnlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_QueryUnlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_QueryUnlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_QueryUnlockInfo proto.InternalMessageInfo

func (m *S2C_QueryUnlockInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_QueryUnlockInfo) GetInteract() []*ItemNeed {
	if m != nil {
		return m.Interact
	}
	return nil
}

func (m *S2C_QueryUnlockInfo) GetItem() []*ItemNeed {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *S2C_QueryUnlockInfo) GetLevel() []*LevelNeed {
	if m != nil {
		return m.Level
	}
	return nil
}

// 解锁指定交互动作
type C2S_UnlockInteract struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_UnlockInteract) Reset()         { *m = C2S_UnlockInteract{} }
func (m *C2S_UnlockInteract) String() string { return proto.CompactTextString(m) }
func (*C2S_UnlockInteract) ProtoMessage()    {}
func (*C2S_UnlockInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{372}
}
func (m *C2S_UnlockInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UnlockInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UnlockInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_UnlockInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UnlockInteract.Merge(m, src)
}
func (m *C2S_UnlockInteract) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UnlockInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UnlockInteract.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UnlockInteract proto.InternalMessageInfo

func (m *C2S_UnlockInteract) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_UnlockInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

type S2C_UnlockInteract struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ActId                *int32          `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_UnlockInteract) Reset()         { *m = S2C_UnlockInteract{} }
func (m *S2C_UnlockInteract) String() string { return proto.CompactTextString(m) }
func (*S2C_UnlockInteract) ProtoMessage()    {}
func (*S2C_UnlockInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{373}
}
func (m *S2C_UnlockInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UnlockInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UnlockInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_UnlockInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UnlockInteract.Merge(m, src)
}
func (m *S2C_UnlockInteract) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UnlockInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UnlockInteract.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UnlockInteract proto.InternalMessageInfo

func (m *S2C_UnlockInteract) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_UnlockInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

// 装备交互动作
type C2S_DressInteract struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	Site                 *int32   `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DressInteract) Reset()         { *m = C2S_DressInteract{} }
func (m *C2S_DressInteract) String() string { return proto.CompactTextString(m) }
func (*C2S_DressInteract) ProtoMessage()    {}
func (*C2S_DressInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{374}
}
func (m *C2S_DressInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DressInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DressInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DressInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DressInteract.Merge(m, src)
}
func (m *C2S_DressInteract) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DressInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DressInteract.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DressInteract proto.InternalMessageInfo

func (m *C2S_DressInteract) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DressInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *C2S_DressInteract) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

type S2C_DressInteract struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ActId                *int32          `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	Site                 *int32          `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	EffectActList        []int32         `protobuf:"zigzag32,4,rep,name=effect_act_list" json:"effect_act_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DressInteract) Reset()         { *m = S2C_DressInteract{} }
func (m *S2C_DressInteract) String() string { return proto.CompactTextString(m) }
func (*S2C_DressInteract) ProtoMessage()    {}
func (*S2C_DressInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{375}
}
func (m *S2C_DressInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DressInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DressInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DressInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DressInteract.Merge(m, src)
}
func (m *S2C_DressInteract) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DressInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DressInteract.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DressInteract proto.InternalMessageInfo

func (m *S2C_DressInteract) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DressInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *S2C_DressInteract) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

func (m *S2C_DressInteract) GetEffectActList() []int32 {
	if m != nil {
		return m.EffectActList
	}
	return nil
}

// 卸下交互动作
type C2S_TakeOffInteract struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ActId                *int32   `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	Site                 *int32   `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TakeOffInteract) Reset()         { *m = C2S_TakeOffInteract{} }
func (m *C2S_TakeOffInteract) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeOffInteract) ProtoMessage()    {}
func (*C2S_TakeOffInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{376}
}
func (m *C2S_TakeOffInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeOffInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeOffInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeOffInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeOffInteract.Merge(m, src)
}
func (m *C2S_TakeOffInteract) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeOffInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeOffInteract.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeOffInteract proto.InternalMessageInfo

func (m *C2S_TakeOffInteract) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeOffInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *C2S_TakeOffInteract) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

type S2C_TakeOffInteract struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ActId                *int32          `protobuf:"zigzag32,2,opt,name=act_id" json:"act_id,omitempty"`
	Site                 *int32          `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	EffectActList        []int32         `protobuf:"zigzag32,4,rep,name=effect_act_list" json:"effect_act_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TakeOffInteract) Reset()         { *m = S2C_TakeOffInteract{} }
func (m *S2C_TakeOffInteract) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeOffInteract) ProtoMessage()    {}
func (*S2C_TakeOffInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{377}
}
func (m *S2C_TakeOffInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeOffInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeOffInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeOffInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeOffInteract.Merge(m, src)
}
func (m *S2C_TakeOffInteract) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeOffInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeOffInteract.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeOffInteract proto.InternalMessageInfo

func (m *S2C_TakeOffInteract) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeOffInteract) GetActId() int32 {
	if m != nil && m.ActId != nil {
		return *m.ActId
	}
	return 0
}

func (m *S2C_TakeOffInteract) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

func (m *S2C_TakeOffInteract) GetEffectActList() []int32 {
	if m != nil {
		return m.EffectActList
	}
	return nil
}

type C2S_ExChangeInteractHole struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Hole_1               *int32   `protobuf:"zigzag32,2,opt,name=hole_1" json:"hole_1,omitempty"`
	Hole_2               *int32   `protobuf:"zigzag32,3,opt,name=hole_2" json:"hole_2,omitempty"`
	ActType              *int32   `protobuf:"zigzag32,4,opt,name=act_type" json:"act_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ExChangeInteractHole) Reset()         { *m = C2S_ExChangeInteractHole{} }
func (m *C2S_ExChangeInteractHole) String() string { return proto.CompactTextString(m) }
func (*C2S_ExChangeInteractHole) ProtoMessage()    {}
func (*C2S_ExChangeInteractHole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{378}
}
func (m *C2S_ExChangeInteractHole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ExChangeInteractHole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ExChangeInteractHole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ExChangeInteractHole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ExChangeInteractHole.Merge(m, src)
}
func (m *C2S_ExChangeInteractHole) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ExChangeInteractHole) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ExChangeInteractHole.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ExChangeInteractHole proto.InternalMessageInfo

func (m *C2S_ExChangeInteractHole) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ExChangeInteractHole) GetHole_1() int32 {
	if m != nil && m.Hole_1 != nil {
		return *m.Hole_1
	}
	return 0
}

func (m *C2S_ExChangeInteractHole) GetHole_2() int32 {
	if m != nil && m.Hole_2 != nil {
		return *m.Hole_2
	}
	return 0
}

func (m *C2S_ExChangeInteractHole) GetActType() int32 {
	if m != nil && m.ActType != nil {
		return *m.ActType
	}
	return 0
}

type S2C_ExChangeInteractHole struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	EffectActList        []int32         `protobuf:"zigzag32,2,rep,name=effect_act_list" json:"effect_act_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ExChangeInteractHole) Reset()         { *m = S2C_ExChangeInteractHole{} }
func (m *S2C_ExChangeInteractHole) String() string { return proto.CompactTextString(m) }
func (*S2C_ExChangeInteractHole) ProtoMessage()    {}
func (*S2C_ExChangeInteractHole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{379}
}
func (m *S2C_ExChangeInteractHole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ExChangeInteractHole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ExChangeInteractHole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ExChangeInteractHole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ExChangeInteractHole.Merge(m, src)
}
func (m *S2C_ExChangeInteractHole) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ExChangeInteractHole) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ExChangeInteractHole.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ExChangeInteractHole proto.InternalMessageInfo

func (m *S2C_ExChangeInteractHole) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ExChangeInteractHole) GetEffectActList() []int32 {
	if m != nil {
		return m.EffectActList
	}
	return nil
}

// 获取图鉴奖励信息
type C2S_InterActManualRewardInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_InterActManualRewardInfo) Reset()         { *m = C2S_InterActManualRewardInfo{} }
func (m *C2S_InterActManualRewardInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_InterActManualRewardInfo) ProtoMessage()    {}
func (*C2S_InterActManualRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{380}
}
func (m *C2S_InterActManualRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_InterActManualRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_InterActManualRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_InterActManualRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_InterActManualRewardInfo.Merge(m, src)
}
func (m *C2S_InterActManualRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_InterActManualRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_InterActManualRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_InterActManualRewardInfo proto.InternalMessageInfo

func (m *C2S_InterActManualRewardInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_InterActManualRewardInfo struct {
	IsNewReward          *bool       `protobuf:"varint,1,opt,name=is_new_reward" json:"is_new_reward,omitempty"`
	Num                  *int32      `protobuf:"zigzag32,2,opt,name=num" json:"num,omitempty"`
	Reward               *ItemConfig `protobuf:"bytes,3,opt,name=reward" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *S2C_InterActManualRewardInfo) Reset()         { *m = S2C_InterActManualRewardInfo{} }
func (m *S2C_InterActManualRewardInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_InterActManualRewardInfo) ProtoMessage()    {}
func (*S2C_InterActManualRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{381}
}
func (m *S2C_InterActManualRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_InterActManualRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_InterActManualRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_InterActManualRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_InterActManualRewardInfo.Merge(m, src)
}
func (m *S2C_InterActManualRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_InterActManualRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_InterActManualRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_InterActManualRewardInfo proto.InternalMessageInfo

func (m *S2C_InterActManualRewardInfo) GetIsNewReward() bool {
	if m != nil && m.IsNewReward != nil {
		return *m.IsNewReward
	}
	return false
}

func (m *S2C_InterActManualRewardInfo) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *S2C_InterActManualRewardInfo) GetReward() *ItemConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 领取交互图鉴数量奖励
type C2S_GetInterActManualReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetInterActManualReward) Reset()         { *m = C2S_GetInterActManualReward{} }
func (m *C2S_GetInterActManualReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetInterActManualReward) ProtoMessage()    {}
func (*C2S_GetInterActManualReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{382}
}
func (m *C2S_GetInterActManualReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetInterActManualReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetInterActManualReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetInterActManualReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetInterActManualReward.Merge(m, src)
}
func (m *C2S_GetInterActManualReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetInterActManualReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetInterActManualReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetInterActManualReward proto.InternalMessageInfo

func (m *C2S_GetInterActManualReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GetInterActManualReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetInterActManualReward) Reset()         { *m = S2C_GetInterActManualReward{} }
func (m *S2C_GetInterActManualReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetInterActManualReward) ProtoMessage()    {}
func (*S2C_GetInterActManualReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{383}
}
func (m *S2C_GetInterActManualReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetInterActManualReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetInterActManualReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetInterActManualReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetInterActManualReward.Merge(m, src)
}
func (m *S2C_GetInterActManualReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetInterActManualReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetInterActManualReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetInterActManualReward proto.InternalMessageInfo

func (m *S2C_GetInterActManualReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 截具合成
type C2S_VehicleCompose struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MainVehicleIndex     *int64   `protobuf:"zigzag64,2,opt,name=main_vehicle_index" json:"main_vehicle_index,omitempty"`
	ConsumeVehicleList   []int64  `protobuf:"zigzag64,3,rep,name=consume_vehicle_list" json:"consume_vehicle_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_VehicleCompose) Reset()         { *m = C2S_VehicleCompose{} }
func (m *C2S_VehicleCompose) String() string { return proto.CompactTextString(m) }
func (*C2S_VehicleCompose) ProtoMessage()    {}
func (*C2S_VehicleCompose) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{384}
}
func (m *C2S_VehicleCompose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_VehicleCompose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_VehicleCompose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_VehicleCompose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_VehicleCompose.Merge(m, src)
}
func (m *C2S_VehicleCompose) XXX_Size() int {
	return m.Size()
}
func (m *C2S_VehicleCompose) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_VehicleCompose.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_VehicleCompose proto.InternalMessageInfo

func (m *C2S_VehicleCompose) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_VehicleCompose) GetMainVehicleIndex() int64 {
	if m != nil && m.MainVehicleIndex != nil {
		return *m.MainVehicleIndex
	}
	return 0
}

func (m *C2S_VehicleCompose) GetConsumeVehicleList() []int64 {
	if m != nil {
		return m.ConsumeVehicleList
	}
	return nil
}

type S2C_VehicleCompose struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NewVehicle           *DbBagEquip     `protobuf:"bytes,2,opt,name=new_vehicle" json:"new_vehicle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_VehicleCompose) Reset()         { *m = S2C_VehicleCompose{} }
func (m *S2C_VehicleCompose) String() string { return proto.CompactTextString(m) }
func (*S2C_VehicleCompose) ProtoMessage()    {}
func (*S2C_VehicleCompose) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{385}
}
func (m *S2C_VehicleCompose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_VehicleCompose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_VehicleCompose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_VehicleCompose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_VehicleCompose.Merge(m, src)
}
func (m *S2C_VehicleCompose) XXX_Size() int {
	return m.Size()
}
func (m *S2C_VehicleCompose) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_VehicleCompose.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_VehicleCompose proto.InternalMessageInfo

func (m *S2C_VehicleCompose) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_VehicleCompose) GetNewVehicle() *DbBagEquip {
	if m != nil {
		return m.NewVehicle
	}
	return nil
}

// 请求装备图鉴奖励信息
type C2S_EquipManualInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EquipManualInfo) Reset()         { *m = C2S_EquipManualInfo{} }
func (m *C2S_EquipManualInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipManualInfo) ProtoMessage()    {}
func (*C2S_EquipManualInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{386}
}
func (m *C2S_EquipManualInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipManualInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipManualInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipManualInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipManualInfo.Merge(m, src)
}
func (m *C2S_EquipManualInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipManualInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipManualInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipManualInfo proto.InternalMessageInfo

func (m *C2S_EquipManualInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_EquipManualInfo struct {
	CanGet               *int32      `protobuf:"zigzag32,1,opt,name=can_get" json:"can_get,omitempty"`
	EquipIdList          []int32     `protobuf:"zigzag32,2,rep,name=equip_id_list" json:"equip_id_list,omitempty"`
	Rate                 *int32      `protobuf:"zigzag32,3,opt,name=rate" json:"rate,omitempty"`
	Reward               *ItemConfig `protobuf:"bytes,4,opt,name=reward" json:"reward,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *S2C_EquipManualInfo) Reset()         { *m = S2C_EquipManualInfo{} }
func (m *S2C_EquipManualInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipManualInfo) ProtoMessage()    {}
func (*S2C_EquipManualInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{387}
}
func (m *S2C_EquipManualInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipManualInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipManualInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipManualInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipManualInfo.Merge(m, src)
}
func (m *S2C_EquipManualInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipManualInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipManualInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipManualInfo proto.InternalMessageInfo

func (m *S2C_EquipManualInfo) GetCanGet() int32 {
	if m != nil && m.CanGet != nil {
		return *m.CanGet
	}
	return 0
}

func (m *S2C_EquipManualInfo) GetEquipIdList() []int32 {
	if m != nil {
		return m.EquipIdList
	}
	return nil
}

func (m *S2C_EquipManualInfo) GetRate() int32 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

func (m *S2C_EquipManualInfo) GetReward() *ItemConfig {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 领取装备图鉴奖励
type C2S_GetEquipManualReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetEquipManualReward) Reset()         { *m = C2S_GetEquipManualReward{} }
func (m *C2S_GetEquipManualReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetEquipManualReward) ProtoMessage()    {}
func (*C2S_GetEquipManualReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{388}
}
func (m *C2S_GetEquipManualReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetEquipManualReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetEquipManualReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetEquipManualReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetEquipManualReward.Merge(m, src)
}
func (m *C2S_GetEquipManualReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetEquipManualReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetEquipManualReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetEquipManualReward proto.InternalMessageInfo

func (m *C2S_GetEquipManualReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GetEquipManualReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetEquipManualReward) Reset()         { *m = S2C_GetEquipManualReward{} }
func (m *S2C_GetEquipManualReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetEquipManualReward) ProtoMessage()    {}
func (*S2C_GetEquipManualReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{389}
}
func (m *S2C_GetEquipManualReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetEquipManualReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetEquipManualReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetEquipManualReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetEquipManualReward.Merge(m, src)
}
func (m *S2C_GetEquipManualReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetEquipManualReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetEquipManualReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetEquipManualReward proto.InternalMessageInfo

func (m *S2C_GetEquipManualReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 家园互动
type C2S_NPCInteract struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NpcId                *int32   `protobuf:"zigzag32,2,opt,name=npc_id" json:"npc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_NPCInteract) Reset()         { *m = C2S_NPCInteract{} }
func (m *C2S_NPCInteract) String() string { return proto.CompactTextString(m) }
func (*C2S_NPCInteract) ProtoMessage()    {}
func (*C2S_NPCInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{390}
}
func (m *C2S_NPCInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_NPCInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_NPCInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_NPCInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_NPCInteract.Merge(m, src)
}
func (m *C2S_NPCInteract) XXX_Size() int {
	return m.Size()
}
func (m *C2S_NPCInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_NPCInteract.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_NPCInteract proto.InternalMessageInfo

func (m *C2S_NPCInteract) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_NPCInteract) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

type S2C_NPCInteract struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	NpcId                *int32          `protobuf:"zigzag32,3,opt,name=npc_id" json:"npc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_NPCInteract) Reset()         { *m = S2C_NPCInteract{} }
func (m *S2C_NPCInteract) String() string { return proto.CompactTextString(m) }
func (*S2C_NPCInteract) ProtoMessage()    {}
func (*S2C_NPCInteract) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{391}
}
func (m *S2C_NPCInteract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_NPCInteract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_NPCInteract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_NPCInteract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_NPCInteract.Merge(m, src)
}
func (m *S2C_NPCInteract) XXX_Size() int {
	return m.Size()
}
func (m *S2C_NPCInteract) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_NPCInteract.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_NPCInteract proto.InternalMessageInfo

func (m *S2C_NPCInteract) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_NPCInteract) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_NPCInteract) GetNpcId() int32 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

type C2S_InteractRedPoint struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_InteractRedPoint) Reset()         { *m = C2S_InteractRedPoint{} }
func (m *C2S_InteractRedPoint) String() string { return proto.CompactTextString(m) }
func (*C2S_InteractRedPoint) ProtoMessage()    {}
func (*C2S_InteractRedPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{392}
}
func (m *C2S_InteractRedPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_InteractRedPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_InteractRedPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_InteractRedPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_InteractRedPoint.Merge(m, src)
}
func (m *C2S_InteractRedPoint) XXX_Size() int {
	return m.Size()
}
func (m *C2S_InteractRedPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_InteractRedPoint.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_InteractRedPoint proto.InternalMessageInfo

func (m *C2S_InteractRedPoint) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_InteractRedPoint struct {
	CanUnlockActList     []int32  `protobuf:"zigzag32,1,rep,name=can_unlock_act_list" json:"can_unlock_act_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_InteractRedPoint) Reset()         { *m = S2C_InteractRedPoint{} }
func (m *S2C_InteractRedPoint) String() string { return proto.CompactTextString(m) }
func (*S2C_InteractRedPoint) ProtoMessage()    {}
func (*S2C_InteractRedPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{393}
}
func (m *S2C_InteractRedPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_InteractRedPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_InteractRedPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_InteractRedPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_InteractRedPoint.Merge(m, src)
}
func (m *S2C_InteractRedPoint) XXX_Size() int {
	return m.Size()
}
func (m *S2C_InteractRedPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_InteractRedPoint.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_InteractRedPoint proto.InternalMessageInfo

func (m *S2C_InteractRedPoint) GetCanUnlockActList() []int32 {
	if m != nil {
		return m.CanUnlockActList
	}
	return nil
}

// 请求好友战斗信息
type C2S_FriendFightInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	FriendIndex          *int64   `protobuf:"zigzag64,2,opt,name=friend_index" json:"friend_index,omitempty"`
	RetUnitindex         *int64   `protobuf:"zigzag64,3,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64   `protobuf:"zigzag64,4,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FriendFightInfo) Reset()         { *m = C2S_FriendFightInfo{} }
func (m *C2S_FriendFightInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_FriendFightInfo) ProtoMessage()    {}
func (*C2S_FriendFightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{394}
}
func (m *C2S_FriendFightInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FriendFightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FriendFightInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FriendFightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FriendFightInfo.Merge(m, src)
}
func (m *C2S_FriendFightInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FriendFightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FriendFightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FriendFightInfo proto.InternalMessageInfo

func (m *C2S_FriendFightInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FriendFightInfo) GetFriendIndex() int64 {
	if m != nil && m.FriendIndex != nil {
		return *m.FriendIndex
	}
	return 0
}

func (m *C2S_FriendFightInfo) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *C2S_FriendFightInfo) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

type S2C_FriendFightInfo struct {
	RetCode              *E_MSG_RET_CODE   `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Battle               *BattlePlayerInfo `protobuf:"bytes,2,opt,name=battle" json:"battle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_FriendFightInfo) Reset()         { *m = S2C_FriendFightInfo{} }
func (m *S2C_FriendFightInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_FriendFightInfo) ProtoMessage()    {}
func (*S2C_FriendFightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{395}
}
func (m *S2C_FriendFightInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FriendFightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FriendFightInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FriendFightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FriendFightInfo.Merge(m, src)
}
func (m *S2C_FriendFightInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FriendFightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FriendFightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FriendFightInfo proto.InternalMessageInfo

func (m *S2C_FriendFightInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_FriendFightInfo) GetBattle() *BattlePlayerInfo {
	if m != nil {
		return m.Battle
	}
	return nil
}

// 万能技能书兑换指定技能书
//message C2S_ExchargeSkillBook
//{
//    optional sint64 role_index = 1;
//    optional sint32 item_id    = 2;
//    optional sint32 count      = 3;
//}
//
//message S2C_ExchargeSkillBook
//{
//    optional E_MSG_RET_CODE ret_code   = 1;
//}
// 上送玩家配置信息存盘
type C2S_UploadSystemConfig struct {
	RoleIndex            *int64              `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Config               *DbRoleSystemConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *C2S_UploadSystemConfig) Reset()         { *m = C2S_UploadSystemConfig{} }
func (m *C2S_UploadSystemConfig) String() string { return proto.CompactTextString(m) }
func (*C2S_UploadSystemConfig) ProtoMessage()    {}
func (*C2S_UploadSystemConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{396}
}
func (m *C2S_UploadSystemConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UploadSystemConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UploadSystemConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_UploadSystemConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UploadSystemConfig.Merge(m, src)
}
func (m *C2S_UploadSystemConfig) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UploadSystemConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UploadSystemConfig.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UploadSystemConfig proto.InternalMessageInfo

func (m *C2S_UploadSystemConfig) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_UploadSystemConfig) GetConfig() *DbRoleSystemConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// 摸装备
type C2S_TouchEquip struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipIndex           *int64   `protobuf:"zigzag64,2,opt,name=equip_index" json:"equip_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TouchEquip) Reset()         { *m = C2S_TouchEquip{} }
func (m *C2S_TouchEquip) String() string { return proto.CompactTextString(m) }
func (*C2S_TouchEquip) ProtoMessage()    {}
func (*C2S_TouchEquip) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{397}
}
func (m *C2S_TouchEquip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TouchEquip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TouchEquip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TouchEquip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TouchEquip.Merge(m, src)
}
func (m *C2S_TouchEquip) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TouchEquip) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TouchEquip.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TouchEquip proto.InternalMessageInfo

func (m *C2S_TouchEquip) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TouchEquip) GetEquipIndex() int64 {
	if m != nil && m.EquipIndex != nil {
		return *m.EquipIndex
	}
	return 0
}

// 摸道具
type C2S_TouchItem struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ItemIndex            *int64   `protobuf:"zigzag64,2,opt,name=item_index" json:"item_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TouchItem) Reset()         { *m = C2S_TouchItem{} }
func (m *C2S_TouchItem) String() string { return proto.CompactTextString(m) }
func (*C2S_TouchItem) ProtoMessage()    {}
func (*C2S_TouchItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{398}
}
func (m *C2S_TouchItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TouchItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TouchItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TouchItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TouchItem.Merge(m, src)
}
func (m *C2S_TouchItem) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TouchItem) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TouchItem.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TouchItem proto.InternalMessageInfo

func (m *C2S_TouchItem) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TouchItem) GetItemIndex() int64 {
	if m != nil && m.ItemIndex != nil {
		return *m.ItemIndex
	}
	return 0
}

// 更新强制引导索引
type C2S_UploadForceGuideInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	GuideIndex           *int32   `protobuf:"zigzag32,2,opt,name=guide_index" json:"guide_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_UploadForceGuideInfo) Reset()         { *m = C2S_UploadForceGuideInfo{} }
func (m *C2S_UploadForceGuideInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_UploadForceGuideInfo) ProtoMessage()    {}
func (*C2S_UploadForceGuideInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{399}
}
func (m *C2S_UploadForceGuideInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UploadForceGuideInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UploadForceGuideInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_UploadForceGuideInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UploadForceGuideInfo.Merge(m, src)
}
func (m *C2S_UploadForceGuideInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UploadForceGuideInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UploadForceGuideInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UploadForceGuideInfo proto.InternalMessageInfo

func (m *C2S_UploadForceGuideInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_UploadForceGuideInfo) GetGuideIndex() int32 {
	if m != nil && m.GuideIndex != nil {
		return *m.GuideIndex
	}
	return 0
}

// 更新小面板引导
type S2C_UpdateFindwayGuideIndex struct {
	FindGuidIndex        *int32   `protobuf:"zigzag32,1,opt,name=find_guid_index" json:"find_guid_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_UpdateFindwayGuideIndex) Reset()         { *m = S2C_UpdateFindwayGuideIndex{} }
func (m *S2C_UpdateFindwayGuideIndex) String() string { return proto.CompactTextString(m) }
func (*S2C_UpdateFindwayGuideIndex) ProtoMessage()    {}
func (*S2C_UpdateFindwayGuideIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{400}
}
func (m *S2C_UpdateFindwayGuideIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UpdateFindwayGuideIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UpdateFindwayGuideIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_UpdateFindwayGuideIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UpdateFindwayGuideIndex.Merge(m, src)
}
func (m *S2C_UpdateFindwayGuideIndex) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UpdateFindwayGuideIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UpdateFindwayGuideIndex.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UpdateFindwayGuideIndex proto.InternalMessageInfo

func (m *S2C_UpdateFindwayGuideIndex) GetFindGuidIndex() int32 {
	if m != nil && m.FindGuidIndex != nil {
		return *m.FindGuidIndex
	}
	return 0
}

// 消耗相应物品扩充技能坑位
type C2S_ExtendSkillHole struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Site                 *int32   `protobuf:"zigzag32,2,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ExtendSkillHole) Reset()         { *m = C2S_ExtendSkillHole{} }
func (m *C2S_ExtendSkillHole) String() string { return proto.CompactTextString(m) }
func (*C2S_ExtendSkillHole) ProtoMessage()    {}
func (*C2S_ExtendSkillHole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{401}
}
func (m *C2S_ExtendSkillHole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ExtendSkillHole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ExtendSkillHole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ExtendSkillHole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ExtendSkillHole.Merge(m, src)
}
func (m *C2S_ExtendSkillHole) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ExtendSkillHole) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ExtendSkillHole.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ExtendSkillHole proto.InternalMessageInfo

func (m *C2S_ExtendSkillHole) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ExtendSkillHole) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

type S2C_ExtendSkillHole struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Site                 *int32          `protobuf:"zigzag32,2,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ExtendSkillHole) Reset()         { *m = S2C_ExtendSkillHole{} }
func (m *S2C_ExtendSkillHole) String() string { return proto.CompactTextString(m) }
func (*S2C_ExtendSkillHole) ProtoMessage()    {}
func (*S2C_ExtendSkillHole) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{402}
}
func (m *S2C_ExtendSkillHole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ExtendSkillHole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ExtendSkillHole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ExtendSkillHole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ExtendSkillHole.Merge(m, src)
}
func (m *S2C_ExtendSkillHole) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ExtendSkillHole) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ExtendSkillHole.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ExtendSkillHole proto.InternalMessageInfo

func (m *S2C_ExtendSkillHole) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ExtendSkillHole) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

// 推送当前技能坑位信息
type S2C_RoleCurrentSkills struct {
	CurrentSkills        []int32  `protobuf:"zigzag32,1,rep,name=current_skills" json:"current_skills,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_RoleCurrentSkills) Reset()         { *m = S2C_RoleCurrentSkills{} }
func (m *S2C_RoleCurrentSkills) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleCurrentSkills) ProtoMessage()    {}
func (*S2C_RoleCurrentSkills) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{403}
}
func (m *S2C_RoleCurrentSkills) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleCurrentSkills) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleCurrentSkills.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleCurrentSkills) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleCurrentSkills.Merge(m, src)
}
func (m *S2C_RoleCurrentSkills) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleCurrentSkills) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleCurrentSkills.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleCurrentSkills proto.InternalMessageInfo

func (m *S2C_RoleCurrentSkills) GetCurrentSkills() []int32 {
	if m != nil {
		return m.CurrentSkills
	}
	return nil
}

// 装备耐久掉0通知
type S2C_EquipBroken struct {
	EquipId              []int32  `protobuf:"zigzag32,1,rep,name=equip_id" json:"equip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_EquipBroken) Reset()         { *m = S2C_EquipBroken{} }
func (m *S2C_EquipBroken) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipBroken) ProtoMessage()    {}
func (*S2C_EquipBroken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{404}
}
func (m *S2C_EquipBroken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipBroken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipBroken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipBroken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipBroken.Merge(m, src)
}
func (m *S2C_EquipBroken) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipBroken) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipBroken.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipBroken proto.InternalMessageInfo

func (m *S2C_EquipBroken) GetEquipId() []int32 {
	if m != nil {
		return m.EquipId
	}
	return nil
}

// 请求自定义表情信息
type C2S_CustomFaceInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_CustomFaceInfo) Reset()         { *m = C2S_CustomFaceInfo{} }
func (m *C2S_CustomFaceInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_CustomFaceInfo) ProtoMessage()    {}
func (*C2S_CustomFaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{405}
}
func (m *C2S_CustomFaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_CustomFaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_CustomFaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_CustomFaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_CustomFaceInfo.Merge(m, src)
}
func (m *C2S_CustomFaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_CustomFaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_CustomFaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_CustomFaceInfo proto.InternalMessageInfo

func (m *C2S_CustomFaceInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_CustomFaceInfo struct {
	CustomList           []*RoleCustomFace `protobuf:"bytes,1,rep,name=custom_list" json:"custom_list,omitempty"`
	CurrentFace          *RoleFace         `protobuf:"bytes,2,opt,name=current_face" json:"current_face,omitempty"`
	ForeverFree          *bool             `protobuf:"varint,3,opt,name=forever_free" json:"forever_free,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_CustomFaceInfo) Reset()         { *m = S2C_CustomFaceInfo{} }
func (m *S2C_CustomFaceInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_CustomFaceInfo) ProtoMessage()    {}
func (*S2C_CustomFaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{406}
}
func (m *S2C_CustomFaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CustomFaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CustomFaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CustomFaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CustomFaceInfo.Merge(m, src)
}
func (m *S2C_CustomFaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CustomFaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CustomFaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CustomFaceInfo proto.InternalMessageInfo

func (m *S2C_CustomFaceInfo) GetCustomList() []*RoleCustomFace {
	if m != nil {
		return m.CustomList
	}
	return nil
}

func (m *S2C_CustomFaceInfo) GetCurrentFace() *RoleFace {
	if m != nil {
		return m.CurrentFace
	}
	return nil
}

func (m *S2C_CustomFaceInfo) GetForeverFree() bool {
	if m != nil && m.ForeverFree != nil {
		return *m.ForeverFree
	}
	return false
}

// 请求是否可以上传
type C2S_CanUploadImage struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	BuyFree              *bool    `protobuf:"varint,3,opt,name=buy_free" json:"buy_free,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_CanUploadImage) Reset()         { *m = C2S_CanUploadImage{} }
func (m *C2S_CanUploadImage) String() string { return proto.CompactTextString(m) }
func (*C2S_CanUploadImage) ProtoMessage()    {}
func (*C2S_CanUploadImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{407}
}
func (m *C2S_CanUploadImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_CanUploadImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_CanUploadImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_CanUploadImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_CanUploadImage.Merge(m, src)
}
func (m *C2S_CanUploadImage) XXX_Size() int {
	return m.Size()
}
func (m *C2S_CanUploadImage) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_CanUploadImage.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_CanUploadImage proto.InternalMessageInfo

func (m *C2S_CanUploadImage) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_CanUploadImage) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *C2S_CanUploadImage) GetBuyFree() bool {
	if m != nil && m.BuyFree != nil {
		return *m.BuyFree
	}
	return false
}

type S2C_CanUploadImage struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ImageId              *int32          `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	UniqueKey            []byte          `protobuf:"bytes,3,opt,name=unique_key" json:"unique_key,omitempty"`
	PlatformId           *int32          `protobuf:"zigzag32,4,opt,name=platform_id" json:"platform_id,omitempty"`
	ServerId             *int32          `protobuf:"zigzag32,6,opt,name=server_id" json:"server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_CanUploadImage) Reset()         { *m = S2C_CanUploadImage{} }
func (m *S2C_CanUploadImage) String() string { return proto.CompactTextString(m) }
func (*S2C_CanUploadImage) ProtoMessage()    {}
func (*S2C_CanUploadImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{408}
}
func (m *S2C_CanUploadImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CanUploadImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CanUploadImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CanUploadImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CanUploadImage.Merge(m, src)
}
func (m *S2C_CanUploadImage) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CanUploadImage) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CanUploadImage.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CanUploadImage proto.InternalMessageInfo

func (m *S2C_CanUploadImage) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_CanUploadImage) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *S2C_CanUploadImage) GetUniqueKey() []byte {
	if m != nil {
		return m.UniqueKey
	}
	return nil
}

func (m *S2C_CanUploadImage) GetPlatformId() int32 {
	if m != nil && m.PlatformId != nil {
		return *m.PlatformId
	}
	return 0
}

func (m *S2C_CanUploadImage) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

// 照片文件上传服务器成功后发送此协议
type C2S_UploadImageInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	UniqueKey            []byte   `protobuf:"bytes,3,opt,name=unique_key" json:"unique_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_UploadImageInfo) Reset()         { *m = C2S_UploadImageInfo{} }
func (m *C2S_UploadImageInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_UploadImageInfo) ProtoMessage()    {}
func (*C2S_UploadImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{409}
}
func (m *C2S_UploadImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UploadImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UploadImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_UploadImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UploadImageInfo.Merge(m, src)
}
func (m *C2S_UploadImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UploadImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UploadImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UploadImageInfo proto.InternalMessageInfo

func (m *C2S_UploadImageInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_UploadImageInfo) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *C2S_UploadImageInfo) GetUniqueKey() []byte {
	if m != nil {
		return m.UniqueKey
	}
	return nil
}

type S2S_UploadImageInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	UniqueKey            []byte   `protobuf:"bytes,3,opt,name=unique_key" json:"unique_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2S_UploadImageInfo) Reset()         { *m = S2S_UploadImageInfo{} }
func (m *S2S_UploadImageInfo) String() string { return proto.CompactTextString(m) }
func (*S2S_UploadImageInfo) ProtoMessage()    {}
func (*S2S_UploadImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{410}
}
func (m *S2S_UploadImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_UploadImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_UploadImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_UploadImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_UploadImageInfo.Merge(m, src)
}
func (m *S2S_UploadImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2S_UploadImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_UploadImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_UploadImageInfo proto.InternalMessageInfo

func (m *S2S_UploadImageInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2S_UploadImageInfo) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *S2S_UploadImageInfo) GetUniqueKey() []byte {
	if m != nil {
		return m.UniqueKey
	}
	return nil
}

type S2C_UploadImageInfo struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_UploadImageInfo) Reset()         { *m = S2C_UploadImageInfo{} }
func (m *S2C_UploadImageInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_UploadImageInfo) ProtoMessage()    {}
func (*S2C_UploadImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{411}
}
func (m *S2C_UploadImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UploadImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UploadImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_UploadImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UploadImageInfo.Merge(m, src)
}
func (m *S2C_UploadImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UploadImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UploadImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UploadImageInfo proto.InternalMessageInfo

func (m *S2C_UploadImageInfo) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 穿戴自定义表情
type C2S_DressCustomFace struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DressCustomFace) Reset()         { *m = C2S_DressCustomFace{} }
func (m *C2S_DressCustomFace) String() string { return proto.CompactTextString(m) }
func (*C2S_DressCustomFace) ProtoMessage()    {}
func (*C2S_DressCustomFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{412}
}
func (m *C2S_DressCustomFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DressCustomFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DressCustomFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DressCustomFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DressCustomFace.Merge(m, src)
}
func (m *C2S_DressCustomFace) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DressCustomFace) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DressCustomFace.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DressCustomFace proto.InternalMessageInfo

func (m *C2S_DressCustomFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DressCustomFace) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

type S2C_DressCustomFace struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ImageId              *int32          `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	CurrentFace          *RoleFace       `protobuf:"bytes,3,opt,name=current_face" json:"current_face,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DressCustomFace) Reset()         { *m = S2C_DressCustomFace{} }
func (m *S2C_DressCustomFace) String() string { return proto.CompactTextString(m) }
func (*S2C_DressCustomFace) ProtoMessage()    {}
func (*S2C_DressCustomFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{413}
}
func (m *S2C_DressCustomFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DressCustomFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DressCustomFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DressCustomFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DressCustomFace.Merge(m, src)
}
func (m *S2C_DressCustomFace) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DressCustomFace) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DressCustomFace.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DressCustomFace proto.InternalMessageInfo

func (m *S2C_DressCustomFace) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DressCustomFace) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *S2C_DressCustomFace) GetCurrentFace() *RoleFace {
	if m != nil {
		return m.CurrentFace
	}
	return nil
}

// 脱自定义表情
type C2S_TakeOffCustomFace struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TakeOffCustomFace) Reset()         { *m = C2S_TakeOffCustomFace{} }
func (m *C2S_TakeOffCustomFace) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeOffCustomFace) ProtoMessage()    {}
func (*C2S_TakeOffCustomFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{414}
}
func (m *C2S_TakeOffCustomFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeOffCustomFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeOffCustomFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeOffCustomFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeOffCustomFace.Merge(m, src)
}
func (m *C2S_TakeOffCustomFace) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeOffCustomFace) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeOffCustomFace.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeOffCustomFace proto.InternalMessageInfo

func (m *C2S_TakeOffCustomFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeOffCustomFace) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

type S2C_TakeOffCustomFace struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ImageId              *int32          `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	CurrentFace          *RoleFace       `protobuf:"bytes,3,opt,name=current_face" json:"current_face,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TakeOffCustomFace) Reset()         { *m = S2C_TakeOffCustomFace{} }
func (m *S2C_TakeOffCustomFace) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeOffCustomFace) ProtoMessage()    {}
func (*S2C_TakeOffCustomFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{415}
}
func (m *S2C_TakeOffCustomFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeOffCustomFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeOffCustomFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeOffCustomFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeOffCustomFace.Merge(m, src)
}
func (m *S2C_TakeOffCustomFace) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeOffCustomFace) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeOffCustomFace.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeOffCustomFace proto.InternalMessageInfo

func (m *S2C_TakeOffCustomFace) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeOffCustomFace) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *S2C_TakeOffCustomFace) GetCurrentFace() *RoleFace {
	if m != nil {
		return m.CurrentFace
	}
	return nil
}

// 删除自定义表情
type C2S_DelelteCustomFace struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DelelteCustomFace) Reset()         { *m = C2S_DelelteCustomFace{} }
func (m *C2S_DelelteCustomFace) String() string { return proto.CompactTextString(m) }
func (*C2S_DelelteCustomFace) ProtoMessage()    {}
func (*C2S_DelelteCustomFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{416}
}
func (m *C2S_DelelteCustomFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DelelteCustomFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DelelteCustomFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DelelteCustomFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DelelteCustomFace.Merge(m, src)
}
func (m *C2S_DelelteCustomFace) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DelelteCustomFace) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DelelteCustomFace.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DelelteCustomFace proto.InternalMessageInfo

func (m *C2S_DelelteCustomFace) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DelelteCustomFace) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

type S2C_DelelteCustomFace struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	ImageId              *int32          `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	CurrentFace          *RoleFace       `protobuf:"bytes,3,opt,name=current_face" json:"current_face,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DelelteCustomFace) Reset()         { *m = S2C_DelelteCustomFace{} }
func (m *S2C_DelelteCustomFace) String() string { return proto.CompactTextString(m) }
func (*S2C_DelelteCustomFace) ProtoMessage()    {}
func (*S2C_DelelteCustomFace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{417}
}
func (m *S2C_DelelteCustomFace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DelelteCustomFace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DelelteCustomFace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DelelteCustomFace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DelelteCustomFace.Merge(m, src)
}
func (m *S2C_DelelteCustomFace) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DelelteCustomFace) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DelelteCustomFace.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DelelteCustomFace proto.InternalMessageInfo

func (m *S2C_DelelteCustomFace) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DelelteCustomFace) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *S2C_DelelteCustomFace) GetCurrentFace() *RoleFace {
	if m != nil {
		return m.CurrentFace
	}
	return nil
}

// 自定义表情审核结果通知
type S2C_CustomFaceAuditResult struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	Status               *int32   `protobuf:"zigzag32,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_CustomFaceAuditResult) Reset()         { *m = S2C_CustomFaceAuditResult{} }
func (m *S2C_CustomFaceAuditResult) String() string { return proto.CompactTextString(m) }
func (*S2C_CustomFaceAuditResult) ProtoMessage()    {}
func (*S2C_CustomFaceAuditResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{418}
}
func (m *S2C_CustomFaceAuditResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CustomFaceAuditResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CustomFaceAuditResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CustomFaceAuditResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CustomFaceAuditResult.Merge(m, src)
}
func (m *S2C_CustomFaceAuditResult) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CustomFaceAuditResult) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CustomFaceAuditResult.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CustomFaceAuditResult proto.InternalMessageInfo

func (m *S2C_CustomFaceAuditResult) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_CustomFaceAuditResult) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

func (m *S2C_CustomFaceAuditResult) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 自定义表情审核结果通知
type S2C_FaceUploadSuccess struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ImageId              *int32   `protobuf:"zigzag32,2,opt,name=image_id" json:"image_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_FaceUploadSuccess) Reset()         { *m = S2C_FaceUploadSuccess{} }
func (m *S2C_FaceUploadSuccess) String() string { return proto.CompactTextString(m) }
func (*S2C_FaceUploadSuccess) ProtoMessage()    {}
func (*S2C_FaceUploadSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{419}
}
func (m *S2C_FaceUploadSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FaceUploadSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FaceUploadSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FaceUploadSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FaceUploadSuccess.Merge(m, src)
}
func (m *S2C_FaceUploadSuccess) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FaceUploadSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FaceUploadSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FaceUploadSuccess proto.InternalMessageInfo

func (m *S2C_FaceUploadSuccess) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_FaceUploadSuccess) GetImageId() int32 {
	if m != nil && m.ImageId != nil {
		return *m.ImageId
	}
	return 0
}

// 请求宠物信息
type C2S_RolePetInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RolePetInfo) Reset()         { *m = C2S_RolePetInfo{} }
func (m *C2S_RolePetInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_RolePetInfo) ProtoMessage()    {}
func (*C2S_RolePetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{420}
}
func (m *C2S_RolePetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RolePetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RolePetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RolePetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RolePetInfo.Merge(m, src)
}
func (m *C2S_RolePetInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RolePetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RolePetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RolePetInfo proto.InternalMessageInfo

func (m *C2S_RolePetInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_RolePetInfo struct {
	PetInfo              *DbRolePetInfo `protobuf:"bytes,1,opt,name=pet_info" json:"pet_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *S2C_RolePetInfo) Reset()         { *m = S2C_RolePetInfo{} }
func (m *S2C_RolePetInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_RolePetInfo) ProtoMessage()    {}
func (*S2C_RolePetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{421}
}
func (m *S2C_RolePetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RolePetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RolePetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RolePetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RolePetInfo.Merge(m, src)
}
func (m *S2C_RolePetInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RolePetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RolePetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RolePetInfo proto.InternalMessageInfo

func (m *S2C_RolePetInfo) GetPetInfo() *DbRolePetInfo {
	if m != nil {
		return m.PetInfo
	}
	return nil
}

// 设置指定宠物出战状态
type C2S_SetPetFightStatus struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PetId                *int32   `protobuf:"zigzag32,2,opt,name=pet_id" json:"pet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SetPetFightStatus) Reset()         { *m = C2S_SetPetFightStatus{} }
func (m *C2S_SetPetFightStatus) String() string { return proto.CompactTextString(m) }
func (*C2S_SetPetFightStatus) ProtoMessage()    {}
func (*C2S_SetPetFightStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{422}
}
func (m *C2S_SetPetFightStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SetPetFightStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SetPetFightStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SetPetFightStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SetPetFightStatus.Merge(m, src)
}
func (m *C2S_SetPetFightStatus) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SetPetFightStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SetPetFightStatus.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SetPetFightStatus proto.InternalMessageInfo

func (m *C2S_SetPetFightStatus) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SetPetFightStatus) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

type S2C_SetPetFightStatus struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	PetId                *int32          `protobuf:"zigzag32,2,opt,name=pet_id" json:"pet_id,omitempty"`
	Status               *bool           `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SetPetFightStatus) Reset()         { *m = S2C_SetPetFightStatus{} }
func (m *S2C_SetPetFightStatus) String() string { return proto.CompactTextString(m) }
func (*S2C_SetPetFightStatus) ProtoMessage()    {}
func (*S2C_SetPetFightStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{423}
}
func (m *S2C_SetPetFightStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SetPetFightStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SetPetFightStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SetPetFightStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SetPetFightStatus.Merge(m, src)
}
func (m *S2C_SetPetFightStatus) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SetPetFightStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SetPetFightStatus.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SetPetFightStatus proto.InternalMessageInfo

func (m *S2C_SetPetFightStatus) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_SetPetFightStatus) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

func (m *S2C_SetPetFightStatus) GetStatus() bool {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return false
}

// 宠物进化
type C2S_PetEvolve struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PetId                *int32   `protobuf:"zigzag32,2,opt,name=pet_id" json:"pet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PetEvolve) Reset()         { *m = C2S_PetEvolve{} }
func (m *C2S_PetEvolve) String() string { return proto.CompactTextString(m) }
func (*C2S_PetEvolve) ProtoMessage()    {}
func (*C2S_PetEvolve) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{424}
}
func (m *C2S_PetEvolve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PetEvolve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PetEvolve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PetEvolve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PetEvolve.Merge(m, src)
}
func (m *C2S_PetEvolve) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PetEvolve) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PetEvolve.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PetEvolve proto.InternalMessageInfo

func (m *C2S_PetEvolve) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PetEvolve) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

type S2C_PetEvolve struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	OldPetId             *int32          `protobuf:"zigzag32,2,opt,name=old_pet_id" json:"old_pet_id,omitempty"`
	NewPet               *PetInfo        `protobuf:"bytes,3,opt,name=new_pet" json:"new_pet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PetEvolve) Reset()         { *m = S2C_PetEvolve{} }
func (m *S2C_PetEvolve) String() string { return proto.CompactTextString(m) }
func (*S2C_PetEvolve) ProtoMessage()    {}
func (*S2C_PetEvolve) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{425}
}
func (m *S2C_PetEvolve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PetEvolve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PetEvolve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PetEvolve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PetEvolve.Merge(m, src)
}
func (m *S2C_PetEvolve) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PetEvolve) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PetEvolve.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PetEvolve proto.InternalMessageInfo

func (m *S2C_PetEvolve) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PetEvolve) GetOldPetId() int32 {
	if m != nil && m.OldPetId != nil {
		return *m.OldPetId
	}
	return 0
}

func (m *S2C_PetEvolve) GetNewPet() *PetInfo {
	if m != nil {
		return m.NewPet
	}
	return nil
}

// 宠物技能重修
type C2S_PetTalentRebuild struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PetId                *int32   `protobuf:"zigzag32,2,opt,name=pet_id" json:"pet_id,omitempty"`
	Site                 *int32   `protobuf:"zigzag32,3,opt,name=site" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PetTalentRebuild) Reset()         { *m = C2S_PetTalentRebuild{} }
func (m *C2S_PetTalentRebuild) String() string { return proto.CompactTextString(m) }
func (*C2S_PetTalentRebuild) ProtoMessage()    {}
func (*C2S_PetTalentRebuild) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{426}
}
func (m *C2S_PetTalentRebuild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PetTalentRebuild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PetTalentRebuild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PetTalentRebuild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PetTalentRebuild.Merge(m, src)
}
func (m *C2S_PetTalentRebuild) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PetTalentRebuild) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PetTalentRebuild.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PetTalentRebuild proto.InternalMessageInfo

func (m *C2S_PetTalentRebuild) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PetTalentRebuild) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

func (m *C2S_PetTalentRebuild) GetSite() int32 {
	if m != nil && m.Site != nil {
		return *m.Site
	}
	return 0
}

type S2C_PetTalentRebuild struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NewPassiveId         *int32          `protobuf:"zigzag32,2,opt,name=new_passive_id" json:"new_passive_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PetTalentRebuild) Reset()         { *m = S2C_PetTalentRebuild{} }
func (m *S2C_PetTalentRebuild) String() string { return proto.CompactTextString(m) }
func (*S2C_PetTalentRebuild) ProtoMessage()    {}
func (*S2C_PetTalentRebuild) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{427}
}
func (m *S2C_PetTalentRebuild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PetTalentRebuild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PetTalentRebuild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PetTalentRebuild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PetTalentRebuild.Merge(m, src)
}
func (m *S2C_PetTalentRebuild) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PetTalentRebuild) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PetTalentRebuild.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PetTalentRebuild proto.InternalMessageInfo

func (m *S2C_PetTalentRebuild) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PetTalentRebuild) GetNewPassiveId() int32 {
	if m != nil && m.NewPassiveId != nil {
		return *m.NewPassiveId
	}
	return 0
}

// 培养宠物,增加宠物经验
type C2S_FosterPet struct {
	RoleIndex            *int64        `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PetId                *int32        `protobuf:"zigzag32,2,opt,name=pet_id" json:"pet_id,omitempty"`
	ItemList             []*ItemConfig `protobuf:"bytes,3,rep,name=item_list" json:"item_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *C2S_FosterPet) Reset()         { *m = C2S_FosterPet{} }
func (m *C2S_FosterPet) String() string { return proto.CompactTextString(m) }
func (*C2S_FosterPet) ProtoMessage()    {}
func (*C2S_FosterPet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{428}
}
func (m *C2S_FosterPet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FosterPet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FosterPet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FosterPet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FosterPet.Merge(m, src)
}
func (m *C2S_FosterPet) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FosterPet) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FosterPet.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FosterPet proto.InternalMessageInfo

func (m *C2S_FosterPet) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FosterPet) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

func (m *C2S_FosterPet) GetItemList() []*ItemConfig {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type S2C_FosterPet struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Level                *int32          `protobuf:"zigzag32,2,opt,name=level" json:"level,omitempty"`
	Exp                  *int64          `protobuf:"zigzag64,3,opt,name=exp" json:"exp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_FosterPet) Reset()         { *m = S2C_FosterPet{} }
func (m *S2C_FosterPet) String() string { return proto.CompactTextString(m) }
func (*S2C_FosterPet) ProtoMessage()    {}
func (*S2C_FosterPet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{429}
}
func (m *S2C_FosterPet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FosterPet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FosterPet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FosterPet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FosterPet.Merge(m, src)
}
func (m *S2C_FosterPet) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FosterPet) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FosterPet.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FosterPet proto.InternalMessageInfo

func (m *S2C_FosterPet) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_FosterPet) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *S2C_FosterPet) GetExp() int64 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

// 同步宠物增加
type S2C_PetAdd struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	PetList              []*PetInfo      `protobuf:"bytes,2,rep,name=pet_list" json:"pet_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PetAdd) Reset()         { *m = S2C_PetAdd{} }
func (m *S2C_PetAdd) String() string { return proto.CompactTextString(m) }
func (*S2C_PetAdd) ProtoMessage()    {}
func (*S2C_PetAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{430}
}
func (m *S2C_PetAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PetAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PetAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PetAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PetAdd.Merge(m, src)
}
func (m *S2C_PetAdd) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PetAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PetAdd.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PetAdd proto.InternalMessageInfo

func (m *S2C_PetAdd) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PetAdd) GetPetList() []*PetInfo {
	if m != nil {
		return m.PetList
	}
	return nil
}

// 同步宠物更新
type S2C_PetUpdate struct {
	PetList              []*PetInfo `protobuf:"bytes,1,rep,name=pet_list" json:"pet_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2C_PetUpdate) Reset()         { *m = S2C_PetUpdate{} }
func (m *S2C_PetUpdate) String() string { return proto.CompactTextString(m) }
func (*S2C_PetUpdate) ProtoMessage()    {}
func (*S2C_PetUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{431}
}
func (m *S2C_PetUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PetUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PetUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PetUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PetUpdate.Merge(m, src)
}
func (m *S2C_PetUpdate) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PetUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PetUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PetUpdate proto.InternalMessageInfo

func (m *S2C_PetUpdate) GetPetList() []*PetInfo {
	if m != nil {
		return m.PetList
	}
	return nil
}

// 同步宠物经验
type S2C_SyncPetLevel struct {
	PetId                *int32   `protobuf:"zigzag32,1,opt,name=pet_id" json:"pet_id,omitempty"`
	Level                *int32   `protobuf:"zigzag32,2,opt,name=level" json:"level,omitempty"`
	Exp                  *int64   `protobuf:"zigzag64,3,opt,name=exp" json:"exp,omitempty"`
	ExpDiff              []int64  `protobuf:"zigzag64,4,rep,name=exp_diff" json:"exp_diff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_SyncPetLevel) Reset()         { *m = S2C_SyncPetLevel{} }
func (m *S2C_SyncPetLevel) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncPetLevel) ProtoMessage()    {}
func (*S2C_SyncPetLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{432}
}
func (m *S2C_SyncPetLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncPetLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncPetLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncPetLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncPetLevel.Merge(m, src)
}
func (m *S2C_SyncPetLevel) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncPetLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncPetLevel.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncPetLevel proto.InternalMessageInfo

func (m *S2C_SyncPetLevel) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

func (m *S2C_SyncPetLevel) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *S2C_SyncPetLevel) GetExp() int64 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *S2C_SyncPetLevel) GetExpDiff() []int64 {
	if m != nil {
		return m.ExpDiff
	}
	return nil
}

// 宠物吃仙丹,增加三围
type C2S_PetEatPill struct {
	RoleIndex            *int64        `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PetId                *int32        `protobuf:"zigzag32,2,opt,name=pet_id" json:"pet_id,omitempty"`
	ItemList             []*ItemConfig `protobuf:"bytes,3,rep,name=item_list" json:"item_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *C2S_PetEatPill) Reset()         { *m = C2S_PetEatPill{} }
func (m *C2S_PetEatPill) String() string { return proto.CompactTextString(m) }
func (*C2S_PetEatPill) ProtoMessage()    {}
func (*C2S_PetEatPill) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{433}
}
func (m *C2S_PetEatPill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PetEatPill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PetEatPill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PetEatPill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PetEatPill.Merge(m, src)
}
func (m *C2S_PetEatPill) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PetEatPill) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PetEatPill.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PetEatPill proto.InternalMessageInfo

func (m *C2S_PetEatPill) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PetEatPill) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

func (m *C2S_PetEatPill) GetItemList() []*ItemConfig {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type S2C_PetEatPill struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NewAttr              *PetBaseFight   `protobuf:"bytes,2,opt,name=new_attr" json:"new_attr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PetEatPill) Reset()         { *m = S2C_PetEatPill{} }
func (m *S2C_PetEatPill) String() string { return proto.CompactTextString(m) }
func (*S2C_PetEatPill) ProtoMessage()    {}
func (*S2C_PetEatPill) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{434}
}
func (m *S2C_PetEatPill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PetEatPill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PetEatPill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PetEatPill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PetEatPill.Merge(m, src)
}
func (m *S2C_PetEatPill) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PetEatPill) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PetEatPill.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PetEatPill proto.InternalMessageInfo

func (m *S2C_PetEatPill) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PetEatPill) GetNewAttr() *PetBaseFight {
	if m != nil {
		return m.NewAttr
	}
	return nil
}

// 推送宠物刷新
type S2C_PetRefreshInfo struct {
	BornPos              *LuaPos  `protobuf:"bytes,1,opt,name=born_pos" json:"born_pos,omitempty"`
	PetId                *int32   `protobuf:"zigzag32,2,opt,name=pet_id" json:"pet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_PetRefreshInfo) Reset()         { *m = S2C_PetRefreshInfo{} }
func (m *S2C_PetRefreshInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_PetRefreshInfo) ProtoMessage()    {}
func (*S2C_PetRefreshInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{435}
}
func (m *S2C_PetRefreshInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PetRefreshInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PetRefreshInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PetRefreshInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PetRefreshInfo.Merge(m, src)
}
func (m *S2C_PetRefreshInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PetRefreshInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PetRefreshInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PetRefreshInfo proto.InternalMessageInfo

func (m *S2C_PetRefreshInfo) GetBornPos() *LuaPos {
	if m != nil {
		return m.BornPos
	}
	return nil
}

func (m *S2C_PetRefreshInfo) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

// 捉到宠物了
type C2S_RoleNabPet struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_RoleNabPet) Reset()         { *m = C2S_RoleNabPet{} }
func (m *C2S_RoleNabPet) String() string { return proto.CompactTextString(m) }
func (*C2S_RoleNabPet) ProtoMessage()    {}
func (*C2S_RoleNabPet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{436}
}
func (m *C2S_RoleNabPet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_RoleNabPet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_RoleNabPet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_RoleNabPet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_RoleNabPet.Merge(m, src)
}
func (m *C2S_RoleNabPet) XXX_Size() int {
	return m.Size()
}
func (m *C2S_RoleNabPet) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_RoleNabPet.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_RoleNabPet proto.InternalMessageInfo

func (m *C2S_RoleNabPet) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_RoleNabPet struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_RoleNabPet) Reset()         { *m = S2C_RoleNabPet{} }
func (m *S2C_RoleNabPet) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleNabPet) ProtoMessage()    {}
func (*S2C_RoleNabPet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{437}
}
func (m *S2C_RoleNabPet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleNabPet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleNabPet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleNabPet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleNabPet.Merge(m, src)
}
func (m *S2C_RoleNabPet) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleNabPet) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleNabPet.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleNabPet proto.InternalMessageInfo

func (m *S2C_RoleNabPet) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 走马灯推送
type S2C_HorseLight struct {
	Horse_LightList      []*HorseLightInfo `protobuf:"bytes,1,rep,name=horse_Light_list" json:"horse_Light_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S2C_HorseLight) Reset()         { *m = S2C_HorseLight{} }
func (m *S2C_HorseLight) String() string { return proto.CompactTextString(m) }
func (*S2C_HorseLight) ProtoMessage()    {}
func (*S2C_HorseLight) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{438}
}
func (m *S2C_HorseLight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_HorseLight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_HorseLight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_HorseLight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_HorseLight.Merge(m, src)
}
func (m *S2C_HorseLight) XXX_Size() int {
	return m.Size()
}
func (m *S2C_HorseLight) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_HorseLight.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_HorseLight proto.InternalMessageInfo

func (m *S2C_HorseLight) GetHorse_LightList() []*HorseLightInfo {
	if m != nil {
		return m.Horse_LightList
	}
	return nil
}

// 阅读小助手信息请求,获取已领取过的奖励id
type C2S_AssistantTipInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AssistantTipInfo) Reset()         { *m = C2S_AssistantTipInfo{} }
func (m *C2S_AssistantTipInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_AssistantTipInfo) ProtoMessage()    {}
func (*C2S_AssistantTipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{439}
}
func (m *C2S_AssistantTipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AssistantTipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AssistantTipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AssistantTipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AssistantTipInfo.Merge(m, src)
}
func (m *C2S_AssistantTipInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AssistantTipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AssistantTipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AssistantTipInfo proto.InternalMessageInfo

func (m *C2S_AssistantTipInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_AssistantTipInfo struct {
	TipReadIdList        []int32  `protobuf:"zigzag32,3,rep,name=tip_read_id_list" json:"tip_read_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_AssistantTipInfo) Reset()         { *m = S2C_AssistantTipInfo{} }
func (m *S2C_AssistantTipInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_AssistantTipInfo) ProtoMessage()    {}
func (*S2C_AssistantTipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{440}
}
func (m *S2C_AssistantTipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AssistantTipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AssistantTipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AssistantTipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AssistantTipInfo.Merge(m, src)
}
func (m *S2C_AssistantTipInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AssistantTipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AssistantTipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AssistantTipInfo proto.InternalMessageInfo

func (m *S2C_AssistantTipInfo) GetTipReadIdList() []int32 {
	if m != nil {
		return m.TipReadIdList
	}
	return nil
}

// 阅读小助手
type C2S_AssistantTipRead struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	TipId                *int32   `protobuf:"zigzag32,2,opt,name=tip_id" json:"tip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AssistantTipRead) Reset()         { *m = C2S_AssistantTipRead{} }
func (m *C2S_AssistantTipRead) String() string { return proto.CompactTextString(m) }
func (*C2S_AssistantTipRead) ProtoMessage()    {}
func (*C2S_AssistantTipRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{441}
}
func (m *C2S_AssistantTipRead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AssistantTipRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AssistantTipRead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AssistantTipRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AssistantTipRead.Merge(m, src)
}
func (m *C2S_AssistantTipRead) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AssistantTipRead) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AssistantTipRead.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AssistantTipRead proto.InternalMessageInfo

func (m *C2S_AssistantTipRead) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_AssistantTipRead) GetTipId() int32 {
	if m != nil && m.TipId != nil {
		return *m.TipId
	}
	return 0
}

// 扭蛋机信息
type C2S_NiuDanInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NiudanId             *int32   `protobuf:"zigzag32,2,opt,name=niudan_id" json:"niudan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_NiuDanInfo) Reset()         { *m = C2S_NiuDanInfo{} }
func (m *C2S_NiuDanInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_NiuDanInfo) ProtoMessage()    {}
func (*C2S_NiuDanInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{442}
}
func (m *C2S_NiuDanInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_NiuDanInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_NiuDanInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_NiuDanInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_NiuDanInfo.Merge(m, src)
}
func (m *C2S_NiuDanInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_NiuDanInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_NiuDanInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_NiuDanInfo proto.InternalMessageInfo

func (m *C2S_NiuDanInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_NiuDanInfo) GetNiudanId() int32 {
	if m != nil && m.NiudanId != nil {
		return *m.NiudanId
	}
	return 0
}

type S2C_NiuDanInfo struct {
	NiudanId             *int32    `protobuf:"zigzag32,1,opt,name=niudan_id" json:"niudan_id,omitempty"`
	ButtonInfo           *ButtonCd `protobuf:"bytes,2,opt,name=button_info" json:"button_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *S2C_NiuDanInfo) Reset()         { *m = S2C_NiuDanInfo{} }
func (m *S2C_NiuDanInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_NiuDanInfo) ProtoMessage()    {}
func (*S2C_NiuDanInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{443}
}
func (m *S2C_NiuDanInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_NiuDanInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_NiuDanInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_NiuDanInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_NiuDanInfo.Merge(m, src)
}
func (m *S2C_NiuDanInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_NiuDanInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_NiuDanInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_NiuDanInfo proto.InternalMessageInfo

func (m *S2C_NiuDanInfo) GetNiudanId() int32 {
	if m != nil && m.NiudanId != nil {
		return *m.NiudanId
	}
	return 0
}

func (m *S2C_NiuDanInfo) GetButtonInfo() *ButtonCd {
	if m != nil {
		return m.ButtonInfo
	}
	return nil
}

// touch扭蛋机
type C2S_TouchNiuDan struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NiudanId             *int32   `protobuf:"zigzag32,2,opt,name=niudan_id" json:"niudan_id,omitempty"`
	ButtonId             *int32   `protobuf:"zigzag32,3,opt,name=button_id" json:"button_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TouchNiuDan) Reset()         { *m = C2S_TouchNiuDan{} }
func (m *C2S_TouchNiuDan) String() string { return proto.CompactTextString(m) }
func (*C2S_TouchNiuDan) ProtoMessage()    {}
func (*C2S_TouchNiuDan) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{444}
}
func (m *C2S_TouchNiuDan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TouchNiuDan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TouchNiuDan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TouchNiuDan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TouchNiuDan.Merge(m, src)
}
func (m *C2S_TouchNiuDan) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TouchNiuDan) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TouchNiuDan.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TouchNiuDan proto.InternalMessageInfo

func (m *C2S_TouchNiuDan) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TouchNiuDan) GetNiudanId() int32 {
	if m != nil && m.NiudanId != nil {
		return *m.NiudanId
	}
	return 0
}

func (m *C2S_TouchNiuDan) GetButtonId() int32 {
	if m != nil && m.ButtonId != nil {
		return *m.ButtonId
	}
	return 0
}

type S2C_TouchNiuDan struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NiudanId             *int32          `protobuf:"zigzag32,2,opt,name=niudan_id" json:"niudan_id,omitempty"`
	ButtonId             *int32          `protobuf:"zigzag32,3,opt,name=button_id" json:"button_id,omitempty"`
	LeftTime             *int64          `protobuf:"zigzag64,4,opt,name=left_time" json:"left_time,omitempty"`
	Reward               []*RewardInfo   `protobuf:"bytes,5,rep,name=reward" json:"reward,omitempty"`
	MustRewardList       []*RewardInfo   `protobuf:"bytes,6,rep,name=must_reward_list" json:"must_reward_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TouchNiuDan) Reset()         { *m = S2C_TouchNiuDan{} }
func (m *S2C_TouchNiuDan) String() string { return proto.CompactTextString(m) }
func (*S2C_TouchNiuDan) ProtoMessage()    {}
func (*S2C_TouchNiuDan) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{445}
}
func (m *S2C_TouchNiuDan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TouchNiuDan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TouchNiuDan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TouchNiuDan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TouchNiuDan.Merge(m, src)
}
func (m *S2C_TouchNiuDan) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TouchNiuDan) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TouchNiuDan.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TouchNiuDan proto.InternalMessageInfo

func (m *S2C_TouchNiuDan) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TouchNiuDan) GetNiudanId() int32 {
	if m != nil && m.NiudanId != nil {
		return *m.NiudanId
	}
	return 0
}

func (m *S2C_TouchNiuDan) GetButtonId() int32 {
	if m != nil && m.ButtonId != nil {
		return *m.ButtonId
	}
	return 0
}

func (m *S2C_TouchNiuDan) GetLeftTime() int64 {
	if m != nil && m.LeftTime != nil {
		return *m.LeftTime
	}
	return 0
}

func (m *S2C_TouchNiuDan) GetReward() []*RewardInfo {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *S2C_TouchNiuDan) GetMustRewardList() []*RewardInfo {
	if m != nil {
		return m.MustRewardList
	}
	return nil
}

//兑换码
type C2S_ExchangeCode struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Code                 []byte   `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ExchangeCode) Reset()         { *m = C2S_ExchangeCode{} }
func (m *C2S_ExchangeCode) String() string { return proto.CompactTextString(m) }
func (*C2S_ExchangeCode) ProtoMessage()    {}
func (*C2S_ExchangeCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{446}
}
func (m *C2S_ExchangeCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ExchangeCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ExchangeCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ExchangeCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ExchangeCode.Merge(m, src)
}
func (m *C2S_ExchangeCode) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ExchangeCode) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ExchangeCode.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ExchangeCode proto.InternalMessageInfo

func (m *C2S_ExchangeCode) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ExchangeCode) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

type S2C_ExchangeCode struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ExchangeCode) Reset()         { *m = S2C_ExchangeCode{} }
func (m *S2C_ExchangeCode) String() string { return proto.CompactTextString(m) }
func (*S2C_ExchangeCode) ProtoMessage()    {}
func (*S2C_ExchangeCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{447}
}
func (m *S2C_ExchangeCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ExchangeCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ExchangeCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ExchangeCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ExchangeCode.Merge(m, src)
}
func (m *S2C_ExchangeCode) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ExchangeCode) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ExchangeCode.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ExchangeCode proto.InternalMessageInfo

func (m *S2C_ExchangeCode) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 通知成就完成
type S2C_ArchieveFinish struct {
	Id                   []int32  `protobuf:"zigzag32,1,rep,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_ArchieveFinish) Reset()         { *m = S2C_ArchieveFinish{} }
func (m *S2C_ArchieveFinish) String() string { return proto.CompactTextString(m) }
func (*S2C_ArchieveFinish) ProtoMessage()    {}
func (*S2C_ArchieveFinish) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{448}
}
func (m *S2C_ArchieveFinish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArchieveFinish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArchieveFinish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArchieveFinish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArchieveFinish.Merge(m, src)
}
func (m *S2C_ArchieveFinish) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArchieveFinish) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArchieveFinish.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArchieveFinish proto.InternalMessageInfo

func (m *S2C_ArchieveFinish) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// 领取指定成就奖励
type C2S_GetArchieveReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Id                   *int32   `protobuf:"zigzag32,2,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetArchieveReward) Reset()         { *m = C2S_GetArchieveReward{} }
func (m *C2S_GetArchieveReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetArchieveReward) ProtoMessage()    {}
func (*C2S_GetArchieveReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{449}
}
func (m *C2S_GetArchieveReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetArchieveReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetArchieveReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetArchieveReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetArchieveReward.Merge(m, src)
}
func (m *C2S_GetArchieveReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetArchieveReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetArchieveReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetArchieveReward proto.InternalMessageInfo

func (m *C2S_GetArchieveReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GetArchieveReward) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type S2C_GetArchieveReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Id                   *int32          `protobuf:"zigzag32,2,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetArchieveReward) Reset()         { *m = S2C_GetArchieveReward{} }
func (m *S2C_GetArchieveReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetArchieveReward) ProtoMessage()    {}
func (*S2C_GetArchieveReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{450}
}
func (m *S2C_GetArchieveReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetArchieveReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetArchieveReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetArchieveReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetArchieveReward.Merge(m, src)
}
func (m *S2C_GetArchieveReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetArchieveReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetArchieveReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetArchieveReward proto.InternalMessageInfo

func (m *S2C_GetArchieveReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_GetArchieveReward) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

// 获取玩家成就信息
type C2S_ArchieveInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ArchieveInfo) Reset()         { *m = C2S_ArchieveInfo{} }
func (m *C2S_ArchieveInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_ArchieveInfo) ProtoMessage()    {}
func (*C2S_ArchieveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{451}
}
func (m *C2S_ArchieveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ArchieveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ArchieveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ArchieveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ArchieveInfo.Merge(m, src)
}
func (m *C2S_ArchieveInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ArchieveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ArchieveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ArchieveInfo proto.InternalMessageInfo

func (m *C2S_ArchieveInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ArchieveInfo struct {
	Info                 *ListDbRoleSuccessInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *S2C_ArchieveInfo) Reset()         { *m = S2C_ArchieveInfo{} }
func (m *S2C_ArchieveInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_ArchieveInfo) ProtoMessage()    {}
func (*S2C_ArchieveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{452}
}
func (m *S2C_ArchieveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ArchieveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ArchieveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ArchieveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ArchieveInfo.Merge(m, src)
}
func (m *S2C_ArchieveInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ArchieveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ArchieveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ArchieveInfo proto.InternalMessageInfo

func (m *S2C_ArchieveInfo) GetInfo() *ListDbRoleSuccessInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 准备进入二次园
type C2S_ReadyEnterGuadratic struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	GwIntaddr            *int64   `protobuf:"zigzag64,3,opt,name=gw_intaddr" json:"gw_intaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ReadyEnterGuadratic) Reset()         { *m = C2S_ReadyEnterGuadratic{} }
func (m *C2S_ReadyEnterGuadratic) String() string { return proto.CompactTextString(m) }
func (*C2S_ReadyEnterGuadratic) ProtoMessage()    {}
func (*C2S_ReadyEnterGuadratic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{453}
}
func (m *C2S_ReadyEnterGuadratic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ReadyEnterGuadratic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ReadyEnterGuadratic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ReadyEnterGuadratic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ReadyEnterGuadratic.Merge(m, src)
}
func (m *C2S_ReadyEnterGuadratic) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ReadyEnterGuadratic) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ReadyEnterGuadratic.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ReadyEnterGuadratic proto.InternalMessageInfo

func (m *C2S_ReadyEnterGuadratic) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ReadyEnterGuadratic) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *C2S_ReadyEnterGuadratic) GetGwIntaddr() int64 {
	if m != nil && m.GwIntaddr != nil {
		return *m.GwIntaddr
	}
	return 0
}

type S2C_ReadyEnterGuadratic struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	SceneId              *int32          `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ReadyEnterGuadratic) Reset()         { *m = S2C_ReadyEnterGuadratic{} }
func (m *S2C_ReadyEnterGuadratic) String() string { return proto.CompactTextString(m) }
func (*S2C_ReadyEnterGuadratic) ProtoMessage()    {}
func (*S2C_ReadyEnterGuadratic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{454}
}
func (m *S2C_ReadyEnterGuadratic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ReadyEnterGuadratic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ReadyEnterGuadratic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ReadyEnterGuadratic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ReadyEnterGuadratic.Merge(m, src)
}
func (m *S2C_ReadyEnterGuadratic) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ReadyEnterGuadratic) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ReadyEnterGuadratic.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ReadyEnterGuadratic proto.InternalMessageInfo

func (m *S2C_ReadyEnterGuadratic) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ReadyEnterGuadratic) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

// 二次园进入
type S2C_EnterGuadratic struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32          `protobuf:"zigzag32,3,opt,name=scene_id" json:"scene_id,omitempty"`
	SceneIndex           *int32          `protobuf:"zigzag32,4,opt,name=scene_index" json:"scene_index,omitempty"`
	SceneIntaddr         *int64          `protobuf:"zigzag64,5,opt,name=scene_intaddr" json:"scene_intaddr,omitempty"`
	SceneInstanceId      *int64          `protobuf:"zigzag64,6,opt,name=scene_instance_id" json:"scene_instance_id,omitempty"`
	MapId                *int32          `protobuf:"zigzag32,7,opt,name=map_id" json:"map_id,omitempty"`
	DupId                *int32          `protobuf:"zigzag32,8,opt,name=dup_id" json:"dup_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EnterGuadratic) Reset()         { *m = S2C_EnterGuadratic{} }
func (m *S2C_EnterGuadratic) String() string { return proto.CompactTextString(m) }
func (*S2C_EnterGuadratic) ProtoMessage()    {}
func (*S2C_EnterGuadratic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{455}
}
func (m *S2C_EnterGuadratic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EnterGuadratic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EnterGuadratic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EnterGuadratic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EnterGuadratic.Merge(m, src)
}
func (m *S2C_EnterGuadratic) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EnterGuadratic) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EnterGuadratic.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EnterGuadratic proto.InternalMessageInfo

func (m *S2C_EnterGuadratic) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EnterGuadratic) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2C_EnterGuadratic) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2C_EnterGuadratic) GetSceneIndex() int32 {
	if m != nil && m.SceneIndex != nil {
		return *m.SceneIndex
	}
	return 0
}

func (m *S2C_EnterGuadratic) GetSceneIntaddr() int64 {
	if m != nil && m.SceneIntaddr != nil {
		return *m.SceneIntaddr
	}
	return 0
}

func (m *S2C_EnterGuadratic) GetSceneInstanceId() int64 {
	if m != nil && m.SceneInstanceId != nil {
		return *m.SceneInstanceId
	}
	return 0
}

func (m *S2C_EnterGuadratic) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *S2C_EnterGuadratic) GetDupId() int32 {
	if m != nil && m.DupId != nil {
		return *m.DupId
	}
	return 0
}

// 二次园人满倒计时
type S2C_GuadraticReady struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_GuadraticReady) Reset()         { *m = S2C_GuadraticReady{} }
func (m *S2C_GuadraticReady) String() string { return proto.CompactTextString(m) }
func (*S2C_GuadraticReady) ProtoMessage()    {}
func (*S2C_GuadraticReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{456}
}
func (m *S2C_GuadraticReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GuadraticReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GuadraticReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GuadraticReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GuadraticReady.Merge(m, src)
}
func (m *S2C_GuadraticReady) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GuadraticReady) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GuadraticReady.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GuadraticReady proto.InternalMessageInfo

// 通知下一关
type S2C_NextGuadraticDup struct {
	DupId                *int64               `protobuf:"zigzag64,1,opt,name=dup_id" json:"dup_id,omitempty"`
	RoleList             []*GuadraticRoleInfo `protobuf:"bytes,2,rep,name=role_list" json:"role_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *S2C_NextGuadraticDup) Reset()         { *m = S2C_NextGuadraticDup{} }
func (m *S2C_NextGuadraticDup) String() string { return proto.CompactTextString(m) }
func (*S2C_NextGuadraticDup) ProtoMessage()    {}
func (*S2C_NextGuadraticDup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{457}
}
func (m *S2C_NextGuadraticDup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_NextGuadraticDup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_NextGuadraticDup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_NextGuadraticDup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_NextGuadraticDup.Merge(m, src)
}
func (m *S2C_NextGuadraticDup) XXX_Size() int {
	return m.Size()
}
func (m *S2C_NextGuadraticDup) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_NextGuadraticDup.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_NextGuadraticDup proto.InternalMessageInfo

func (m *S2C_NextGuadraticDup) GetDupId() int64 {
	if m != nil && m.DupId != nil {
		return *m.DupId
	}
	return 0
}

func (m *S2C_NextGuadraticDup) GetRoleList() []*GuadraticRoleInfo {
	if m != nil {
		return m.RoleList
	}
	return nil
}

// 二次园结束
type S2C_GuadraticEnd struct {
	ResultList           []*GuadraticResult `protobuf:"bytes,1,rep,name=result_list" json:"result_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_GuadraticEnd) Reset()         { *m = S2C_GuadraticEnd{} }
func (m *S2C_GuadraticEnd) String() string { return proto.CompactTextString(m) }
func (*S2C_GuadraticEnd) ProtoMessage()    {}
func (*S2C_GuadraticEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{458}
}
func (m *S2C_GuadraticEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GuadraticEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GuadraticEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GuadraticEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GuadraticEnd.Merge(m, src)
}
func (m *S2C_GuadraticEnd) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GuadraticEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GuadraticEnd.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GuadraticEnd proto.InternalMessageInfo

func (m *S2C_GuadraticEnd) GetResultList() []*GuadraticResult {
	if m != nil {
		return m.ResultList
	}
	return nil
}

// 二次园广播玩家血量
type S2C_SyncGuadraticRoleHP struct {
	RoleHpList           []*GuadraticRoleHp `protobuf:"bytes,1,rep,name=role_hp_list" json:"role_hp_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_SyncGuadraticRoleHP) Reset()         { *m = S2C_SyncGuadraticRoleHP{} }
func (m *S2C_SyncGuadraticRoleHP) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncGuadraticRoleHP) ProtoMessage()    {}
func (*S2C_SyncGuadraticRoleHP) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{459}
}
func (m *S2C_SyncGuadraticRoleHP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncGuadraticRoleHP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncGuadraticRoleHP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncGuadraticRoleHP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncGuadraticRoleHP.Merge(m, src)
}
func (m *S2C_SyncGuadraticRoleHP) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncGuadraticRoleHP) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncGuadraticRoleHP.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncGuadraticRoleHP proto.InternalMessageInfo

func (m *S2C_SyncGuadraticRoleHP) GetRoleHpList() []*GuadraticRoleHp {
	if m != nil {
		return m.RoleHpList
	}
	return nil
}

// 二次园广播玩家CD
type S2C_SyncGuadraticRoleCD struct {
	RoleCdList           []*GuadraticRoleCd `protobuf:"bytes,1,rep,name=role_cd_list" json:"role_cd_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_SyncGuadraticRoleCD) Reset()         { *m = S2C_SyncGuadraticRoleCD{} }
func (m *S2C_SyncGuadraticRoleCD) String() string { return proto.CompactTextString(m) }
func (*S2C_SyncGuadraticRoleCD) ProtoMessage()    {}
func (*S2C_SyncGuadraticRoleCD) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{460}
}
func (m *S2C_SyncGuadraticRoleCD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SyncGuadraticRoleCD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SyncGuadraticRoleCD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SyncGuadraticRoleCD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SyncGuadraticRoleCD.Merge(m, src)
}
func (m *S2C_SyncGuadraticRoleCD) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SyncGuadraticRoleCD) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SyncGuadraticRoleCD.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SyncGuadraticRoleCD proto.InternalMessageInfo

func (m *S2C_SyncGuadraticRoleCD) GetRoleCdList() []*GuadraticRoleCd {
	if m != nil {
		return m.RoleCdList
	}
	return nil
}

// 二次园boss入场通知
type S2C_GuadraticBossEnter struct {
	BossIndex            *int32      `protobuf:"zigzag32,1,opt,name=boss_index" json:"boss_index,omitempty"`
	BossId               *int32      `protobuf:"zigzag32,2,opt,name=boss_id" json:"boss_id,omitempty"`
	Pos                  *LuaPos     `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	HurtRect             *LuaPosRect `protobuf:"bytes,4,opt,name=hurt_rect" json:"hurt_rect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *S2C_GuadraticBossEnter) Reset()         { *m = S2C_GuadraticBossEnter{} }
func (m *S2C_GuadraticBossEnter) String() string { return proto.CompactTextString(m) }
func (*S2C_GuadraticBossEnter) ProtoMessage()    {}
func (*S2C_GuadraticBossEnter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{461}
}
func (m *S2C_GuadraticBossEnter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GuadraticBossEnter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GuadraticBossEnter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GuadraticBossEnter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GuadraticBossEnter.Merge(m, src)
}
func (m *S2C_GuadraticBossEnter) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GuadraticBossEnter) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GuadraticBossEnter.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GuadraticBossEnter proto.InternalMessageInfo

func (m *S2C_GuadraticBossEnter) GetBossIndex() int32 {
	if m != nil && m.BossIndex != nil {
		return *m.BossIndex
	}
	return 0
}

func (m *S2C_GuadraticBossEnter) GetBossId() int32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *S2C_GuadraticBossEnter) GetPos() *LuaPos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *S2C_GuadraticBossEnter) GetHurtRect() *LuaPosRect {
	if m != nil {
		return m.HurtRect
	}
	return nil
}

// 二次园boss技能伤害
type S2C_GuadraticBossUseSkill struct {
	BossIndex            *int32      `protobuf:"zigzag32,1,opt,name=boss_index" json:"boss_index,omitempty"`
	BossId               *int32      `protobuf:"zigzag32,2,opt,name=boss_id" json:"boss_id,omitempty"`
	SkillId              *int32      `protobuf:"zigzag32,3,opt,name=skill_id" json:"skill_id,omitempty"`
	Hurt                 *int32      `protobuf:"zigzag32,4,opt,name=hurt" json:"hurt,omitempty"`
	HurtRect             *LuaPosRect `protobuf:"bytes,5,opt,name=hurt_rect" json:"hurt_rect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *S2C_GuadraticBossUseSkill) Reset()         { *m = S2C_GuadraticBossUseSkill{} }
func (m *S2C_GuadraticBossUseSkill) String() string { return proto.CompactTextString(m) }
func (*S2C_GuadraticBossUseSkill) ProtoMessage()    {}
func (*S2C_GuadraticBossUseSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{462}
}
func (m *S2C_GuadraticBossUseSkill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GuadraticBossUseSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GuadraticBossUseSkill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GuadraticBossUseSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GuadraticBossUseSkill.Merge(m, src)
}
func (m *S2C_GuadraticBossUseSkill) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GuadraticBossUseSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GuadraticBossUseSkill.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GuadraticBossUseSkill proto.InternalMessageInfo

func (m *S2C_GuadraticBossUseSkill) GetBossIndex() int32 {
	if m != nil && m.BossIndex != nil {
		return *m.BossIndex
	}
	return 0
}

func (m *S2C_GuadraticBossUseSkill) GetBossId() int32 {
	if m != nil && m.BossId != nil {
		return *m.BossId
	}
	return 0
}

func (m *S2C_GuadraticBossUseSkill) GetSkillId() int32 {
	if m != nil && m.SkillId != nil {
		return *m.SkillId
	}
	return 0
}

func (m *S2C_GuadraticBossUseSkill) GetHurt() int32 {
	if m != nil && m.Hurt != nil {
		return *m.Hurt
	}
	return 0
}

func (m *S2C_GuadraticBossUseSkill) GetHurtRect() *LuaPosRect {
	if m != nil {
		return m.HurtRect
	}
	return nil
}

type C2S_SellBagThing struct {
	RoleIndex            *int64      `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	EquipList            []*SellInfo `protobuf:"bytes,2,rep,name=equip_list" json:"equip_list,omitempty"`
	ItemList             []*SellInfo `protobuf:"bytes,3,rep,name=item_list" json:"item_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *C2S_SellBagThing) Reset()         { *m = C2S_SellBagThing{} }
func (m *C2S_SellBagThing) String() string { return proto.CompactTextString(m) }
func (*C2S_SellBagThing) ProtoMessage()    {}
func (*C2S_SellBagThing) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{463}
}
func (m *C2S_SellBagThing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SellBagThing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SellBagThing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SellBagThing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SellBagThing.Merge(m, src)
}
func (m *C2S_SellBagThing) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SellBagThing) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SellBagThing.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SellBagThing proto.InternalMessageInfo

func (m *C2S_SellBagThing) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SellBagThing) GetEquipList() []*SellInfo {
	if m != nil {
		return m.EquipList
	}
	return nil
}

func (m *C2S_SellBagThing) GetItemList() []*SellInfo {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type S2C_SellBagThing struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SellBagThing) Reset()         { *m = S2C_SellBagThing{} }
func (m *S2C_SellBagThing) String() string { return proto.CompactTextString(m) }
func (*S2C_SellBagThing) ProtoMessage()    {}
func (*S2C_SellBagThing) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{464}
}
func (m *S2C_SellBagThing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SellBagThing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SellBagThing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SellBagThing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SellBagThing.Merge(m, src)
}
func (m *S2C_SellBagThing) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SellBagThing) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SellBagThing.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SellBagThing proto.InternalMessageInfo

func (m *S2C_SellBagThing) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 氪石兑换
type C2S_StoneExchange struct {
	RoleIndex            *int64      `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Want                 *ItemConfig `protobuf:"bytes,2,opt,name=want" json:"want,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *C2S_StoneExchange) Reset()         { *m = C2S_StoneExchange{} }
func (m *C2S_StoneExchange) String() string { return proto.CompactTextString(m) }
func (*C2S_StoneExchange) ProtoMessage()    {}
func (*C2S_StoneExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{465}
}
func (m *C2S_StoneExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_StoneExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_StoneExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_StoneExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_StoneExchange.Merge(m, src)
}
func (m *C2S_StoneExchange) XXX_Size() int {
	return m.Size()
}
func (m *C2S_StoneExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_StoneExchange.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_StoneExchange proto.InternalMessageInfo

func (m *C2S_StoneExchange) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_StoneExchange) GetWant() *ItemConfig {
	if m != nil {
		return m.Want
	}
	return nil
}

type S2C_StoneExchange struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_StoneExchange) Reset()         { *m = S2C_StoneExchange{} }
func (m *S2C_StoneExchange) String() string { return proto.CompactTextString(m) }
func (*S2C_StoneExchange) ProtoMessage()    {}
func (*S2C_StoneExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{466}
}
func (m *S2C_StoneExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_StoneExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_StoneExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_StoneExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_StoneExchange.Merge(m, src)
}
func (m *S2C_StoneExchange) XXX_Size() int {
	return m.Size()
}
func (m *S2C_StoneExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_StoneExchange.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_StoneExchange proto.InternalMessageInfo

func (m *S2C_StoneExchange) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 首充信息
type C2S_FirstMonery struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FirstMonery) Reset()         { *m = C2S_FirstMonery{} }
func (m *C2S_FirstMonery) String() string { return proto.CompactTextString(m) }
func (*C2S_FirstMonery) ProtoMessage()    {}
func (*C2S_FirstMonery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{467}
}
func (m *C2S_FirstMonery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FirstMonery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FirstMonery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FirstMonery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FirstMonery.Merge(m, src)
}
func (m *C2S_FirstMonery) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FirstMonery) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FirstMonery.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FirstMonery proto.InternalMessageInfo

func (m *C2S_FirstMonery) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_FirstMonery struct {
	FirstFlag            *int32        `protobuf:"zigzag32,1,opt,name=first_flag" json:"first_flag,omitempty"`
	RewardList           []*ItemConfig `protobuf:"bytes,2,rep,name=reward_list" json:"reward_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_FirstMonery) Reset()         { *m = S2C_FirstMonery{} }
func (m *S2C_FirstMonery) String() string { return proto.CompactTextString(m) }
func (*S2C_FirstMonery) ProtoMessage()    {}
func (*S2C_FirstMonery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{468}
}
func (m *S2C_FirstMonery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FirstMonery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FirstMonery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FirstMonery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FirstMonery.Merge(m, src)
}
func (m *S2C_FirstMonery) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FirstMonery) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FirstMonery.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FirstMonery proto.InternalMessageInfo

func (m *S2C_FirstMonery) GetFirstFlag() int32 {
	if m != nil && m.FirstFlag != nil {
		return *m.FirstFlag
	}
	return 0
}

func (m *S2C_FirstMonery) GetRewardList() []*ItemConfig {
	if m != nil {
		return m.RewardList
	}
	return nil
}

// 领取首充礼包
type C2S_GetFirstMonery struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetFirstMonery) Reset()         { *m = C2S_GetFirstMonery{} }
func (m *C2S_GetFirstMonery) String() string { return proto.CompactTextString(m) }
func (*C2S_GetFirstMonery) ProtoMessage()    {}
func (*C2S_GetFirstMonery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{469}
}
func (m *C2S_GetFirstMonery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetFirstMonery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetFirstMonery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetFirstMonery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetFirstMonery.Merge(m, src)
}
func (m *C2S_GetFirstMonery) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetFirstMonery) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetFirstMonery.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetFirstMonery proto.InternalMessageInfo

func (m *C2S_GetFirstMonery) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GetFirstMonery struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetFirstMonery) Reset()         { *m = S2C_GetFirstMonery{} }
func (m *S2C_GetFirstMonery) String() string { return proto.CompactTextString(m) }
func (*S2C_GetFirstMonery) ProtoMessage()    {}
func (*S2C_GetFirstMonery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{470}
}
func (m *S2C_GetFirstMonery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetFirstMonery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetFirstMonery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetFirstMonery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetFirstMonery.Merge(m, src)
}
func (m *S2C_GetFirstMonery) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetFirstMonery) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetFirstMonery.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetFirstMonery proto.InternalMessageInfo

func (m *S2C_GetFirstMonery) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 限时活动
type S2C_OtherRechargeInfo struct {
	RewardList           []*ItemConfig `protobuf:"bytes,1,rep,name=reward_list" json:"reward_list,omitempty"`
	CostList             []*ItemConfig `protobuf:"bytes,2,rep,name=cost_list" json:"cost_list,omitempty"`
	StartTime            *int64        `protobuf:"zigzag64,3,opt,name=start_time" json:"start_time,omitempty"`
	EndTime              *int64        `protobuf:"zigzag64,4,opt,name=end_time" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_OtherRechargeInfo) Reset()         { *m = S2C_OtherRechargeInfo{} }
func (m *S2C_OtherRechargeInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_OtherRechargeInfo) ProtoMessage()    {}
func (*S2C_OtherRechargeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{471}
}
func (m *S2C_OtherRechargeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_OtherRechargeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_OtherRechargeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_OtherRechargeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_OtherRechargeInfo.Merge(m, src)
}
func (m *S2C_OtherRechargeInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_OtherRechargeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_OtherRechargeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_OtherRechargeInfo proto.InternalMessageInfo

func (m *S2C_OtherRechargeInfo) GetRewardList() []*ItemConfig {
	if m != nil {
		return m.RewardList
	}
	return nil
}

func (m *S2C_OtherRechargeInfo) GetCostList() []*ItemConfig {
	if m != nil {
		return m.CostList
	}
	return nil
}

func (m *S2C_OtherRechargeInfo) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *S2C_OtherRechargeInfo) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

// 获取限时活动奖励
type C2S_GetOtherRechargeReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetOtherRechargeReward) Reset()         { *m = C2S_GetOtherRechargeReward{} }
func (m *C2S_GetOtherRechargeReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetOtherRechargeReward) ProtoMessage()    {}
func (*C2S_GetOtherRechargeReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{472}
}
func (m *C2S_GetOtherRechargeReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetOtherRechargeReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetOtherRechargeReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetOtherRechargeReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetOtherRechargeReward.Merge(m, src)
}
func (m *C2S_GetOtherRechargeReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetOtherRechargeReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetOtherRechargeReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetOtherRechargeReward proto.InternalMessageInfo

func (m *C2S_GetOtherRechargeReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GetOtherRechargeReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetOtherRechargeReward) Reset()         { *m = S2C_GetOtherRechargeReward{} }
func (m *S2C_GetOtherRechargeReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetOtherRechargeReward) ProtoMessage()    {}
func (*S2C_GetOtherRechargeReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{473}
}
func (m *S2C_GetOtherRechargeReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetOtherRechargeReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetOtherRechargeReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetOtherRechargeReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetOtherRechargeReward.Merge(m, src)
}
func (m *S2C_GetOtherRechargeReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetOtherRechargeReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetOtherRechargeReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetOtherRechargeReward proto.InternalMessageInfo

func (m *S2C_GetOtherRechargeReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 微信分享奖励
type C2S_ShareToWeixin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ChapterId            *int32   `protobuf:"zigzag32,2,opt,name=chapter_id" json:"chapter_id,omitempty"`
	RiskId               *int32   `protobuf:"zigzag32,3,opt,name=risk_id" json:"risk_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ShareToWeixin) Reset()         { *m = C2S_ShareToWeixin{} }
func (m *C2S_ShareToWeixin) String() string { return proto.CompactTextString(m) }
func (*C2S_ShareToWeixin) ProtoMessage()    {}
func (*C2S_ShareToWeixin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{474}
}
func (m *C2S_ShareToWeixin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ShareToWeixin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ShareToWeixin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ShareToWeixin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ShareToWeixin.Merge(m, src)
}
func (m *C2S_ShareToWeixin) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ShareToWeixin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ShareToWeixin.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ShareToWeixin proto.InternalMessageInfo

func (m *C2S_ShareToWeixin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ShareToWeixin) GetChapterId() int32 {
	if m != nil && m.ChapterId != nil {
		return *m.ChapterId
	}
	return 0
}

func (m *C2S_ShareToWeixin) GetRiskId() int32 {
	if m != nil && m.RiskId != nil {
		return *m.RiskId
	}
	return 0
}

// 查询是否可以分享
type C2S_IfShareRisk struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ChapterId            *int32   `protobuf:"zigzag32,2,opt,name=chapter_id" json:"chapter_id,omitempty"`
	RiskId               *int32   `protobuf:"zigzag32,3,opt,name=risk_id" json:"risk_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_IfShareRisk) Reset()         { *m = C2S_IfShareRisk{} }
func (m *C2S_IfShareRisk) String() string { return proto.CompactTextString(m) }
func (*C2S_IfShareRisk) ProtoMessage()    {}
func (*C2S_IfShareRisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{475}
}
func (m *C2S_IfShareRisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_IfShareRisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_IfShareRisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_IfShareRisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_IfShareRisk.Merge(m, src)
}
func (m *C2S_IfShareRisk) XXX_Size() int {
	return m.Size()
}
func (m *C2S_IfShareRisk) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_IfShareRisk.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_IfShareRisk proto.InternalMessageInfo

func (m *C2S_IfShareRisk) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_IfShareRisk) GetChapterId() int32 {
	if m != nil && m.ChapterId != nil {
		return *m.ChapterId
	}
	return 0
}

func (m *C2S_IfShareRisk) GetRiskId() int32 {
	if m != nil && m.RiskId != nil {
		return *m.RiskId
	}
	return 0
}

type S2C_IfShareRisk struct {
	Result               *bool    `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_IfShareRisk) Reset()         { *m = S2C_IfShareRisk{} }
func (m *S2C_IfShareRisk) String() string { return proto.CompactTextString(m) }
func (*S2C_IfShareRisk) ProtoMessage()    {}
func (*S2C_IfShareRisk) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{476}
}
func (m *S2C_IfShareRisk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_IfShareRisk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_IfShareRisk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_IfShareRisk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_IfShareRisk.Merge(m, src)
}
func (m *S2C_IfShareRisk) XXX_Size() int {
	return m.Size()
}
func (m *S2C_IfShareRisk) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_IfShareRisk.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_IfShareRisk proto.InternalMessageInfo

func (m *S2C_IfShareRisk) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

// 客户端发协议null
type S2C_AreYouKidding struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_AreYouKidding) Reset()         { *m = S2C_AreYouKidding{} }
func (m *S2C_AreYouKidding) String() string { return proto.CompactTextString(m) }
func (*S2C_AreYouKidding) ProtoMessage()    {}
func (*S2C_AreYouKidding) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{477}
}
func (m *S2C_AreYouKidding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AreYouKidding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AreYouKidding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AreYouKidding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AreYouKidding.Merge(m, src)
}
func (m *S2C_AreYouKidding) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AreYouKidding) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AreYouKidding.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AreYouKidding proto.InternalMessageInfo

func (m *S2C_AreYouKidding) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BattlePlayerGroup struct {
	PlayerList           []*BattlePlayerInfo `protobuf:"bytes,1,rep,name=player_list" json:"player_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BattlePlayerGroup) Reset()         { *m = BattlePlayerGroup{} }
func (m *BattlePlayerGroup) String() string { return proto.CompactTextString(m) }
func (*BattlePlayerGroup) ProtoMessage()    {}
func (*BattlePlayerGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{478}
}
func (m *BattlePlayerGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattlePlayerGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattlePlayerGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattlePlayerGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattlePlayerGroup.Merge(m, src)
}
func (m *BattlePlayerGroup) XXX_Size() int {
	return m.Size()
}
func (m *BattlePlayerGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_BattlePlayerGroup.DiscardUnknown(m)
}

var xxx_messageInfo_BattlePlayerGroup proto.InternalMessageInfo

func (m *BattlePlayerGroup) GetPlayerList() []*BattlePlayerInfo {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

// PVE战斗数据
type BattlePVEData struct {
	Version              *uint32           `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Randomseed           []byte            `protobuf:"bytes,2,opt,name=randomseed" json:"randomseed,omitempty"`
	ChapterID            *uint32           `protobuf:"varint,3,opt,name=chapterID" json:"chapterID,omitempty"`
	RiskID               *uint32           `protobuf:"varint,4,opt,name=riskID" json:"riskID,omitempty"`
	MainHero             *BattlePlayerInfo `protobuf:"bytes,5,opt,name=main_hero" json:"main_hero,omitempty"`
	Friend               *BattlePlayerInfo `protobuf:"bytes,6,opt,name=friend" json:"friend,omitempty"`
	Pet                  *PetInfo          `protobuf:"bytes,7,opt,name=pet" json:"pet,omitempty"`
	FaceCount            *uint32           `protobuf:"varint,8,opt,name=face_count" json:"face_count,omitempty"`
	FaceList             []uint32          `protobuf:"varint,9,rep,name=face_list" json:"face_list,omitempty"`
	PassRiskData         *C2S_PassRisk     `protobuf:"bytes,10,opt,name=pass_risk_data" json:"pass_risk_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BattlePVEData) Reset()         { *m = BattlePVEData{} }
func (m *BattlePVEData) String() string { return proto.CompactTextString(m) }
func (*BattlePVEData) ProtoMessage()    {}
func (*BattlePVEData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{479}
}
func (m *BattlePVEData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattlePVEData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattlePVEData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattlePVEData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattlePVEData.Merge(m, src)
}
func (m *BattlePVEData) XXX_Size() int {
	return m.Size()
}
func (m *BattlePVEData) XXX_DiscardUnknown() {
	xxx_messageInfo_BattlePVEData.DiscardUnknown(m)
}

var xxx_messageInfo_BattlePVEData proto.InternalMessageInfo

func (m *BattlePVEData) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BattlePVEData) GetRandomseed() []byte {
	if m != nil {
		return m.Randomseed
	}
	return nil
}

func (m *BattlePVEData) GetChapterID() uint32 {
	if m != nil && m.ChapterID != nil {
		return *m.ChapterID
	}
	return 0
}

func (m *BattlePVEData) GetRiskID() uint32 {
	if m != nil && m.RiskID != nil {
		return *m.RiskID
	}
	return 0
}

func (m *BattlePVEData) GetMainHero() *BattlePlayerInfo {
	if m != nil {
		return m.MainHero
	}
	return nil
}

func (m *BattlePVEData) GetFriend() *BattlePlayerInfo {
	if m != nil {
		return m.Friend
	}
	return nil
}

func (m *BattlePVEData) GetPet() *PetInfo {
	if m != nil {
		return m.Pet
	}
	return nil
}

func (m *BattlePVEData) GetFaceCount() uint32 {
	if m != nil && m.FaceCount != nil {
		return *m.FaceCount
	}
	return 0
}

func (m *BattlePVEData) GetFaceList() []uint32 {
	if m != nil {
		return m.FaceList
	}
	return nil
}

func (m *BattlePVEData) GetPassRiskData() *C2S_PassRisk {
	if m != nil {
		return m.PassRiskData
	}
	return nil
}

type BattlePVEVerifyResult struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BattlePVEVerifyResult) Reset()         { *m = BattlePVEVerifyResult{} }
func (m *BattlePVEVerifyResult) String() string { return proto.CompactTextString(m) }
func (*BattlePVEVerifyResult) ProtoMessage()    {}
func (*BattlePVEVerifyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{480}
}
func (m *BattlePVEVerifyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattlePVEVerifyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattlePVEVerifyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattlePVEVerifyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattlePVEVerifyResult.Merge(m, src)
}
func (m *BattlePVEVerifyResult) XXX_Size() int {
	return m.Size()
}
func (m *BattlePVEVerifyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BattlePVEVerifyResult.DiscardUnknown(m)
}

var xxx_messageInfo_BattlePVEVerifyResult proto.InternalMessageInfo

func (m *BattlePVEVerifyResult) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 扩充装备背包上限
type C2S_ExtendEquipBag struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ExtendEquipBag) Reset()         { *m = C2S_ExtendEquipBag{} }
func (m *C2S_ExtendEquipBag) String() string { return proto.CompactTextString(m) }
func (*C2S_ExtendEquipBag) ProtoMessage()    {}
func (*C2S_ExtendEquipBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{481}
}
func (m *C2S_ExtendEquipBag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ExtendEquipBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ExtendEquipBag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ExtendEquipBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ExtendEquipBag.Merge(m, src)
}
func (m *C2S_ExtendEquipBag) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ExtendEquipBag) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ExtendEquipBag.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ExtendEquipBag proto.InternalMessageInfo

func (m *C2S_ExtendEquipBag) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ExtendEquipBag struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CurrBagSize          *int32          `protobuf:"zigzag32,2,opt,name=curr_bag_size" json:"curr_bag_size,omitempty"`
	CurrExtendCount      *int32          `protobuf:"zigzag32,3,opt,name=curr_extend_count" json:"curr_extend_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ExtendEquipBag) Reset()         { *m = S2C_ExtendEquipBag{} }
func (m *S2C_ExtendEquipBag) String() string { return proto.CompactTextString(m) }
func (*S2C_ExtendEquipBag) ProtoMessage()    {}
func (*S2C_ExtendEquipBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{482}
}
func (m *S2C_ExtendEquipBag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ExtendEquipBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ExtendEquipBag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ExtendEquipBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ExtendEquipBag.Merge(m, src)
}
func (m *S2C_ExtendEquipBag) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ExtendEquipBag) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ExtendEquipBag.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ExtendEquipBag proto.InternalMessageInfo

func (m *S2C_ExtendEquipBag) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ExtendEquipBag) GetCurrBagSize() int32 {
	if m != nil && m.CurrBagSize != nil {
		return *m.CurrBagSize
	}
	return 0
}

func (m *S2C_ExtendEquipBag) GetCurrExtendCount() int32 {
	if m != nil && m.CurrExtendCount != nil {
		return *m.CurrExtendCount
	}
	return 0
}

// 请求活动信息
type C2S_ActivityInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ActivityInfo) Reset()         { *m = C2S_ActivityInfo{} }
func (m *C2S_ActivityInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_ActivityInfo) ProtoMessage()    {}
func (*C2S_ActivityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{483}
}
func (m *C2S_ActivityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ActivityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ActivityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ActivityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ActivityInfo.Merge(m, src)
}
func (m *C2S_ActivityInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ActivityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ActivityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ActivityInfo proto.InternalMessageInfo

func (m *C2S_ActivityInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ActivityInfo struct {
	ActivityList         []*ActivityInfo `protobuf:"bytes,1,rep,name=activity_list" json:"activity_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ActivityInfo) Reset()         { *m = S2C_ActivityInfo{} }
func (m *S2C_ActivityInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_ActivityInfo) ProtoMessage()    {}
func (*S2C_ActivityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{484}
}
func (m *S2C_ActivityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ActivityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ActivityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ActivityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ActivityInfo.Merge(m, src)
}
func (m *S2C_ActivityInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ActivityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ActivityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ActivityInfo proto.InternalMessageInfo

func (m *S2C_ActivityInfo) GetActivityList() []*ActivityInfo {
	if m != nil {
		return m.ActivityList
	}
	return nil
}

// 获取相应活动奖励
type C2S_GetActivityReward struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	Id                   *int32   `protobuf:"zigzag32,2,opt,name=id" json:"id,omitempty"`
	Position             *int32   `protobuf:"zigzag32,3,opt,name=position" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetActivityReward) Reset()         { *m = C2S_GetActivityReward{} }
func (m *C2S_GetActivityReward) String() string { return proto.CompactTextString(m) }
func (*C2S_GetActivityReward) ProtoMessage()    {}
func (*C2S_GetActivityReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{485}
}
func (m *C2S_GetActivityReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetActivityReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetActivityReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetActivityReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetActivityReward.Merge(m, src)
}
func (m *C2S_GetActivityReward) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetActivityReward) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetActivityReward.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetActivityReward proto.InternalMessageInfo

func (m *C2S_GetActivityReward) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_GetActivityReward) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *C2S_GetActivityReward) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

type S2C_GetActivityReward struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetActivityReward) Reset()         { *m = S2C_GetActivityReward{} }
func (m *S2C_GetActivityReward) String() string { return proto.CompactTextString(m) }
func (*S2C_GetActivityReward) ProtoMessage()    {}
func (*S2C_GetActivityReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{486}
}
func (m *S2C_GetActivityReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetActivityReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetActivityReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetActivityReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetActivityReward.Merge(m, src)
}
func (m *S2C_GetActivityReward) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetActivityReward) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetActivityReward.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetActivityReward proto.InternalMessageInfo

func (m *S2C_GetActivityReward) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 指定活动进度更新
type S2C_ActivityInfoUpdate struct {
	ActivityList         []*ActivityInfo `protobuf:"bytes,1,rep,name=activity_list" json:"activity_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ActivityInfoUpdate) Reset()         { *m = S2C_ActivityInfoUpdate{} }
func (m *S2C_ActivityInfoUpdate) String() string { return proto.CompactTextString(m) }
func (*S2C_ActivityInfoUpdate) ProtoMessage()    {}
func (*S2C_ActivityInfoUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{487}
}
func (m *S2C_ActivityInfoUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ActivityInfoUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ActivityInfoUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ActivityInfoUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ActivityInfoUpdate.Merge(m, src)
}
func (m *S2C_ActivityInfoUpdate) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ActivityInfoUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ActivityInfoUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ActivityInfoUpdate proto.InternalMessageInfo

func (m *S2C_ActivityInfoUpdate) GetActivityList() []*ActivityInfo {
	if m != nil {
		return m.ActivityList
	}
	return nil
}

//抢钢琴座位
type C2S_PianoStart struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PianoStart) Reset()         { *m = C2S_PianoStart{} }
func (m *C2S_PianoStart) String() string { return proto.CompactTextString(m) }
func (*C2S_PianoStart) ProtoMessage()    {}
func (*C2S_PianoStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{488}
}
func (m *C2S_PianoStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PianoStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PianoStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PianoStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PianoStart.Merge(m, src)
}
func (m *C2S_PianoStart) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PianoStart) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PianoStart.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PianoStart proto.InternalMessageInfo

func (m *C2S_PianoStart) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_PianoStart struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	RoleIndex            *int64          `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_PianoStart) Reset()         { *m = S2C_PianoStart{} }
func (m *S2C_PianoStart) String() string { return proto.CompactTextString(m) }
func (*S2C_PianoStart) ProtoMessage()    {}
func (*S2C_PianoStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{489}
}
func (m *S2C_PianoStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PianoStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PianoStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PianoStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PianoStart.Merge(m, src)
}
func (m *S2C_PianoStart) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PianoStart) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PianoStart.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PianoStart proto.InternalMessageInfo

func (m *S2C_PianoStart) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_PianoStart) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

//弹奏钢琴
type C2S_PianoPlay struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NoteId               *int32   `protobuf:"zigzag32,2,opt,name=note_id" json:"note_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PianoPlay) Reset()         { *m = C2S_PianoPlay{} }
func (m *C2S_PianoPlay) String() string { return proto.CompactTextString(m) }
func (*C2S_PianoPlay) ProtoMessage()    {}
func (*C2S_PianoPlay) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{490}
}
func (m *C2S_PianoPlay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PianoPlay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PianoPlay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PianoPlay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PianoPlay.Merge(m, src)
}
func (m *C2S_PianoPlay) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PianoPlay) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PianoPlay.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PianoPlay proto.InternalMessageInfo

func (m *C2S_PianoPlay) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_PianoPlay) GetNoteId() int32 {
	if m != nil && m.NoteId != nil {
		return *m.NoteId
	}
	return 0
}

type S2C_PianoPlay struct {
	NoteId               *int32   `protobuf:"zigzag32,2,opt,name=note_id" json:"note_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_PianoPlay) Reset()         { *m = S2C_PianoPlay{} }
func (m *S2C_PianoPlay) String() string { return proto.CompactTextString(m) }
func (*S2C_PianoPlay) ProtoMessage()    {}
func (*S2C_PianoPlay) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{491}
}
func (m *S2C_PianoPlay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PianoPlay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PianoPlay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PianoPlay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PianoPlay.Merge(m, src)
}
func (m *S2C_PianoPlay) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PianoPlay) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PianoPlay.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PianoPlay proto.InternalMessageInfo

func (m *S2C_PianoPlay) GetNoteId() int32 {
	if m != nil && m.NoteId != nil {
		return *m.NoteId
	}
	return 0
}

//自己从钢琴的座位下来
type C2S_PianoEnd struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_PianoEnd) Reset()         { *m = C2S_PianoEnd{} }
func (m *C2S_PianoEnd) String() string { return proto.CompactTextString(m) }
func (*C2S_PianoEnd) ProtoMessage()    {}
func (*C2S_PianoEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{492}
}
func (m *C2S_PianoEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PianoEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PianoEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PianoEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PianoEnd.Merge(m, src)
}
func (m *C2S_PianoEnd) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PianoEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PianoEnd.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PianoEnd proto.InternalMessageInfo

func (m *C2S_PianoEnd) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_PianoEnd struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_PianoEnd) Reset()         { *m = S2C_PianoEnd{} }
func (m *S2C_PianoEnd) String() string { return proto.CompactTextString(m) }
func (*S2C_PianoEnd) ProtoMessage()    {}
func (*S2C_PianoEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{493}
}
func (m *S2C_PianoEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PianoEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PianoEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PianoEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PianoEnd.Merge(m, src)
}
func (m *S2C_PianoEnd) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PianoEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PianoEnd.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PianoEnd proto.InternalMessageInfo

func (m *S2C_PianoEnd) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

//下水道查询玩钢琴的玩家
type C2S_AskPianoStatus struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AskPianoStatus) Reset()         { *m = C2S_AskPianoStatus{} }
func (m *C2S_AskPianoStatus) String() string { return proto.CompactTextString(m) }
func (*C2S_AskPianoStatus) ProtoMessage()    {}
func (*C2S_AskPianoStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{494}
}
func (m *C2S_AskPianoStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AskPianoStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AskPianoStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AskPianoStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AskPianoStatus.Merge(m, src)
}
func (m *C2S_AskPianoStatus) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AskPianoStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AskPianoStatus.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AskPianoStatus proto.InternalMessageInfo

func (m *C2S_AskPianoStatus) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_AskPianoStatus struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_AskPianoStatus) Reset()         { *m = S2C_AskPianoStatus{} }
func (m *S2C_AskPianoStatus) String() string { return proto.CompactTextString(m) }
func (*S2C_AskPianoStatus) ProtoMessage()    {}
func (*S2C_AskPianoStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{495}
}
func (m *S2C_AskPianoStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AskPianoStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AskPianoStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AskPianoStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AskPianoStatus.Merge(m, src)
}
func (m *S2C_AskPianoStatus) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AskPianoStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AskPianoStatus.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AskPianoStatus proto.InternalMessageInfo

func (m *S2C_AskPianoStatus) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

// 包裹满的提示
type S2C_RoleBagFull struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_RoleBagFull) Reset()         { *m = S2C_RoleBagFull{} }
func (m *S2C_RoleBagFull) String() string { return proto.CompactTextString(m) }
func (*S2C_RoleBagFull) ProtoMessage()    {}
func (*S2C_RoleBagFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{496}
}
func (m *S2C_RoleBagFull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_RoleBagFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_RoleBagFull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_RoleBagFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_RoleBagFull.Merge(m, src)
}
func (m *S2C_RoleBagFull) XXX_Size() int {
	return m.Size()
}
func (m *S2C_RoleBagFull) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_RoleBagFull.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_RoleBagFull proto.InternalMessageInfo

func (m *S2C_RoleBagFull) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 装备制造
type C2S_EquipMake struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	MakeId               *int32   `protobuf:"zigzag32,2,opt,name=make_id" json:"make_id,omitempty"`
	CaseId               *int32   `protobuf:"zigzag32,3,opt,name=case_id" json:"case_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_EquipMake) Reset()         { *m = C2S_EquipMake{} }
func (m *C2S_EquipMake) String() string { return proto.CompactTextString(m) }
func (*C2S_EquipMake) ProtoMessage()    {}
func (*C2S_EquipMake) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{497}
}
func (m *C2S_EquipMake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_EquipMake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_EquipMake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_EquipMake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_EquipMake.Merge(m, src)
}
func (m *C2S_EquipMake) XXX_Size() int {
	return m.Size()
}
func (m *C2S_EquipMake) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_EquipMake.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_EquipMake proto.InternalMessageInfo

func (m *C2S_EquipMake) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_EquipMake) GetMakeId() int32 {
	if m != nil && m.MakeId != nil {
		return *m.MakeId
	}
	return 0
}

func (m *C2S_EquipMake) GetCaseId() int32 {
	if m != nil && m.CaseId != nil {
		return *m.CaseId
	}
	return 0
}

type S2C_EquipMake struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NewEquipId           *int32          `protobuf:"zigzag32,2,opt,name=new_equip_id" json:"new_equip_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_EquipMake) Reset()         { *m = S2C_EquipMake{} }
func (m *S2C_EquipMake) String() string { return proto.CompactTextString(m) }
func (*S2C_EquipMake) ProtoMessage()    {}
func (*S2C_EquipMake) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{498}
}
func (m *S2C_EquipMake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_EquipMake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_EquipMake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_EquipMake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_EquipMake.Merge(m, src)
}
func (m *S2C_EquipMake) XXX_Size() int {
	return m.Size()
}
func (m *S2C_EquipMake) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_EquipMake.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_EquipMake proto.InternalMessageInfo

func (m *S2C_EquipMake) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_EquipMake) GetNewEquipId() int32 {
	if m != nil && m.NewEquipId != nil {
		return *m.NewEquipId
	}
	return 0
}

// 查询小游戏购买相关信息
type C2S_GetMinigameBuyInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetMinigameBuyInfo) Reset()         { *m = C2S_GetMinigameBuyInfo{} }
func (m *C2S_GetMinigameBuyInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_GetMinigameBuyInfo) ProtoMessage()    {}
func (*C2S_GetMinigameBuyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{499}
}
func (m *C2S_GetMinigameBuyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetMinigameBuyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetMinigameBuyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetMinigameBuyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetMinigameBuyInfo.Merge(m, src)
}
func (m *C2S_GetMinigameBuyInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetMinigameBuyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetMinigameBuyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetMinigameBuyInfo proto.InternalMessageInfo

func (m *C2S_GetMinigameBuyInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GetMinigameBuyInfo struct {
	DayBuyCount          *int32   `protobuf:"zigzag32,1,opt,name=day_buy_count" json:"day_buy_count,omitempty"`
	GetFlag              *int32   `protobuf:"zigzag32,2,opt,name=get_flag" json:"get_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_GetMinigameBuyInfo) Reset()         { *m = S2C_GetMinigameBuyInfo{} }
func (m *S2C_GetMinigameBuyInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_GetMinigameBuyInfo) ProtoMessage()    {}
func (*S2C_GetMinigameBuyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{500}
}
func (m *S2C_GetMinigameBuyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetMinigameBuyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetMinigameBuyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetMinigameBuyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetMinigameBuyInfo.Merge(m, src)
}
func (m *S2C_GetMinigameBuyInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetMinigameBuyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetMinigameBuyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetMinigameBuyInfo proto.InternalMessageInfo

func (m *S2C_GetMinigameBuyInfo) GetDayBuyCount() int32 {
	if m != nil && m.DayBuyCount != nil {
		return *m.DayBuyCount
	}
	return 0
}

func (m *S2C_GetMinigameBuyInfo) GetGetFlag() int32 {
	if m != nil && m.GetFlag != nil {
		return *m.GetFlag
	}
	return 0
}

// 领取每日bit币
type C2S_GetDailyBitCoin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_GetDailyBitCoin) Reset()         { *m = C2S_GetDailyBitCoin{} }
func (m *C2S_GetDailyBitCoin) String() string { return proto.CompactTextString(m) }
func (*C2S_GetDailyBitCoin) ProtoMessage()    {}
func (*C2S_GetDailyBitCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{501}
}
func (m *C2S_GetDailyBitCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetDailyBitCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetDailyBitCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetDailyBitCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetDailyBitCoin.Merge(m, src)
}
func (m *C2S_GetDailyBitCoin) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetDailyBitCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetDailyBitCoin.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetDailyBitCoin proto.InternalMessageInfo

func (m *C2S_GetDailyBitCoin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_GetDailyBitCoin struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_GetDailyBitCoin) Reset()         { *m = S2C_GetDailyBitCoin{} }
func (m *S2C_GetDailyBitCoin) String() string { return proto.CompactTextString(m) }
func (*S2C_GetDailyBitCoin) ProtoMessage()    {}
func (*S2C_GetDailyBitCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{502}
}
func (m *S2C_GetDailyBitCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetDailyBitCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetDailyBitCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetDailyBitCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetDailyBitCoin.Merge(m, src)
}
func (m *S2C_GetDailyBitCoin) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetDailyBitCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetDailyBitCoin.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetDailyBitCoin proto.InternalMessageInfo

func (m *S2C_GetDailyBitCoin) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 买bit币
type C2S_BuyBitCoin struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BuyBitCoin) Reset()         { *m = C2S_BuyBitCoin{} }
func (m *C2S_BuyBitCoin) String() string { return proto.CompactTextString(m) }
func (*C2S_BuyBitCoin) ProtoMessage()    {}
func (*C2S_BuyBitCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{503}
}
func (m *C2S_BuyBitCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BuyBitCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BuyBitCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BuyBitCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BuyBitCoin.Merge(m, src)
}
func (m *C2S_BuyBitCoin) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BuyBitCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BuyBitCoin.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BuyBitCoin proto.InternalMessageInfo

func (m *C2S_BuyBitCoin) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_BuyBitCoin struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	DayBuyCount          *int32          `protobuf:"zigzag32,2,opt,name=day_buy_count" json:"day_buy_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BuyBitCoin) Reset()         { *m = S2C_BuyBitCoin{} }
func (m *S2C_BuyBitCoin) String() string { return proto.CompactTextString(m) }
func (*S2C_BuyBitCoin) ProtoMessage()    {}
func (*S2C_BuyBitCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6242feaa0058da9, []int{504}
}
func (m *S2C_BuyBitCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BuyBitCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BuyBitCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BuyBitCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BuyBitCoin.Merge(m, src)
}
func (m *S2C_BuyBitCoin) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BuyBitCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BuyBitCoin.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BuyBitCoin proto.InternalMessageInfo

func (m *S2C_BuyBitCoin) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_BuyBitCoin) GetDayBuyCount() int32 {
	if m != nil && m.DayBuyCount != nil {
		return *m.DayBuyCount
	}
	return 0
}

func init() {
	proto.RegisterType((*C2S_HeartBeat)(nil), "pbd.C2S_HeartBeat")
	proto.RegisterType((*C2S_GetServerId)(nil), "pbd.C2S_GetServerId")
	proto.RegisterType((*S2C_GetServerId)(nil), "pbd.S2C_GetServerId")
	proto.RegisterType((*C2S_CheckAccount)(nil), "pbd.C2S_CheckAccount")
	proto.RegisterType((*S2C_CheckAccount)(nil), "pbd.S2C_CheckAccount")
	proto.RegisterType((*C2S_Login)(nil), "pbd.C2S_Login")
	proto.RegisterType((*S2C_Login)(nil), "pbd.S2C_Login")
	proto.RegisterType((*C2S_Register)(nil), "pbd.C2S_Register")
	proto.RegisterType((*S2C_Register)(nil), "pbd.S2C_Register")
	proto.RegisterType((*C2S_RoleSum)(nil), "pbd.C2S_RoleSum")
	proto.RegisterType((*S2C_RoleSum)(nil), "pbd.S2C_RoleSum")
	proto.RegisterType((*C2S_ClearRole)(nil), "pbd.C2S_ClearRole")
	proto.RegisterType((*S2C_ClearRole)(nil), "pbd.S2C_ClearRole")
	proto.RegisterType((*C2S_RandNickName)(nil), "pbd.C2S_RandNickName")
	proto.RegisterType((*S2C_RandNickName)(nil), "pbd.S2C_RandNickName")
	proto.RegisterType((*C2S_CreateRole)(nil), "pbd.C2S_CreateRole")
	proto.RegisterType((*S2C_CreateRole)(nil), "pbd.S2C_CreateRole")
	proto.RegisterType((*C2S_RoleInfo)(nil), "pbd.C2S_RoleInfo")
	proto.RegisterType((*S2C_RoleInfo)(nil), "pbd.S2C_RoleInfo")
	proto.RegisterType((*C2S_ReadyEnterScene)(nil), "pbd.C2S_ReadyEnterScene")
	proto.RegisterType((*S2C_ReadyEnterScene)(nil), "pbd.S2C_ReadyEnterScene")
	proto.RegisterType((*C2S_EnterScene)(nil), "pbd.C2S_EnterScene")
	proto.RegisterType((*S2C_EnterScene)(nil), "pbd.S2C_EnterScene")
	proto.RegisterType((*C2S_BornEnterSceneOK)(nil), "pbd.C2S_BornEnterSceneOK")
	proto.RegisterType((*S2C_BornEnterSceneOK)(nil), "pbd.S2C_BornEnterSceneOK")
	proto.RegisterType((*S2S_ReadyChangeScene)(nil), "pbd.S2S_ReadyChangeScene")
	proto.RegisterType((*S2C_OffLine)(nil), "pbd.S2C_OffLine")
	proto.RegisterType((*C2S_Charset)(nil), "pbd.C2S_Charset")
	proto.RegisterType((*C2S_Heartbeat)(nil), "pbd.C2S_Heartbeat")
	proto.RegisterType((*S2C_Heartbeat)(nil), "pbd.S2C_Heartbeat")
	proto.RegisterType((*S2C_MaterialNotEnough)(nil), "pbd.S2C_MaterialNotEnough")
	proto.RegisterType((*C2S_GameCoin)(nil), "pbd.C2S_GameCoin")
	proto.RegisterType((*S2C_GameCoin)(nil), "pbd.S2C_GameCoin")
	proto.RegisterType((*C2S_DiamondCoin)(nil), "pbd.C2S_DiamondCoin")
	proto.RegisterType((*S2C_DiamondCoin)(nil), "pbd.S2C_DiamondCoin")
	proto.RegisterType((*C2S_Endurance)(nil), "pbd.C2S_Endurance")
	proto.RegisterType((*S2C_Endurance)(nil), "pbd.S2C_Endurance")
	proto.RegisterType((*S2C_RecoveryEndurance)(nil), "pbd.S2C_RecoveryEndurance")
	proto.RegisterType((*C2S_Exp)(nil), "pbd.C2S_Exp")
	proto.RegisterType((*S2C_Exp)(nil), "pbd.S2C_Exp")
	proto.RegisterType((*C2S_Level)(nil), "pbd.C2S_Level")
	proto.RegisterType((*S2C_Level)(nil), "pbd.S2C_Level")
	proto.RegisterType((*C2S_SkillPoint)(nil), "pbd.C2S_SkillPoint")
	proto.RegisterType((*S2C_SkillPoint)(nil), "pbd.S2C_SkillPoint")
	proto.RegisterType((*S2C_ArenaScore)(nil), "pbd.S2C_ArenaScore")
	proto.RegisterType((*S2C_Vip)(nil), "pbd.S2C_Vip")
	proto.RegisterType((*S2C_RoleInfo_EnterScene)(nil), "pbd.S2C_RoleInfo_EnterScene")
	proto.RegisterType((*S2C_BornRoleInfo_EnterScene)(nil), "pbd.S2C_BornRoleInfo_EnterScene")
	proto.RegisterType((*S2C_OtherRoleInfo_EnterScene)(nil), "pbd.S2C_OtherRoleInfo_EnterScene")
	proto.RegisterType((*S2C_ManyOtherRoleInfo_EnterScene)(nil), "pbd.S2C_ManyOtherRoleInfo_EnterScene")
	proto.RegisterType((*S2C_SyncRoleShowInfo)(nil), "pbd.S2C_SyncRoleShowInfo")
	proto.RegisterType((*SceneRoleinfo)(nil), "pbd.scene_roleinfo")
	proto.RegisterType((*S2C_BroadcastRoleShowInfo)(nil), "pbd.S2C_BroadcastRoleShowInfo")
	proto.RegisterType((*S2C_RoleInfo_LeaveScene)(nil), "pbd.S2C_RoleInfo_LeaveScene")
	proto.RegisterType((*C2S_Request_Move)(nil), "pbd.C2S_Request_Move")
	proto.RegisterType((*S2C_Request_Move)(nil), "pbd.S2C_Request_Move")
	proto.RegisterType((*C2S_Chat)(nil), "pbd.C2S_Chat")
	proto.RegisterType((*S2C_Chat)(nil), "pbd.S2C_Chat")
	proto.RegisterType((*C2S_Use_SPItem)(nil), "pbd.C2S_Use_SPItem")
	proto.RegisterType((*S2C_Use_SPItem)(nil), "pbd.S2C_Use_SPItem")
	proto.RegisterType((*C2S_Change_Scene)(nil), "pbd.C2S_Change_Scene")
	proto.RegisterType((*C2S_QuerySceneLineInfo)(nil), "pbd.C2S_QuerySceneLineInfo")
	proto.RegisterType((*S2C_QuerySceneLineInfo)(nil), "pbd.S2C_QuerySceneLineInfo")
	proto.RegisterType((*C2S_ChangeSceneLine)(nil), "pbd.C2S_ChangeSceneLine")
	proto.RegisterType((*S2C_ChangeSceneLine)(nil), "pbd.S2C_ChangeSceneLine")
	proto.RegisterType((*C2S_TransPortChangeScene)(nil), "pbd.C2S_TransPortChangeScene")
	proto.RegisterType((*S2C_TransPortChangeScene)(nil), "pbd.S2C_TransPortChangeScene")
	proto.RegisterType((*C2S_NPC_ChangeScene)(nil), "pbd.C2S_NPC_ChangeScene")
	proto.RegisterType((*S2C_NPC_ChangeScene)(nil), "pbd.S2C_NPC_ChangeScene")
	proto.RegisterType((*C2S_Bag_Item)(nil), "pbd.C2S_Bag_Item")
	proto.RegisterType((*S2C_Bag_Item)(nil), "pbd.S2C_Bag_Item")
	proto.RegisterType((*C2S_Use_Item)(nil), "pbd.C2S_Use_Item")
	proto.RegisterType((*S2C_Use_Item)(nil), "pbd.S2C_Use_Item")
	proto.RegisterType((*C2S_Sell_Item)(nil), "pbd.C2S_Sell_Item")
	proto.RegisterType((*S2C_Sell_Item)(nil), "pbd.S2C_Sell_Item")
	proto.RegisterType((*C2S_Sell_Equip)(nil), "pbd.C2S_Sell_Equip")
	proto.RegisterType((*S2C_Sell_Equip)(nil), "pbd.S2C_Sell_Equip")
	proto.RegisterType((*C2S_Bag_Equip)(nil), "pbd.C2S_Bag_Equip")
	proto.RegisterType((*S2C_Bag_Equip)(nil), "pbd.S2C_Bag_Equip")
	proto.RegisterType((*C2S_Dress_Equip)(nil), "pbd.C2S_Dress_Equip")
	proto.RegisterType((*S2C_Dress_Equip)(nil), "pbd.S2C_Dress_Equip")
	proto.RegisterType((*C2S_Role_Equip)(nil), "pbd.C2S_Role_Equip")
	proto.RegisterType((*S2C_Role_Equip)(nil), "pbd.S2C_Role_Equip")
	proto.RegisterType((*C2S_TakeOff_Equip)(nil), "pbd.C2S_TakeOff_Equip")
	proto.RegisterType((*S2C_TakeOff_Equip)(nil), "pbd.S2C_TakeOff_Equip")
	proto.RegisterType((*S2C_Bag_Item_Insert)(nil), "pbd.S2C_Bag_Item_Insert")
	proto.RegisterType((*S2C_Bag_Item_Remove)(nil), "pbd.S2C_Bag_Item_Remove")
	proto.RegisterType((*S2C_Bag_Equip_Insert)(nil), "pbd.S2C_Bag_Equip_Insert")
	proto.RegisterType((*S2C_Bag_Equip_Remove)(nil), "pbd.S2C_Bag_Equip_Remove")
	proto.RegisterType((*S2C_Bag_Item_Add)(nil), "pbd.S2C_Bag_Item_Add")
	proto.RegisterType((*S2C_Bag_Equip_Add)(nil), "pbd.S2C_Bag_Equip_Add")
	proto.RegisterType((*S2C_Bag_Equip_Update)(nil), "pbd.S2C_Bag_Equip_Update")
	proto.RegisterType((*S2C_Role_Equip_Update)(nil), "pbd.S2C_Role_Equip_Update")
	proto.RegisterType((*C2S_SuitShopInfo)(nil), "pbd.C2S_SuitShopInfo")
	proto.RegisterType((*S2C_SuitShopInfo)(nil), "pbd.S2C_SuitShopInfo")
	proto.RegisterType((*C2S_BuySuitInShop)(nil), "pbd.C2S_BuySuitInShop")
	proto.RegisterType((*S2C_BuySuitInShop)(nil), "pbd.S2C_BuySuitInShop")
	proto.RegisterType((*C2S_RoleSuitInfo)(nil), "pbd.C2S_RoleSuitInfo")
	proto.RegisterType((*S2C_RoleSuitInfo)(nil), "pbd.S2C_RoleSuitInfo")
	proto.RegisterType((*C2S_DressSuit)(nil), "pbd.C2S_DressSuit")
	proto.RegisterType((*S2C_DressSuit)(nil), "pbd.S2C_DressSuit")
	proto.RegisterType((*C2S_TakeOffSuit)(nil), "pbd.C2S_TakeOffSuit")
	proto.RegisterType((*S2C_TakeOffSuit)(nil), "pbd.S2C_TakeOffSuit")
	proto.RegisterType((*C2S_FaceShopInfo)(nil), "pbd.C2S_FaceShopInfo")
	proto.RegisterType((*S2C_FaceShopInfo)(nil), "pbd.S2C_FaceShopInfo")
	proto.RegisterType((*C2S_BuyFaceInShop)(nil), "pbd.C2S_BuyFaceInShop")
	proto.RegisterType((*S2C_BuyFaceInShop)(nil), "pbd.S2C_BuyFaceInShop")
	proto.RegisterType((*C2S_RoleFaceInfo)(nil), "pbd.C2S_RoleFaceInfo")
	proto.RegisterType((*S2C_RoleFaceInfo)(nil), "pbd.S2C_RoleFaceInfo")
	proto.RegisterType((*C2S_DressFace)(nil), "pbd.C2S_DressFace")
	proto.RegisterType((*S2C_DressFace)(nil), "pbd.S2C_DressFace")
	proto.RegisterType((*C2S_TakeOffFace)(nil), "pbd.C2S_TakeOffFace")
	proto.RegisterType((*S2C_TakeOffFace)(nil), "pbd.S2C_TakeOffFace")
	proto.RegisterType((*C2S_ManualUpdateFaceShop)(nil), "pbd.C2S_ManualUpdateFaceShop")
	proto.RegisterType((*S2C_ManualUpdateFaceShop)(nil), "pbd.S2C_ManualUpdateFaceShop")
	proto.RegisterType((*KillMonster)(nil), "pbd.kill_monster")
	proto.RegisterType((*C2S_PassRisk)(nil), "pbd.C2S_PassRisk")
	proto.RegisterType((*S2C_PassRisk)(nil), "pbd.S2C_PassRisk")
	proto.RegisterType((*C2S_OpenChapterBox)(nil), "pbd.C2S_OpenChapterBox")
	proto.RegisterType((*S2C_OpenChapterBox)(nil), "pbd.S2C_OpenChapterBox")
	proto.RegisterType((*C2S_OpenRiskBox)(nil), "pbd.C2S_OpenRiskBox")
	proto.RegisterType((*S2C_OpenRiskBox)(nil), "pbd.S2C_OpenRiskBox")
	proto.RegisterType((*C2S_ResetRiskFightCount)(nil), "pbd.C2S_ResetRiskFightCount")
	proto.RegisterType((*S2C_ResetRiskFightCount)(nil), "pbd.S2C_ResetRiskFightCount")
	proto.RegisterType((*C2S_ReadyEnterRisk)(nil), "pbd.C2S_ReadyEnterRisk")
	proto.RegisterType((*S2C_ReadyEnterRisk)(nil), "pbd.S2C_ReadyEnterRisk")
	proto.RegisterType((*S2C_FriendAssistTime)(nil), "pbd.S2C_FriendAssistTime")
	proto.RegisterType((*S2C_NPC_Add_RecordQueue)(nil), "pbd.S2C_NPC_Add_RecordQueue")
	proto.RegisterType((*S2C_NPC_Go_RecordQueue)(nil), "pbd.S2C_NPC_Go_RecordQueue")
	proto.RegisterType((*C2S_Select_Recommend_Friends)(nil), "pbd.C2S_Select_Recommend_Friends")
	proto.RegisterType((*S2C_Select_Recommend_Friends)(nil), "pbd.S2C_Select_Recommend_Friends")
	proto.RegisterType((*C2S_FindFriend)(nil), "pbd.C2S_FindFriend")
	proto.RegisterType((*S2C_FindFriend)(nil), "pbd.S2C_FindFriend")
	proto.RegisterType((*C2S_Add_Friend)(nil), "pbd.C2S_Add_Friend")
	proto.RegisterType((*S2C_Add_Friend)(nil), "pbd.S2C_Add_Friend")
	proto.RegisterType((*S2S_Add_Friend_Ret)(nil), "pbd.S2S_Add_Friend_Ret")
	proto.RegisterType((*C2S_Remove_Friend)(nil), "pbd.C2S_Remove_Friend")
	proto.RegisterType((*S2C_Remove_Friend)(nil), "pbd.S2C_Remove_Friend")
	proto.RegisterType((*S2S_Remove_Friend)(nil), "pbd.S2S_Remove_Friend")
	proto.RegisterType((*S2C_Request_Add_Friend)(nil), "pbd.S2C_Request_Add_Friend")
	proto.RegisterType((*C2S_Request_Add_Friend)(nil), "pbd.C2S_Request_Add_Friend")
	proto.RegisterType((*S2S_Friend_Online)(nil), "pbd.S2S_Friend_Online")
	proto.RegisterType((*S2C_Friend_Online)(nil), "pbd.S2C_Friend_Online")
	proto.RegisterType((*S2C_Friend_Offline)(nil), "pbd.S2C_Friend_Offline")
	proto.RegisterType((*C2S_ReadyEnterFriendFightScene)(nil), "pbd.C2S_ReadyEnterFriendFightScene")
	proto.RegisterType((*S2C_ReadyEnterFriendFightScene)(nil), "pbd.S2C_ReadyEnterFriendFightScene")
	proto.RegisterType((*C2S_Friend_Fight)(nil), "pbd.C2S_Friend_Fight")
	proto.RegisterType((*S2C_Friend_Fight)(nil), "pbd.S2C_Friend_Fight")
	proto.RegisterType((*C2S_CommonShopGoodsInfo)(nil), "pbd.C2S_CommonShopGoodsInfo")
	proto.RegisterType((*S2C_CommonShopGoodsInfo)(nil), "pbd.S2C_CommonShopGoodsInfo")
	proto.RegisterType((*C2S_ParkShop)(nil), "pbd.C2S_ParkShop")
	proto.RegisterType((*S2C_ParkShop)(nil), "pbd.S2C_ParkShop")
	proto.RegisterType((*C2S_BuyCommonShopGoods)(nil), "pbd.C2S_BuyCommonShopGoods")
	proto.RegisterType((*S2C_BuyCommonShopGoods)(nil), "pbd.S2C_BuyCommonShopGoods")
	proto.RegisterType((*C2S_Skill_Study)(nil), "pbd.C2S_Skill_Study")
	proto.RegisterType((*S2C_Skill_Study)(nil), "pbd.S2C_Skill_Study")
	proto.RegisterType((*C2S_Skill_LevelUp)(nil), "pbd.C2S_Skill_LevelUp")
	proto.RegisterType((*S2C_Skill_LevelUp)(nil), "pbd.S2C_Skill_LevelUp")
	proto.RegisterType((*C2S_Skill_DressTalent)(nil), "pbd.C2S_Skill_DressTalent")
	proto.RegisterType((*S2C_Skill_DressTalent)(nil), "pbd.S2C_Skill_DressTalent")
	proto.RegisterType((*C2S_Skill_TakeOffTalent)(nil), "pbd.C2S_Skill_TakeOffTalent")
	proto.RegisterType((*S2C_Skill_TakeOffTalent)(nil), "pbd.S2C_Skill_TakeOffTalent")
	proto.RegisterType((*C2S_Skill_DressBook)(nil), "pbd.C2S_Skill_DressBook")
	proto.RegisterType((*S2C_Skill_DressBook)(nil), "pbd.S2C_Skill_DressBook")
	proto.RegisterType((*C2S_Skill_TakeOffBook)(nil), "pbd.C2S_Skill_TakeOffBook")
	proto.RegisterType((*S2C_Skill_TakeOffBook)(nil), "pbd.S2C_Skill_TakeOffBook")
	proto.RegisterType((*C2S_Skill_ChangeBook)(nil), "pbd.C2S_Skill_ChangeBook")
	proto.RegisterType((*S2C_Skill_ChangeBook)(nil), "pbd.S2C_Skill_ChangeBook")
	proto.RegisterType((*C2S_PassMiniGame)(nil), "pbd.C2S_PassMiniGame")
	proto.RegisterType((*S2C_PassMiniGame)(nil), "pbd.S2C_PassMiniGame")
	proto.RegisterType((*C2S_QueryMiniGameRank)(nil), "pbd.C2S_QueryMiniGameRank")
	proto.RegisterType((*S2C_QueryMiniGameRank)(nil), "pbd.S2C_QueryMiniGameRank")
	proto.RegisterType((*C2S_QuerySelfGameRank)(nil), "pbd.C2S_QuerySelfGameRank")
	proto.RegisterType((*S2C_QuerySelfGameRank)(nil), "pbd.S2C_QuerySelfGameRank")
	proto.RegisterType((*C2S_PlayMiniGameAgain)(nil), "pbd.C2S_PlayMiniGameAgain")
	proto.RegisterType((*S2C_PlayMiniGameAgain)(nil), "pbd.S2C_PlayMiniGameAgain")
	proto.RegisterType((*C2S_SubmitMiniGameScore)(nil), "pbd.C2S_SubmitMiniGameScore")
	proto.RegisterType((*S2C_SubmitMiniGameScore)(nil), "pbd.S2C_SubmitMiniGameScore")
	proto.RegisterType((*C2S_ReadyEnterMiniGame)(nil), "pbd.C2S_ReadyEnterMiniGame")
	proto.RegisterType((*S2C_ReadyEnterMiniGame)(nil), "pbd.S2C_ReadyEnterMiniGame")
	proto.RegisterType((*C2S_InteractAct)(nil), "pbd.C2S_InteractAct")
	proto.RegisterType((*S2C_InteractAct)(nil), "pbd.S2C_InteractAct")
	proto.RegisterType((*C2S_SelfHiAct)(nil), "pbd.C2S_SelfHiAct")
	proto.RegisterType((*S2C_SelfHiAct)(nil), "pbd.S2C_SelfHiAct")
	proto.RegisterType((*C2S_BathroomInteract)(nil), "pbd.C2S_BathroomInteract")
	proto.RegisterType((*S2C_BathroomInteract)(nil), "pbd.S2C_BathroomInteract")
	proto.RegisterType((*S2S_BathroomInteract)(nil), "pbd.S2S_BathroomInteract")
	proto.RegisterType((*C2S_Dress_Card_PVE)(nil), "pbd.C2S_Dress_Card_PVE")
	proto.RegisterType((*S2C_Dress_Card_PVE)(nil), "pbd.S2C_Dress_Card_PVE")
	proto.RegisterType((*C2S_TakeOff_Card_PVE)(nil), "pbd.C2S_TakeOff_Card_PVE")
	proto.RegisterType((*S2C_TakeOff_Card_PVE)(nil), "pbd.S2C_TakeOff_Card_PVE")
	proto.RegisterType((*C2S_Dress_Card_PVP)(nil), "pbd.C2S_Dress_Card_PVP")
	proto.RegisterType((*S2C_Dress_Card_PVP)(nil), "pbd.S2C_Dress_Card_PVP")
	proto.RegisterType((*C2S_TakeOff_Card_PVP)(nil), "pbd.C2S_TakeOff_Card_PVP")
	proto.RegisterType((*S2C_TakeOff_Card_PVP)(nil), "pbd.S2C_TakeOff_Card_PVP")
	proto.RegisterType((*C2S_ArenaPlayers)(nil), "pbd.C2S_ArenaPlayers")
	proto.RegisterType((*S2C_ArenaPlayers)(nil), "pbd.S2C_ArenaPlayers")
	proto.RegisterType((*C2S_StopArena)(nil), "pbd.C2S_StopArena")
	proto.RegisterType((*C2S_Arena_NearSelf)(nil), "pbd.C2S_Arena_NearSelf")
	proto.RegisterType((*S2C_Arena_NearSelf)(nil), "pbd.S2C_Arena_NearSelf")
	proto.RegisterType((*C2S_ReadyEnterArenaScene)(nil), "pbd.C2S_ReadyEnterArenaScene")
	proto.RegisterType((*S2C_ReadyEnterArenaScene)(nil), "pbd.S2C_ReadyEnterArenaScene")
	proto.RegisterType((*C2S_RefreshArena)(nil), "pbd.C2S_RefreshArena")
	proto.RegisterType((*S2C_RefreshArena)(nil), "pbd.S2C_RefreshArena")
	proto.RegisterType((*C2S_ArenaInfo)(nil), "pbd.C2S_ArenaInfo")
	proto.RegisterType((*S2C_ArenaInfo)(nil), "pbd.S2C_ArenaInfo")
	proto.RegisterType((*C2S_ArenaFight)(nil), "pbd.C2S_ArenaFight")
	proto.RegisterType((*S2C_ArenaFight)(nil), "pbd.S2C_ArenaFight")
	proto.RegisterType((*C2S_ArenaFightEnd)(nil), "pbd.C2S_ArenaFightEnd")
	proto.RegisterType((*S2C_ArenaFightEnd)(nil), "pbd.S2C_ArenaFightEnd")
	proto.RegisterType((*C2S_FriendFightEnd)(nil), "pbd.C2S_FriendFightEnd")
	proto.RegisterType((*S2C_FriendFightEnd)(nil), "pbd.S2C_FriendFightEnd")
	proto.RegisterType((*S2C_HistoryRankReward)(nil), "pbd.S2C_HistoryRankReward")
	proto.RegisterType((*C2S_KillListInfo)(nil), "pbd.C2S_KillListInfo")
	proto.RegisterType((*S2C_KillListInfo)(nil), "pbd.S2C_KillListInfo")
	proto.RegisterType((*C2S_VisitingCard)(nil), "pbd.C2S_VisitingCard")
	proto.RegisterType((*S2C_VisitingCard)(nil), "pbd.S2C_VisitingCard")
	proto.RegisterType((*C2S_BuyArenaCount)(nil), "pbd.C2S_BuyArenaCount")
	proto.RegisterType((*S2C_BuyArenaCount)(nil), "pbd.S2C_BuyArenaCount")
	proto.RegisterType((*C2S_ClearArenaCD)(nil), "pbd.C2S_ClearArenaCD")
	proto.RegisterType((*S2C_ClearArenaCD)(nil), "pbd.S2C_ClearArenaCD")
	proto.RegisterType((*C2S_OpenStar)(nil), "pbd.C2S_OpenStar")
	proto.RegisterType((*S2C_OpenStar)(nil), "pbd.S2C_OpenStar")
	proto.RegisterType((*C2S_QueryRisenStar)(nil), "pbd.C2S_QueryRisenStar")
	proto.RegisterType((*S2C_QueryRisenStar)(nil), "pbd.S2C_QueryRisenStar")
	proto.RegisterType((*C2S_QueryLevelRankListInfo)(nil), "pbd.C2S_QueryLevelRankListInfo")
	proto.RegisterType((*S2C_QueryLevelRankListInfo)(nil), "pbd.S2C_QueryLevelRankListInfo")
	proto.RegisterType((*C2S_LevelRankLocationSelf)(nil), "pbd.C2S_LevelRankLocationSelf")
	proto.RegisterType((*S2C_LevelRankLocationSelf)(nil), "pbd.S2C_LevelRankLocationSelf")
	proto.RegisterType((*C2S_QueryArenaStar)(nil), "pbd.C2S_QueryArenaStar")
	proto.RegisterType((*S2C_QueryArenaStar)(nil), "pbd.S2C_QueryArenaStar")
	proto.RegisterType((*C2S_QueryArenaRankListInfo)(nil), "pbd.C2S_QueryArenaRankListInfo")
	proto.RegisterType((*S2C_QueryArenaRankListInfo)(nil), "pbd.S2C_QueryArenaRankListInfo")
	proto.RegisterType((*C2S_ArenaRankLocationSelf)(nil), "pbd.C2S_ArenaRankLocationSelf")
	proto.RegisterType((*S2C_ArenaRankLocationSelf)(nil), "pbd.S2C_ArenaRankLocationSelf")
	proto.RegisterType((*C2S_QueryDiamondRankInfo)(nil), "pbd.C2S_QueryDiamondRankInfo")
	proto.RegisterType((*S2C_QueryDiamondRankInfo)(nil), "pbd.S2C_QueryDiamondRankInfo")
	proto.RegisterType((*C2S_DiamondRankLocationInfo)(nil), "pbd.C2S_DiamondRankLocationInfo")
	proto.RegisterType((*S2C_DiamondRankLocationInfo)(nil), "pbd.S2C_DiamondRankLocationInfo")
	proto.RegisterType((*C2S_QueryKillRankInfo)(nil), "pbd.C2S_QueryKillRankInfo")
	proto.RegisterType((*S2C_QueryKillRankInfo)(nil), "pbd.S2C_QueryKillRankInfo")
	proto.RegisterType((*C2S_KillRankLocationInfo)(nil), "pbd.C2S_KillRankLocationInfo")
	proto.RegisterType((*S2C_KillRankLocationInfo)(nil), "pbd.S2C_KillRankLocationInfo")
	proto.RegisterType((*C2S_SwordInfo)(nil), "pbd.C2S_SwordInfo")
	proto.RegisterType((*S2C_SwordInfo)(nil), "pbd.S2C_SwordInfo")
	proto.RegisterType((*C2S_AddSwordCount)(nil), "pbd.C2S_AddSwordCount")
	proto.RegisterType((*S2C_AddSwordCount)(nil), "pbd.S2C_AddSwordCount")
	proto.RegisterType((*S2C_SyncSwordCount)(nil), "pbd.S2C_SyncSwordCount")
	proto.RegisterType((*C2S_SwordEnd)(nil), "pbd.C2S_SwordEnd")
	proto.RegisterType((*S2C_SwordEnd)(nil), "pbd.S2C_SwordEnd")
	proto.RegisterType((*C2S_SelectSwordEquip)(nil), "pbd.C2S_SelectSwordEquip")
	proto.RegisterType((*S2C_SelectSwordEquip)(nil), "pbd.S2C_SelectSwordEquip")
	proto.RegisterType((*C2S_SelectMountainGodEquip)(nil), "pbd.C2S_SelectMountainGodEquip")
	proto.RegisterType((*S2C_SelectMountainGodEquip)(nil), "pbd.S2C_SelectMountainGodEquip")
	proto.RegisterType((*C2S_DailyTask)(nil), "pbd.C2S_DailyTask")
	proto.RegisterType((*S2C_DailyTask)(nil), "pbd.S2C_DailyTask")
	proto.RegisterType((*C2S_DailyTaskReward)(nil), "pbd.C2S_DailyTaskReward")
	proto.RegisterType((*S2C_DailyTaskReward)(nil), "pbd.S2C_DailyTaskReward")
	proto.RegisterType((*C2S_DailyActivity)(nil), "pbd.C2S_DailyActivity")
	proto.RegisterType((*S2C_DailyActivity)(nil), "pbd.S2C_DailyActivity")
	proto.RegisterType((*S2C_DailyActivityValue)(nil), "pbd.S2C_DailyActivityValue")
	proto.RegisterType((*C2S_DailyActivityReward)(nil), "pbd.C2S_DailyActivityReward")
	proto.RegisterType((*S2C_DailyActivityReward)(nil), "pbd.S2C_DailyActivityReward")
	proto.RegisterType((*C2S_BuyStamina)(nil), "pbd.C2S_BuyStamina")
	proto.RegisterType((*S2C_BuyStamina)(nil), "pbd.S2C_BuyStamina")
	proto.RegisterType((*S2C_Mail_Have_New)(nil), "pbd.S2C_Mail_Have_New")
	proto.RegisterType((*C2S_Mail_Title)(nil), "pbd.C2S_Mail_Title")
	proto.RegisterType((*S2C_Mail_Title)(nil), "pbd.S2C_Mail_Title")
	proto.RegisterType((*C2S_Mail_Full)(nil), "pbd.C2S_Mail_Full")
	proto.RegisterType((*S2C_Mail_Full)(nil), "pbd.S2C_Mail_Full")
	proto.RegisterType((*S2S_Mail_Full)(nil), "pbd.S2S_Mail_Full")
	proto.RegisterType((*C2S_Mail_Read)(nil), "pbd.C2S_Mail_Read")
	proto.RegisterType((*S2C_Mail_Read)(nil), "pbd.S2C_Mail_Read")
	proto.RegisterType((*C2S_TodaySign)(nil), "pbd.C2S_TodaySign")
	proto.RegisterType((*S2C_TodaySign)(nil), "pbd.S2C_TodaySign")
	proto.RegisterType((*C2S_SignInfo)(nil), "pbd.C2S_SignInfo")
	proto.RegisterType((*S2C_SignInfo)(nil), "pbd.S2C_SignInfo")
	proto.RegisterType((*C2S_SignAction)(nil), "pbd.C2S_SignAction")
	proto.RegisterType((*S2C_SignAction)(nil), "pbd.S2C_SignAction")
	proto.RegisterType((*C2S_SignLottery)(nil), "pbd.C2S_SignLottery")
	proto.RegisterType((*S2C_SignLottery)(nil), "pbd.S2C_SignLottery")
	proto.RegisterType((*C2S_SignLotteryShow)(nil), "pbd.C2S_SignLotteryShow")
	proto.RegisterType((*S2C_SignLotteryShow)(nil), "pbd.S2C_SignLotteryShow")
	proto.RegisterType((*C2S_SevenDayInfo)(nil), "pbd.C2S_SevenDayInfo")
	proto.RegisterType((*S2C_SevenDayInfo)(nil), "pbd.S2C_SevenDayInfo")
	proto.RegisterType((*C2S_GetSevenDayReward)(nil), "pbd.C2S_GetSevenDayReward")
	proto.RegisterType((*S2C_GetSevenDayReward)(nil), "pbd.S2C_GetSevenDayReward")
	proto.RegisterType((*C2S_GMSetLevel)(nil), "pbd.C2S_GMSetLevel")
	proto.RegisterType((*S2C_GMSetLevel)(nil), "pbd.S2C_GMSetLevel")
	proto.RegisterType((*C2S_GMAddItem)(nil), "pbd.C2S_GMAddItem")
	proto.RegisterType((*S2C_GMAddItem)(nil), "pbd.S2C_GMAddItem")
	proto.RegisterType((*C2S_GMAddCoin)(nil), "pbd.C2S_GMAddCoin")
	proto.RegisterType((*S2C_GMAddCoin)(nil), "pbd.S2C_GMAddCoin")
	proto.RegisterType((*C2S_GMAddStimina)(nil), "pbd.C2S_GMAddStimina")
	proto.RegisterType((*S2C_GMAddStimina)(nil), "pbd.S2C_GMAddStimina")
	proto.RegisterType((*C2S_GMAddDiamond)(nil), "pbd.C2S_GMAddDiamond")
	proto.RegisterType((*S2C_GMAddDiamond)(nil), "pbd.S2C_GMAddDiamond")
	proto.RegisterType((*C2S_GMAddCaliburnCount)(nil), "pbd.C2S_GMAddCaliburnCount")
	proto.RegisterType((*S2C_GMAddCaliburnCount)(nil), "pbd.S2C_GMAddCaliburnCount")
	proto.RegisterType((*C2S_GMAddArenaCount)(nil), "pbd.C2S_GMAddArenaCount")
	proto.RegisterType((*S2C_GMAddArenaCount)(nil), "pbd.S2C_GMAddArenaCount")
	proto.RegisterType((*C2S_GMAddFace)(nil), "pbd.C2S_GMAddFace")
	proto.RegisterType((*S2C_GMAddFace)(nil), "pbd.S2C_GMAddFace")
	proto.RegisterType((*C2S_GMAddSuit)(nil), "pbd.C2S_GMAddSuit")
	proto.RegisterType((*S2C_GMAddSuit)(nil), "pbd.S2C_GMAddSuit")
	proto.RegisterType((*C2S_GMAddEquip)(nil), "pbd.C2S_GMAddEquip")
	proto.RegisterType((*S2C_GMAddEquip)(nil), "pbd.S2C_GMAddEquip")
	proto.RegisterType((*S2C_FunctionOpen)(nil), "pbd.S2C_FunctionOpen")
	proto.RegisterType((*C2S_FastTransfer)(nil), "pbd.C2S_FastTransfer")
	proto.RegisterType((*S2C_FastTransfer)(nil), "pbd.S2C_FastTransfer")
	proto.RegisterType((*C2S_EasterEggTransfer)(nil), "pbd.C2S_EasterEggTransfer")
	proto.RegisterType((*S2S_GetEasterEggTransfer)(nil), "pbd.S2S_GetEasterEggTransfer")
	proto.RegisterType((*S2C_EasterEggTransfer)(nil), "pbd.S2C_EasterEggTransfer")
	proto.RegisterType((*C2S_EquipStrongthen)(nil), "pbd.C2S_EquipStrongthen")
	proto.RegisterType((*S2C_EquipStrongthen)(nil), "pbd.S2C_EquipStrongthen")
	proto.RegisterType((*C2S_EquipStrongthenEquiped)(nil), "pbd.C2S_EquipStrongthenEquiped")
	proto.RegisterType((*S2C_EquipStrongthenEquiped)(nil), "pbd.S2C_EquipStrongthenEquiped")
	proto.RegisterType((*C2S_EquipResolve)(nil), "pbd.C2S_EquipResolve")
	proto.RegisterType((*S2C_EquipResolve)(nil), "pbd.S2C_EquipResolve")
	proto.RegisterType((*C2S_EquipFix)(nil), "pbd.C2S_EquipFix")
	proto.RegisterType((*S2C_EquipFix)(nil), "pbd.S2C_EquipFix")
	proto.RegisterType((*C2S_EquipFixEquiped)(nil), "pbd.C2S_EquipFixEquiped")
	proto.RegisterType((*S2C_EquipFixEquiped)(nil), "pbd.S2C_EquipFixEquiped")
	proto.RegisterType((*C2S_AskFixEquipsInfo)(nil), "pbd.C2S_AskFixEquipsInfo")
	proto.RegisterType((*S2C_AskFixEquipsInfo)(nil), "pbd.S2C_AskFixEquipsInfo")
	proto.RegisterType((*C2S_EquipFastFix)(nil), "pbd.C2S_EquipFastFix")
	proto.RegisterType((*S2C_EquipFastFix)(nil), "pbd.S2C_EquipFastFix")
	proto.RegisterType((*C2S_GetFixedEquip)(nil), "pbd.C2S_GetFixedEquip")
	proto.RegisterType((*S2C_GetFixedEquip)(nil), "pbd.S2C_GetFixedEquip")
	proto.RegisterType((*C2S_PointGoldInfo)(nil), "pbd.C2S_PointGoldInfo")
	proto.RegisterType((*S2C_PointGoldInfo)(nil), "pbd.S2C_PointGoldInfo")
	proto.RegisterType((*C2S_PointGold)(nil), "pbd.C2S_PointGold")
	proto.RegisterType((*S2C_PointGold)(nil), "pbd.S2C_PointGold")
	proto.RegisterType((*C2S_TouchPersonEasterEgg)(nil), "pbd.C2S_TouchPersonEasterEgg")
	proto.RegisterType((*S2C_TouchPersonEasterEgg)(nil), "pbd.S2C_TouchPersonEasterEgg")
	proto.RegisterType((*S2C_ResetPersonEasterEgg)(nil), "pbd.S2C_ResetPersonEasterEgg")
	proto.RegisterType((*S2S_GlobalEasterEggInfo)(nil), "pbd.S2S_GlobalEasterEggInfo")
	proto.RegisterType((*S2C_GlobalEasterEggInfo)(nil), "pbd.S2C_GlobalEasterEggInfo")
	proto.RegisterType((*C2S_TouchGlobalEasterEgg)(nil), "pbd.C2S_TouchGlobalEasterEgg")
	proto.RegisterType((*S2C_TouchGlobalEasterEgg)(nil), "pbd.S2C_TouchGlobalEasterEgg")
	proto.RegisterType((*C2S_RechargeMoneyInfo)(nil), "pbd.C2S_RechargeMoneyInfo")
	proto.RegisterType((*S2C_RechargeMoneyInfo)(nil), "pbd.S2C_RechargeMoneyInfo")
	proto.RegisterType((*C2S_RechargeMoney)(nil), "pbd.C2S_RechargeMoney")
	proto.RegisterType((*S2C_RechargeMoney)(nil), "pbd.S2C_RechargeMoney")
	proto.RegisterType((*S2C_VipDailyRewardFlag)(nil), "pbd.S2C_VipDailyRewardFlag")
	proto.RegisterType((*C2S_GetVipDailyReward)(nil), "pbd.C2S_GetVipDailyReward")
	proto.RegisterType((*S2C_GetVipDailyReward)(nil), "pbd.S2C_GetVipDailyReward")
	proto.RegisterType((*C2S_GetSpecialVipReward)(nil), "pbd.C2S_GetSpecialVipReward")
	proto.RegisterType((*S2C_GetSpecialVipReward)(nil), "pbd.S2C_GetSpecialVipReward")
	proto.RegisterType((*S2C_AddInterActTool)(nil), "pbd.S2C_AddInterActTool")
	proto.RegisterType((*S2C_RemoveInterActTool)(nil), "pbd.S2C_RemoveInterActTool")
	proto.RegisterType((*S2C_RemoveOwnerTool)(nil), "pbd.S2C_RemoveOwnerTool")
	proto.RegisterType((*S2C_BathhouseFightEnd)(nil), "pbd.S2C_BathhouseFightEnd")
	proto.RegisterType((*C2S_TouchManInBlack)(nil), "pbd.C2S_TouchManInBlack")
	proto.RegisterType((*S2C_TouchManInBlack)(nil), "pbd.S2C_TouchManInBlack")
	proto.RegisterType((*S2S_UseInterActTool)(nil), "pbd.S2S_UseInterActTool")
	proto.RegisterType((*C2S_PickUpInterActTool)(nil), "pbd.C2S_PickUpInterActTool")
	proto.RegisterType((*S2C_PickUpInterActTool)(nil), "pbd.S2C_PickUpInterActTool")
	proto.RegisterType((*S2C_BathFightStepInfo)(nil), "pbd.S2C_BathFightStepInfo")
	proto.RegisterType((*S2C_CanPlayWaterBall)(nil), "pbd.S2C_CanPlayWaterBall")
	proto.RegisterType((*C2S_BathStatusChange)(nil), "pbd.C2S_BathStatusChange")
	proto.RegisterType((*S2C_SyncBathPlayerInfo)(nil), "pbd.S2C_SyncBathPlayerInfo")
	proto.RegisterType((*C2S_PreferFace)(nil), "pbd.C2S_PreferFace")
	proto.RegisterType((*S2C_PreferFace)(nil), "pbd.S2C_PreferFace")
	proto.RegisterType((*C2S_FacePreferInfo)(nil), "pbd.C2S_FacePreferInfo")
	proto.RegisterType((*S2C_FacePreferInfo)(nil), "pbd.S2C_FacePreferInfo")
	proto.RegisterType((*C2S_OnOffFaceRandom)(nil), "pbd.C2S_OnOffFaceRandom")
	proto.RegisterType((*S2C_InteractEnergy)(nil), "pbd.S2C_InteractEnergy")
	proto.RegisterType((*C2S_InterActInfo)(nil), "pbd.C2S_InterActInfo")
	proto.RegisterType((*S2C_InterActInfo)(nil), "pbd.S2C_InterActInfo")
	proto.RegisterType((*C2S_QueryUnlockInfo)(nil), "pbd.C2S_QueryUnlockInfo")
	proto.RegisterType((*S2C_QueryUnlockInfo)(nil), "pbd.S2C_QueryUnlockInfo")
	proto.RegisterType((*C2S_UnlockInteract)(nil), "pbd.C2S_UnlockInteract")
	proto.RegisterType((*S2C_UnlockInteract)(nil), "pbd.S2C_UnlockInteract")
	proto.RegisterType((*C2S_DressInteract)(nil), "pbd.C2S_DressInteract")
	proto.RegisterType((*S2C_DressInteract)(nil), "pbd.S2C_DressInteract")
	proto.RegisterType((*C2S_TakeOffInteract)(nil), "pbd.C2S_TakeOffInteract")
	proto.RegisterType((*S2C_TakeOffInteract)(nil), "pbd.S2C_TakeOffInteract")
	proto.RegisterType((*C2S_ExChangeInteractHole)(nil), "pbd.C2S_ExChangeInteractHole")
	proto.RegisterType((*S2C_ExChangeInteractHole)(nil), "pbd.S2C_ExChangeInteractHole")
	proto.RegisterType((*C2S_InterActManualRewardInfo)(nil), "pbd.C2S_InterActManualRewardInfo")
	proto.RegisterType((*S2C_InterActManualRewardInfo)(nil), "pbd.S2C_InterActManualRewardInfo")
	proto.RegisterType((*C2S_GetInterActManualReward)(nil), "pbd.C2S_GetInterActManualReward")
	proto.RegisterType((*S2C_GetInterActManualReward)(nil), "pbd.S2C_GetInterActManualReward")
	proto.RegisterType((*C2S_VehicleCompose)(nil), "pbd.C2S_VehicleCompose")
	proto.RegisterType((*S2C_VehicleCompose)(nil), "pbd.S2C_VehicleCompose")
	proto.RegisterType((*C2S_EquipManualInfo)(nil), "pbd.C2S_EquipManualInfo")
	proto.RegisterType((*S2C_EquipManualInfo)(nil), "pbd.S2C_EquipManualInfo")
	proto.RegisterType((*C2S_GetEquipManualReward)(nil), "pbd.C2S_GetEquipManualReward")
	proto.RegisterType((*S2C_GetEquipManualReward)(nil), "pbd.S2C_GetEquipManualReward")
	proto.RegisterType((*C2S_NPCInteract)(nil), "pbd.C2S_NPCInteract")
	proto.RegisterType((*S2C_NPCInteract)(nil), "pbd.S2C_NPCInteract")
	proto.RegisterType((*C2S_InteractRedPoint)(nil), "pbd.C2S_InteractRedPoint")
	proto.RegisterType((*S2C_InteractRedPoint)(nil), "pbd.S2C_InteractRedPoint")
	proto.RegisterType((*C2S_FriendFightInfo)(nil), "pbd.C2S_FriendFightInfo")
	proto.RegisterType((*S2C_FriendFightInfo)(nil), "pbd.S2C_FriendFightInfo")
	proto.RegisterType((*C2S_UploadSystemConfig)(nil), "pbd.C2S_UploadSystemConfig")
	proto.RegisterType((*C2S_TouchEquip)(nil), "pbd.C2S_TouchEquip")
	proto.RegisterType((*C2S_TouchItem)(nil), "pbd.C2S_TouchItem")
	proto.RegisterType((*C2S_UploadForceGuideInfo)(nil), "pbd.C2S_UploadForceGuideInfo")
	proto.RegisterType((*S2C_UpdateFindwayGuideIndex)(nil), "pbd.S2C_UpdateFindwayGuideIndex")
	proto.RegisterType((*C2S_ExtendSkillHole)(nil), "pbd.C2S_ExtendSkillHole")
	proto.RegisterType((*S2C_ExtendSkillHole)(nil), "pbd.S2C_ExtendSkillHole")
	proto.RegisterType((*S2C_RoleCurrentSkills)(nil), "pbd.S2C_RoleCurrentSkills")
	proto.RegisterType((*S2C_EquipBroken)(nil), "pbd.S2C_EquipBroken")
	proto.RegisterType((*C2S_CustomFaceInfo)(nil), "pbd.C2S_CustomFaceInfo")
	proto.RegisterType((*S2C_CustomFaceInfo)(nil), "pbd.S2C_CustomFaceInfo")
	proto.RegisterType((*C2S_CanUploadImage)(nil), "pbd.C2S_CanUploadImage")
	proto.RegisterType((*S2C_CanUploadImage)(nil), "pbd.S2C_CanUploadImage")
	proto.RegisterType((*C2S_UploadImageInfo)(nil), "pbd.C2S_UploadImageInfo")
	proto.RegisterType((*S2S_UploadImageInfo)(nil), "pbd.S2S_UploadImageInfo")
	proto.RegisterType((*S2C_UploadImageInfo)(nil), "pbd.S2C_UploadImageInfo")
	proto.RegisterType((*C2S_DressCustomFace)(nil), "pbd.C2S_DressCustomFace")
	proto.RegisterType((*S2C_DressCustomFace)(nil), "pbd.S2C_DressCustomFace")
	proto.RegisterType((*C2S_TakeOffCustomFace)(nil), "pbd.C2S_TakeOffCustomFace")
	proto.RegisterType((*S2C_TakeOffCustomFace)(nil), "pbd.S2C_TakeOffCustomFace")
	proto.RegisterType((*C2S_DelelteCustomFace)(nil), "pbd.C2S_DelelteCustomFace")
	proto.RegisterType((*S2C_DelelteCustomFace)(nil), "pbd.S2C_DelelteCustomFace")
	proto.RegisterType((*S2C_CustomFaceAuditResult)(nil), "pbd.S2C_CustomFaceAuditResult")
	proto.RegisterType((*S2C_FaceUploadSuccess)(nil), "pbd.S2C_FaceUploadSuccess")
	proto.RegisterType((*C2S_RolePetInfo)(nil), "pbd.C2S_RolePetInfo")
	proto.RegisterType((*S2C_RolePetInfo)(nil), "pbd.S2C_RolePetInfo")
	proto.RegisterType((*C2S_SetPetFightStatus)(nil), "pbd.C2S_SetPetFightStatus")
	proto.RegisterType((*S2C_SetPetFightStatus)(nil), "pbd.S2C_SetPetFightStatus")
	proto.RegisterType((*C2S_PetEvolve)(nil), "pbd.C2S_PetEvolve")
	proto.RegisterType((*S2C_PetEvolve)(nil), "pbd.S2C_PetEvolve")
	proto.RegisterType((*C2S_PetTalentRebuild)(nil), "pbd.C2S_PetTalentRebuild")
	proto.RegisterType((*S2C_PetTalentRebuild)(nil), "pbd.S2C_PetTalentRebuild")
	proto.RegisterType((*C2S_FosterPet)(nil), "pbd.C2S_FosterPet")
	proto.RegisterType((*S2C_FosterPet)(nil), "pbd.S2C_FosterPet")
	proto.RegisterType((*S2C_PetAdd)(nil), "pbd.S2C_PetAdd")
	proto.RegisterType((*S2C_PetUpdate)(nil), "pbd.S2C_PetUpdate")
	proto.RegisterType((*S2C_SyncPetLevel)(nil), "pbd.S2C_SyncPetLevel")
	proto.RegisterType((*C2S_PetEatPill)(nil), "pbd.C2S_PetEatPill")
	proto.RegisterType((*S2C_PetEatPill)(nil), "pbd.S2C_PetEatPill")
	proto.RegisterType((*S2C_PetRefreshInfo)(nil), "pbd.S2C_PetRefreshInfo")
	proto.RegisterType((*C2S_RoleNabPet)(nil), "pbd.C2S_RoleNabPet")
	proto.RegisterType((*S2C_RoleNabPet)(nil), "pbd.S2C_RoleNabPet")
	proto.RegisterType((*S2C_HorseLight)(nil), "pbd.S2C_HorseLight")
	proto.RegisterType((*C2S_AssistantTipInfo)(nil), "pbd.C2S_AssistantTipInfo")
	proto.RegisterType((*S2C_AssistantTipInfo)(nil), "pbd.S2C_AssistantTipInfo")
	proto.RegisterType((*C2S_AssistantTipRead)(nil), "pbd.C2S_AssistantTipRead")
	proto.RegisterType((*C2S_NiuDanInfo)(nil), "pbd.C2S_NiuDanInfo")
	proto.RegisterType((*S2C_NiuDanInfo)(nil), "pbd.S2C_NiuDanInfo")
	proto.RegisterType((*C2S_TouchNiuDan)(nil), "pbd.C2S_TouchNiuDan")
	proto.RegisterType((*S2C_TouchNiuDan)(nil), "pbd.S2C_TouchNiuDan")
	proto.RegisterType((*C2S_ExchangeCode)(nil), "pbd.C2S_ExchangeCode")
	proto.RegisterType((*S2C_ExchangeCode)(nil), "pbd.S2C_ExchangeCode")
	proto.RegisterType((*S2C_ArchieveFinish)(nil), "pbd.S2C_ArchieveFinish")
	proto.RegisterType((*C2S_GetArchieveReward)(nil), "pbd.C2S_GetArchieveReward")
	proto.RegisterType((*S2C_GetArchieveReward)(nil), "pbd.S2C_GetArchieveReward")
	proto.RegisterType((*C2S_ArchieveInfo)(nil), "pbd.C2S_ArchieveInfo")
	proto.RegisterType((*S2C_ArchieveInfo)(nil), "pbd.S2C_ArchieveInfo")
	proto.RegisterType((*C2S_ReadyEnterGuadratic)(nil), "pbd.C2S_ReadyEnterGuadratic")
	proto.RegisterType((*S2C_ReadyEnterGuadratic)(nil), "pbd.S2C_ReadyEnterGuadratic")
	proto.RegisterType((*S2C_EnterGuadratic)(nil), "pbd.S2C_EnterGuadratic")
	proto.RegisterType((*S2C_GuadraticReady)(nil), "pbd.S2C_GuadraticReady")
	proto.RegisterType((*S2C_NextGuadraticDup)(nil), "pbd.S2C_NextGuadraticDup")
	proto.RegisterType((*S2C_GuadraticEnd)(nil), "pbd.S2C_GuadraticEnd")
	proto.RegisterType((*S2C_SyncGuadraticRoleHP)(nil), "pbd.S2C_SyncGuadraticRoleHP")
	proto.RegisterType((*S2C_SyncGuadraticRoleCD)(nil), "pbd.S2C_SyncGuadraticRoleCD")
	proto.RegisterType((*S2C_GuadraticBossEnter)(nil), "pbd.S2C_GuadraticBossEnter")
	proto.RegisterType((*S2C_GuadraticBossUseSkill)(nil), "pbd.S2C_GuadraticBossUseSkill")
	proto.RegisterType((*C2S_SellBagThing)(nil), "pbd.C2S_SellBagThing")
	proto.RegisterType((*S2C_SellBagThing)(nil), "pbd.S2C_SellBagThing")
	proto.RegisterType((*C2S_StoneExchange)(nil), "pbd.C2S_StoneExchange")
	proto.RegisterType((*S2C_StoneExchange)(nil), "pbd.S2C_StoneExchange")
	proto.RegisterType((*C2S_FirstMonery)(nil), "pbd.C2S_FirstMonery")
	proto.RegisterType((*S2C_FirstMonery)(nil), "pbd.S2C_FirstMonery")
	proto.RegisterType((*C2S_GetFirstMonery)(nil), "pbd.C2S_GetFirstMonery")
	proto.RegisterType((*S2C_GetFirstMonery)(nil), "pbd.S2C_GetFirstMonery")
	proto.RegisterType((*S2C_OtherRechargeInfo)(nil), "pbd.S2C_OtherRechargeInfo")
	proto.RegisterType((*C2S_GetOtherRechargeReward)(nil), "pbd.C2S_GetOtherRechargeReward")
	proto.RegisterType((*S2C_GetOtherRechargeReward)(nil), "pbd.S2C_GetOtherRechargeReward")
	proto.RegisterType((*C2S_ShareToWeixin)(nil), "pbd.C2S_ShareToWeixin")
	proto.RegisterType((*C2S_IfShareRisk)(nil), "pbd.C2S_IfShareRisk")
	proto.RegisterType((*S2C_IfShareRisk)(nil), "pbd.S2C_IfShareRisk")
	proto.RegisterType((*S2C_AreYouKidding)(nil), "pbd.S2C_AreYouKidding")
	proto.RegisterType((*BattlePlayerGroup)(nil), "pbd.BattlePlayerGroup")
	proto.RegisterType((*BattlePVEData)(nil), "pbd.BattlePVEData")
	proto.RegisterType((*BattlePVEVerifyResult)(nil), "pbd.BattlePVEVerifyResult")
	proto.RegisterType((*C2S_ExtendEquipBag)(nil), "pbd.C2S_ExtendEquipBag")
	proto.RegisterType((*S2C_ExtendEquipBag)(nil), "pbd.S2C_ExtendEquipBag")
	proto.RegisterType((*C2S_ActivityInfo)(nil), "pbd.C2S_ActivityInfo")
	proto.RegisterType((*S2C_ActivityInfo)(nil), "pbd.S2C_ActivityInfo")
	proto.RegisterType((*C2S_GetActivityReward)(nil), "pbd.C2S_GetActivityReward")
	proto.RegisterType((*S2C_GetActivityReward)(nil), "pbd.S2C_GetActivityReward")
	proto.RegisterType((*S2C_ActivityInfoUpdate)(nil), "pbd.S2C_ActivityInfoUpdate")
	proto.RegisterType((*C2S_PianoStart)(nil), "pbd.C2S_PianoStart")
	proto.RegisterType((*S2C_PianoStart)(nil), "pbd.S2C_PianoStart")
	proto.RegisterType((*C2S_PianoPlay)(nil), "pbd.C2S_PianoPlay")
	proto.RegisterType((*S2C_PianoPlay)(nil), "pbd.S2C_PianoPlay")
	proto.RegisterType((*C2S_PianoEnd)(nil), "pbd.C2S_PianoEnd")
	proto.RegisterType((*S2C_PianoEnd)(nil), "pbd.S2C_PianoEnd")
	proto.RegisterType((*C2S_AskPianoStatus)(nil), "pbd.C2S_AskPianoStatus")
	proto.RegisterType((*S2C_AskPianoStatus)(nil), "pbd.S2C_AskPianoStatus")
	proto.RegisterType((*S2C_RoleBagFull)(nil), "pbd.S2C_RoleBagFull")
	proto.RegisterType((*C2S_EquipMake)(nil), "pbd.C2S_EquipMake")
	proto.RegisterType((*S2C_EquipMake)(nil), "pbd.S2C_EquipMake")
	proto.RegisterType((*C2S_GetMinigameBuyInfo)(nil), "pbd.C2S_GetMinigameBuyInfo")
	proto.RegisterType((*S2C_GetMinigameBuyInfo)(nil), "pbd.S2C_GetMinigameBuyInfo")
	proto.RegisterType((*C2S_GetDailyBitCoin)(nil), "pbd.C2S_GetDailyBitCoin")
	proto.RegisterType((*S2C_GetDailyBitCoin)(nil), "pbd.S2C_GetDailyBitCoin")
	proto.RegisterType((*C2S_BuyBitCoin)(nil), "pbd.C2S_BuyBitCoin")
	proto.RegisterType((*S2C_BuyBitCoin)(nil), "pbd.S2C_BuyBitCoin")
}

func init() { proto.RegisterFile("Net_Game.proto", fileDescriptor_d6242feaa0058da9) }

var fileDescriptor_d6242feaa0058da9 = []byte{
	// 9635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x5d, 0x73, 0x24, 0xc7,
	0x91, 0x98, 0x07, 0x83, 0xcf, 0xc2, 0xe7, 0xcc, 0x7e, 0x81, 0x4b, 0x72, 0xb5, 0x6c, 0x89, 0xe4,
	0xee, 0x92, 0xe2, 0x92, 0x4b, 0x8a, 0xdf, 0x1f, 0x02, 0xb0, 0x58, 0x2c, 0xb8, 0x5f, 0x20, 0x06,
	0xbb, 0xe2, 0x87, 0xc4, 0x56, 0x61, 0xba, 0x66, 0xa6, 0x85, 0x9e, 0xee, 0xd9, 0xee, 0x1a, 0x00,
	0xa3, 0x53, 0x28, 0xec, 0xb3, 0xcf, 0x71, 0x17, 0x0e, 0x87, 0xfd, 0xe0, 0x8b, 0x90, 0x1d, 0xf7,
	0x62, 0x9f, 0xc3, 0xbe, 0xf0, 0x8b, 0x7f, 0x82, 0x5f, 0x1c, 0x61, 0xf9, 0x22, 0xec, 0xb8, 0x9f,
	0xa0, 0x90, 0x1f, 0xfd, 0xe0, 0xb7, 0x7b, 0x53, 0x84, 0xa3, 0x32, 0xab, 0xba, 0xab, 0x3f, 0x6a,
	0xa6, 0x07, 0x00, 0xa9, 0xe3, 0xd3, 0x2e, 0x7a, 0xb2, 0x32, 0xb3, 0xb2, 0xb2, 0xb2, 0xb2, 0xb2,
	0xb2, 0xb2, 0xc8, 0xd2, 0x43, 0xc6, 0xed, 0x2d, 0xda, 0x65, 0xaf, 0xf5, 0xc2, 0x80, 0x07, 0xf5,
	0x6a, 0x6f, 0xdf, 0xb9, 0xbc, 0xb8, 0xe9, 0xf7, 0xbb, 0xb7, 0x59, 0x0b, 0xbf, 0x5d, 0x5e, 0xda,
	0x11, 0xff, 0x24, 0x7f, 0x2f, 0x37, 0x9e, 0x7a, 0xf6, 0xfd, 0xa0, 0xed, 0xfa, 0xf8, 0xc1, 0x5a,
	0x26, 0x8b, 0x1b, 0xb7, 0x1a, 0xf6, 0x5d, 0x46, 0x43, 0xbe, 0xce, 0x28, 0xb7, 0x5e, 0x24, 0xcb,
	0xe2, 0xc3, 0x16, 0xe3, 0x0d, 0x16, 0x1e, 0xb2, 0x70, 0xdb, 0xa9, 0xd7, 0x09, 0x09, 0x03, 0x8f,
	0xd9, 0xae, 0xef, 0xb0, 0xe3, 0xd5, 0xca, 0xd5, 0xca, 0xb5, 0xba, 0xf5, 0x03, 0xb2, 0xdc, 0xb8,
	0xb5, 0x91, 0x02, 0xab, 0x91, 0xb9, 0x08, 0xfe, 0x6f, 0xbb, 0x0e, 0x40, 0xd5, 0xac, 0x47, 0x64,
	0x45, 0x20, 0xdb, 0xe8, 0xb0, 0xe6, 0xc1, 0x5a, 0xb3, 0x19, 0xf4, 0x7d, 0x5e, 0x5f, 0x26, 0x33,
	0x14, 0xff, 0x0b, 0x40, 0x0b, 0xf5, 0x0b, 0x64, 0x31, 0x64, 0xdc, 0xee, 0xfb, 0x2e, 0x47, 0x0a,
	0x13, 0x82, 0x42, 0xfd, 0x1c, 0x99, 0x17, 0x9f, 0x5d, 0x9f, 0x53, 0xc7, 0x09, 0x57, 0xab, 0x40,
	0xf6, 0x53, 0xb2, 0x22, 0xc8, 0xa6, 0x10, 0xbe, 0x48, 0x66, 0x05, 0x60, 0x33, 0x70, 0x18, 0x60,
	0x5c, 0xba, 0x75, 0xee, 0xb5, 0xde, 0xbe, 0xf3, 0xda, 0xa6, 0xfd, 0xa0, 0xb1, 0x65, 0xef, 0x6e,
	0xee, 0xd9, 0x1b, 0x8f, 0x6e, 0x6f, 0xea, 0x74, 0x05, 0x81, 0x05, 0xeb, 0x4b, 0x32, 0x27, 0x98,
	0x03, 0x69, 0xe4, 0xb9, 0x5a, 0x21, 0xb3, 0x3d, 0x1a, 0x45, 0x47, 0x41, 0xe8, 0x20, 0x7c, 0x9e,
	0xcf, 0x6a, 0x11, 0x9f, 0x93, 0xc0, 0x67, 0x8f, 0xcc, 0x09, 0x3e, 0x11, 0xf7, 0x09, 0x19, 0x14,
	0x98, 0xa5, 0x40, 0xb9, 0xdb, 0x65, 0x92, 0xdc, 0x45, 0xb2, 0xd4, 0x0a, 0xc2, 0x7d, 0xd7, 0x71,
	0x98, 0x8f, 0xdf, 0x91, 0xe2, 0xcf, 0xc8, 0x82, 0xe8, 0xcd, 0x2e, 0x6b, 0xbb, 0x11, 0x67, 0xe1,
	0x59, 0x77, 0xe8, 0x0e, 0x59, 0x10, 0x1d, 0x8a, 0xd1, 0x9f, 0x54, 0xe8, 0x9f, 0x92, 0x79, 0x60,
	0x33, 0xf0, 0x58, 0xa3, 0xdf, 0x3d, 0x9d, 0x32, 0xbc, 0x43, 0xe6, 0x81, 0x27, 0x13, 0xae, 0x4b,
	0x64, 0xd9, 0x73, 0x23, 0x6e, 0x6b, 0xca, 0x3b, 0x71, 0xb5, 0x7a, 0xad, 0x6e, 0xdd, 0x47, 0xa5,
	0xdf, 0xf0, 0x18, 0x0d, 0x45, 0xeb, 0xd3, 0xb1, 0x71, 0x93, 0x2c, 0x82, 0x4e, 0x9a, 0xb1, 0x2d,
	0x92, 0x29, 0x37, 0xb2, 0x83, 0x03, 0xc0, 0x32, 0xab, 0x66, 0xc5, 0x2e, 0xf5, 0x9d, 0x87, 0x6e,
	0xf3, 0xe0, 0x21, 0xed, 0x9e, 0x92, 0x83, 0x0f, 0x70, 0x56, 0x0c, 0x47, 0x78, 0x91, 0x2c, 0x81,
	0x34, 0x7c, 0xb7, 0x79, 0x60, 0xfb, 0xb4, 0xcb, 0x40, 0x18, 0x0b, 0xd6, 0xdf, 0x4f, 0x90, 0x25,
	0x90, 0x46, 0xc8, 0x28, 0x67, 0xd0, 0x81, 0x1a, 0x99, 0x4b, 0xa0, 0xb0, 0x75, 0x4e, 0x39, 0xeb,
	0x84, 0x38, 0xec, 0xd0, 0x6d, 0x32, 0xfb, 0x80, 0x0d, 0x80, 0x8f, 0x85, 0xfa, 0x79, 0xb2, 0x20,
	0xbf, 0xf1, 0xe0, 0x80, 0xf9, 0xa0, 0x3a, 0xa0, 0xc6, 0xea, 0xeb, 0xa0, 0xc7, 0x56, 0xa7, 0x54,
	0xf7, 0x7a, 0x1e, 0xe5, 0xad, 0x20, 0xec, 0xe2, 0xe7, 0x69, 0xf8, 0x5c, 0x23, 0x73, 0x1d, 0xe6,
	0x75, 0x45, 0x0f, 0x9d, 0xd5, 0x19, 0x61, 0x43, 0x04, 0xe5, 0x16, 0x6d, 0x32, 0xf1, 0x61, 0x16,
	0x3e, 0xd4, 0xc8, 0xdc, 0x11, 0xa3, 0xbd, 0xc0, 0x17, 0x9f, 0xe6, 0xe0, 0xd3, 0x79, 0xb2, 0x10,
	0x84, 0x82, 0x5b, 0x9f, 0x47, 0xe2, 0x2b, 0x81, 0xaf, 0x4b, 0x64, 0x9a, 0xb5, 0xdb, 0xe2, 0xef,
	0x79, 0xf5, 0x77, 0x9b, 0xf9, 0x0e, 0x0b, 0x57, 0x17, 0x14, 0xe6, 0x66, 0x87, 0xfa, 0x3e, 0xf3,
	0x56, 0x17, 0x81, 0xfa, 0x2b, 0x64, 0x4e, 0xea, 0x4a, 0x2b, 0x58, 0xbd, 0x72, 0xb5, 0x72, 0x6d,
	0xfe, 0xd6, 0x2a, 0x68, 0x75, 0xf4, 0xd4, 0xb3, 0x43, 0x16, 0xf5, 0x3d, 0x54, 0x26, 0xf1, 0x7b,
	0x7e, 0x80, 0xbe, 0x57, 0x34, 0x40, 0x57, 0xd5, 0x47, 0x37, 0xb2, 0x39, 0x8b, 0xb8, 0x7d, 0xe8,
	0xf6, 0x56, 0x5f, 0x00, 0x35, 0xf8, 0x8a, 0x2c, 0x81, 0xde, 0x24, 0x72, 0x2f, 0x39, 0xa9, 0x52,
	0xc3, 0x33, 0x91, 0x1d, 0x1e, 0x18, 0x0a, 0xeb, 0xd7, 0xd2, 0x1c, 0x04, 0x1e, 0xdb, 0x16, 0xdc,
	0xe6, 0xd4, 0x21, 0x6d, 0xd4, 0x51, 0xb9, 0xc6, 0x30, 0x08, 0xf5, 0xe7, 0xc9, 0x85, 0x56, 0x10,
	0x36, 0x99, 0x4d, 0x7b, 0x3d, 0x6f, 0x60, 0x27, 0x72, 0x9b, 0x82, 0xce, 0xfd, 0x5d, 0x45, 0x1a,
	0x8c, 0xb1, 0x18, 0x48, 0x0d, 0x40, 0x75, 0xf4, 0x00, 0x78, 0xc2, 0xbe, 0x66, 0x18, 0xbb, 0x40,
	0x16, 0xa3, 0x26, 0xf3, 0x59, 0xfc, 0x79, 0x0a, 0x3e, 0x3f, 0x43, 0x6a, 0xea, 0x73, 0xc4, 0xa9,
	0x8f, 0x0a, 0x35, 0x0d, 0x3f, 0xe9, 0x62, 0x9f, 0x31, 0x8a, 0xdd, 0x7a, 0x4a, 0xce, 0xa1, 0x85,
	0xa5, 0xce, 0x60, 0xd3, 0xe7, 0x2c, 0x6c, 0x08, 0x7c, 0x45, 0xab, 0x63, 0x9e, 0x35, 0xec, 0xde,
	0x4d, 0xb2, 0x18, 0xdd, 0x8a, 0xec, 0xd2, 0x5d, 0xb4, 0x7e, 0x57, 0x21, 0xe7, 0xd0, 0xec, 0xa6,
	0x69, 0x96, 0x54, 0x94, 0x22, 0x11, 0xaf, 0x90, 0x59, 0x29, 0x07, 0x07, 0xc8, 0xd7, 0x60, 0x99,
	0x91, 0x92, 0x11, 0x60, 0x93, 0xf0, 0x71, 0x7c, 0x29, 0x2e, 0x91, 0xe9, 0x2e, 0xed, 0x25, 0xf3,
	0xf6, 0x45, 0x42, 0x10, 0x14, 0xa6, 0xf7, 0x2c, 0x70, 0x59, 0x93, 0x5c, 0x36, 0x36, 0x36, 0x1f,
	0x6e, 0xda, 0x7b, 0x5f, 0xec, 0x6c, 0x5a, 0x9f, 0xa0, 0xf5, 0x19, 0x21, 0xd0, 0x42, 0xba, 0xd0,
	0x21, 0xab, 0x85, 0xd3, 0xe8, 0x6c, 0xa4, 0x53, 0x48, 0x07, 0x8d, 0xec, 0x0d, 0x72, 0x5e, 0x30,
	0xba, 0x1e, 0x84, 0x7e, 0x42, 0xeb, 0xd1, 0xbd, 0x42, 0xef, 0xe8, 0x22, 0x39, 0x2f, 0x78, 0xca,
	0xc2, 0x5a, 0x7f, 0xa8, 0x88, 0x1f, 0xa4, 0x0e, 0x6d, 0x74, 0xa8, 0xdf, 0x66, 0xe6, 0x3e, 0xe7,
	0x4c, 0x6e, 0x6a, 0xde, 0x57, 0xd5, 0xa2, 0x1e, 0x8f, 0x26, 0x0e, 0x5c, 0x61, 0x0f, 0xa6, 0x8a,
	0xb5, 0x72, 0x5a, 0xf5, 0x39, 0xf0, 0x1c, 0x3b, 0x3d, 0xdc, 0x33, 0x6a, 0x92, 0xeb, 0x3f, 0x25,
	0x08, 0x67, 0x8b, 0xf5, 0x79, 0x6e, 0x84, 0x3e, 0x3f, 0xc6, 0x15, 0xfb, 0x51, 0xab, 0x75, 0xdf,
	0x2d, 0x3f, 0x50, 0x39, 0x41, 0x2c, 0x91, 0xe9, 0x90, 0xd1, 0x28, 0xf0, 0xa5, 0xb1, 0x7b, 0x03,
	0x9d, 0x8a, 0x8d, 0x0e, 0x0d, 0x23, 0xc6, 0xc5, 0x72, 0xdb, 0xe7, 0x2d, 0xfb, 0x5d, 0xc0, 0x39,
	0x2b, 0xf4, 0xbb, 0x1b, 0xb5, 0xed, 0x43, 0x16, 0x46, 0x6e, 0xe0, 0x03, 0x8a, 0x9a, 0xf5, 0xbc,
	0xe6, 0xf7, 0xee, 0x33, 0xca, 0xeb, 0x0b, 0x64, 0x12, 0xbc, 0x29, 0x1c, 0xc0, 0xe7, 0x71, 0x4d,
	0x37, 0xfd, 0x7c, 0x8d, 0x5c, 0x10, 0x3f, 0x3f, 0xa0, 0x9c, 0x85, 0x2e, 0xf5, 0x1e, 0x06, 0x7c,
	0xd3, 0x0f, 0xfa, 0xed, 0x8e, 0x60, 0xd5, 0xe5, 0xac, 0x9b, 0x78, 0xc0, 0x16, 0xda, 0x61, 0xe1,
	0xa6, 0x6f, 0x04, 0xae, 0x5f, 0xa8, 0x2d, 0x0f, 0xd0, 0x54, 0x0e, 0x83, 0x11, 0x63, 0xdf, 0xa6,
	0x5d, 0x66, 0x37, 0x03, 0xd7, 0x97, 0xba, 0x7a, 0x91, 0x2c, 0x39, 0x6e, 0xab, 0x65, 0x27, 0xdf,
	0xab, 0xe0, 0xdd, 0x48, 0x0f, 0xfe, 0xb6, 0x4b, 0xbb, 0x81, 0xef, 0x18, 0xa9, 0x3e, 0x41, 0x0f,
	0x7e, 0x04, 0x18, 0xac, 0xe9, 0x08, 0xa2, 0xd3, 0x7e, 0x86, 0xd4, 0x80, 0x76, 0xea, 0x27, 0x24,
	0xff, 0x7d, 0x94, 0xec, 0xa6, 0xef, 0xf4, 0x43, 0xa1, 0x2e, 0x85, 0xc4, 0x7f, 0x89, 0xf2, 0x1d,
	0x0a, 0x24, 0xfa, 0xcc, 0x14, 0x40, 0xa6, 0xcf, 0xc9, 0x77, 0x20, 0x5a, 0xbf, 0x41, 0x16, 0x22,
	0x4e, 0xbb, 0xae, 0x4f, 0x51, 0x11, 0x27, 0x41, 0x11, 0xcf, 0x83, 0x36, 0x39, 0xfb, 0xb6, 0xfe,
	0x9b, 0xf5, 0xa7, 0x15, 0x1c, 0xbd, 0x5d, 0xd6, 0x0c, 0x0e, 0x59, 0x38, 0xf8, 0xa3, 0x30, 0xf1,
	0x3c, 0x99, 0x01, 0x29, 0x1d, 0xf7, 0x0a, 0xe5, 0xf3, 0x21, 0x99, 0x01, 0xf9, 0x14, 0xff, 0x5c,
	0x9f, 0x27, 0x55, 0x76, 0xdc, 0x4b, 0x2c, 0x3a, 0xb2, 0x73, 0xdc, 0x93, 0x43, 0xf0, 0x3d, 0xb9,
	0xb3, 0x61, 0x87, 0xcc, 0x2b, 0x44, 0xff, 0x9a, 0xdc, 0x9e, 0x98, 0x00, 0xc4, 0x14, 0xf2, 0xc4,
	0x8f, 0x72, 0xb6, 0xfc, 0x00, 0x8d, 0x74, 0xe3, 0xc0, 0xf5, 0xbc, 0x9d, 0xc0, 0xf5, 0x79, 0x21,
	0xd6, 0x06, 0x5a, 0xe2, 0xe1, 0x50, 0xb0, 0xdc, 0x08, 0x08, 0xbb, 0x27, 0x40, 0x64, 0x1f, 0x56,
	0xc9, 0x0a, 0xf4, 0x41, 0xff, 0x05, 0xfb, 0x22, 0x91, 0xae, 0x85, 0xcc, 0xa7, 0x8d, 0x66, 0x10,
	0x32, 0x13, 0x52, 0x2a, 0x20, 0xec, 0x48, 0x80, 0x64, 0x90, 0xea, 0xbf, 0x20, 0xd2, 0x07, 0x28,
	0xde, 0x27, 0xae, 0x51, 0xbc, 0xc2, 0x4d, 0x83, 0xbe, 0xc7, 0xe2, 0x15, 0x5f, 0x44, 0x6b, 0xf0,
	0x1b, 0x0f, 0xdd, 0x1e, 0xc8, 0x1b, 0x37, 0x47, 0xff, 0xa5, 0x42, 0x2e, 0xe9, 0xce, 0xce, 0x09,
	0x16, 0xa3, 0x94, 0xe7, 0x33, 0x31, 0xc2, 0xf3, 0x31, 0xaf, 0x52, 0x82, 0xb7, 0x7d, 0x26, 0x6c,
	0xbc, 0x5a, 0xc8, 0xe3, 0x0f, 0x03, 0x58, 0x05, 0x6a, 0xd6, 0xd7, 0xe4, 0x59, 0xb5, 0x36, 0x15,
	0xf1, 0x7b, 0x53, 0x67, 0xa4, 0x02, 0x8c, 0x3c, 0x07, 0x8c, 0x98, 0x3a, 0x98, 0x78, 0xd9, 0xa8,
	0x2b, 0xff, 0xb4, 0x42, 0x9e, 0x03, 0x23, 0xcf, 0x3b, 0x2c, 0x2c, 0x6a, 0xf0, 0x52, 0x9e, 0x02,
	0x8a, 0x04, 0xfb, 0x34, 0xbc, 0x97, 0x13, 0xd9, 0x5e, 0x56, 0xb3, 0xbd, 0x84, 0x6e, 0x5b, 0x9f,
	0x93, 0xab, 0x68, 0xa1, 0xfd, 0x81, 0x91, 0x91, 0xb7, 0xd2, 0x8c, 0x54, 0xaf, 0xcd, 0xdf, 0x7a,
	0x21, 0xee, 0xaa, 0xa9, 0x95, 0xd5, 0xc7, 0xb5, 0xbd, 0x31, 0xf0, 0x9b, 0xb0, 0xf3, 0xec, 0x04,
	0x47, 0xe0, 0xe0, 0x96, 0xed, 0x96, 0xc6, 0xfb, 0x44, 0x96, 0xf7, 0xd8, 0x21, 0x6b, 0x82, 0x6f,
	0x60, 0xb7, 0x3c, 0xda, 0x96, 0x1d, 0xfa, 0xcf, 0x15, 0xb2, 0x94, 0xc1, 0x54, 0xa4, 0xba, 0x75,
	0x42, 0xba, 0xc1, 0x21, 0xb3, 0xa3, 0x1e, 0x63, 0x72, 0x44, 0xea, 0x3f, 0x24, 0x0b, 0xce, 0xbe,
	0xdd, 0xa4, 0xa1, 0xa3, 0x7b, 0x9d, 0x97, 0x80, 0xb9, 0x43, 0x37, 0x12, 0xce, 0x7e, 0x3b, 0xf9,
	0xb9, 0xfe, 0x43, 0x32, 0xdf, 0x65, 0xdd, 0x20, 0x1c, 0xe8, 0x56, 0x0c, 0x95, 0x91, 0xb3, 0x6e,
	0x0f, 0xbe, 0xda, 0xae, 0x6f, 0x23, 0x90, 0x60, 0x9f, 0x07, 0xb6, 0xc7, 0x5a, 0x5c, 0xba, 0xfe,
	0xbf, 0xa9, 0x90, 0x67, 0x40, 0xc3, 0xc2, 0x80, 0x3a, 0x4d, 0x1a, 0xf1, 0x94, 0x98, 0x8a, 0x98,
	0xbe, 0x41, 0xe6, 0x7b, 0x1e, 0x1d, 0xb0, 0x50, 0x57, 0xff, 0x0b, 0x40, 0x51, 0x7e, 0x8f, 0x3a,
	0xc1, 0x91, 0x7d, 0x7a, 0xdd, 0x0f, 0x32, 0xf3, 0xf4, 0x3e, 0xa3, 0x87, 0xec, 0x9b, 0x74, 0x1a,
	0xff, 0x49, 0x45, 0xee, 0xf5, 0xd9, 0xd3, 0xbe, 0xd8, 0xfd, 0x3d, 0x08, 0x0e, 0xc7, 0x75, 0x70,
	0x47, 0x2b, 0xbb, 0xb0, 0xd6, 0xcc, 0x77, 0xec, 0x63, 0xec, 0xa5, 0xfa, 0x73, 0x00, 0xfe, 0x5d,
	0x0d, 0x78, 0xc0, 0xf5, 0xee, 0x8f, 0xc7, 0xc3, 0x5f, 0x56, 0xc8, 0xac, 0x74, 0xd1, 0xf8, 0xb8,
	0xb4, 0xbf, 0x4f, 0xe6, 0x9a, 0x1d, 0xca, 0x71, 0x1f, 0x51, 0x85, 0xa1, 0x59, 0x91, 0x43, 0xb3,
	0x71, 0x77, 0x6d, 0x0f, 0xb6, 0x11, 0xc2, 0x64, 0x77, 0xa3, 0xb6, 0x8c, 0x38, 0x5c, 0x24, 0x4b,
	0x9c, 0x86, 0x7a, 0xdc, 0x67, 0x4a, 0xad, 0x94, 0xed, 0x30, 0xe8, 0xf7, 0xd4, 0xa6, 0xa5, 0x66,
	0xfd, 0x66, 0x82, 0xcc, 0x62, 0x40, 0x91, 0x96, 0x0e, 0x24, 0x5e, 0x24, 0x4b, 0x51, 0xd8, 0xb4,
	0x73, 0x6a, 0x90, 0xa7, 0x5a, 0x35, 0x77, 0x6d, 0x32, 0xdf, 0xb5, 0xa9, 0xe1, 0x5d, 0x9b, 0xd6,
	0x42, 0x49, 0xed, 0x2e, 0x38, 0xe8, 0xb3, 0xa9, 0x1e, 0x61, 0x74, 0xe4, 0x26, 0x72, 0x07, 0xf3,
	0x5a, 0x77, 0xca, 0x8d, 0xd3, 0x3d, 0x1f, 0x50, 0x24, 0xd2, 0x3f, 0x84, 0x35, 0xff, 0x71, 0xc4,
	0xec, 0xc6, 0xce, 0x36, 0x67, 0x5d, 0x93, 0xbd, 0x41, 0x87, 0x57, 0x13, 0xc4, 0x22, 0x99, 0x8a,
	0x7a, 0xc9, 0xfe, 0x52, 0xfc, 0xc9, 0x69, 0x57, 0x2d, 0x96, 0x3f, 0xc6, 0x05, 0x7d, 0x04, 0xde,
	0xcb, 0x64, 0x52, 0xda, 0x02, 0x61, 0x96, 0x17, 0xd0, 0x90, 0xa2, 0xed, 0xb1, 0x5a, 0x2a, 0xaa,
	0x0c, 0x36, 0xd2, 0xbc, 0x81, 0x3a, 0x4f, 0x16, 0xc4, 0x80, 0xc4, 0x1b, 0x24, 0xc1, 0xdd, 0xa2,
	0x80, 0x6c, 0x1f, 0xa5, 0x03, 0x68, 0x18, 0xb8, 0x6a, 0x51, 0xb1, 0xc8, 0xc6, 0x26, 0x77, 0xd6,
	0xfa, 0x98, 0x5c, 0x14, 0x74, 0x3e, 0xeb, 0xb3, 0x70, 0x00, 0x54, 0xc4, 0xa6, 0xc5, 0x68, 0xc4,
	0xf4, 0xad, 0x18, 0xae, 0x84, 0x0f, 0xc9, 0x45, 0xd1, 0xd3, 0x82, 0xf6, 0x3a, 0x6c, 0xa5, 0x68,
	0x13, 0x3e, 0x01, 0x8e, 0x86, 0xf0, 0xc2, 0x02, 0xea, 0x44, 0xe8, 0x77, 0x58, 0x9f, 0x63, 0x00,
	0x42, 0xdb, 0x37, 0xc2, 0x2e, 0xaa, 0x7c, 0xd7, 0x2f, 0x91, 0x65, 0xed, 0x6b, 0xac, 0xa2, 0x8b,
	0xd6, 0x87, 0x18, 0x66, 0xc8, 0x62, 0x2e, 0x37, 0x21, 0xac, 0xcf, 0xc9, 0xaa, 0xe0, 0x6b, 0x2f,
	0xa4, 0x7e, 0xb4, 0x13, 0x84, 0x7c, 0xd4, 0xc6, 0x56, 0x30, 0x27, 0x60, 0x7b, 0x41, 0xc8, 0x63,
	0x69, 0x15, 0x8d, 0x8b, 0xd5, 0x22, 0xab, 0x82, 0xaf, 0x42, 0xcc, 0x57, 0x49, 0x35, 0x64, 0x7c,
	0x5c, 0x5b, 0x9d, 0xa5, 0x0d, 0x2a, 0x6a, 0x1d, 0xa3, 0x64, 0x1f, 0xee, 0xa4, 0x64, 0x50, 0xc8,
	0xfc, 0x12, 0x99, 0xf6, 0x7b, 0xcd, 0x14, 0xdb, 0x5a, 0x98, 0xa3, 0xaa, 0x82, 0x27, 0x40, 0x44,
	0x2e, 0x95, 0x6a, 0x6b, 0x9e, 0xee, 0x21, 0x98, 0x24, 0x2b, 0x40, 0xc9, 0x67, 0x29, 0x9f, 0xac,
	0x73, 0x09, 0x6f, 0xd5, 0x02, 0xde, 0x26, 0xf5, 0x0d, 0xe9, 0x3a, 0x6d, 0xdb, 0xa6, 0xc9, 0x67,
	0xfd, 0x08, 0x37, 0xa4, 0x31, 0xcc, 0x8b, 0x64, 0x4a, 0x4c, 0xf2, 0x48, 0xba, 0x35, 0x17, 0x81,
	0x1f, 0x08, 0x26, 0x3b, 0xfb, 0xf6, 0x3e, 0x6d, 0xdb, 0xf0, 0xab, 0xf5, 0x29, 0xa2, 0x16, 0x33,
	0x7b, 0x2c, 0x7b, 0xa1, 0xbe, 0x25, 0xf1, 0xcb, 0x9a, 0xf5, 0x07, 0x19, 0x3f, 0x8c, 0x91, 0x95,
	0x5f, 0x9f, 0x73, 0xf8, 0x5f, 0x26, 0x8b, 0x3e, 0x3b, 0xb2, 0xe5, 0xf7, 0xd8, 0x01, 0x5a, 0x51,
	0x1b, 0x33, 0xd5, 0x03, 0xb1, 0xd7, 0x03, 0xa0, 0x44, 0x5c, 0xf5, 0x97, 0xc8, 0xbc, 0xeb, 0x47,
	0x4c, 0x28, 0x0b, 0x67, 0xdd, 0xd5, 0x29, 0x30, 0x47, 0x35, 0xbd, 0x25, 0x7b, 0xda, 0x77, 0x7b,
	0x02, 0x2e, 0x64, 0xe0, 0x79, 0x01, 0xdc, 0xb4, 0x19, 0x8e, 0x38, 0x21, 0x8b, 0x22, 0x04, 0x9b,
	0x01, 0xb0, 0xba, 0x02, 0x03, 0x69, 0x01, 0x9c, 0x75, 0x0f, 0x77, 0xd1, 0x0d, 0xe6, 0x79, 0xa7,
	0x17, 0xe6, 0xd7, 0xb8, 0xdb, 0x4e, 0x90, 0x9d, 0x42, 0x98, 0x45, 0xf8, 0xdf, 0x93, 0xdb, 0x43,
	0x81, 0x7f, 0x13, 0xba, 0x69, 0xd8, 0xa3, 0x41, 0xdf, 0x74, 0x74, 0xd6, 0x7d, 0xb9, 0x67, 0x4c,
	0x9a, 0x96, 0xe4, 0xad, 0x10, 0x9b, 0x8c, 0x3d, 0x08, 0xc5, 0x35, 0xf2, 0x61, 0xbd, 0x8b, 0xd2,
	0x48, 0x80, 0x5e, 0x26, 0xd3, 0x80, 0x4a, 0xe9, 0xf7, 0xa5, 0x9c, 0x7e, 0xe3, 0xcf, 0xd6, 0xfb,
	0x32, 0xb2, 0x02, 0x03, 0x38, 0x66, 0x47, 0xfb, 0x32, 0xdc, 0xa2, 0xb5, 0x3d, 0x45, 0x4f, 0x85,
	0x1e, 0xa9, 0x8f, 0xb1, 0x42, 0x17, 0xe9, 0x91, 0xdc, 0xb9, 0x0b, 0x8f, 0x77, 0x88, 0x48, 0xde,
	0xc7, 0x51, 0xd0, 0xa0, 0xae, 0x65, 0x64, 0xb2, 0x9a, 0x92, 0x49, 0x42, 0x20, 0xb2, 0xda, 0xa4,
	0x06, 0xd6, 0x9f, 0x1e, 0xb0, 0x47, 0xad, 0xd6, 0x98, 0x62, 0xa9, 0x5f, 0x27, 0x73, 0x91, 0xcb,
	0x99, 0xee, 0xdc, 0x5d, 0x94, 0x42, 0xd8, 0xfc, 0xec, 0xf1, 0xf6, 0x8e, 0xdd, 0xd8, 0xde, 0x93,
	0x91, 0xe2, 0xff, 0x50, 0x21, 0x35, 0x58, 0x0d, 0x52, 0x94, 0x4e, 0x23, 0xc4, 0xf2, 0xc4, 0x33,
	0xf2, 0x9e, 0x34, 0xca, 0xfb, 0x7d, 0xb4, 0xe7, 0xca, 0x74, 0xda, 0xdb, 0x60, 0x3c, 0x84, 0xa3,
	0x97, 0x98, 0x9f, 0x4a, 0xb1, 0xf9, 0xc9, 0xb5, 0xdd, 0x05, 0x83, 0x52, 0xae, 0xed, 0x47, 0x32,
	0xe2, 0xac, 0x94, 0x5a, 0x11, 0x7e, 0x31, 0xc5, 0x77, 0xc5, 0x60, 0x96, 0xf2, 0xcd, 0x25, 0xed,
	0x92, 0xcd, 0xef, 0xe1, 0x0e, 0x23, 0xe6, 0x7c, 0xcd, 0x71, 0x4a, 0xb1, 0x2d, 0xf4, 0x04, 0x0c,
	0x89, 0xed, 0xb8, 0xad, 0x16, 0x7a, 0x3d, 0xd6, 0xfb, 0x38, 0xcc, 0x09, 0x2f, 0x02, 0xdb, 0x49,
	0xfb, 0xf1, 0xb8, 0xe7, 0x50, 0x5e, 0xba, 0x1f, 0x9f, 0xc8, 0xc8, 0x60, 0x3c, 0x0f, 0x54, 0xfb,
	0x97, 0xa4, 0x3e, 0x03, 0x98, 0xec, 0x4d, 0xd1, 0xf0, 0xbf, 0x84, 0xae, 0x69, 0xa3, 0xef, 0xf2,
	0x46, 0x27, 0xe8, 0x99, 0x9c, 0x45, 0xab, 0x8f, 0x02, 0x1b, 0x05, 0x57, 0x7f, 0x89, 0xcc, 0xee,
	0xf7, 0x07, 0x76, 0xd4, 0x77, 0xb9, 0x74, 0x85, 0x31, 0x9c, 0x28, 0x3e, 0xd8, 0xed, 0x20, 0x70,
	0xd0, 0xc7, 0xa8, 0xbf, 0x48, 0x9e, 0x87, 0x4f, 0x51, 0x27, 0xe8, 0xd9, 0x51, 0x3f, 0xec, 0x79,
	0xfd, 0xc8, 0xee, 0x03, 0xef, 0x5a, 0xf2, 0x80, 0xb5, 0x87, 0x73, 0x75, 0xbd, 0x3f, 0x10, 0x94,
	0xb7, 0x7d, 0x41, 0xdb, 0xe4, 0xa2, 0x25, 0xf8, 0x62, 0x5f, 0xe7, 0x02, 0x59, 0x84, 0xaf, 0x4e,
	0x3f, 0xa4, 0xdc, 0x95, 0xe1, 0xf7, 0x9a, 0xf5, 0x27, 0x72, 0xc0, 0x52, 0x58, 0x4f, 0xb1, 0x9f,
	0xce, 0x12, 0xaf, 0x16, 0x13, 0x47, 0x7f, 0x46, 0x4a, 0x1c, 0x93, 0x00, 0x04, 0x75, 0x83, 0xc4,
	0xbf, 0x92, 0x9b, 0xe0, 0x11, 0x70, 0xf5, 0x37, 0xc9, 0x12, 0x7c, 0x03, 0x5a, 0x9a, 0x71, 0x7d,
	0x36, 0x6f, 0x00, 0x63, 0x10, 0xeb, 0x2d, 0x5c, 0x77, 0xc0, 0xb8, 0x0b, 0xec, 0xa6, 0xf3, 0x1c,
	0x6c, 0xa1, 0xf6, 0x07, 0x5f, 0xe1, 0x42, 0x94, 0xb4, 0x3a, 0x85, 0xcc, 0x34, 0xe4, 0x38, 0x28,
	0x6f, 0xe3, 0x5a, 0x25, 0x8d, 0x65, 0x79, 0xa6, 0x7e, 0x86, 0xeb, 0x94, 0xde, 0xee, 0x2c, 0xd9,
	0x92, 0xc3, 0x75, 0x87, 0x36, 0xd9, 0xd0, 0x09, 0xf2, 0x5f, 0x65, 0xd0, 0x62, 0x14, 0x60, 0xfd,
	0x26, 0xa9, 0x05, 0xa1, 0xdb, 0x76, 0x7d, 0xea, 0xd9, 0x62, 0xaa, 0xb4, 0x68, 0x93, 0xa5, 0xa6,
	0x0a, 0x24, 0x0f, 0x68, 0x53, 0xe5, 0x26, 0xa9, 0x39, 0x6e, 0x84, 0x56, 0x27, 0x6e, 0x50, 0x1d,
	0xd2, 0xe0, 0x45, 0xf2, 0x3c, 0x7c, 0x32, 0xce, 0x2d, 0x54, 0xc4, 0x6e, 0x3c, 0xb7, 0x04, 0xcf,
	0xc3, 0xe7, 0x56, 0x82, 0x4f, 0x9f, 0x5b, 0xf0, 0x35, 0x3d, 0xb7, 0xc4, 0x96, 0x0d, 0xb3, 0x1f,
	0x22, 0xc5, 0xb4, 0xdc, 0x9c, 0x26, 0x93, 0x4e, 0x23, 0x77, 0xba, 0x49, 0x97, 0xe2, 0xaa, 0x5a,
	0xcc, 0x55, 0x6e, 0xd2, 0x21, 0xf5, 0xd1, 0x93, 0x6e, 0x18, 0x5c, 0x3c, 0xe9, 0xb0, 0xab, 0x43,
	0x27, 0x5d, 0x0c, 0x92, 0x9a, 0x74, 0x02, 0xbb, 0x49, 0xbf, 0x55, 0xf6, 0x48, 0x7e, 0xd2, 0x41,
	0xab, 0xd3, 0x69, 0xb7, 0x42, 0x5e, 0x34, 0xe9, 0xca, 0x33, 0x95, 0x9e, 0x74, 0x67, 0xce, 0xd6,
	0x6b, 0xb8, 0x41, 0x7f, 0x40, 0xfd, 0x3e, 0xf5, 0x70, 0x45, 0x53, 0xf3, 0xaa, 0x70, 0xd8, 0x1e,
	0xe3, 0xb6, 0xbb, 0x10, 0xfe, 0xe4, 0x7c, 0x59, 0xd7, 0xc9, 0x02, 0x1c, 0xef, 0x74, 0x03, 0x1f,
	0x72, 0xc8, 0x08, 0x99, 0x88, 0xe3, 0x1f, 0x8b, 0x64, 0x2a, 0x39, 0xe1, 0xad, 0x59, 0xff, 0xaf,
	0x82, 0x7b, 0xc9, 0x1d, 0x1a, 0x45, 0xbb, 0x6e, 0x74, 0x60, 0xda, 0x8a, 0xf7, 0x68, 0x14, 0xc9,
	0x38, 0xf7, 0xac, 0xcc, 0xe7, 0xd1, 0xb4, 0x77, 0x85, 0xcc, 0xc2, 0x29, 0x56, 0xb2, 0x05, 0xbf,
	0x41, 0x96, 0xf1, 0x88, 0xa9, 0x1f, 0xa1, 0x16, 0x45, 0xa9, 0x2d, 0x1d, 0x1c, 0x5d, 0x3d, 0x8e,
	0x50, 0x51, 0x6b, 0x64, 0x6e, 0x3f, 0x38, 0x96, 0x1b, 0x1d, 0x08, 0x17, 0xd6, 0x5f, 0x26, 0x0b,
	0x92, 0x79, 0xd4, 0xd2, 0x19, 0xad, 0x6d, 0xaa, 0x6b, 0x82, 0x5d, 0xea, 0x3b, 0x41, 0x37, 0x62,
	0x0c, 0x23, 0x73, 0x0b, 0xf5, 0xe7, 0xc8, 0x79, 0x37, 0x02, 0xc2, 0xcd, 0xa0, 0xdb, 0x0b, 0x22,
	0x86, 0xa7, 0x5d, 0x10, 0x9f, 0x9b, 0xb5, 0xfe, 0x99, 0xdc, 0xf0, 0xc6, 0x3d, 0x7e, 0xbf, 0x94,
	0xa0, 0xdf, 0x3f, 0xf7, 0x20, 0x6a, 0xdb, 0xbb, 0x8c, 0xdb, 0x1b, 0x81, 0xc3, 0xec, 0xc7, 0xfe,
	0x81, 0x1f, 0x1c, 0xd5, 0xaf, 0x92, 0xe9, 0x90, 0x1d, 0x51, 0xc8, 0xf4, 0xab, 0xc6, 0x8e, 0x17,
	0x7e, 0x8a, 0xa3, 0x7e, 0x42, 0x56, 0xa2, 0x27, 0x12, 0x12, 0x55, 0x65, 0x9b, 0xd4, 0x85, 0xdc,
	0x1f, 0xf5, 0x98, 0xbf, 0x81, 0xbf, 0xaf, 0x07, 0xc7, 0x26, 0x25, 0x56, 0xd2, 0x9e, 0x50, 0xe9,
	0x55, 0x0e, 0xf5, 0xdb, 0x0c, 0x83, 0x37, 0xb3, 0xd6, 0xcf, 0x48, 0x1d, 0x0e, 0x52, 0xd2, 0xa8,
	0x4a, 0xea, 0xcf, 0xc8, 0x1e, 0xa8, 0x63, 0x6e, 0x81, 0x5e, 0xc8, 0xcb, 0xc0, 0xa6, 0xf5, 0x25,
	0x4e, 0x2d, 0x1d, 0xec, 0xcc, 0x58, 0x78, 0x44, 0x2e, 0x61, 0x70, 0x3f, 0x62, 0x5c, 0x20, 0xbf,
	0xe3, 0xb6, 0x3b, 0x7c, 0x03, 0x92, 0x52, 0x4b, 0x49, 0x6c, 0x99, 0xcc, 0x84, 0x6e, 0x74, 0x90,
	0x4c, 0xd4, 0x1f, 0xcb, 0xf3, 0x89, 0x02, 0x84, 0x25, 0x63, 0x71, 0xff, 0xbb, 0x82, 0x03, 0x98,
	0x64, 0x0c, 0x19, 0xa7, 0xcf, 0x48, 0x76, 0xb4, 0x78, 0xd2, 0xa4, 0x9a, 0x4f, 0x71, 0x44, 0x71,
	0xaa, 0x20, 0xc2, 0x34, 0x5d, 0x1c, 0xfd, 0x9a, 0x51, 0x69, 0x7b, 0xad, 0xd0, 0x65, 0xbe, 0x93,
	0xe4, 0x8f, 0xa4, 0x03, 0x62, 0x73, 0x6a, 0x52, 0x4b, 0x2d, 0x22, 0xa0, 0x45, 0xff, 0xb6, 0x82,
	0x6a, 0x94, 0xe9, 0xd0, 0xe9, 0xcc, 0xe3, 0xb8, 0xdd, 0xcc, 0x75, 0x09, 0x4f, 0x0f, 0xee, 0xe0,
	0x6e, 0xe3, 0x0e, 0x74, 0x6b, 0x2d, 0x8a, 0xdc, 0x88, 0xef, 0xb9, 0x5d, 0x56, 0x5f, 0x25, 0x2b,
	0x1e, 0x6b, 0x71, 0x9b, 0xc2, 0x27, 0x3b, 0x4e, 0x1c, 0x81, 0x44, 0x45, 0x25, 0x04, 0xcd, 0x30,
	0xb6, 0x71, 0xd8, 0x1f, 0xee, 0x6c, 0x88, 0xbd, 0x0e, 0x24, 0x26, 0x84, 0xce, 0x67, 0x7d, 0xd6,
	0x67, 0x1a, 0x6f, 0x15, 0x25, 0xf0, 0x5c, 0x87, 0xae, 0x91, 0xb9, 0xf8, 0x7c, 0x4c, 0x2e, 0x9c,
	0xc5, 0x87, 0x67, 0xd6, 0x87, 0x18, 0x91, 0x16, 0x84, 0xb6, 0x82, 0x71, 0xe9, 0x58, 0x7f, 0x5b,
	0x21, 0xcf, 0xc9, 0x38, 0x0f, 0x6b, 0x72, 0x68, 0xde, 0xed, 0x8a, 0xbe, 0xa0, 0x00, 0x22, 0x53,
	0x2a, 0x5c, 0xd9, 0x3c, 0x56, 0xf1, 0x11, 0xa5, 0x13, 0xd9, 0x4d, 0xe9, 0xe8, 0x80, 0x56, 0x76,
	0x5d, 0xdf, 0xf6, 0x0e, 0x3d, 0x39, 0x18, 0xe2, 0x03, 0x3d, 0x86, 0x0f, 0xd3, 0x2a, 0xe5, 0x29,
	0x16, 0x2a, 0x1c, 0x4d, 0x0a, 0x32, 0x33, 0x90, 0x92, 0xb1, 0x4a, 0x56, 0xe4, 0x4f, 0x7e, 0xbf,
	0x6b, 0x7b, 0x6e, 0xd7, 0xe5, 0x78, 0x4e, 0x62, 0xf5, 0xf0, 0x94, 0xda, 0xd8, 0x97, 0x92, 0x0a,
	0x76, 0x5d, 0x1b, 0x50, 0xb1, 0x9a, 0xa0, 0xa9, 0x38, 0xa7, 0xb6, 0x86, 0xda, 0x6f, 0x56, 0x13,
	0x43, 0x31, 0x77, 0x5c, 0xdf, 0x41, 0x22, 0xa6, 0x7c, 0x93, 0x6c, 0x72, 0xe7, 0x38, 0x79, 0xda,
	0x14, 0x23, 0x39, 0x1a, 0x91, 0x92, 0x1d, 0xb9, 0xa6, 0x64, 0xaf, 0x9f, 0xc1, 0x16, 0xf6, 0xe3,
	0xdf, 0x54, 0xb0, 0x23, 0x42, 0x55, 0x87, 0x74, 0x24, 0x7f, 0x1c, 0x36, 0x7e, 0x92, 0xe9, 0x0d,
	0x32, 0x97, 0x1c, 0x5b, 0x4f, 0x0d, 0x3d, 0xc7, 0xb2, 0xfe, 0xb2, 0x22, 0x33, 0x45, 0x12, 0xb6,
	0xf2, 0x2c, 0x54, 0x72, 0x09, 0x9f, 0x13, 0x66, 0x91, 0xbc, 0x8a, 0xc7, 0x25, 0xba, 0x58, 0xaa,
	0x46, 0xb1, 0x28, 0x62, 0x68, 0x39, 0xb4, 0x11, 0x39, 0x10, 0xf6, 0x4b, 0x97, 0x96, 0x58, 0xad,
	0x05, 0xb4, 0xb0, 0x27, 0xa5, 0xa5, 0xa6, 0xb3, 0x5c, 0x35, 0x9b, 0xff, 0x4f, 0x70, 0x13, 0x82,
	0xd1, 0x9b, 0x13, 0x8c, 0x8e, 0xb5, 0x8b, 0xdb, 0x8a, 0x34, 0x82, 0xd3, 0xc9, 0x51, 0x30, 0xd5,
	0x28, 0xcb, 0x54, 0xd1, 0xc9, 0xaa, 0xf5, 0x35, 0x9a, 0x2d, 0x75, 0x80, 0x9d, 0x1e, 0xe1, 0x4c,
	0x0b, 0xc4, 0xf4, 0x2a, 0x59, 0x16, 0xdf, 0x4b, 0x6a, 0xf4, 0x4f, 0xf0, 0xa0, 0xaf, 0x00, 0xff,
	0x18, 0x5c, 0xc2, 0xe9, 0x41, 0x64, 0x87, 0xac, 0xd5, 0x8f, 0x98, 0x74, 0x81, 0x30, 0x64, 0xd9,
	0x50, 0x03, 0xff, 0xc8, 0xf7, 0x5c, 0x9f, 0x69, 0xf6, 0xea, 0x74, 0x7c, 0x83, 0x75, 0x73, 0xc3,
	0x88, 0xdb, 0x4c, 0xac, 0x8b, 0x90, 0x08, 0x88, 0x84, 0xf3, 0x93, 0x6c, 0xb2, 0x68, 0x92, 0xe1,
	0x11, 0xd4, 0x21, 0x0e, 0x79, 0x9a, 0xc7, 0x55, 0xb2, 0xe2, 0x46, 0x36, 0xf5, 0xc4, 0xaa, 0x6b,
	0x07, 0xf0, 0x4d, 0xa6, 0x53, 0x16, 0x72, 0x3f, 0x61, 0xe2, 0xde, 0x3c, 0x61, 0xac, 0x2e, 0x2e,
	0xec, 0x8a, 0x6e, 0xab, 0xe5, 0xb9, 0xe6, 0xec, 0x5f, 0x13, 0xc9, 0x8c, 0xd9, 0x1a, 0x42, 0xee,
	0x4b, 0x72, 0x25, 0xed, 0x18, 0x21, 0x61, 0x70, 0xb1, 0xcc, 0xc7, 0x7d, 0xb9, 0x53, 0xdd, 0xc2,
	0x73, 0xca, 0x2d, 0x72, 0x25, 0xed, 0xa3, 0xe4, 0x70, 0x97, 0x74, 0xdf, 0xba, 0x32, 0x3c, 0x82,
	0x7c, 0x43, 0xfb, 0x71, 0x25, 0x32, 0xce, 0x6a, 0xf1, 0xef, 0x55, 0x94, 0x45, 0xa7, 0x57, 0x72,
	0xc1, 0x78, 0x83, 0xac, 0x44, 0xcc, 0x6b, 0xd9, 0xe9, 0xcc, 0x9d, 0x6a, 0x6c, 0xa2, 0xf7, 0x29,
	0xe7, 0x1e, 0xd3, 0x7f, 0xae, 0xbf, 0x49, 0xea, 0x92, 0x6b, 0xbd, 0x51, 0x75, 0x68, 0x23, 0xeb,
	0x33, 0x74, 0xb2, 0x37, 0x82, 0x6e, 0x37, 0x80, 0x28, 0xc7, 0x56, 0x10, 0x38, 0x91, 0x31, 0x94,
	0xb0, 0x4c, 0x66, 0xd2, 0x81, 0x15, 0x9c, 0x96, 0x5d, 0xd8, 0xcb, 0xca, 0x69, 0xf9, 0x3b, 0x99,
	0xaf, 0x57, 0x84, 0xb3, 0x7c, 0x4e, 0x72, 0x9a, 0xcc, 0x4d, 0x42, 0x92, 0x98, 0x91, 0xec, 0x13,
	0x86, 0x2f, 0x9a, 0x40, 0x05, 0x03, 0x2b, 0x5a, 0x58, 0xe9, 0x32, 0xa9, 0xfb, 0xec, 0x98, 0x0b,
	0x83, 0x11, 0xb2, 0xa8, 0x63, 0xf7, 0x42, 0xb7, 0xa9, 0x4e, 0x1d, 0x9f, 0x23, 0xe7, 0x91, 0xe1,
	0xf8, 0x57, 0xdc, 0x85, 0xa2, 0x03, 0x64, 0x91, 0xcb, 0xf2, 0x57, 0x1e, 0xf0, 0x1c, 0xcc, 0xb4,
	0x7e, 0xcc, 0xbb, 0x43, 0xc3, 0x03, 0xe3, 0x36, 0xbf, 0xa5, 0x76, 0x9c, 0x12, 0xa6, 0x64, 0xd7,
	0xe3, 0x9e, 0x7a, 0x6e, 0xa4, 0xa2, 0xd2, 0xc3, 0x7a, 0x6a, 0x7d, 0x86, 0xe6, 0x75, 0xbd, 0x3f,
	0xc8, 0x08, 0xbc, 0xdc, 0x00, 0x8a, 0x3d, 0x06, 0x7c, 0x88, 0xb5, 0xb9, 0x66, 0x7d, 0x82, 0x2b,
	0x42, 0x01, 0xca, 0x92, 0x13, 0xed, 0x1d, 0xdc, 0x3d, 0xc2, 0x86, 0xdf, 0x6e, 0xf0, 0xbe, 0x33,
	0x30, 0x4e, 0x7f, 0x00, 0x89, 0x43, 0x35, 0x5f, 0xe3, 0x7e, 0x72, 0xec, 0x86, 0x65, 0x57, 0xf0,
	0x87, 0xb8, 0x82, 0x23, 0x7e, 0x48, 0xd0, 0x7d, 0xdc, 0x2b, 0x49, 0x01, 0x6f, 0x19, 0xb1, 0xe3,
	0x66, 0x87, 0x86, 0x6d, 0xb5, 0x04, 0xfd, 0x1c, 0xad, 0xfb, 0x49, 0xf0, 0x95, 0xe4, 0xf8, 0x23,
	0x72, 0x21, 0xe1, 0x18, 0xe2, 0x6a, 0x7b, 0xd4, 0x63, 0x86, 0x3d, 0x70, 0x5e, 0xa0, 0x0e, 0x9e,
	0xb9, 0x9c, 0xb0, 0x79, 0x79, 0xc7, 0xe8, 0x52, 0xc2, 0xa4, 0x8c, 0xb3, 0x8d, 0xc5, 0x66, 0x0b,
	0x4d, 0xc6, 0x89, 0x11, 0x94, 0x65, 0x74, 0x1b, 0x53, 0x51, 0x34, 0x71, 0xac, 0x07, 0xc1, 0x41,
	0x49, 0x1a, 0x0b, 0x64, 0x32, 0x72, 0xb9, 0x4c, 0x43, 0xb1, 0x7e, 0x8a, 0xe7, 0x89, 0x59, 0x54,
	0x25, 0xa7, 0xf9, 0x28, 0xec, 0xf7, 0xf4, 0x61, 0x97, 0x02, 0x39, 0x31, 0xab, 0x5f, 0xeb, 0x4a,
	0xa0, 0x23, 0x3b, 0x23, 0x66, 0x1d, 0xbc, 0xbc, 0x83, 0xf8, 0x31, 0xd1, 0xc6, 0xc8, 0xeb, 0x79,
	0xb2, 0x00, 0x97, 0x5e, 0xd2, 0xf8, 0xce, 0x93, 0x05, 0x9f, 0x1d, 0x25, 0x5f, 0xab, 0x29, 0x2a,
	0x18, 0x16, 0x3f, 0x92, 0xa9, 0xc1, 0x59, 0x2a, 0x25, 0x3b, 0x71, 0x72, 0xc2, 0x5f, 0xa0, 0xdb,
	0xb0, 0x43, 0xa3, 0xe8, 0x81, 0xeb, 0xbb, 0x5b, 0xb4, 0xcb, 0x4a, 0x44, 0x4c, 0x6b, 0x25, 0x22,
	0xa6, 0x2a, 0x84, 0x9f, 0x42, 0x7d, 0x66, 0x01, 0xb4, 0x5f, 0xa0, 0x0e, 0x41, 0x86, 0x9c, 0xc2,
	0xbe, 0x4b, 0x7d, 0xe3, 0xb8, 0x74, 0x5d, 0xdf, 0xc5, 0xfb, 0x2e, 0xfa, 0xea, 0x80, 0x97, 0x9a,
	0xd2, 0x71, 0x04, 0x75, 0xd1, 0x29, 0xf6, 0x7d, 0xad, 0x23, 0x54, 0xb1, 0x3c, 0xad, 0xf2, 0xa3,
	0x53, 0x40, 0xfe, 0x05, 0x08, 0xf4, 0x1e, 0xc8, 0xdd, 0x3f, 0x2e, 0xfb, 0x8b, 0xd0, 0x5c, 0xe0,
	0x16, 0x1e, 0x85, 0xf5, 0x67, 0x15, 0xad, 0x97, 0x0d, 0xe6, 0xb5, 0x4e, 0xd0, 0xcb, 0x67, 0x48,
	0xad, 0xe3, 0x46, 0x3c, 0x08, 0x07, 0x76, 0x97, 0x1e, 0xc7, 0x77, 0x19, 0xf2, 0x02, 0x98, 0x2c,
	0x12, 0x00, 0xfa, 0xf9, 0xea, 0xde, 0x4b, 0x9e, 0x8f, 0x53, 0x49, 0xa0, 0x46, 0xe6, 0x9a, 0xfd,
	0x30, 0xb4, 0x85, 0x18, 0x24, 0x4b, 0x85, 0xdc, 0xa2, 0x3a, 0xad, 0xa1, 0x2c, 0x76, 0x3c, 0x1a,
	0x0f, 0xc2, 0x5a, 0x9b, 0x9a, 0xef, 0x1e, 0xe5, 0x09, 0x5a, 0x1f, 0x63, 0x37, 0xf2, 0x28, 0x4a,
	0x2e, 0xfd, 0xbb, 0x72, 0x29, 0xe8, 0xef, 0x77, 0x5d, 0xae, 0x30, 0x98, 0xaf, 0x96, 0x14, 0xf7,
	0x7a, 0x91, 0x4c, 0x69, 0x83, 0x60, 0xfd, 0x8d, 0xf4, 0x28, 0x8b, 0x90, 0x9e, 0xd5, 0x6c, 0x19,
	0xa1, 0x04, 0x30, 0x08, 0x9a, 0xa8, 0xe1, 0xec, 0x4e, 0x38, 0xf4, 0x76, 0x8f, 0x85, 0x4d, 0xa6,
	0xbc, 0x47, 0xeb, 0xaf, 0x2b, 0x6a, 0xb7, 0xab, 0x36, 0x2b, 0x43, 0x4d, 0x46, 0x71, 0xf7, 0xb3,
	0x99, 0x86, 0xf9, 0x7b, 0x88, 0xe9, 0xc8, 0xf0, 0xb0, 0x30, 0x6a, 0x66, 0x47, 0x05, 0x37, 0x0f,
	0xc5, 0xce, 0xf9, 0x62, 0x7a, 0x4b, 0x35, 0xae, 0xf5, 0x31, 0x1c, 0x72, 0xa6, 0x3a, 0x73, 0xca,
	0xf8, 0xef, 0x01, 0x3a, 0x91, 0xdb, 0x82, 0x3d, 0xda, 0xe4, 0x6b, 0x4d, 0x6e, 0xb2, 0xba, 0xb4,
	0xa9, 0x65, 0xba, 0x16, 0x25, 0x8a, 0x57, 0x31, 0x6f, 0x5a, 0x7c, 0x3f, 0x4e, 0x32, 0xea, 0xc5,
	0x9f, 0xea, 0xee, 0xc2, 0x31, 0x3a, 0x9e, 0x3a, 0x31, 0x53, 0xf4, 0xa3, 0x2c, 0x41, 0x5d, 0x92,
	0x93, 0xe6, 0x09, 0xf3, 0x66, 0x9c, 0x8b, 0xd8, 0xba, 0xeb, 0x96, 0xec, 0xa4, 0x96, 0x73, 0x28,
	0x1b, 0x95, 0x65, 0xb6, 0xa4, 0x9f, 0xf4, 0x37, 0x15, 0x79, 0x1f, 0x97, 0xf2, 0x4e, 0x18, 0x04,
	0x5d, 0x25, 0x97, 0x92, 0xbb, 0xf8, 0x84, 0x6a, 0xd5, 0x20, 0xa2, 0xc9, 0xf4, 0x98, 0x4c, 0xa5,
	0xc7, 0x64, 0x5a, 0xd9, 0x3e, 0xc7, 0x0d, 0x59, 0x13, 0x8e, 0xc6, 0xe3, 0x63, 0x0e, 0x88, 0xfd,
	0x43, 0xd0, 0x1f, 0x43, 0xcd, 0xff, 0xba, 0xa2, 0xb2, 0x92, 0x32, 0xac, 0x9e, 0xf2, 0xc2, 0x41,
	0xd9, 0x3e, 0xa4, 0x58, 0x42, 0x65, 0x7a, 0x82, 0xf7, 0x90, 0x73, 0x1c, 0x99, 0x06, 0xc9, 0x14,
	0x96, 0xcc, 0xb0, 0x60, 0xbd, 0x87, 0xa7, 0x4f, 0x98, 0xe5, 0xb8, 0x21, 0x2c, 0xd7, 0xce, 0x93,
	0x4d, 0xe3, 0xe9, 0x13, 0x58, 0x36, 0xa5, 0x30, 0x3f, 0xc7, 0x70, 0x50, 0x89, 0xa6, 0x25, 0xc3,
	0xb7, 0x1a, 0x05, 0x64, 0xee, 0x03, 0xd4, 0x18, 0x95, 0x3f, 0x38, 0x1e, 0x7b, 0xfb, 0x38, 0x86,
	0xa5, 0x1a, 0x9f, 0x94, 0xc1, 0x22, 0xe9, 0xed, 0x9c, 0x5c, 0x7a, 0x3b, 0xdf, 0x82, 0xf4, 0x76,
	0x4e, 0x23, 0xbd, 0xb3, 0x65, 0xf0, 0xaf, 0xe4, 0x5d, 0x2b, 0xb8, 0x2a, 0xba, 0x03, 0x11, 0xa4,
	0xd3, 0x1f, 0x49, 0x49, 0x58, 0xf0, 0xa6, 0x34, 0x07, 0x4b, 0x05, 0xbf, 0x64, 0xbc, 0x2a, 0x77,
	0x3e, 0x51, 0x10, 0xc7, 0xfa, 0x57, 0x32, 0xd6, 0x96, 0x62, 0xaf, 0xf4, 0xed, 0xd0, 0x79, 0x8d,
	0x9c, 0x0c, 0x09, 0x63, 0xaa, 0x2a, 0x5e, 0x6e, 0xd5, 0xf8, 0xa8, 0xbf, 0x4c, 0x66, 0x90, 0xae,
	0xf2, 0x47, 0x0d, 0x80, 0x2a, 0x5b, 0xba, 0xc1, 0x83, 0x1e, 0x30, 0x55, 0x18, 0x24, 0xfa, 0x15,
	0xea, 0x24, 0x00, 0xd8, 0x0f, 0x19, 0x0d, 0x85, 0x45, 0x2f, 0x14, 0xeb, 0x75, 0x32, 0x07, 0x4c,
	0x6a, 0x51, 0x6b, 0x9d, 0xb2, 0x1e, 0x08, 0x2c, 0xed, 0xb4, 0x7f, 0x84, 0x6a, 0x9d, 0xa1, 0xae,
	0xf5, 0xb0, 0x92, 0xeb, 0xa1, 0x2e, 0xf3, 0x3d, 0x4c, 0x7c, 0x49, 0x9c, 0x08, 0x79, 0x8d, 0xf8,
	0x74, 0xd1, 0xde, 0x35, 0x4c, 0x8f, 0x29, 0xc4, 0x5a, 0xd2, 0x07, 0x55, 0x09, 0x54, 0x18, 0xb9,
	0x33, 0x4b, 0x5f, 0x55, 0xf6, 0xd1, 0xe1, 0x4a, 0xf7, 0x5e, 0x8e, 0x2f, 0xb4, 0x32, 0xa6, 0x68,
	0xc9, 0x75, 0x3a, 0x01, 0x2a, 0xa9, 0x92, 0x2f, 0x11, 0x82, 0x14, 0xb5, 0xe1, 0x8e, 0x33, 0x62,
	0x93, 0x5f, 0xac, 0x96, 0x3c, 0x2c, 0x14, 0x5f, 0xcc, 0xf1, 0x6c, 0xd3, 0xfa, 0x22, 0xbf, 0x23,
	0x3e, 0x6d, 0x87, 0xb1, 0x82, 0x4c, 0x6a, 0xa1, 0xec, 0xb6, 0x76, 0x4f, 0x7c, 0xac, 0x38, 0xf6,
	0x98, 0xa4, 0xad, 0x3f, 0xc1, 0x00, 0x5d, 0x42, 0x68, 0x73, 0xcc, 0x03, 0xd0, 0x64, 0x13, 0x8e,
	0x67, 0x35, 0x05, 0x39, 0x49, 0x93, 0x86, 0x9c, 0x24, 0xeb, 0xcf, 0x65, 0x0e, 0x7c, 0x9a, 0xfa,
	0x99, 0xed, 0x30, 0xce, 0x93, 0x05, 0xca, 0x0f, 0xec, 0xc0, 0x73, 0x74, 0x61, 0xe3, 0xed, 0xb8,
	0xe4, 0x2b, 0xee, 0xe4, 0xa4, 0x61, 0xd0, 0x4e, 0x3a, 0xbe, 0x4d, 0x41, 0xfc, 0x4c, 0x3f, 0x3c,
	0x3a, 0x73, 0x41, 0x58, 0xfb, 0xb8, 0xc7, 0xbc, 0x8b, 0xdb, 0x2d, 0xb1, 0x49, 0xde, 0x85, 0x5f,
	0xb5, 0xa6, 0x15, 0x83, 0x0c, 0x53, 0xfb, 0xe1, 0x38, 0x84, 0xa3, 0x36, 0x6e, 0x9a, 0x22, 0x7d,
	0x8c, 0x36, 0xe0, 0x9e, 0xeb, 0x79, 0xf7, 0xdd, 0xc8, 0x9c, 0x91, 0x6c, 0x3a, 0xaa, 0xfd, 0x8f,
	0x72, 0x41, 0x49, 0x21, 0x28, 0x29, 0x81, 0x1b, 0x64, 0x1e, 0xb2, 0x42, 0xba, 0x03, 0x61, 0xb2,
	0x87, 0xdf, 0xb8, 0xbe, 0x41, 0xe6, 0x60, 0x54, 0x20, 0xdc, 0xaf, 0x1f, 0xd6, 0xc4, 0x13, 0x1d,
	0x43, 0x53, 0xb2, 0xf3, 0x78, 0x26, 0xe1, 0xf7, 0xbb, 0x52, 0x4f, 0x7e, 0x81, 0xdd, 0x7c, 0x22,
	0x4f, 0xec, 0xc5, 0xd2, 0xff, 0x4d, 0xe5, 0x0b, 0x58, 0x1d, 0x94, 0x48, 0x8a, 0x56, 0x49, 0x89,
	0x64, 0x2f, 0xc9, 0x4f, 0x0c, 0xcf, 0x36, 0x78, 0x39, 0xce, 0xf6, 0x85, 0xa9, 0x68, 0x4c, 0xfa,
	0x52, 0xa7, 0xab, 0x69, 0xc0, 0xf2, 0x85, 0xbe, 0xf6, 0xfb, 0x03, 0x5b, 0x4b, 0x8c, 0x14, 0xdd,
	0x46, 0x01, 0x6b, 0xf7, 0xaf, 0x60, 0x39, 0x15, 0x0e, 0x7e, 0x92, 0x1f, 0x1c, 0xa7, 0xe8, 0x42,
	0x55, 0x3a, 0xa4, 0x7c, 0xbb, 0x90, 0xbf, 0xf7, 0x64, 0x45, 0x45, 0x1d, 0xae, 0xe4, 0x22, 0x76,
	0x0f, 0xcf, 0x98, 0x1e, 0xf5, 0x98, 0xdf, 0xe0, 0x34, 0x34, 0x5d, 0x51, 0xd3, 0x56, 0xfa, 0x89,
	0xa2, 0x95, 0x1e, 0x17, 0xd5, 0xbf, 0x97, 0xf9, 0x8f, 0x31, 0xb6, 0x92, 0x32, 0x7a, 0x8d, 0x2c,
	0x87, 0x6e, 0xc4, 0x7c, 0x58, 0xf9, 0x4a, 0xd4, 0x0f, 0x78, 0x8d, 0x2c, 0x27, 0x2b, 0xe5, 0xe8,
	0x94, 0xa9, 0xfa, 0xeb, 0xa4, 0xa6, 0x8a, 0xdc, 0x24, 0x2d, 0x26, 0x87, 0xb5, 0xf8, 0x21, 0x59,
	0xc2, 0x2a, 0x26, 0x31, 0xf8, 0xd4, 0xb0, 0x9c, 0xac, 0x6b, 0x68, 0x47, 0x21, 0x2a, 0xb7, 0x2b,
	0x7a, 0x62, 0x92, 0xa5, 0x75, 0x8c, 0x36, 0x2f, 0x03, 0x59, 0x52, 0x4e, 0xe9, 0x40, 0xe5, 0x44,
	0x41, 0xa0, 0xb2, 0xbe, 0x4a, 0x56, 0x94, 0x99, 0xe2, 0x41, 0x4f, 0x37, 0x55, 0xff, 0xb2, 0x42,
	0x2e, 0xc7, 0x4c, 0xc2, 0x21, 0x92, 0x68, 0x34, 0xd4, 0x6a, 0x41, 0xb9, 0xc9, 0x36, 0x03, 0x43,
	0x80, 0xaa, 0x7b, 0x55, 0xf7, 0x0f, 0x51, 0xe6, 0x19, 0x06, 0x4a, 0x87, 0x32, 0xff, 0x67, 0x85,
	0x5c, 0x8e, 0x45, 0x91, 0xe7, 0xa7, 0xa4, 0x48, 0x96, 0xc8, 0xb4, 0x1b, 0xd9, 0xcc, 0x57, 0xf9,
	0xc3, 0x3a, 0xcb, 0xd5, 0x3c, 0xcb, 0x93, 0x45, 0x2c, 0x5f, 0x21, 0x33, 0xbc, 0xc3, 0xec, 0xc0,
	0x67, 0x72, 0x94, 0x33, 0xbf, 0x5f, 0x25, 0x73, 0x20, 0x76, 0x30, 0x9e, 0xd3, 0x45, 0xe1, 0xe1,
	0x5f, 0x92, 0x67, 0xe2, 0x62, 0x3d, 0xd0, 0x8b, 0xa0, 0x09, 0xa9, 0xf6, 0x46, 0x3f, 0xfb, 0x6a,
	0xde, 0xcf, 0x1e, 0x2a, 0xc7, 0x21, 0xee, 0xf5, 0x6f, 0x65, 0xa9, 0x8e, 0x62, 0xe2, 0xdf, 0x29,
	0x31, 0xea, 0xd3, 0x08, 0xfd, 0x71, 0xd3, 0x34, 0xfa, 0x5a, 0x9b, 0x46, 0x09, 0xe4, 0x99, 0x4d,
	0xa3, 0xf4, 0x64, 0x01, 0x02, 0xff, 0x80, 0x26, 0x4b, 0x9e, 0x9f, 0xef, 0xd4, 0x28, 0xff, 0xaf,
	0x0a, 0xce, 0x96, 0xa4, 0x1b, 0xa7, 0x9f, 0x2d, 0x35, 0x09, 0xa1, 0x79, 0xbc, 0x17, 0xc8, 0x22,
	0x7c, 0x8a, 0xd8, 0x53, 0xcd, 0xe5, 0x4d, 0x7b, 0x37, 0x53, 0xca, 0xb5, 0x93, 0x5d, 0x42, 0xc0,
	0xe9, 0x82, 0x33, 0x99, 0x99, 0xa2, 0xb1, 0x99, 0x4d, 0x4d, 0xc0, 0xe2, 0xfe, 0x7c, 0xa7, 0x86,
	0xe6, 0x5f, 0x54, 0x70, 0xb3, 0x0d, 0x6a, 0x26, 0xab, 0xca, 0xe9, 0xca, 0xfa, 0xed, 0x2a, 0xfd,
	0xff, 0xa8, 0xe0, 0x26, 0xbd, 0x90, 0x9b, 0xef, 0x94, 0x5c, 0x7f, 0x45, 0x9e, 0xd5, 0xca, 0xf9,
	0xe9, 0x3a, 0x62, 0x94, 0xec, 0x19, 0xae, 0x10, 0x7f, 0x5b, 0xc1, 0x72, 0x61, 0x26, 0xf2, 0xdf,
	0x29, 0x51, 0xfe, 0xb9, 0x7e, 0x12, 0x2b, 0xb6, 0x4d, 0x7f, 0x3c, 0xfd, 0xfc, 0xef, 0xfa, 0x61,
	0x6c, 0x8a, 0x95, 0xef, 0x94, 0x44, 0x07, 0x38, 0xe7, 0x55, 0x07, 0xbe, 0x4d, 0xcd, 0x54, 0x33,
	0xbc, 0x90, 0xf6, 0x77, 0x4a, 0x88, 0x2a, 0x0e, 0x7b, 0x14, 0x84, 0x8e, 0x31, 0x4e, 0xf7, 0x85,
	0x3c, 0x4f, 0x8b, 0x81, 0x46, 0x97, 0x88, 0x79, 0x89, 0x10, 0x28, 0xf7, 0x5e, 0x18, 0xa2, 0x4b,
	0x7e, 0xb1, 0xde, 0x95, 0x11, 0x2d, 0xc7, 0x01, 0xec, 0x43, 0x2f, 0x30, 0xa9, 0xea, 0xa6, 0x18,
	0xd6, 0x97, 0x57, 0xf5, 0xd3, 0x2d, 0x4b, 0xee, 0x1e, 0x19, 0xba, 0x61, 0x8d, 0x81, 0xdf, 0x1c,
	0x41, 0x36, 0xb3, 0xe7, 0x8d, 0xeb, 0x90, 0x68, 0x7b, 0xde, 0xaa, 0xfa, 0x06, 0xa5, 0x1a, 0xd5,
	0x3e, 0xb8, 0x7a, 0xad, 0x6e, 0xbd, 0x8d, 0x9b, 0x54, 0x20, 0x61, 0x0a, 0x50, 0xd5, 0x09, 0x71,
	0x23, 0x3b, 0xea, 0x37, 0x9b, 0x2c, 0x8a, 0x64, 0x91, 0xf6, 0x3f, 0x95, 0xfb, 0xd1, 0xb8, 0xe1,
	0x68, 0x79, 0x5f, 0x27, 0x8b, 0x4d, 0xea, 0xb9, 0xfb, 0xfd, 0xd0, 0x1f, 0x21, 0xf2, 0x4c, 0x3d,
	0x02, 0x34, 0x25, 0xc5, 0xe5, 0x0c, 0x92, 0x0b, 0x37, 0xc8, 0x89, 0xb1, 0xbc, 0x06, 0xe6, 0xb9,
	0x46, 0x00, 0x2a, 0xfb, 0xf0, 0xd7, 0xf2, 0xe0, 0x31, 0xd7, 0x7e, 0x74, 0x5f, 0x56, 0xc8, 0xac,
	0x98, 0x19, 0x87, 0x4c, 0x0a, 0x1c, 0xa2, 0x73, 0x20, 0xf0, 0x12, 0x7c, 0xd7, 0x5f, 0x21, 0x2b,
	0x21, 0xa4, 0x1e, 0xe4, 0x6a, 0x66, 0x14, 0x76, 0xf2, 0x72, 0xd2, 0xc9, 0x07, 0x62, 0xe8, 0xa8,
	0xeb, 0x6f, 0x05, 0x43, 0xba, 0x3a, 0x4f, 0xaa, 0xbd, 0x20, 0x92, 0x3a, 0xf8, 0x9f, 0xa4, 0x7b,
	0x6b, 0x68, 0x3f, 0xba, 0xab, 0x9f, 0x10, 0x02, 0xfd, 0xc4, 0x4c, 0x05, 0x3c, 0x71, 0x7a, 0x4e,
	0x01, 0x6a, 0xe8, 0x00, 0x66, 0xef, 0x8b, 0x9d, 0xcd, 0xf7, 0x17, 0x37, 0x1f, 0x6c, 0x6d, 0xee,
	0xd9, 0xdb, 0x0f, 0x9f, 0xac, 0xdd, 0xdf, 0xbe, 0x9d, 0x1b, 0x4c, 0x43, 0x71, 0x09, 0x39, 0xcd,
	0x6f, 0x53, 0xd7, 0x1b, 0xec, 0xd1, 0xe2, 0x4b, 0x79, 0xd6, 0xbe, 0xbc, 0x9e, 0x1c, 0x03, 0x8d,
	0xe6, 0xff, 0x26, 0x59, 0xe2, 0x34, 0xc2, 0x2d, 0x89, 0x9e, 0x93, 0x1b, 0x07, 0xe9, 0x1c, 0x81,
	0xcc, 0x8e, 0x61, 0xac, 0xaf, 0x30, 0xc5, 0x30, 0xa6, 0x21, 0x43, 0x9b, 0x45, 0x92, 0x7e, 0x9d,
	0x2c, 0x67, 0x5a, 0xa7, 0x02, 0x63, 0x05, 0xc8, 0x7b, 0x98, 0x74, 0x98, 0x45, 0x3e, 0xba, 0x1b,
	0xef, 0x90, 0x25, 0xda, 0xe4, 0xee, 0xa1, 0xcb, 0x07, 0xf6, 0x21, 0xf5, 0xfa, 0xea, 0x98, 0xeb,
	0x7b, 0x48, 0x09, 0xc8, 0xc4, 0x00, 0xb2, 0x3e, 0xa6, 0x1e, 0x8a, 0x03, 0x8a, 0x6b, 0x12, 0xa0,
	0x50, 0xb6, 0x2e, 0x5a, 0xab, 0x34, 0xe0, 0x68, 0xc6, 0x6e, 0x91, 0xc5, 0x98, 0xae, 0x26, 0x81,
	0x67, 0xd3, 0x12, 0x48, 0x81, 0xa8, 0xd2, 0x6f, 0x29, 0x52, 0x4f, 0x44, 0xa7, 0xea, 0x6f, 0xc5,
	0xc5, 0x3d, 0xb5, 0xc2, 0x28, 0x23, 0xfb, 0xf8, 0x25, 0xe6, 0x2c, 0xa5, 0xf0, 0x0d, 0x19, 0xb6,
	0x73, 0x64, 0x3e, 0xe1, 0x47, 0xcf, 0x02, 0x01, 0x33, 0xaa, 0x7e, 0x92, 0xc1, 0x1d, 0x59, 0x14,
	0xb3, 0x08, 0xf7, 0x37, 0x23, 0x1c, 0x59, 0x93, 0x68, 0xbd, 0x3f, 0x68, 0x60, 0x49, 0xe4, 0xc2,
	0xd1, 0x7a, 0x07, 0x0f, 0x74, 0x34, 0xa8, 0x92, 0x0b, 0xcb, 0xcb, 0x38, 0xcc, 0x0f, 0xa8, 0xeb,
	0xd9, 0x77, 0xe9, 0x21, 0xb3, 0x1f, 0xb2, 0xa3, 0x42, 0x0a, 0x6f, 0x23, 0x1f, 0x00, 0xb8, 0xe7,
	0x72, 0xcf, 0x78, 0x26, 0xe8, 0xfa, 0x5c, 0x8b, 0x5f, 0x5a, 0x3b, 0xc8, 0xd9, 0x88, 0x76, 0x37,
	0xc8, 0x7c, 0x57, 0x40, 0x70, 0x01, 0xa1, 0x42, 0x05, 0x18, 0x03, 0xec, 0xba, 0x7e, 0x10, 0xd9,
	0xc9, 0xaf, 0xd6, 0x36, 0x9a, 0x06, 0xc0, 0x78, 0xa7, 0xef, 0x79, 0xc6, 0xd2, 0xae, 0x02, 0x20,
	0x53, 0xcd, 0x3f, 0x66, 0x0e, 0xe3, 0xa8, 0x3e, 0x1a, 0x90, 0xe1, 0xa8, 0x4a, 0x1e, 0xb1, 0x5b,
	0x64, 0x0e, 0x28, 0xb6, 0xfa, 0x9e, 0x27, 0x8d, 0xfd, 0x72, 0xa6, 0x03, 0x56, 0x57, 0xd0, 0x3b,
	0x13, 0xd6, 0xd3, 0xe4, 0x26, 0x8b, 0xc9, 0xe9, 0x92, 0xda, 0x65, 0xd4, 0x39, 0x85, 0xa4, 0x3e,
	0xd5, 0x24, 0x65, 0x44, 0x55, 0xf2, 0x8a, 0x9b, 0xb4, 0xed, 0x7b, 0x81, 0x43, 0x07, 0x0d, 0xb7,
	0x5d, 0x5c, 0x71, 0xfd, 0xfb, 0x48, 0x30, 0x05, 0xc4, 0xc5, 0x1f, 0x76, 0xe4, 0xb6, 0x7d, 0xbc,
	0x5e, 0xa5, 0x2e, 0x6e, 0x88, 0xdf, 0x8d, 0xbe, 0xe0, 0xff, 0x55, 0xbe, 0x89, 0x02, 0x2a, 0x9f,
	0x12, 0x27, 0x28, 0xd9, 0xdd, 0xc0, 0xe7, 0x1d, 0x69, 0x15, 0x56, 0xc9, 0x0a, 0xfc, 0x29, 0xef,
	0x92, 0x38, 0x74, 0x10, 0x69, 0xd5, 0x03, 0x05, 0xb4, 0x76, 0xaa, 0x50, 0x7f, 0x86, 0xd4, 0x42,
	0xc6, 0xc3, 0x00, 0x26, 0x34, 0x4b, 0xdd, 0x4a, 0x11, 0x42, 0x77, 0xa3, 0x28, 0x55, 0x2f, 0x01,
	0x5e, 0x1c, 0xe0, 0x9c, 0x85, 0xea, 0x10, 0x63, 0x46, 0x81, 0x6a, 0xfd, 0x9e, 0x05, 0xf7, 0x62,
	0x95, 0xac, 0xe8, 0x98, 0xa1, 0x9e, 0x30, 0x3c, 0xee, 0x62, 0xfd, 0x48, 0x56, 0x97, 0x73, 0xdb,
	0xfe, 0x1a, 0x64, 0x5a, 0x19, 0x7d, 0xd3, 0xc8, 0x16, 0x1c, 0x48, 0xe7, 0x47, 0xda, 0x0f, 0xad,
	0x59, 0x49, 0xfb, 0x21, 0x0b, 0x0b, 0x88, 0x86, 0xf7, 0x91, 0xf9, 0xc2, 0x41, 0x78, 0x2a, 0x2f,
	0x82, 0x68, 0x60, 0x27, 0x38, 0x7e, 0xac, 0x14, 0x9e, 0x21, 0xe6, 0xe4, 0x86, 0x96, 0xfa, 0xba,
	0xbc, 0x1b, 0x90, 0x90, 0x6c, 0x74, 0x82, 0x23, 0x43, 0x01, 0xf9, 0x73, 0x19, 0xee, 0x00, 0x74,
	0xbc, 0xf4, 0x84, 0x86, 0xf0, 0x8b, 0x6e, 0xd3, 0x81, 0x51, 0x11, 0x7f, 0x25, 0xcb, 0x58, 0xe9,
	0x70, 0x25, 0x85, 0xf0, 0x32, 0x99, 0x15, 0x1a, 0xc0, 0xa9, 0xeb, 0xa5, 0x6c, 0x63, 0x24, 0x70,
	0x09, 0x35, 0xb4, 0x1d, 0x26, 0x7e, 0x14, 0x8a, 0x81, 0xaa, 0x89, 0x5b, 0xc0, 0x44, 0x41, 0xad,
	0x0f, 0x71, 0x37, 0x0f, 0x6f, 0x90, 0x21, 0x03, 0x43, 0x96, 0xc4, 0x65, 0xdc, 0xa6, 0x39, 0x74,
	0x20, 0xfd, 0xc6, 0x47, 0xb8, 0x01, 0xcf, 0xb7, 0x2e, 0x7f, 0x03, 0x2c, 0x8d, 0xf0, 0x4d, 0xd4,
	0xd3, 0xad, 0x07, 0x0d, 0xc6, 0x87, 0x56, 0xd6, 0x4f, 0xbc, 0x9b, 0x9a, 0xd2, 0x52, 0xad, 0x51,
	0xc9, 0x21, 0xda, 0x40, 0x8b, 0xb3, 0xf5, 0x60, 0xcd, 0x71, 0x8c, 0x05, 0x22, 0xaf, 0x90, 0x49,
	0xa8, 0x33, 0xa9, 0xeb, 0x99, 0xac, 0xde, 0xe8, 0xb7, 0xdc, 0xb6, 0xf5, 0x36, 0x5a, 0xa4, 0x04,
	0x49, 0x49, 0xe2, 0xb7, 0x34, 0xe2, 0xc6, 0x97, 0x23, 0x32, 0x3d, 0xd5, 0x69, 0x41, 0x9b, 0x92,
	0xb4, 0x7e, 0x84, 0xba, 0x08, 0xed, 0x1a, 0xdc, 0x35, 0xf9, 0x0b, 0x59, 0x72, 0xf2, 0x5c, 0x33,
	0xd5, 0xec, 0x04, 0x14, 0x65, 0xdc, 0x6b, 0x5c, 0x8a, 0xaa, 0x59, 0x49, 0x8a, 0x1f, 0x60, 0x4a,
	0x36, 0xca, 0x46, 0x6e, 0x21, 0xcd, 0xfb, 0xe1, 0x0c, 0x5d, 0x79, 0x17, 0xae, 0xa0, 0x71, 0x49,
	0xea, 0xef, 0xa2, 0x59, 0x01, 0x04, 0xc3, 0x4f, 0xb3, 0xb3, 0xa4, 0xa5, 0x95, 0xc9, 0xb6, 0x3c,
	0x81, 0x0a, 0x1b, 0x6b, 0x25, 0x5d, 0x21, 0x93, 0xb2, 0xa4, 0x57, 0xa2, 0xc2, 0x50, 0xdd, 0xa8,
	0x40, 0x85, 0xc7, 0x28, 0x9c, 0x94, 0x22, 0x6e, 0xac, 0x8e, 0x76, 0x85, 0x4c, 0xca, 0xd2, 0x7b,
	0x09, 0x71, 0xa8, 0x67, 0x56, 0x40, 0x7c, 0x8c, 0x52, 0x69, 0xca, 0xf3, 0x84, 0x76, 0xe6, 0x6d,
	0xee, 0x0a, 0x99, 0x95, 0xfb, 0x4a, 0x27, 0x6b, 0x2d, 0xe2, 0x76, 0xa5, 0x7d, 0x62, 0xbc, 0xe7,
	0xdb, 0xf7, 0x61, 0x29, 0x7c, 0xd4, 0x63, 0x3e, 0x54, 0xdb, 0x90, 0x7f, 0x27, 0xef, 0xd5, 0xbc,
	0xab, 0xea, 0xb3, 0x45, 0x1c, 0xaa, 0x2e, 0xb7, 0x58, 0x58, 0xb2, 0xda, 0xf5, 0x7b, 0xaa, 0x60,
	0x9b, 0xd6, 0xb2, 0x24, 0x77, 0x0f, 0xd0, 0x90, 0x6f, 0xd2, 0x88, 0xb3, 0x70, 0xb3, 0xdd, 0x1e,
	0x4a, 0x39, 0xf3, 0xde, 0x44, 0xfe, 0x41, 0x2b, 0xeb, 0xd7, 0x64, 0xb5, 0x81, 0xeb, 0x42, 0x1e,
	0x63, 0xd2, 0xba, 0x92, 0x6b, 0x1d, 0x17, 0x62, 0x2b, 0x5d, 0x9f, 0xe2, 0x3c, 0x59, 0xc0, 0x20,
	0x94, 0xa3, 0x27, 0x57, 0xcb, 0x0b, 0x2a, 0x79, 0xe2, 0x25, 0xc5, 0xf1, 0x31, 0xce, 0x47, 0x18,
	0xe0, 0x06, 0x0f, 0x03, 0xbf, 0xcd, 0x3b, 0xcc, 0x2f, 0x5f, 0x6a, 0xb6, 0x89, 0xb3, 0x32, 0xdb,
	0xbe, 0xe4, 0xba, 0x96, 0x8e, 0x66, 0x4c, 0x98, 0xa2, 0x36, 0x5f, 0x61, 0xd4, 0x26, 0x43, 0x04,
	0xfe, 0x64, 0x8e, 0x31, 0x3f, 0xb4, 0x64, 0xa9, 0xd7, 0x03, 0x0c, 0xe9, 0x18, 0x90, 0x97, 0xcf,
	0x50, 0xcc, 0x75, 0xa4, 0xa8, 0x66, 0xe7, 0x07, 0xa8, 0xf2, 0x80, 0x7d, 0x97, 0x45, 0x81, 0x77,
	0xc8, 0xca, 0xc9, 0xba, 0x0a, 0x87, 0xc9, 0x2b, 0x31, 0xa7, 0xaa, 0x71, 0x49, 0xfe, 0x54, 0x81,
	0x54, 0x2d, 0x64, 0x93, 0x5f, 0xa1, 0xdf, 0xc1, 0xed, 0x00, 0xe0, 0xbf, 0xe3, 0x1e, 0x97, 0x57,
	0x82, 0x9f, 0xe2, 0x16, 0x21, 0x6e, 0x78, 0xb6, 0xa3, 0xbf, 0xa7, 0xa9, 0xe8, 0x1d, 0xf7, 0xb8,
	0xf4, 0xb0, 0x4f, 0x0c, 0x1d, 0x76, 0x47, 0x53, 0x5c, 0x0d, 0xeb, 0x19, 0x8f, 0xb7, 0x7c, 0xc8,
	0x6d, 0x2d, 0x3a, 0x50, 0x34, 0x8c, 0xd5, 0x04, 0xac, 0x5f, 0x60, 0x00, 0x35, 0x07, 0x5b, 0x3a,
	0x6f, 0x9b, 0xb4, 0xdc, 0x63, 0x59, 0x29, 0x39, 0x15, 0x39, 0x53, 0x35, 0x0d, 0x93, 0x9f, 0x53,
	0x7a, 0x28, 0xac, 0xe8, 0x58, 0xc3, 0xfd, 0x73, 0x4d, 0x0f, 0x55, 0xe3, 0xb3, 0x18, 0xf2, 0x98,
	0x3f, 0xeb, 0x43, 0x0c, 0xb3, 0x6d, 0x31, 0x81, 0x9b, 0x39, 0x63, 0x96, 0xbf, 0xa6, 0x18, 0x94,
	0x49, 0xb7, 0x3e, 0x5b, 0x9d, 0x94, 0x71, 0x40, 0x78, 0x79, 0x6a, 0x2b, 0xf0, 0xcc, 0x47, 0x29,
	0x0d, 0xe4, 0x25, 0x0d, 0x58, 0x92, 0x97, 0x4b, 0x64, 0x19, 0x2e, 0xd8, 0xfb, 0x6d, 0xe6, 0xe8,
	0x89, 0x79, 0x2a, 0x02, 0x10, 0x23, 0x35, 0x44, 0x9c, 0x16, 0x53, 0x94, 0xcb, 0xae, 0x08, 0x9b,
	0xf2, 0x85, 0x85, 0xa0, 0xdf, 0xec, 0xec, 0xb0, 0x30, 0x0a, 0xfc, 0x78, 0x71, 0x31, 0xdd, 0x70,
	0x60, 0x00, 0x60, 0xa7, 0x9e, 0x66, 0xfa, 0x33, 0x79, 0x64, 0x56, 0x88, 0xa7, 0xa4, 0x00, 0x8a,
	0x51, 0xe7, 0x56, 0xc2, 0x38, 0x8f, 0x42, 0xec, 0xe4, 0xda, 0x2c, 0x9d, 0x9b, 0xf8, 0x86, 0x4a,
	0xa0, 0x8f, 0x18, 0xcf, 0xb2, 0x91, 0xc3, 0x5f, 0x91, 0xe5, 0xba, 0x2e, 0xc1, 0x9a, 0xee, 0x05,
	0xfb, 0xd4, 0x8b, 0xa1, 0x8d, 0xe7, 0x8c, 0x06, 0x2e, 0xc7, 0x7b, 0xf1, 0x18, 0xc2, 0xa2, 0x45,
	0x14, 0x8b, 0x79, 0xcc, 0xc9, 0x20, 0x7e, 0x0f, 0x2b, 0x19, 0xbc, 0x0c, 0xb6, 0x6f, 0x88, 0xf7,
	0xfc, 0x0d, 0x46, 0xeb, 0x1f, 0xeb, 0x43, 0x9f, 0xe5, 0xe2, 0x9b, 0x18, 0xfa, 0xdc, 0x8d, 0x50,
	0xeb, 0x15, 0xf4, 0xf2, 0x76, 0x19, 0xd6, 0xa7, 0x78, 0x10, 0xf8, 0xcc, 0x1c, 0x59, 0xb8, 0x1b,
	0xbf, 0xd1, 0x97, 0x01, 0xbe, 0x29, 0xc4, 0x80, 0x1f, 0xf5, 0x08, 0xfa, 0xaa, 0x8c, 0xa1, 0xc8,
	0x5f, 0xba, 0x02, 0x5e, 0xd5, 0xbc, 0xab, 0xe5, 0xc8, 0x9a, 0xec, 0x56, 0x82, 0xd9, 0x89, 0xa3,
	0x04, 0xb5, 0x1c, 0x1f, 0x63, 0xd4, 0x9c, 0xcf, 0x23, 0xdc, 0xc2, 0xdd, 0xda, 0x13, 0xb7, 0x07,
	0x01, 0x77, 0x8c, 0x39, 0xdc, 0xf1, 0x68, 0xdb, 0x54, 0xe7, 0x07, 0x23, 0xe8, 0x32, 0x3a, 0x04,
	0xaf, 0xd3, 0x60, 0x7c, 0xeb, 0x95, 0x38, 0xfa, 0x91, 0xc6, 0x55, 0x28, 0xce, 0x8f, 0xe3, 0x60,
	0x47, 0x06, 0xb8, 0xa4, 0x01, 0xfa, 0x31, 0x9e, 0x3f, 0x6c, 0x31, 0xde, 0xe8, 0xb1, 0xa6, 0x4b,
	0xbd, 0x27, 0xc2, 0xdd, 0x31, 0x06, 0x5b, 0x6a, 0x64, 0xee, 0xd0, 0xed, 0xd9, 0xfa, 0x13, 0x82,
	0xb2, 0xb4, 0x65, 0x11, 0x86, 0x92, 0x3c, 0x7c, 0x84, 0xde, 0xc1, 0x9a, 0xe3, 0xc0, 0x75, 0xc5,
	0xb5, 0x26, 0xdf, 0x0b, 0x02, 0xaf, 0xfe, 0x12, 0x99, 0xe3, 0x41, 0xe0, 0xe9, 0x95, 0xdd, 0xcf,
	0xa9, 0x3b, 0x58, 0x9d, 0x4e, 0xd0, 0x8f, 0x98, 0x2d, 0x7e, 0xb7, 0xae, 0xab, 0x0b, 0xc5, 0xdd,
	0xe0, 0x90, 0xa5, 0x30, 0xc0, 0x0b, 0x66, 0x81, 0x97, 0x18, 0x9b, 0xeb, 0xea, 0xd5, 0x5d, 0x01,
	0xfa, 0xe8, 0xc8, 0x67, 0x21, 0xc0, 0x15, 0x09, 0xf6, 0x15, 0x14, 0xec, 0xba, 0xa2, 0x35, 0xec,
	0x22, 0x84, 0x8a, 0xdf, 0xc1, 0x1c, 0x7c, 0x40, 0xfd, 0x6d, 0x7f, 0xdd, 0xa3, 0xcd, 0x03, 0xc3,
	0x9b, 0xa0, 0xe7, 0xe2, 0xe9, 0xaa, 0x81, 0x96, 0x8f, 0x4d, 0xa5, 0x8d, 0x10, 0x6c, 0xd4, 0xe1,
	0x69, 0x96, 0x54, 0xcf, 0x0d, 0x63, 0x07, 0xd2, 0x88, 0xfd, 0xb5, 0x9a, 0xf5, 0x11, 0x86, 0x27,
	0x76, 0xdc, 0xe6, 0xc1, 0xe3, 0xde, 0x48, 0x04, 0x9a, 0x38, 0xb1, 0x79, 0x1b, 0x25, 0x5f, 0xd0,
	0xbc, 0xb4, 0x67, 0xa7, 0x0d, 0xb1, 0x5e, 0x0f, 0x2d, 0x33, 0xc4, 0xaf, 0x27, 0x83, 0x81, 0xa5,
	0xb7, 0x38, 0xc3, 0xc2, 0xe1, 0x97, 0xc8, 0xb2, 0x00, 0xb5, 0xf1, 0x3e, 0x7c, 0xc4, 0x59, 0x4f,
	0x8e, 0xf4, 0x9b, 0xe8, 0xdf, 0x6d, 0x50, 0x7f, 0xc7, 0xa3, 0x83, 0x9f, 0x50, 0xce, 0xc2, 0x75,
	0xea, 0x79, 0xf5, 0x67, 0xc9, 0xb9, 0x26, 0x95, 0x39, 0xe5, 0x47, 0xe2, 0xab, 0xbd, 0x4f, 0x3d,
	0x4f, 0x86, 0xe8, 0x3f, 0x4a, 0x6e, 0x1e, 0x37, 0x38, 0xe5, 0xfd, 0x08, 0x4b, 0x7d, 0x98, 0xa4,
	0x19, 0x01, 0x4c, 0x22, 0x0e, 0x8a, 0xe2, 0x68, 0x0c, 0xfc, 0xa6, 0x40, 0x81, 0x57, 0x01, 0xd5,
	0xba, 0x82, 0x6c, 0xf6, 0x3d, 0xcf, 0x67, 0x51, 0x94, 0xac, 0x2b, 0xf0, 0x59, 0x3e, 0x20, 0x2a,
	0xcd, 0xee, 0x65, 0x52, 0xc7, 0x20, 0x7a, 0xea, 0xb7, 0xaa, 0x1e, 0x32, 0xdf, 0x09, 0x59, 0x8b,
	0x85, 0xe3, 0xd4, 0xc6, 0x86, 0xf0, 0x82, 0xd6, 0xac, 0xbc, 0xbe, 0xa5, 0x30, 0xc9, 0x64, 0x84,
	0x1e, 0x20, 0x92, 0x85, 0x88, 0x64, 0x82, 0xae, 0x40, 0x8b, 0x04, 0x8c, 0xb6, 0x7f, 0x53, 0xde,
	0xed, 0x49, 0x43, 0x3e, 0x43, 0x6a, 0x40, 0x03, 0xeb, 0x2a, 0xdb, 0x81, 0x1f, 0xb4, 0x5a, 0xb2,
	0x24, 0x9d, 0xaa, 0x5d, 0xee, 0x3a, 0xc9, 0x66, 0x2a, 0x8e, 0x96, 0x3f, 0xf2, 0x65, 0x49, 0xed,
	0x5d, 0x68, 0x68, 0xb8, 0x04, 0x51, 0xd7, 0xef, 0xd6, 0x6f, 0xfa, 0x2c, 0x6c, 0x0f, 0x20, 0x56,
	0x00, 0xff, 0x4b, 0xde, 0xe8, 0xc2, 0xbf, 0xf5, 0xd7, 0x2a, 0x64, 0xa8, 0x5c, 0xa9, 0xb5, 0xb1,
	0x53, 0xeb, 0xe8, 0xa0, 0xa7, 0xe0, 0x5e, 0x23, 0x8b, 0xae, 0x24, 0xa9, 0xaf, 0x65, 0xb8, 0x43,
	0x90, 0x18, 0xb4, 0x9f, 0xad, 0xf7, 0xb0, 0x47, 0x90, 0x33, 0xf6, 0xd8, 0xf7, 0x82, 0xa6, 0x39,
	0x79, 0x2d, 0x7b, 0x1d, 0xff, 0xaf, 0xe4, 0x4b, 0xe2, 0xd9, 0xb6, 0xa5, 0x8f, 0x2c, 0x66, 0x15,
	0x2b, 0x72, 0xab, 0xba, 0x94, 0x6c, 0x55, 0x7d, 0xc6, 0x9c, 0xfa, 0x73, 0x32, 0xd4, 0x5c, 0x2d,
	0xfc, 0xf5, 0x8a, 0x7a, 0x4f, 0x16, 0x2f, 0x74, 0xe1, 0xb1, 0x1e, 0x56, 0x9a, 0x11, 0xbf, 0x5b,
	0xef, 0xa2, 0x72, 0x28, 0xc6, 0x86, 0x5c, 0xe5, 0xcf, 0x76, 0xec, 0x1e, 0x0e, 0x5d, 0xa6, 0x65,
	0xf9, 0xfc, 0xaf, 0x14, 0xb2, 0x4d, 0x99, 0x4a, 0x10, 0xb2, 0x28, 0x1a, 0x87, 0x8b, 0x4c, 0xb5,
	0xa1, 0xa7, 0x32, 0xd1, 0x20, 0x85, 0xe6, 0x64, 0x2c, 0xa5, 0x31, 0xc3, 0xf6, 0xa3, 0xd5, 0x62,
	0x4d, 0x6e, 0x0b, 0x20, 0x50, 0xf6, 0x49, 0x50, 0xc3, 0x2d, 0xb9, 0xb4, 0xe0, 0x05, 0xeb, 0x53,
	0xf0, 0x1e, 0xc9, 0x85, 0x27, 0x83, 0xe8, 0x9b, 0xe5, 0xfe, 0xe7, 0xe8, 0x22, 0x6f, 0x1e, 0xa3,
	0x25, 0x55, 0x54, 0xef, 0x06, 0x9e, 0xb1, 0x8e, 0x51, 0x47, 0x7c, 0x7b, 0x23, 0xa9, 0xe6, 0x00,
	0x7f, 0xdf, 0x4a, 0x9c, 0x4f, 0x41, 0x41, 0x7b, 0xf6, 0xec, 0x4b, 0x74, 0x7f, 0x0b, 0x29, 0x8c,
	0xb1, 0xf5, 0xcb, 0x70, 0x8f, 0x26, 0xe0, 0x16, 0x96, 0x45, 0x56, 0x53, 0x1b, 0xcb, 0xe6, 0xa3,
	0x6f, 0x63, 0x34, 0x07, 0x0e, 0x96, 0x1f, 0x36, 0xb6, 0xb9, 0x40, 0x16, 0xdd, 0xc8, 0xf6, 0xd9,
	0x91, 0x1d, 0x5f, 0x37, 0x14, 0x96, 0x6e, 0x9e, 0x54, 0xf5, 0x74, 0xd4, 0x69, 0xad, 0x76, 0x7b,
	0x51, 0xf4, 0xe8, 0x0d, 0xcc, 0x1d, 0xde, 0x62, 0xbc, 0x88, 0x50, 0x21, 0x63, 0xb7, 0x31, 0xdf,
	0xd7, 0xd4, 0xa4, 0xa4, 0xaf, 0xb6, 0x8f, 0xf3, 0xf9, 0x09, 0xeb, 0xb8, 0x4d, 0x8f, 0x6d, 0x60,
	0xbd, 0x7b, 0xc3, 0x43, 0x8f, 0xf5, 0x2e, 0x75, 0x7d, 0xfb, 0x10, 0x41, 0x53, 0x67, 0xf6, 0xcf,
	0x91, 0xf3, 0xcd, 0xc0, 0x8f, 0xfa, 0x5d, 0x16, 0xff, 0x1c, 0x5f, 0x42, 0xac, 0x5b, 0x4d, 0x9c,
	0xf9, 0x19, 0x1a, 0xa5, 0x5d, 0x8a, 0x79, 0x21, 0x5c, 0x89, 0xd6, 0x1c, 0x54, 0xb8, 0xae, 0x05,
	0xba, 0x50, 0x10, 0xc6, 0x21, 0xed, 0x6a, 0xd1, 0x2b, 0x0d, 0x14, 0xea, 0x14, 0xf8, 0x62, 0x0f,
	0x2c, 0x97, 0x11, 0xb1, 0x8d, 0x92, 0x61, 0x7d, 0x4d, 0x8b, 0xc4, 0x54, 0x09, 0x69, 0x3c, 0x55,
	0x92, 0xb1, 0x9d, 0x34, 0x8c, 0xad, 0x7c, 0xd4, 0x61, 0x8b, 0x71, 0x8d, 0xe2, 0x90, 0x81, 0x95,
	0xb7, 0xd6, 0x0b, 0xe1, 0x4b, 0x1f, 0x8c, 0x2d, 0xcb, 0x67, 0x12, 0x47, 0x19, 0x18, 0xfd, 0x89,
	0x44, 0xeb, 0xa7, 0x78, 0x52, 0xae, 0x37, 0x3b, 0x45, 0x0d, 0x9f, 0x4c, 0xe9, 0x21, 0x15, 0xce,
	0x53, 0xa8, 0x77, 0x99, 0x63, 0x7e, 0xa1, 0x5c, 0xba, 0x7b, 0x39, 0x58, 0xe9, 0xee, 0xf5, 0x61,
	0x11, 0x49, 0xa6, 0x77, 0x05, 0xa6, 0xf7, 0x01, 0xaa, 0x80, 0x76, 0xd5, 0xd8, 0xb8, 0xea, 0x16,
	0x96, 0x77, 0x1f, 0x2b, 0xea, 0xc0, 0x50, 0x89, 0xb2, 0xc4, 0x4a, 0x1f, 0xaa, 0x4f, 0xa7, 0x4a,
	0x44, 0x18, 0x8b, 0x51, 0x7c, 0x8e, 0x1e, 0xfd, 0xe3, 0x9e, 0x17, 0x50, 0xa7, 0x31, 0x88, 0x38,
	0xeb, 0x6e, 0x80, 0x5a, 0x19, 0x52, 0x99, 0xa6, 0x51, 0xe9, 0x24, 0xda, 0xcb, 0xa9, 0xa8, 0x6a,
	0x04, 0xcd, 0x95, 0x5a, 0xca, 0xb7, 0x00, 0x61, 0xe3, 0x32, 0x66, 0x8c, 0xf0, 0x1d, 0x95, 0x44,
	0xd3, 0x6f, 0x76, 0xc6, 0x79, 0xf3, 0xd0, 0xda, 0xc0, 0xa9, 0x80, 0xbd, 0xb9, 0x13, 0x84, 0x4d,
	0xb6, 0xd5, 0x77, 0x1d, 0xf3, 0x73, 0x33, 0xe7, 0xc8, 0x7c, 0x5b, 0x00, 0x68, 0x48, 0x6a, 0xd6,
	0xdb, 0x68, 0xf8, 0xe4, 0x73, 0x27, 0xae, 0xef, 0x1c, 0xd1, 0x81, 0x44, 0xe3, 0xb0, 0x63, 0x78,
	0x88, 0xc7, 0xf5, 0x1d, 0x5b, 0x34, 0xd4, 0x90, 0xd5, 0xac, 0x77, 0xa4, 0x85, 0x38, 0xe6, 0xcc,
	0x77, 0xe0, 0x8e, 0xba, 0x71, 0xd9, 0x52, 0xab, 0x21, 0x12, 0xfc, 0x54, 0xda, 0x8b, 0x4c, 0xc3,
	0x92, 0x43, 0x9d, 0xc6, 0x75, 0x33, 0x79, 0xb8, 0x6c, 0xa3, 0x1f, 0x86, 0xcc, 0xe7, 0x80, 0x30,
	0x82, 0x77, 0x3e, 0xf0, 0x03, 0x56, 0x10, 0x8c, 0xa4, 0x52, 0x7f, 0x1f, 0xe7, 0x24, 0x8c, 0xd0,
	0x7a, 0x18, 0x1c, 0x30, 0x3f, 0x75, 0xdc, 0x88, 0x40, 0xd2, 0x65, 0xdf, 0xe8, 0x47, 0x3c, 0xe8,
	0x0e, 0x7d, 0xe8, 0xe7, 0x57, 0x68, 0x8b, 0x33, 0x90, 0x37, 0xc8, 0x7c, 0x13, 0xbe, 0x24, 0xd3,
	0x49, 0xa5, 0x79, 0x00, 0x06, 0xf9, 0xa3, 0xf0, 0xdd, 0xeb, 0x3f, 0x20, 0x0b, 0x8a, 0x51, 0xed,
	0xbc, 0x77, 0x29, 0x01, 0x06, 0x28, 0x31, 0xc1, 0x82, 0x90, 0x1d, 0xb2, 0xd0, 0x6e, 0x85, 0x4c,
	0xd5, 0x38, 0xbd, 0x2f, 0xf9, 0xa4, 0x3e, 0xaa, 0xc0, 0x76, 0x97, 0xb6, 0xcd, 0xc9, 0x7c, 0xe2,
	0xc7, 0xd4, 0xf1, 0x21, 0xbc, 0x02, 0x95, 0x60, 0xfb, 0x0b, 0xf9, 0xe2, 0x44, 0x06, 0x5d, 0xf9,
	0x4a, 0x94, 0x19, 0x0a, 0x75, 0x42, 0xfa, 0xbe, 0xfb, 0xb4, 0xcf, 0xec, 0x03, 0x86, 0x39, 0x97,
	0x0b, 0x42, 0x03, 0x7b, 0x1e, 0xe5, 0xad, 0x20, 0xec, 0x26, 0x75, 0xc7, 0xe0, 0x22, 0x5a, 0x28,
	0xfa, 0x16, 0x57, 0x18, 0x7b, 0x84, 0xca, 0xa5, 0xf1, 0x31, 0xec, 0xba, 0xca, 0x68, 0xc2, 0x02,
	0x61, 0xe3, 0x4c, 0x11, 0xca, 0x14, 0x80, 0x2c, 0xc2, 0xd2, 0x89, 0x0f, 0xe7, 0x62, 0x87, 0x3b,
	0x51, 0x9e, 0x72, 0xec, 0x58, 0x5c, 0xa6, 0x1a, 0x67, 0x1a, 0x9f, 0x78, 0xa0, 0xb2, 0x2a, 0x58,
	0x2d, 0x52, 0x41, 0x55, 0xee, 0x56, 0x3a, 0xc8, 0x63, 0x33, 0x7d, 0x88, 0x33, 0x35, 0xdf, 0xfc,
	0xdb, 0x61, 0xfb, 0x36, 0xf3, 0x98, 0xc7, 0xd9, 0x49, 0xd9, 0xce, 0x37, 0xff, 0x86, 0xd9, 0xfe,
	0x0c, 0xef, 0x47, 0x26, 0x04, 0xd7, 0xfa, 0x8e, 0xcb, 0x77, 0x59, 0xd4, 0xf7, 0x78, 0x49, 0xad,
	0x5d, 0x22, 0xd3, 0x18, 0x82, 0x91, 0x0e, 0xc3, 0x47, 0xd8, 0x15, 0x81, 0x4c, 0xae, 0x7f, 0x78,
	0xf1, 0xa3, 0xa4, 0x24, 0x64, 0x7a, 0xa0, 0x30, 0xb5, 0x3b, 0xcc, 0xbc, 0xdf, 0x7f, 0x1f, 0x0d,
	0xac, 0x0e, 0xf6, 0x32, 0x99, 0xed, 0xb1, 0xd4, 0x4e, 0xff, 0x42, 0x6a, 0x21, 0x55, 0x3f, 0x5a,
	0x1f, 0xc8, 0xd2, 0xba, 0x8c, 0xef, 0x30, 0x2e, 0x23, 0x59, 0xa2, 0x03, 0xc6, 0x9a, 0xae, 0x2c,
	0x55, 0x78, 0x0f, 0x4b, 0xe9, 0xe6, 0x1a, 0x97, 0xdf, 0xc2, 0xe9, 0xf8, 0x32, 0xe2, 0x9b, 0x55,
	0xd5, 0x00, 0x77, 0x18, 0xdf, 0x3c, 0x34, 0x9e, 0x95, 0x67, 0x99, 0xfa, 0x85, 0x3c, 0xf8, 0x8a,
	0x1b, 0x95, 0x77, 0x00, 0x03, 0xcf, 0xb1, 0x53, 0x0c, 0x5d, 0x21, 0x33, 0xc2, 0x75, 0xef, 0x31,
	0x9e, 0xba, 0x83, 0x17, 0x4b, 0xef, 0x2e, 0x3a, 0x84, 0x3b, 0x8c, 0x63, 0x7d, 0xe6, 0x5d, 0xb6,
	0xdf, 0x77, 0x8b, 0x0f, 0xe4, 0x72, 0x9d, 0x4d, 0xef, 0x85, 0x1f, 0xa3, 0xbb, 0x98, 0xc3, 0x54,
	0xbe, 0xb2, 0x10, 0x30, 0x4a, 0xa3, 0xc8, 0x3d, 0xd4, 0x34, 0xe8, 0x73, 0x94, 0xe0, 0x9d, 0x20,
	0xe2, 0x2c, 0xdc, 0x61, 0xbc, 0x14, 0x67, 0xa9, 0x6c, 0x81, 0xaa, 0x21, 0x5b, 0x60, 0x17, 0xc5,
	0x9c, 0x60, 0x2e, 0xc9, 0xe9, 0xa2, 0x0a, 0xcf, 0x20, 0xad, 0x79, 0x52, 0x65, 0xc7, 0xbd, 0xf8,
	0xcd, 0x50, 0x22, 0x85, 0x80, 0xef, 0xb0, 0x96, 0x42, 0xf8, 0x3d, 0x54, 0x75, 0x2d, 0xb5, 0x21,
	0x33, 0x48, 0xaf, 0xc7, 0x0a, 0x21, 0x5f, 0x58, 0xd5, 0x5b, 0x54, 0x8a, 0x5a, 0xec, 0xc8, 0x5c,
	0xd3, 0x81, 0xdf, 0xdc, 0x51, 0xb9, 0x92, 0x89, 0x90, 0xe2, 0x57, 0xe4, 0x4c, 0xfd, 0x00, 0xf7,
	0xe6, 0xb8, 0x87, 0xa1, 0x3b, 0xbc, 0x1a, 0xf6, 0x85, 0x8c, 0x92, 0x32, 0xbe, 0x49, 0xf9, 0x8e,
	0x6b, 0xc8, 0x5d, 0x3f, 0xd1, 0x40, 0x7c, 0x2d, 0x23, 0xa9, 0x09, 0xea, 0xd2, 0x67, 0xdd, 0xb3,
	0x42, 0x67, 0x28, 0xe7, 0x61, 0x2a, 0xd2, 0x2d, 0x58, 0xd8, 0xa7, 0x11, 0xc3, 0x10, 0xb6, 0x75,
	0x1b, 0x5d, 0x94, 0x1d, 0xc6, 0x65, 0x69, 0x30, 0x79, 0x15, 0x71, 0x76, 0x3f, 0x08, 0x7d, 0xbb,
	0x17, 0xa8, 0x67, 0x9b, 0x17, 0x30, 0xd0, 0xd6, 0xa7, 0xe2, 0x5b, 0x6e, 0x56, 0x6a, 0x8f, 0x43,
	0x3f, 0xa4, 0xfb, 0x06, 0x4d, 0x54, 0x49, 0x67, 0x1a, 0x54, 0xc9, 0xc5, 0x7d, 0x0d, 0x1b, 0xde,
	0x0d, 0xc2, 0x88, 0xdd, 0x87, 0x92, 0x5c, 0x37, 0xc9, 0x4a, 0x47, 0xfc, 0x65, 0xc3, 0x9f, 0x79,
	0xaf, 0x10, 0x7f, 0xf4, 0xe0, 0x47, 0x18, 0xf4, 0x38, 0x57, 0x23, 0x72, 0x23, 0x4e, 0x7d, 0xbe,
	0xe7, 0x9a, 0x9f, 0x0c, 0x7d, 0x5d, 0xe5, 0x6a, 0x64, 0x60, 0x57, 0xc9, 0x0a, 0x77, 0x7b, 0x76,
	0xc8, 0xa8, 0x13, 0x6f, 0xb9, 0xab, 0xf2, 0xa5, 0xe1, 0x1c, 0x76, 0xe3, 0x45, 0x80, 0x25, 0x32,
	0xcd, 0x33, 0xa9, 0x78, 0xb0, 0x17, 0x76, 0xfb, 0xb7, 0xa9, 0xf9, 0xbe, 0x2b, 0xbc, 0xe6, 0xd4,
	0x77, 0xa8, 0x9f, 0x34, 0xbc, 0x8b, 0x52, 0xd1, 0x1a, 0xa6, 0x80, 0x2a, 0x52, 0xc9, 0xe6, 0xf7,
	0xfb, 0x9c, 0x07, 0xa9, 0x8b, 0x84, 0xb8, 0x36, 0xca, 0xef, 0x4d, 0xc7, 0xba, 0x27, 0x5f, 0x9b,
	0x14, 0xfb, 0x25, 0x44, 0x57, 0x92, 0x07, 0x2c, 0x2c, 0x84, 0xe8, 0xd5, 0x36, 0xfa, 0xbf, 0x55,
	0xe4, 0x1b, 0x94, 0x1a, 0xb6, 0xf2, 0x65, 0x8a, 0x46, 0x13, 0x48, 0x57, 0x21, 0x9d, 0x94, 0xb7,
	0x81, 0x55, 0x90, 0x63, 0xca, 0x50, 0x4c, 0xeb, 0x06, 0x59, 0xe9, 0xf6, 0x23, 0xae, 0x8e, 0x3f,
	0xb5, 0x3b, 0xb4, 0xf9, 0x9a, 0x5d, 0x6f, 0xc9, 0xfc, 0x19, 0x99, 0x9e, 0xb1, 0x11, 0x38, 0xc6,
	0x5d, 0x58, 0x7c, 0x9d, 0x63, 0x41, 0xa5, 0x2d, 0xa6, 0x5a, 0x95, 0xd4, 0xef, 0xab, 0xaa, 0x38,
	0x61, 0xb3, 0xe3, 0xb2, 0x43, 0xb1, 0x67, 0x74, 0xa3, 0x4e, 0xfc, 0xaa, 0x65, 0x15, 0x94, 0x44,
	0x9d, 0xd1, 0x2a, 0xa0, 0x21, 0x87, 0xa6, 0xd8, 0x50, 0xed, 0x0d, 0xd5, 0x79, 0x6d, 0xa6, 0x61,
	0xc9, 0x21, 0xd1, 0x71, 0xbd, 0xa4, 0xca, 0x62, 0x22, 0x22, 0xe3, 0xfc, 0xf9, 0xb1, 0xaa, 0x4f,
	0xa9, 0xc1, 0xbd, 0x4a, 0x26, 0x35, 0x77, 0xe5, 0x4a, 0xd1, 0x1b, 0xc8, 0xe0, 0x3b, 0xe1, 0x08,
	0x34, 0xd4, 0x7b, 0x88, 0xaa, 0x30, 0xe2, 0x56, 0x9f, 0x3a, 0x21, 0xe5, 0x6e, 0xf3, 0x14, 0xd5,
	0x16, 0x77, 0xd5, 0x9b, 0x88, 0x79, 0xa4, 0x63, 0x3c, 0x0e, 0x90, 0xce, 0x55, 0xfd, 0xad, 0xdc,
	0xe2, 0x9d, 0x0c, 0x5f, 0x51, 0x54, 0x2a, 0x97, 0x85, 0x2a, 0xb6, 0x78, 0xf2, 0x4b, 0x7c, 0x69,
	0x1d, 0x0b, 0x8b, 0xc8, 0x8f, 0xda, 0x13, 0x4c, 0xf5, 0x67, 0x48, 0x4d, 0x7d, 0x16, 0x86, 0x08,
	0x4f, 0xd2, 0xa6, 0x95, 0xdd, 0xe9, 0x62, 0x85, 0xfe, 0x99, 0xf8, 0x95, 0xcd, 0x7e, 0x4f, 0xbd,
	0xa1, 0x58, 0xb3, 0xce, 0x63, 0x4f, 0xe2, 0x4e, 0x80, 0x9c, 0xac, 0x06, 0xda, 0xc2, 0x87, 0xec,
	0x98, 0xc7, 0xbf, 0xdc, 0xee, 0xf7, 0xb4, 0xd6, 0x38, 0x04, 0xaf, 0x90, 0x39, 0xe8, 0x8a, 0xb6,
	0x50, 0x63, 0x26, 0x45, 0x5b, 0xb5, 0x52, 0x05, 0xd9, 0x5a, 0x81, 0xf5, 0xb1, 0x4c, 0x70, 0x57,
	0x3f, 0x6d, 0xfa, 0x8e, 0xd8, 0xe2, 0x87, 0xe0, 0x8c, 0xe7, 0x8d, 0xb9, 0x86, 0x02, 0x20, 0xac,
	0x2d, 0x59, 0x23, 0x7d, 0xe0, 0x37, 0x13, 0x76, 0x03, 0x8f, 0xdd, 0xdd, 0xa9, 0xbf, 0x4a, 0x16,
	0x80, 0x4e, 0xa7, 0xa7, 0xe3, 0xb9, 0x58, 0xc4, 0x4a, 0xa7, 0x67, 0x44, 0xb4, 0x71, 0x3b, 0x46,
	0xd4, 0x74, 0x46, 0x22, 0x6a, 0x3a, 0xd6, 0xaf, 0x65, 0xea, 0xbc, 0xfa, 0x61, 0x3d, 0x88, 0x22,
	0xd0, 0x09, 0x31, 0xc6, 0xfb, 0x01, 0xe8, 0x75, 0x1c, 0xe9, 0xa9, 0x2f, 0x93, 0x19, 0xfc, 0x96,
	0x54, 0xe5, 0x87, 0x7b, 0xc8, 0xd5, 0x82, 0xa5, 0xf6, 0x07, 0x64, 0xae, 0xd3, 0x0f, 0x85, 0xe1,
	0x6a, 0xf2, 0xd4, 0xd5, 0x67, 0x09, 0x00, 0x3f, 0x58, 0xff, 0x5c, 0x96, 0x7f, 0x49, 0x31, 0xf0,
	0x38, 0x62, 0x10, 0xbc, 0x29, 0xc7, 0x83, 0xfe, 0xf2, 0x45, 0xfc, 0x34, 0x84, 0x20, 0x2d, 0x35,
	0x2e, 0xc5, 0xc8, 0x94, 0x89, 0x91, 0xae, 0xba, 0xf0, 0xe3, 0x79, 0xeb, 0xb4, 0xbd, 0xd7, 0x71,
	0xfd, 0xe2, 0x48, 0xa0, 0xa5, 0x52, 0xf1, 0x34, 0x85, 0x59, 0x92, 0xf7, 0x76, 0x54, 0x0d, 0xc0,
	0x17, 0xf2, 0x0e, 0x52, 0x06, 0x44, 0x19, 0xdd, 0x14, 0xb9, 0x92, 0x46, 0x77, 0x4b, 0xbe, 0x8f,
	0xc3, 0x03, 0x9f, 0x29, 0xa3, 0x6d, 0xca, 0xdd, 0x3f, 0xa2, 0x3e, 0x37, 0xde, 0x7d, 0x91, 0xb5,
	0x0b, 0xd2, 0x88, 0xc6, 0xbb, 0x22, 0x76, 0xc7, 0x0d, 0x23, 0xfe, 0x20, 0xf0, 0x4d, 0x57, 0xc4,
	0xee, 0xe3, 0x92, 0x9a, 0x01, 0xc3, 0x27, 0xdb, 0x20, 0x93, 0xa7, 0x22, 0x2b, 0x9e, 0xcf, 0xeb,
	0xeb, 0x9b, 0x29, 0x15, 0x58, 0x46, 0xe3, 0x20, 0x85, 0x72, 0x38, 0xdd, 0x0f, 0xa4, 0x4d, 0x48,
	0x43, 0x96, 0xec, 0xdb, 0x5f, 0xc8, 0xca, 0x24, 0x8f, 0x78, 0x87, 0x85, 0x2a, 0xef, 0x49, 0xc6,
	0x74, 0x52, 0x7c, 0x56, 0x8a, 0xf9, 0x14, 0x0e, 0x72, 0x33, 0x88, 0xf8, 0xd0, 0xce, 0xc0, 0xe5,
	0x42, 0x4e, 0x43, 0x9e, 0xa4, 0x8c, 0xa1, 0x87, 0xee, 0x3b, 0x9a, 0x83, 0x60, 0xbd, 0x8e, 0x49,
	0xe6, 0x5b, 0x8c, 0xa7, 0xb8, 0x19, 0x72, 0xca, 0xb1, 0x81, 0x99, 0xe3, 0x86, 0x16, 0x25, 0x45,
	0x70, 0x5f, 0xea, 0x58, 0x87, 0x86, 0x6c, 0x2f, 0xf8, 0x09, 0x73, 0x8f, 0x0d, 0x57, 0x9c, 0xea,
	0x84, 0xa8, 0x57, 0x94, 0xcd, 0x8f, 0xfa, 0x7e, 0x2a, 0x5f, 0x09, 0x68, 0x01, 0x3e, 0xe3, 0x73,
	0xbc, 0xa5, 0x70, 0xbd, 0x20, 0x1f, 0x01, 0xd0, 0x70, 0x2d, 0x09, 0x27, 0x4a, 0xd8, 0x57, 0x99,
	0x9d, 0xf2, 0x42, 0x5c, 0x21, 0xf6, 0x8b, 0xa0, 0x7f, 0xcf, 0x75, 0x1c, 0x31, 0xb9, 0x16, 0xc8,
	0xa4, 0x43, 0x39, 0x05, 0x90, 0x05, 0x6b, 0x8d, 0xd4, 0xd6, 0xe1, 0x4c, 0x00, 0x73, 0x4f, 0xb6,
	0xc2, 0xa0, 0xdf, 0xab, 0xbf, 0x0a, 0x21, 0xc9, 0x01, 0x0b, 0xf5, 0xd1, 0x35, 0x1e, 0x20, 0xfc,
	0xbb, 0x09, 0xb2, 0x28, 0x71, 0x3c, 0xd9, 0xbc, 0x4d, 0x39, 0x15, 0xbc, 0x1e, 0xb2, 0x30, 0x72,
	0x03, 0xbc, 0xc9, 0xba, 0x98, 0x79, 0x03, 0x1b, 0x9f, 0x32, 0xad, 0x91, 0x39, 0xd9, 0xc9, 0xed,
	0xdb, 0xd0, 0xa5, 0x45, 0xe0, 0xdf, 0x8d, 0x0e, 0xb6, 0x6f, 0xc3, 0x98, 0x2f, 0xd6, 0x6f, 0xc0,
	0x2d, 0x60, 0xdf, 0xee, 0xb0, 0x70, 0x54, 0x4d, 0xed, 0xfa, 0xcb, 0x64, 0x1a, 0xcf, 0x5b, 0x60,
	0xb1, 0x1c, 0x02, 0x78, 0x99, 0x54, 0x7b, 0x0c, 0xaf, 0x9f, 0x66, 0x37, 0x96, 0x30, 0x25, 0xf1,
	0x42, 0x51, 0xdf, 0xc7, 0xd7, 0x61, 0x17, 0xe1, 0xb1, 0x62, 0xf1, 0x0d, 0x44, 0x31, 0x77, 0xb5,
	0x7a, 0x6d, 0xb1, 0x7e, 0x9d, 0x2c, 0x89, 0x9d, 0xbc, 0x0d, 0x03, 0x02, 0xc2, 0x24, 0x9a, 0x35,
	0xd5, 0x1f, 0x2b, 0xb7, 0x3e, 0x26, 0x17, 0x62, 0xd9, 0x3c, 0x61, 0xa1, 0xdb, 0x1a, 0xc8, 0x80,
	0x55, 0x49, 0xfd, 0x93, 0x33, 0x1d, 0x4f, 0x06, 0x30, 0x44, 0x5f, 0x9c, 0x1f, 0xa8, 0xde, 0x50,
	0xcc, 0x40, 0x96, 0xcf, 0xe7, 0x84, 0x4a, 0xb5, 0xfb, 0xb4, 0x6d, 0x47, 0xee, 0x2f, 0x59, 0xf2,
	0xd6, 0x0c, 0x7c, 0x66, 0x80, 0x34, 0x75, 0x01, 0x55, 0xb9, 0x92, 0xf2, 0x3a, 0xbf, 0xd1, 0x95,
	0xfc, 0x48, 0xba, 0x92, 0x3a, 0xdc, 0x75, 0xad, 0x52, 0x80, 0xa6, 0x61, 0x98, 0xa1, 0x9f, 0x2e,
	0x10, 0xb0, 0x9d, 0xb8, 0xcd, 0xa3, 0x6b, 0x1d, 0x68, 0xae, 0x2e, 0xd4, 0xef, 0x09, 0x22, 0x17,
	0x9e, 0x63, 0xa8, 0xea, 0x77, 0x71, 0xf2, 0xa8, 0x4a, 0x5f, 0x13, 0xbb, 0x98, 0xed, 0x89, 0x0c,
	0x58, 0x8c, 0xd1, 0x1f, 0xb9, 0xcf, 0xde, 0x71, 0xa9, 0x1f, 0x34, 0x84, 0xd5, 0x2b, 0x14, 0xda,
	0x3d, 0x19, 0x33, 0x48, 0xa0, 0x4e, 0xf1, 0xd6, 0xfe, 0x5b, 0x32, 0x4a, 0x27, 0x90, 0x89, 0x59,
	0x6e, 0x4a, 0x00, 0xf3, 0x03, 0xae, 0xf9, 0xc5, 0x57, 0x65, 0x54, 0x26, 0x6e, 0x95, 0x83, 0x50,
	0xef, 0x0a, 0x0a, 0x08, 0x53, 0x9a, 0xa3, 0x25, 0xdf, 0x15, 0x1c, 0x06, 0x23, 0x55, 0x7c, 0x2d,
	0x3a, 0x50, 0xfd, 0x35, 0xc4, 0x37, 0x05, 0xa4, 0xbc, 0x82, 0x31, 0x0a, 0xf2, 0xdd, 0x24, 0xe4,
	0xba, 0x4e, 0xdb, 0x50, 0x8c, 0xa0, 0x74, 0x7e, 0xfd, 0xa2, 0x76, 0xca, 0x7f, 0x60, 0x4c, 0x97,
	0xeb, 0xd2, 0x03, 0x96, 0xb2, 0xce, 0x4d, 0x1a, 0x69, 0x17, 0xcf, 0xee, 0xa3, 0xf8, 0x12, 0x34,
	0xe5, 0x1f, 0x56, 0xf2, 0xd9, 0x91, 0x9d, 0xb9, 0xec, 0xf7, 0xaa, 0xbc, 0x14, 0xca, 0xe0, 0x3d,
	0xa1, 0x36, 0xed, 0xb2, 0xf5, 0xbe, 0x79, 0xca, 0xad, 0x49, 0x57, 0x36, 0x0f, 0x2d, 0x93, 0xf0,
	0x93, 0x4a, 0xc2, 0xf1, 0xcd, 0xb7, 0x36, 0xe3, 0x49, 0x46, 0x71, 0x9c, 0x30, 0xb7, 0xc5, 0x38,
	0x64, 0x08, 0xaf, 0xbb, 0xdc, 0x74, 0xb7, 0x37, 0xbe, 0xf8, 0x99, 0x01, 0x2d, 0x29, 0xee, 0xa4,
	0x00, 0xc8, 0x30, 0x1a, 0x0f, 0xe3, 0x02, 0x20, 0xe3, 0xa1, 0xcf, 0x77, 0x18, 0xba, 0xb7, 0xbe,
	0xf2, 0xdb, 0xdf, 0x5f, 0xa9, 0xfc, 0xdd, 0xef, 0xaf, 0x54, 0x7e, 0xf7, 0xfb, 0x2b, 0x95, 0xdf,
	0xfc, 0x9f, 0x2b, 0xff, 0xe8, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x2c, 0xf9, 0x87, 0x42,
	0xab, 0x00, 0x00,
}

func (m *C2S_HeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_HeartBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_HeartBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetServerId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetServerId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetServerId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetServerId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetServerId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetServerId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServerId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ServerId)<<1)^uint32((*m.ServerId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_CheckAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_CheckAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_CheckAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CheckAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CheckAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CheckAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Password != nil {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ForbiddenTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ForbiddenTime)<<1)^uint64((*m.ForbiddenTime>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ServerTime)<<1)^uint64((*m.ServerTime>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Register) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Register) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Register) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Password != nil {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Register) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Register) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Register) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RoleSum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RoleSum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RoleSum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleSum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleSum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleSum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ListRoleIndex) > 0 {
		for iNdEx := len(m.ListRoleIndex) - 1; iNdEx >= 0; iNdEx-- {
			x1 := (uint64(m.ListRoleIndex[iNdEx]) << 1) ^ uint64((m.ListRoleIndex[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x1))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ClearRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ClearRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ClearRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ClearRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ClearRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ClearRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOk != nil {
		i--
		if *m.IsOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RandNickName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RandNickName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RandNickName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RandNickName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RandNickName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RandNickName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ListNickName) > 0 {
		for iNdEx := len(m.ListNickName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ListNickName[iNdEx])
			copy(dAtA[i:], m.ListNickName[iNdEx])
			i = encodeVarintNet_Game(dAtA, i, uint64(len(m.ListNickName[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_CreateRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_CreateRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_CreateRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsTestVip != nil {
		i--
		if *m.IsTestVip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.RoleInfo != nil {
		{
			size, err := m.RoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.Channel != nil {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Gender != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Gender)<<1)^uint32((*m.Gender>>31))))
		i--
		dAtA[i] = 0x60
	}
	if m.EggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EggId)<<1)^uint32((*m.EggId>>31))))
		i--
		dAtA[i] = 0x58
	}
	if m.OrnamentsId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.OrnamentsId)<<1)^uint32((*m.OrnamentsId>>31))))
		i--
		dAtA[i] = 0x50
	}
	if m.WeaponId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.WeaponId)<<1)^uint32((*m.WeaponId>>31))))
		i--
		dAtA[i] = 0x48
	}
	if m.FaceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceId)<<1)^uint32((*m.FaceId>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.HelmetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.HelmetId)<<1)^uint32((*m.HelmetId>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.PlatformType != nil {
		i -= len(m.PlatformType)
		copy(dAtA[i:], m.PlatformType)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.PlatformType)))
		i--
		dAtA[i] = 0x32
	}
	if m.DeviceType != nil {
		i -= len(m.DeviceType)
		copy(dAtA[i:], m.DeviceType)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.DeviceType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DeviceToken != nil {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceKey != nil {
		i -= len(m.DeviceKey)
		copy(dAtA[i:], m.DeviceKey)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.DeviceKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.NickName != nil {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CreateRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CreateRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CreateRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NickName != nil {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RoleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RoleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ForceApplyRoleInfo != nil {
		i--
		if *m.ForceApplyRoleInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x38
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneIntaddr)<<1)^uint64((*m.SceneIntaddr>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIntaddr)<<1)^uint64((*m.LoginIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RoleInfo != nil {
		{
			size, err := m.RoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ReadyEnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ReadyEnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ReadyEnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.S2SRoleInfo != nil {
		{
			size, err := m.S2SRoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LoginIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIntaddr)<<1)^uint64((*m.LoginIntaddr>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ReadyEnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ReadyEnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ReadyEnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.SceneType))
		i--
		dAtA[i] = 0x40
	}
	if m.MapId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MapId)<<1)^uint32((*m.MapId>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneIntaddr)<<1)^uint64((*m.SceneIntaddr>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.SceneIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneIndex)<<1)^uint32((*m.SceneIndex>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BornEnterSceneOK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BornEnterSceneOK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BornEnterSceneOK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BornEnterSceneOK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BornEnterSceneOK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BornEnterSceneOK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *S2S_ReadyChangeScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_ReadyChangeScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_ReadyChangeScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.S2SRoleInfo != nil {
		{
			size, err := m.S2SRoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.OldSceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.OldSceneInstanceId)<<1)^uint64((*m.OldSceneInstanceId>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.OldSceneIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.OldSceneIntaddr)<<1)^uint64((*m.OldSceneIntaddr>>63))))
		i--
		dAtA[i] = 0x38
	}
	if m.LoginIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIntaddr)<<1)^uint64((*m.LoginIntaddr>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.NickName != nil {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_OffLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_OffLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_OffLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reason != nil {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Charset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Charset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Charset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgVersion != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MsgVersion)<<1)^uint32((*m.MsgVersion>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Utf_8 != nil {
		i--
		if *m.Utf_8 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Heartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Time)<<1)^uint64((*m.Time>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Heartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Time)<<1)^uint64((*m.Time>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_MaterialNotEnough) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_MaterialNotEnough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_MaterialNotEnough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ItemId)<<1)^uint32((*m.ItemId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GameCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GameCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GameCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GameCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GameCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GameCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiffGameCoin) > 0 {
		for iNdEx := len(m.DiffGameCoin) - 1; iNdEx >= 0; iNdEx-- {
			x6 := (uint64(m.DiffGameCoin[iNdEx]) << 1) ^ uint64((m.DiffGameCoin[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x6))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.GameCoin != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GameCoin)<<1)^uint64((*m.GameCoin>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DiamondCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DiamondCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DiamondCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DiamondCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DiamondCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DiamondCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiffDiamondCoin) > 0 {
		for iNdEx := len(m.DiffDiamondCoin) - 1; iNdEx >= 0; iNdEx-- {
			x7 := (uint64(m.DiffDiamondCoin[iNdEx]) << 1) ^ uint64((m.DiffDiamondCoin[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x7))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.DiamondCoin != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.DiamondCoin)<<1)^uint64((*m.DiamondCoin>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Endurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Endurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Endurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Endurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Endurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Endurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StaminaInfo != nil {
		{
			size, err := m.StaminaInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DiffEndurance) > 0 {
		for iNdEx := len(m.DiffEndurance) - 1; iNdEx >= 0; iNdEx-- {
			x9 := (uint64(m.DiffEndurance[iNdEx]) << 1) ^ uint64((m.DiffEndurance[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x9))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Endurance != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Endurance)<<1)^uint64((*m.Endurance>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RecoveryEndurance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RecoveryEndurance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RecoveryEndurance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StaminaInfo != nil {
		{
			size, err := m.StaminaInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DiffEndurance) > 0 {
		for iNdEx := len(m.DiffEndurance) - 1; iNdEx >= 0; iNdEx-- {
			x11 := (uint64(m.DiffEndurance[iNdEx]) << 1) ^ uint64((m.DiffEndurance[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x11))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Endurance != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Endurance)<<1)^uint64((*m.Endurance>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Exp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Exp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Exp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Exp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Exp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Exp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiffExp) > 0 {
		for iNdEx := len(m.DiffExp) - 1; iNdEx >= 0; iNdEx-- {
			x12 := (uint64(m.DiffExp[iNdEx]) << 1) ^ uint64((m.DiffExp[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x12))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Exp != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Exp)<<1)^uint64((*m.Exp>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Level) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Level) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Level) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Level) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Level)<<1)^uint32((*m.Level>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SkillPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SkillPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SkillPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SkillPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SkillPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SkillPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiffSkillPoint) > 0 {
		for iNdEx := len(m.DiffSkillPoint) - 1; iNdEx >= 0; iNdEx-- {
			x13 := (uint64(m.DiffSkillPoint[iNdEx]) << 1) ^ uint64((m.DiffSkillPoint[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x13))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.SkillPoint != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SkillPoint)<<1)^uint64((*m.SkillPoint>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArenaScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArenaScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArenaScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiffArenaScore) > 0 {
		for iNdEx := len(m.DiffArenaScore) - 1; iNdEx >= 0; iNdEx-- {
			x14 := (uint64(m.DiffArenaScore[iNdEx]) << 1) ^ uint64((m.DiffArenaScore[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x14))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.ArenaScore != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ArenaScore)<<1)^uint64((*m.ArenaScore>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Vip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Vip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Vip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipExp != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.VipExp)<<1)^uint64((*m.VipExp>>63))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DiffVip) > 0 {
		for iNdEx := len(m.DiffVip) - 1; iNdEx >= 0; iNdEx-- {
			x15 := (uint32(m.DiffVip[iNdEx]) << 1) ^ uint32((m.DiffVip[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x15))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.Vip != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Vip)<<1)^uint32((*m.Vip>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleInfo_EnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleInfo_EnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleInfo_EnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BeginY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginY)<<1)^uint32((*m.BeginY>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginX)<<1)^uint32((*m.BeginX>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleInfo != nil {
		{
			size, err := m.RoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BornRoleInfo_EnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BornRoleInfo_EnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BornRoleInfo_EnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EggId)<<1)^uint32((*m.EggId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleInfo != nil {
		{
			size, err := m.RoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_OtherRoleInfo_EnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_OtherRoleInfo_EnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_OtherRoleInfo_EnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BeginY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginY)<<1)^uint32((*m.BeginY>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginX)<<1)^uint32((*m.BeginX>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleInfo != nil {
		{
			size, err := m.RoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ManyOtherRoleInfo_EnterScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ManyOtherRoleInfo_EnterScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ManyOtherRoleInfo_EnterScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoleInfo) > 0 {
		for iNdEx := len(m.RoleInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncRoleShowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncRoleShowInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncRoleShowInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangeFlag != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChangeFlag)<<1)^uint32((*m.ChangeFlag>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginY)<<1)^uint32((*m.BeginY>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.BeginX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginX)<<1)^uint32((*m.BeginX>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleInfo != nil {
		{
			size, err := m.RoleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SceneRoleinfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SceneRoleinfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SceneRoleinfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToLeft != nil {
		i--
		if *m.ToLeft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MemoryInfo != nil {
		{
			size, err := m.MemoryInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DbCardInfo != nil {
		{
			size, err := m.DbCardInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MoveSpeed != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MoveSpeed)<<1)^uint32((*m.MoveSpeed>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BroadcastRoleShowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BroadcastRoleShowInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BroadcastRoleShowInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BeginY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginY)<<1)^uint32((*m.BeginY>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginX)<<1)^uint32((*m.BeginX>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerInfo != nil {
		{
			size, err := m.PlayerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleInfo_LeaveScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleInfo_LeaveScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleInfo_LeaveScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Request_Move) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Request_Move) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Request_Move) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EndY)<<1)^uint32((*m.EndY>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.EndX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EndX)<<1)^uint32((*m.EndX>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginY)<<1)^uint32((*m.BeginY>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginX)<<1)^uint32((*m.BeginX>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Request_Move) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Request_Move) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Request_Move) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EndY)<<1)^uint32((*m.EndY>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.EndX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EndX)<<1)^uint32((*m.EndX>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginY)<<1)^uint32((*m.BeginY>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BeginX)<<1)^uint32((*m.BeginX>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Chat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Chat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Chat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.GroupId)<<1)^uint32((*m.GroupId>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.Msg != nil {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChatType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.ChatType))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Chat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Chat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Chat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ForbiddenTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ForbiddenTime)<<1)^uint64((*m.ForbiddenTime>>63))))
		i--
		dAtA[i] = 0x50
	}
	if m.SrcVisitInfo != nil {
		{
			size, err := m.SrcVisitInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.GroupId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.GroupId)<<1)^uint32((*m.GroupId>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.IsGm != nil {
		i--
		if *m.IsGm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Msg != nil {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x32
	}
	if m.ChatType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.ChatType))
		i--
		dAtA[i] = 0x28
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Use_SPItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Use_SPItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Use_SPItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stamp != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Stamp)<<1)^uint64((*m.Stamp>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.SpId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SpId)<<1)^uint32((*m.SpId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ItemIndex)<<1)^uint64((*m.ItemIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Use_SPItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Use_SPItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Use_SPItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Change_Scene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Change_Scene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Change_Scene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefaultFlag != nil {
		i--
		if *m.DefaultFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.TarSceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.TarSceneId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QuerySceneLineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QuerySceneLineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QuerySceneLineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QuerySceneLineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QuerySceneLineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QuerySceneLineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Loads) > 0 {
		for iNdEx := len(m.Loads) - 1; iNdEx >= 0; iNdEx-- {
			x24 := (uint32(m.Loads[iNdEx]) << 1) ^ uint32((m.Loads[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x24))
			i--
			dAtA[i] = 0x18
		}
	}
	if len(m.SceneIndex) > 0 {
		for iNdEx := len(m.SceneIndex) - 1; iNdEx >= 0; iNdEx-- {
			x25 := (uint32(m.SceneIndex[iNdEx]) << 1) ^ uint32((m.SceneIndex[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x25))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ChangeSceneLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ChangeSceneLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ChangeSceneLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TarSceneIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.TarSceneIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.TarSceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.TarSceneId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ChangeSceneLine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ChangeSceneLine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ChangeSceneLine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TransPortChangeScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TransPortChangeScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TransPortChangeScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.TransportId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TransportId)<<1)^uint32((*m.TransportId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TransPortChangeScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TransPortChangeScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TransPortChangeScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransportId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TransportId)<<1)^uint32((*m.TransportId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_NPC_ChangeScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_NPC_ChangeScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_NPC_ChangeScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.TransInfoId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TransInfoId)<<1)^uint32((*m.TransInfoId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SceneType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneType)<<1)^uint32((*m.SceneType>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_NPC_ChangeScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_NPC_ChangeScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_NPC_ChangeScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneType)<<1)^uint32((*m.SceneType>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Bag_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Bag_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Bag_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Items != nil {
		{
			size, err := m.Items.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Use_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Use_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Use_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ItemCount)<<1)^uint32((*m.ItemCount>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ItemIndex)<<1)^uint64((*m.ItemIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Use_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Use_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Use_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DressItem) > 0 {
		for iNdEx := len(m.DressItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DressItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RemoveItem) > 0 {
		for iNdEx := len(m.RemoveItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.InsertItem) > 0 {
		for iNdEx := len(m.InsertItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InsertItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ItemType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ItemType)<<1)^uint32((*m.ItemType>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.NewItemInfo != nil {
		{
			size, err := m.NewItemInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ItemIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ItemIndex)<<1)^uint64((*m.ItemIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Sell_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Sell_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Sell_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ItemCount)<<1)^uint32((*m.ItemCount>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ItemIndex)<<1)^uint64((*m.ItemIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Sell_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Sell_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Sell_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ItemCount)<<1)^uint32((*m.ItemCount>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ItemIndex)<<1)^uint64((*m.ItemIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Sell_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Sell_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Sell_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Sell_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Sell_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Sell_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Bag_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Bag_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Bag_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Equips != nil {
		{
			size, err := m.Equips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Dress_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Dress_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Dress_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Dress_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Dress_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Dress_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Role_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Role_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Role_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Role_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Role_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Role_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Equips != nil {
		{
			size, err := m.Equips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeOff_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeOff_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeOff_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SiteType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.SiteType))
		i--
		dAtA[i] = 0x18
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeOff_Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeOff_Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeOff_Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SiteType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.SiteType))
		i--
		dAtA[i] = 0x18
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Item_Insert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Item_Insert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Item_Insert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemInfo != nil {
		{
			size, err := m.ItemInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Item_Remove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Item_Remove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Item_Remove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemInfo != nil {
		{
			size, err := m.ItemInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Equip_Insert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Equip_Insert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Equip_Insert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EquipInfo) > 0 {
		for iNdEx := len(m.EquipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Equip_Remove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Equip_Remove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Equip_Remove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EquipInfo) > 0 {
		for iNdEx := len(m.EquipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Item_Add) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Item_Add) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Item_Add) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountDiff) > 0 {
		for iNdEx := len(m.CountDiff) - 1; iNdEx >= 0; iNdEx-- {
			x34 := (uint32(m.CountDiff[iNdEx]) << 1) ^ uint32((m.CountDiff[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x34))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.ItemInfo != nil {
		{
			size, err := m.ItemInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Equip_Add) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Equip_Add) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Equip_Add) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EquipInfo) > 0 {
		for iNdEx := len(m.EquipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Bag_Equip_Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Bag_Equip_Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Bag_Equip_Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EquipInfo) > 0 {
		for iNdEx := len(m.EquipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Role_Equip_Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Role_Equip_Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Role_Equip_Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleEquip != nil {
		{
			size, err := m.RoleEquip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SuitShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SuitShopInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SuitShopInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SuitShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SuitShopInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SuitShopInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuitShopSurplusUpdateTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SuitShopSurplusUpdateTime)<<1)^uint64((*m.SuitShopSurplusUpdateTime>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BuySuit) > 0 {
		for iNdEx := len(m.BuySuit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuySuit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BuySuitInShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BuySuitInShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BuySuitInShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuitDuration != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitDuration)<<1)^uint32((*m.SuitDuration>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SuitShopId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitShopId)<<1)^uint32((*m.SuitShopId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BuySuitInShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BuySuitInShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BuySuitInShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuitDuration != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitDuration)<<1)^uint32((*m.SuitDuration>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SuitShopId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitShopId)<<1)^uint32((*m.SuitShopId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RoleSuitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RoleSuitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RoleSuitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleSuitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleSuitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleSuitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleSuitInfo != nil {
		{
			size, err := m.RoleSuitInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DressSuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DressSuit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DressSuit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuitId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitId)<<1)^uint32((*m.SuitId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DressSuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DressSuit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DressSuit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuitId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitId)<<1)^uint32((*m.SuitId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeOffSuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeOffSuit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeOffSuit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuitId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitId)<<1)^uint32((*m.SuitId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeOffSuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeOffSuit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeOffSuit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuitId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SuitId)<<1)^uint32((*m.SuitId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FaceShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FaceShopInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FaceShopInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FaceShopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FaceShopInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FaceShopInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceShopSurplusUpdateTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceShopSurplusUpdateTime)<<1)^uint32((*m.FaceShopSurplusUpdateTime>>31))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DiscountBuyFace) > 0 {
		for iNdEx := len(m.DiscountBuyFace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DiscountBuyFace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OriginalBuyFace) > 0 {
		for iNdEx := len(m.OriginalBuyFace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginalBuyFace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BuyFaceInShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BuyFaceInShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BuyFaceInShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceIsdiscount != nil {
		i--
		if *m.FaceIsdiscount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.FaceDuration != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceDuration)<<1)^uint32((*m.FaceDuration>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.FaceShopId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceShopId)<<1)^uint32((*m.FaceShopId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BuyFaceInShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BuyFaceInShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BuyFaceInShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceDuration != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceDuration)<<1)^uint32((*m.FaceDuration>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.FaceShopId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceShopId)<<1)^uint32((*m.FaceShopId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RoleFaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RoleFaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RoleFaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleFaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleFaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleFaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleFaceInfo != nil {
		{
			size, err := m.RoleFaceInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DressFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DressFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DressFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceId)<<1)^uint32((*m.FaceId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DressFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DressFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DressFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceId)<<1)^uint32((*m.FaceId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeOffFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeOffFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeOffFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceId)<<1)^uint32((*m.FaceId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeOffFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeOffFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeOffFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceId)<<1)^uint32((*m.FaceId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ManualUpdateFaceShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ManualUpdateFaceShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ManualUpdateFaceShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ManualUpdateFaceShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ManualUpdateFaceShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ManualUpdateFaceShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KillMonster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KillMonster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Count)<<1)^uint32((*m.Count>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Id)<<1)^uint32((*m.Id>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PassRisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PassRisk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PassRisk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsUseComposeSkill != nil {
		i--
		if *m.IsUseComposeSkill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Randomseed != nil {
		i -= len(m.Randomseed)
		copy(dAtA[i:], m.Randomseed)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Randomseed)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MonsterInfo) > 0 {
		for iNdEx := len(m.MonsterInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonsterInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.BoxCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BoxCount)<<1)^uint32((*m.BoxCount>>31))))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SkillUseInfos) > 0 {
		for iNdEx := len(m.SkillUseInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkillUseInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LevelId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LevelId)<<1)^uint32((*m.LevelId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.ChapId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapId)<<1)^uint32((*m.ChapId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Passed != nil {
		i--
		if *m.Passed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PassRisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PassRisk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PassRisk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChapterReward != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapterReward)<<1)^uint32((*m.ChapterReward>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_OpenChapterBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_OpenChapterBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_OpenChapterBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Danger != nil {
		i--
		if *m.Danger {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ChapId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapId)<<1)^uint32((*m.ChapId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_OpenChapterBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_OpenChapterBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_OpenChapterBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_OpenRiskBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_OpenRiskBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_OpenRiskBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_OpenRiskBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_OpenRiskBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_OpenRiskBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ResetRiskFightCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ResetRiskFightCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ResetRiskFightCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RiskId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RiskId)<<1)^uint32((*m.RiskId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ChapId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapId)<<1)^uint32((*m.ChapId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ResetRiskFightCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ResetRiskFightCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ResetRiskFightCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ReadyEnterRisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ReadyEnterRisk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ReadyEnterRisk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Danger != nil {
		i--
		if *m.Danger {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x48
	}
	if m.FriendId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.FriendId)<<1)^uint64((*m.FriendId>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.TransInfoId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TransInfoId)<<1)^uint32((*m.TransInfoId>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.SceneType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneType)<<1)^uint32((*m.SceneType>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.RiskId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RiskId)<<1)^uint32((*m.RiskId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ChapId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapId)<<1)^uint32((*m.ChapId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ReadyEnterRisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ReadyEnterRisk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ReadyEnterRisk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransInfoId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TransInfoId)<<1)^uint32((*m.TransInfoId>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.RiskId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RiskId)<<1)^uint32((*m.RiskId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FriendAssistTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FriendAssistTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FriendAssistTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FriendIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.FriendIndex)<<1)^uint64((*m.FriendIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.LeftAssistTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftAssistTime)<<1)^uint32((*m.LeftAssistTime>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_NPC_Add_RecordQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_NPC_Add_RecordQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_NPC_Add_RecordQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowInfo != nil {
		{
			size, err := m.ShowInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_NPC_Go_RecordQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_NPC_Go_RecordQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_NPC_Go_RecordQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Select_Recommend_Friends) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Select_Recommend_Friends) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Select_Recommend_Friends) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FriendNumLimit != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FriendNumLimit)<<1)^uint32((*m.FriendNumLimit>>31))))
		i--
		dAtA[i] = 0x40
	}
	if len(m.FriendInfoIndex) > 0 {
		for iNdEx := len(m.FriendInfoIndex) - 1; iNdEx >= 0; iNdEx-- {
			x40 := (uint64(m.FriendInfoIndex[iNdEx]) << 1) ^ uint64((m.FriendInfoIndex[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x40))
			i--
			dAtA[i] = 0x38
		}
	}
	if m.MaxLvl != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MaxLvl)<<1)^uint32((*m.MaxLvl>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.MinLvl != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MinLvl)<<1)^uint32((*m.MinLvl>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.FriendsCnt != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FriendsCnt)<<1)^uint32((*m.FriendsCnt>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Select_Recommend_Friends) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Select_Recommend_Friends) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Select_Recommend_Friends) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FriendInfos) > 0 {
		for iNdEx := len(m.FriendInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FriendInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FindFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FindFriend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FindFriend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.NickName != nil {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FindFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FindFriend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FindFriend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FriendInfo != nil {
		{
			size, err := m.FriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Add_Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Add_Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Add_Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardInfo != nil {
		{
			size, err := m.CardInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Add_Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Add_Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Add_Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TarSceneAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarSceneAddr)<<1)^uint64((*m.TarSceneAddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.TarFriendInfo != nil {
		{
			size, err := m.TarFriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_Add_Friend_Ret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_Add_Friend_Ret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_Add_Friend_Ret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.AnsRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.AnsRoleIndex)<<1)^uint64((*m.AnsRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Remove_Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Remove_Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Remove_Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Remove_Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Remove_Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Remove_Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_Remove_Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_Remove_Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_Remove_Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Request_Add_Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Request_Add_Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Request_Add_Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SrcFriendInfo != nil {
		{
			size, err := m.SrcFriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Request_Add_Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Request_Add_Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Request_Add_Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsRefuse != nil {
		i--
		if *m.IsRefuse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_Friend_Online) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_Friend_Online) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_Friend_Online) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstEnterGame != nil {
		i--
		if *m.FirstEnterGame {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SrcFriendInfo != nil {
		{
			size, err := m.SrcFriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FriendRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.FriendRoleIndex)<<1)^uint64((*m.FriendRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Friend_Online) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Friend_Online) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Friend_Online) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SrcFriendInfo != nil {
		{
			size, err := m.SrcFriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FriendRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.FriendRoleIndex)<<1)^uint64((*m.FriendRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.IsAleadyOnline != nil {
		i--
		if *m.IsAleadyOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Friend_Offline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Friend_Offline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Friend_Offline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FriendInfo != nil {
		{
			size, err := m.FriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FriendRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.FriendRoleIndex)<<1)^uint64((*m.FriendRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ReadyEnterFriendFightScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ReadyEnterFriendFightScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ReadyEnterFriendFightScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ReadyEnterFriendFightScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ReadyEnterFriendFightScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ReadyEnterFriendFightScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Friend_Fight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Friend_Fight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Friend_Fight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.FriendRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.FriendRoleIndex)<<1)^uint64((*m.FriendRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Friend_Fight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Friend_Fight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Friend_Fight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FriendPlayerInfo) > 0 {
		for iNdEx := len(m.FriendPlayerInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FriendPlayerInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SelfPlayerInfo) > 0 {
		for iNdEx := len(m.SelfPlayerInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelfPlayerInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_CommonShopGoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_CommonShopGoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_CommonShopGoodsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsManual != nil {
		i--
		if *m.IsManual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ShopId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ShopId)<<1)^uint32((*m.ShopId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CommonShopGoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CommonShopGoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CommonShopGoodsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ManualTotalRefreshCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ManualTotalRefreshCount)<<1)^uint32((*m.ManualTotalRefreshCount>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.ManualRefreshCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ManualRefreshCount)<<1)^uint32((*m.ManualRefreshCount>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.NextRefreshPrice != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NextRefreshPrice)<<1)^uint32((*m.NextRefreshPrice>>31))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GoodsInfo) > 0 {
		for iNdEx := len(m.GoodsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ShopId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ShopId)<<1)^uint32((*m.ShopId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ParkShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ParkShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ParkShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ParkShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ParkShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ParkShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoodsList) > 0 {
		for iNdEx := len(m.GoodsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BuyCommonShopGoods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BuyCommonShopGoods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BuyCommonShopGoods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShopIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ShopIndex)<<1)^uint32((*m.ShopIndex>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ShopId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ShopId)<<1)^uint32((*m.ShopId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BuyCommonShopGoods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BuyCommonShopGoods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BuyCommonShopGoods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Skill_Study) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Skill_Study) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Skill_Study) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Skill_Study) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Skill_Study) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Skill_Study) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Skill_LevelUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Skill_LevelUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Skill_LevelUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsExcharge != nil {
		i--
		if *m.IsExcharge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Skill_LevelUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Skill_LevelUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Skill_LevelUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Skill_DressTalent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Skill_DressTalent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Skill_DressTalent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Skill_DressTalent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Skill_DressTalent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Skill_DressTalent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Skill_TakeOffTalent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Skill_TakeOffTalent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Skill_TakeOffTalent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Skill_TakeOffTalent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Skill_TakeOffTalent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Skill_TakeOffTalent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Skill_DressBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Skill_DressBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Skill_DressBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Skill_DressBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Skill_DressBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Skill_DressBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Skill_TakeOffBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Skill_TakeOffBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Skill_TakeOffBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Skill_TakeOffBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Skill_TakeOffBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Skill_TakeOffBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Skill_ChangeBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Skill_ChangeBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Skill_ChangeBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.NewSkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NewSkillId)<<1)^uint32((*m.NewSkillId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.OldSkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.OldSkillId)<<1)^uint32((*m.OldSkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Skill_ChangeBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Skill_ChangeBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Skill_ChangeBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.NewSkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NewSkillId)<<1)^uint32((*m.NewSkillId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.OldSkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.OldSkillId)<<1)^uint32((*m.OldSkillId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PassMiniGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PassMiniGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PassMiniGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LevelId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LevelId)<<1)^uint32((*m.LevelId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.ChapId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapId)<<1)^uint32((*m.ChapId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Passed != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Passed)<<1)^uint32((*m.Passed>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PassMiniGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PassMiniGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PassMiniGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryMiniGameRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryMiniGameRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryMiniGameRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryMiniGameRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryMiniGameRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryMiniGameRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankInfos) > 0 {
		for iNdEx := len(m.RankInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QuerySelfGameRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QuerySelfGameRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QuerySelfGameRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.HistoryMaxScore != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.HistoryMaxScore)<<1)^uint32((*m.HistoryMaxScore>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QuerySelfGameRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QuerySelfGameRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QuerySelfGameRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryMaxScore != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.HistoryMaxScore)<<1)^uint32((*m.HistoryMaxScore>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CurrRank)<<1)^uint32((*m.CurrRank>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PlayMiniGameAgain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PlayMiniGameAgain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PlayMiniGameAgain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PlayMiniGameAgain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PlayMiniGameAgain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PlayMiniGameAgain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SubmitMiniGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SubmitMiniGameScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SubmitMiniGameScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Score)<<1)^uint32((*m.Score>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SubmitMiniGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SubmitMiniGameScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SubmitMiniGameScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FightPercent != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FightPercent)<<1)^uint32((*m.FightPercent>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrScore != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CurrScore)<<1)^uint32((*m.CurrScore>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.HistoryMaxScore != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.HistoryMaxScore)<<1)^uint32((*m.HistoryMaxScore>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ReadyEnterMiniGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ReadyEnterMiniGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ReadyEnterMiniGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x38
	}
	if m.TransInfoId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TransInfoId)<<1)^uint32((*m.TransInfoId>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneType)<<1)^uint32((*m.SceneType>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ReadyEnterMiniGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ReadyEnterMiniGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ReadyEnterMiniGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransInfoId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TransInfoId)<<1)^uint32((*m.TransInfoId>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.MiniGameId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MiniGameId)<<1)^uint32((*m.MiniGameId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_InteractAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_InteractAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_InteractAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TarY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TarY)<<1)^uint32((*m.TarY>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.TarX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TarX)<<1)^uint32((*m.TarX>>31))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TarRoleIndex) > 0 {
		for iNdEx := len(m.TarRoleIndex) - 1; iNdEx >= 0; iNdEx-- {
			x48 := (uint64(m.TarRoleIndex[iNdEx]) << 1) ^ uint64((m.TarRoleIndex[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x48))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_InteractAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_InteractAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_InteractAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TarRoleIndex) > 0 {
		for iNdEx := len(m.TarRoleIndex) - 1; iNdEx >= 0; iNdEx-- {
			x49 := (uint64(m.TarRoleIndex[iNdEx]) << 1) ^ uint64((m.TarRoleIndex[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x49))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SelfHiAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SelfHiAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SelfHiAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SelfHiAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SelfHiAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SelfHiAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x18
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BathroomInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BathroomInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BathroomInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftTime)<<1)^uint32((*m.LeftTime>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.Direction != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Direction)<<1)^uint32((*m.Direction>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.TarY != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TarY)<<1)^uint32((*m.TarY>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.TarX != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TarX)<<1)^uint32((*m.TarX>>31))))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TarRoleIndex) > 0 {
		for iNdEx := len(m.TarRoleIndex) - 1; iNdEx >= 0; iNdEx-- {
			x50 := (uint64(m.TarRoleIndex[iNdEx]) << 1) ^ uint64((m.TarRoleIndex[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x50))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BathroomInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BathroomInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BathroomInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftTime)<<1)^uint32((*m.LeftTime>>31))))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TarRoleIndex) > 0 {
		for iNdEx := len(m.TarRoleIndex) - 1; iNdEx >= 0; iNdEx-- {
			x51 := (uint64(m.TarRoleIndex[iNdEx]) << 1) ^ uint64((m.TarRoleIndex[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x51))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_BathroomInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_BathroomInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_BathroomInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SrcRoleIndex)<<1)^uint64((*m.SrcRoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Dress_Card_PVE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Dress_Card_PVE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Dress_Card_PVE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Dress_Card_PVE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Dress_Card_PVE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Dress_Card_PVE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeOff_Card_PVE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeOff_Card_PVE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeOff_Card_PVE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeOff_Card_PVE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeOff_Card_PVE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeOff_Card_PVE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Dress_Card_PVP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Dress_Card_PVP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Dress_Card_PVP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Dress_Card_PVP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Dress_Card_PVP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Dress_Card_PVP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeOff_Card_PVP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeOff_Card_PVP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeOff_Card_PVP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeOff_Card_PVP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeOff_Card_PVP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeOff_Card_PVP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CardId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CardId)<<1)^uint32((*m.CardId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ArenaPlayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ArenaPlayers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ArenaPlayers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SelfBattleInfo != nil {
		{
			size, err := m.SelfBattleInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RetLoginaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetLoginaddr)<<1)^uint64((*m.RetLoginaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArenaPlayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArenaPlayers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArenaPlayers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SelfBattle != nil {
		{
			size, err := m.SelfBattle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_StopArena) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_StopArena) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_StopArena) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Arena_NearSelf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Arena_NearSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Arena_NearSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Arena_NearSelf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Arena_NearSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Arena_NearSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ReadyEnterArenaScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ReadyEnterArenaScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ReadyEnterArenaScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ReadyEnterArenaScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ReadyEnterArenaScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ReadyEnterArenaScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RefreshArena) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RefreshArena) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RefreshArena) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RefreshArena) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RefreshArena) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RefreshArena) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ArenaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ArenaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ArenaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArenaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArenaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArenaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArenaInfo != nil {
		{
			size, err := m.ArenaInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ArenaFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ArenaFight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ArenaFight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetAddr)<<1)^uint64((*m.RetAddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.TarArenaRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TarArenaRank)<<1)^uint32((*m.TarArenaRank>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArenaFight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArenaFight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArenaFight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TarArenaRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TarArenaRank)<<1)^uint32((*m.TarArenaRank>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ArenaFightEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ArenaFightEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ArenaFightEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SkillUseInfos) > 0 {
		for iNdEx := len(m.SkillUseInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkillUseInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Passed != nil {
		i--
		if *m.Passed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArenaFightEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArenaFightEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArenaFightEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefOldRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.DefOldRank)<<1)^uint32((*m.DefOldRank>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.AtkOldRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.AtkOldRank)<<1)^uint32((*m.AtkOldRank>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FriendFightEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FriendFightEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FriendFightEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SkillUseInfos) > 0 {
		for iNdEx := len(m.SkillUseInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkillUseInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Passed != nil {
		i--
		if *m.Passed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FriendFightEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FriendFightEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FriendFightEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_HistoryRankReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_HistoryRankReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_HistoryRankReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.HistoryRank)<<1)^uint32((*m.HistoryRank>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CurrRank)<<1)^uint32((*m.CurrRank>>31))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_KillListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_KillListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_KillListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_KillListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_KillListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_KillListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TotalNum)<<1)^uint32((*m.TotalNum>>31))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.KillList) > 0 {
		for iNdEx := len(m.KillList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ShowMyself != nil {
		{
			size, err := m.ShowMyself.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_VisitingCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_VisitingCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_VisitingCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.TarRoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TarRoleIndex)<<1)^uint64((*m.TarRoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_VisitingCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_VisitingCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_VisitingCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DbCardInfo != nil {
		{
			size, err := m.DbCardInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BuyArenaCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BuyArenaCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BuyArenaCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BuyArenaCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BuyArenaCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BuyArenaCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftCount)<<1)^uint32((*m.LeftCount>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TotalCount)<<1)^uint32((*m.TotalCount>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.BuyCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BuyCount)<<1)^uint32((*m.BuyCount>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ClearArenaCD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ClearArenaCD) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ClearArenaCD) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ClearArenaCD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ClearArenaCD) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ClearArenaCD) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_OpenStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_OpenStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_OpenStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_OpenStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_OpenStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_OpenStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KillPlayInfo != nil {
		{
			size, err := m.KillPlayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DiamondPlayInfo != nil {
		{
			size, err := m.DiamondPlayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ArenaPlayInfo != nil {
		{
			size, err := m.ArenaPlayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RisenPlayInfo != nil {
		{
			size, err := m.RisenPlayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryRisenStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryRisenStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryRisenStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryRisenStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryRisenStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryRisenStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryTopRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.HistoryTopRank)<<1)^uint32((*m.HistoryTopRank>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RankInfos) > 0 {
		for iNdEx := len(m.RankInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryLevelRankListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryLevelRankListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryLevelRankListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryLevelRankListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryLevelRankListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryLevelRankListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_LevelRankLocationSelf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_LevelRankLocationSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_LevelRankLocationSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_LevelRankLocationSelf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_LevelRankLocationSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_LevelRankLocationSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryArenaStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryArenaStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryArenaStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryArenaStar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryArenaStar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryArenaStar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankInfos) > 0 {
		for iNdEx := len(m.RankInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryArenaRankListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryArenaRankListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryArenaRankListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryArenaRankListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryArenaRankListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryArenaRankListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ArenaRankLocationSelf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ArenaRankLocationSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ArenaRankLocationSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x38
	}
	if m.TheOneRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TheOneRank)<<1)^uint32((*m.TheOneRank>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TotalNum)<<1)^uint32((*m.TotalNum>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.SelfSeqRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SelfSeqRank)<<1)^uint32((*m.SelfSeqRank>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfRank != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SelfRank)<<1)^uint32((*m.SelfRank>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArenaRankLocationSelf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArenaRankLocationSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArenaRankLocationSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryDiamondRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryDiamondRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryDiamondRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryDiamondRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryDiamondRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryDiamondRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DiamondRankLocationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DiamondRankLocationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DiamondRankLocationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DiamondRankLocationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DiamondRankLocationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DiamondRankLocationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryKillRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryKillRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryKillRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryKillRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryKillRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryKillRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_KillRankLocationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_KillRankLocationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_KillRankLocationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoginIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginIndex)<<1)^uint64((*m.LoginIndex>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.LoginAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LoginAddr)<<1)^uint64((*m.LoginAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_KillRankLocationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_KillRankLocationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_KillRankLocationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankList) > 0 {
		for iNdEx := len(m.RankList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TheOne != nil {
		{
			size, err := m.TheOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SelfInfo != nil {
		{
			size, err := m.SelfInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PageNum != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PageNum)<<1)^uint32((*m.PageNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.IsEnd != nil {
		i--
		if *m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SwordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SwordInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SwordInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SwordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SwordInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SwordInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SwordInfo != nil {
		{
			size, err := m.SwordInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AddSwordCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AddSwordCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AddSwordCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ItemId)<<1)^uint32((*m.ItemId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AddSwordCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AddSwordCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AddSwordCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncSwordCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncSwordCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncSwordCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiffCount) > 0 {
		for iNdEx := len(m.DiffCount) - 1; iNdEx >= 0; iNdEx-- {
			x87 := (uint64(m.DiffCount[iNdEx]) << 1) ^ uint64((m.DiffCount[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x87))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.LeftCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LeftCount)<<1)^uint64((*m.LeftCount>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.TotalCount)<<1)^uint64((*m.TotalCount>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SwordEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SwordEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SwordEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSuccess != nil {
		i--
		if *m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SwordEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SwordEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SwordEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CaliburnInfo != nil {
		{
			size, err := m.CaliburnInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SelectSwordEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SelectSwordEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SelectSwordEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSelect != nil {
		i--
		if *m.IsSelect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SelectSwordEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SelectSwordEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SelectSwordEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RightEquipInfo != nil {
		{
			size, err := m.RightEquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LeftEquipInfo != nil {
		{
			size, err := m.LeftEquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsEvent != nil {
		i--
		if *m.IsEvent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SelectMountainGodEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SelectMountainGodEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SelectMountainGodEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pos != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Pos)<<1)^uint32((*m.Pos>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SelectMountainGodEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SelectMountainGodEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SelectMountainGodEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EquipInfo) > 0 {
		for iNdEx := len(m.EquipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EventType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.EventType))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DailyTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DailyTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DailyTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DailyTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DailyTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DailyTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskInfoList) > 0 {
		for iNdEx := len(m.TaskInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DailyTaskReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DailyTaskReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DailyTaskReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DailyTaskInfo != nil {
		{
			size, err := m.DailyTaskInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DailyTaskReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DailyTaskReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DailyTaskReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityValue != nil {
		{
			size, err := m.ActivityValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DailyActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DailyActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DailyActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DailyActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DailyActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DailyActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityInfo != nil {
		{
			size, err := m.ActivityInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DailyActivityValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DailyActivityValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DailyActivityValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangeInfo != nil {
		{
			size, err := m.ChangeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DailyActivityReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DailyActivityReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DailyActivityReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalActivity != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TotalActivity)<<1)^uint32((*m.TotalActivity>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActivityId)<<1)^uint32((*m.ActivityId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DailyActivityReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DailyActivityReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DailyActivityReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActivityInfo != nil {
		{
			size, err := m.ActivityInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BuyStamina) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BuyStamina) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BuyStamina) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BuyStamina) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BuyStamina) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BuyStamina) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Mail_Have_New) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Mail_Have_New) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Mail_Have_New) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Mail_Title) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Mail_Title) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Mail_Title) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IntAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.IntAddr)<<1)^uint64((*m.IntAddr>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Mail_Title) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Mail_Title) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Mail_Title) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MailTitles) > 0 {
		for iNdEx := len(m.MailTitles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MailTitles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Mail_Full) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Mail_Full) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Mail_Full) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IntAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.IntAddr)<<1)^uint64((*m.IntAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.MailIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.MailIndex)<<1)^uint64((*m.MailIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Mail_Full) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Mail_Full) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Mail_Full) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MailFull != nil {
		{
			size, err := m.MailFull.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_Mail_Full) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_Mail_Full) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_Mail_Full) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MailFull != nil {
		{
			size, err := m.MailFull.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IntAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.IntAddr)<<1)^uint64((*m.IntAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.MailIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.MailIndex)<<1)^uint64((*m.MailIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_Mail_Read) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Mail_Read) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_Mail_Read) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IntAddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.IntAddr)<<1)^uint64((*m.IntAddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.MailIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.MailIndex)<<1)^uint64((*m.MailIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_Mail_Read) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Mail_Read) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_Mail_Read) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TodaySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TodaySign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TodaySign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TodaySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TodaySign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TodaySign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TodaySign != nil {
		i--
		if *m.TodaySign {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetroactiveLeft != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RetroactiveLeft)<<1)^uint32((*m.RetroactiveLeft>>31))))
		i--
		dAtA[i] = 0x48
	}
	if m.TodaySign != nil {
		i--
		if *m.TodaySign {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.LotteryCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LotteryCount)<<1)^uint32((*m.LotteryCount>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.MissCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MissCount)<<1)^uint32((*m.MissCount>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.RetroactiveCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RetroactiveCount)<<1)^uint32((*m.RetroactiveCount>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.SignCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SignCount)<<1)^uint32((*m.SignCount>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.MonthTotalDays != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MonthTotalDays)<<1)^uint32((*m.MonthTotalDays>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SignMonth != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SignMonth)<<1)^uint32((*m.SignMonth>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SignAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SignAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SignAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsMiss != nil {
		i--
		if *m.IsMiss {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SignAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SignAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SignAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SignLottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SignLottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SignLottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SignLottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SignLottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SignLottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LotteryCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LotteryCount)<<1)^uint32((*m.LotteryCount>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SignLotteryShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SignLotteryShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SignLotteryShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SignLotteryShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SignLotteryShow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SignLotteryShow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SevenDayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SevenDayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SevenDayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SevenDayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SevenDayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SevenDayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalLoginDays != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TotalLoginDays)<<1)^uint32((*m.TotalLoginDays>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DayTail) > 0 {
		for iNdEx := len(m.DayTail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DayTail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetSevenDayReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetSevenDayReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetSevenDayReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TheDay != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TheDay)<<1)^uint32((*m.TheDay>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetSevenDayReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetSevenDayReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetSevenDayReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TheDay != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TheDay)<<1)^uint32((*m.TheDay>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMSetLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMSetLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMSetLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Value)<<1)^uint32((*m.Value>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMSetLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMSetLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMSetLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Value)<<1)^uint32((*m.Value>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddStimina) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddStimina) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddStimina) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Value)<<1)^uint32((*m.Value>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddStimina) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddStimina) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddStimina) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddDiamond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddDiamond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddDiamond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Value)<<1)^uint32((*m.Value>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddDiamond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddDiamond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddDiamond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddCaliburnCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddCaliburnCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddCaliburnCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Value)<<1)^uint32((*m.Value>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddCaliburnCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddCaliburnCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddCaliburnCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddArenaCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddArenaCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddArenaCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Value)<<1)^uint32((*m.Value>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddArenaCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddArenaCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddArenaCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Face != nil {
		{
			size, err := m.Face.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddSuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddSuit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddSuit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Suit != nil {
		{
			size, err := m.Suit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddSuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddSuit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddSuit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GMAddEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GMAddEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GMAddEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EquipId)<<1)^uint32((*m.EquipId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GMAddEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GMAddEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GMAddEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FunctionOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FunctionOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FunctionOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FunctionId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FunctionId)<<1)^uint32((*m.FunctionId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FastTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FastTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FastTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FastTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FastTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FastTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EasterEggTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EasterEggTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EasterEggTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.EggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EggId)<<1)^uint32((*m.EggId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_GetEasterEggTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_GetEasterEggTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_GetEasterEggTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftCdTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftCdTime)<<1)^uint32((*m.LeftCdTime>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.EggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EggId)<<1)^uint32((*m.EggId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EasterEggTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EasterEggTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EasterEggTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipStrongthen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipStrongthen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipStrongthen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipStrongthen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipStrongthen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipStrongthen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipStrongthenEquiped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipStrongthenEquiped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipStrongthenEquiped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SiteType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.SiteType))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipStrongthenEquiped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipStrongthenEquiped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipStrongthenEquiped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipResolve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipResolve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipResolve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EquipIndex) > 0 {
		for iNdEx := len(m.EquipIndex) - 1; iNdEx >= 0; iNdEx-- {
			x105 := (uint64(m.EquipIndex[iNdEx]) << 1) ^ uint64((m.EquipIndex[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x105))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipResolve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipResolve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipResolve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipFix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipFix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipFix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipFix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipFix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipFix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipFixEquiped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipFixEquiped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipFixEquiped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SiteType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.SiteType))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipFixEquiped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipFixEquiped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipFixEquiped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AskFixEquipsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AskFixEquipsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AskFixEquipsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AskFixEquipsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AskFixEquipsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AskFixEquipsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FixEquips != nil {
		{
			size, err := m.FixEquips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipFastFix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipFastFix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipFastFix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipFastFix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipFastFix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipFastFix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetFixedEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetFixedEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetFixedEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetFixedEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetFixedEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetFixedEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipInfo != nil {
		{
			size, err := m.EquipInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PointGoldInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PointGoldInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PointGoldInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PointGoldInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PointGoldInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PointGoldInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExchangedCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ExchangedCount)<<1)^uint32((*m.ExchangedCount>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PointGold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PointGold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PointGold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PointGold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PointGold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PointGold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TouchPersonEasterEgg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TouchPersonEasterEgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TouchPersonEasterEgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EasterEggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EasterEggId)<<1)^uint32((*m.EasterEggId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TouchPersonEasterEgg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TouchPersonEasterEgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TouchPersonEasterEgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DayGetCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.DayGetCount)<<1)^uint32((*m.DayGetCount>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.LeftCdTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftCdTime)<<1)^uint32((*m.LeftCdTime>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.EasterEggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EasterEggId)<<1)^uint32((*m.EasterEggId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ResetPersonEasterEgg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ResetPersonEasterEgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ResetPersonEasterEgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EasterEggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EasterEggId)<<1)^uint32((*m.EasterEggId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_GlobalEasterEggInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_GlobalEasterEggInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_GlobalEasterEggInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.EasterEggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EasterEggId)<<1)^uint32((*m.EasterEggId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GlobalEasterEggInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GlobalEasterEggInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GlobalEasterEggInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftCdTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftCdTime)<<1)^uint32((*m.LeftCdTime>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.EasterEggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EasterEggId)<<1)^uint32((*m.EasterEggId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TouchGlobalEasterEgg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TouchGlobalEasterEgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TouchGlobalEasterEgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.EasterEggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EasterEggId)<<1)^uint32((*m.EasterEggId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TouchGlobalEasterEgg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TouchGlobalEasterEgg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TouchGlobalEasterEgg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.LeftCdTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.LeftCdTime)<<1)^uint32((*m.LeftCdTime>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.EasterEggId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.EasterEggId)<<1)^uint32((*m.EasterEggId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RechargeMoneyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RechargeMoneyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RechargeMoneyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RechargeMoneyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RechargeMoneyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RechargeMoneyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RechargeInfo != nil {
		{
			size, err := m.RechargeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RechargeMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RechargeMoney) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RechargeMoney) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RechargeId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RechargeId)<<1)^uint32((*m.RechargeId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RechargeMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RechargeMoney) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RechargeMoney) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RechargeId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RechargeId)<<1)^uint32((*m.RechargeId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_VipDailyRewardFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_VipDailyRewardFlag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_VipDailyRewardFlag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DailyRewardFlag != nil {
		i--
		if *m.DailyRewardFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetVipDailyReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetVipDailyReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetVipDailyReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetVipDailyReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetVipDailyReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetVipDailyReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetSpecialVipReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetSpecialVipReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetSpecialVipReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipLevel != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.VipLevel)<<1)^uint32((*m.VipLevel>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetSpecialVipReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetSpecialVipReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetSpecialVipReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AddInterActTool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AddInterActTool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AddInterActTool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToolInfo) > 0 {
		for iNdEx := len(m.ToolInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToolInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RemoveInterActTool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RemoveInterActTool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RemoveInterActTool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToolId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ToolId)<<1)^uint32((*m.ToolId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RemoveOwnerTool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RemoveOwnerTool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RemoveOwnerTool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BathhouseFightEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BathhouseFightEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BathhouseFightEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TouchManInBlack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TouchManInBlack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TouchManInBlack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TouchManInBlack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TouchManInBlack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TouchManInBlack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CdTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CdTime)<<1)^uint32((*m.CdTime>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_UseInterActTool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_UseInterActTool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_UseInterActTool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToolType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ToolType)<<1)^uint32((*m.ToolType>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PickUpInterActTool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PickUpInterActTool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PickUpInterActTool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToolId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ToolId)<<1)^uint32((*m.ToolId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PickUpInterActTool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PickUpInterActTool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PickUpInterActTool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToolInfo != nil {
		{
			size, err := m.ToolInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BathFightStepInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BathFightStepInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BathFightStepInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BathFightStep != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BathFightStep)<<1)^uint32((*m.BathFightStep>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CanPlayWaterBall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CanPlayWaterBall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CanPlayWaterBall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CanPlayWaterBall != nil {
		i--
		if *m.CanPlayWaterBall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BathStatusChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BathStatusChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BathStatusChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatusId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.StatusId)<<1)^uint32((*m.StatusId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncBathPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncBathPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncBathPlayerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TodayBathStamina != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TodayBathStamina)<<1)^uint32((*m.TodayBathStamina>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.BathStamina != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BathStamina)<<1)^uint32((*m.BathStamina>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.BathFullness != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BathFullness)<<1)^uint32((*m.BathFullness>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PreferFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PreferFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PreferFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FaceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceId)<<1)^uint32((*m.FaceId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PreferFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PreferFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PreferFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsPrefer != nil {
		i--
		if *m.IsPrefer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.FaceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FaceId)<<1)^uint32((*m.FaceId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FacePreferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FacePreferInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FacePreferInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FacePreferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FacePreferInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FacePreferInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FaceIdList) > 0 {
		for iNdEx := len(m.FaceIdList) - 1; iNdEx >= 0; iNdEx-- {
			x113 := (uint32(m.FaceIdList[iNdEx]) << 1) ^ uint32((m.FaceIdList[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x113))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.FaceRandomOnoff != nil {
		i--
		if *m.FaceRandomOnoff {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_OnOffFaceRandom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_OnOffFaceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_OnOffFaceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_InteractEnergy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_InteractEnergy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_InteractEnergy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EnergyDiff) > 0 {
		for iNdEx := len(m.EnergyDiff) - 1; iNdEx >= 0; iNdEx-- {
			x114 := (uint32(m.EnergyDiff[iNdEx]) << 1) ^ uint32((m.EnergyDiff[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x114))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.Energy != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Energy)<<1)^uint32((*m.Energy>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_InterActInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_InterActInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_InterActInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_InterActInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_InterActInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_InterActInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InteractInfo != nil {
		{
			size, err := m.InteractInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_QueryUnlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_QueryUnlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_QueryUnlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_QueryUnlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_QueryUnlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_QueryUnlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Level) > 0 {
		for iNdEx := len(m.Level) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Level[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Interact) > 0 {
		for iNdEx := len(m.Interact) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interact[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_UnlockInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UnlockInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_UnlockInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_UnlockInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UnlockInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_UnlockInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DressInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DressInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DressInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DressInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DressInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DressInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EffectActList) > 0 {
		for iNdEx := len(m.EffectActList) - 1; iNdEx >= 0; iNdEx-- {
			x116 := (uint32(m.EffectActList[iNdEx]) << 1) ^ uint32((m.EffectActList[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x116))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeOffInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeOffInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeOffInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeOffInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeOffInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeOffInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EffectActList) > 0 {
		for iNdEx := len(m.EffectActList) - 1; iNdEx >= 0; iNdEx-- {
			x117 := (uint32(m.EffectActList[iNdEx]) << 1) ^ uint32((m.EffectActList[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x117))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ActId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActId)<<1)^uint32((*m.ActId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ExChangeInteractHole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ExChangeInteractHole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ExChangeInteractHole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActType != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ActType)<<1)^uint32((*m.ActType>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.Hole_2 != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Hole_2)<<1)^uint32((*m.Hole_2>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Hole_1 != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Hole_1)<<1)^uint32((*m.Hole_1>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ExChangeInteractHole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ExChangeInteractHole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ExChangeInteractHole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EffectActList) > 0 {
		for iNdEx := len(m.EffectActList) - 1; iNdEx >= 0; iNdEx-- {
			x118 := (uint32(m.EffectActList[iNdEx]) << 1) ^ uint32((m.EffectActList[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x118))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_InterActManualRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_InterActManualRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_InterActManualRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_InterActManualRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_InterActManualRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_InterActManualRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Num != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Num)<<1)^uint32((*m.Num>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.IsNewReward != nil {
		i--
		if *m.IsNewReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetInterActManualReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetInterActManualReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetInterActManualReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetInterActManualReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetInterActManualReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetInterActManualReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_VehicleCompose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_VehicleCompose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_VehicleCompose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConsumeVehicleList) > 0 {
		for iNdEx := len(m.ConsumeVehicleList) - 1; iNdEx >= 0; iNdEx-- {
			x120 := (uint64(m.ConsumeVehicleList[iNdEx]) << 1) ^ uint64((m.ConsumeVehicleList[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x120))
			i--
			dAtA[i] = 0x18
		}
	}
	if m.MainVehicleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.MainVehicleIndex)<<1)^uint64((*m.MainVehicleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_VehicleCompose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_VehicleCompose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_VehicleCompose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewVehicle != nil {
		{
			size, err := m.NewVehicle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipManualInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipManualInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipManualInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipManualInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipManualInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipManualInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Rate != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Rate)<<1)^uint32((*m.Rate>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EquipIdList) > 0 {
		for iNdEx := len(m.EquipIdList) - 1; iNdEx >= 0; iNdEx-- {
			x123 := (uint32(m.EquipIdList[iNdEx]) << 1) ^ uint32((m.EquipIdList[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x123))
			i--
			dAtA[i] = 0x10
		}
	}
	if m.CanGet != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CanGet)<<1)^uint32((*m.CanGet>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetEquipManualReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetEquipManualReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetEquipManualReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetEquipManualReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetEquipManualReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetEquipManualReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_NPCInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_NPCInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_NPCInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_NPCInteract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_NPCInteract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_NPCInteract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NpcId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NpcId)<<1)^uint32((*m.NpcId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_InteractRedPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_InteractRedPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_InteractRedPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_InteractRedPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_InteractRedPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_InteractRedPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CanUnlockActList) > 0 {
		for iNdEx := len(m.CanUnlockActList) - 1; iNdEx >= 0; iNdEx-- {
			x124 := (uint32(m.CanUnlockActList[iNdEx]) << 1) ^ uint32((m.CanUnlockActList[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x124))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FriendFightInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FriendFightInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FriendFightInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.RetUnitindex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.FriendIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.FriendIndex)<<1)^uint64((*m.FriendIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FriendFightInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FriendFightInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FriendFightInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Battle != nil {
		{
			size, err := m.Battle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_UploadSystemConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UploadSystemConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_UploadSystemConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TouchEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TouchEquip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TouchEquip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EquipIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EquipIndex)<<1)^uint64((*m.EquipIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TouchItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TouchItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TouchItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ItemIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.ItemIndex)<<1)^uint64((*m.ItemIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_UploadForceGuideInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UploadForceGuideInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_UploadForceGuideInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GuideIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.GuideIndex)<<1)^uint32((*m.GuideIndex>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_UpdateFindwayGuideIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UpdateFindwayGuideIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_UpdateFindwayGuideIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FindGuidIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FindGuidIndex)<<1)^uint32((*m.FindGuidIndex>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ExtendSkillHole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ExtendSkillHole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ExtendSkillHole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ExtendSkillHole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ExtendSkillHole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ExtendSkillHole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleCurrentSkills) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleCurrentSkills) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleCurrentSkills) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CurrentSkills) > 0 {
		for iNdEx := len(m.CurrentSkills) - 1; iNdEx >= 0; iNdEx-- {
			x127 := (uint32(m.CurrentSkills[iNdEx]) << 1) ^ uint32((m.CurrentSkills[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x127))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipBroken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipBroken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipBroken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EquipId) > 0 {
		for iNdEx := len(m.EquipId) - 1; iNdEx >= 0; iNdEx-- {
			x128 := (uint32(m.EquipId[iNdEx]) << 1) ^ uint32((m.EquipId[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x128))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_CustomFaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_CustomFaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_CustomFaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CustomFaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CustomFaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CustomFaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ForeverFree != nil {
		i--
		if *m.ForeverFree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentFace != nil {
		{
			size, err := m.CurrentFace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CustomList) > 0 {
		for iNdEx := len(m.CustomList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_CanUploadImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_CanUploadImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_CanUploadImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BuyFree != nil {
		i--
		if *m.BuyFree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CanUploadImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CanUploadImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CanUploadImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ServerId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ServerId)<<1)^uint32((*m.ServerId>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.PlatformId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PlatformId)<<1)^uint32((*m.PlatformId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.UniqueKey != nil {
		i -= len(m.UniqueKey)
		copy(dAtA[i:], m.UniqueKey)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.UniqueKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_UploadImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UploadImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_UploadImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueKey != nil {
		i -= len(m.UniqueKey)
		copy(dAtA[i:], m.UniqueKey)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.UniqueKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_UploadImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_UploadImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_UploadImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UniqueKey != nil {
		i -= len(m.UniqueKey)
		copy(dAtA[i:], m.UniqueKey)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.UniqueKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_UploadImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UploadImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_UploadImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DressCustomFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DressCustomFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DressCustomFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DressCustomFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DressCustomFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DressCustomFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentFace != nil {
		{
			size, err := m.CurrentFace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeOffCustomFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeOffCustomFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeOffCustomFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeOffCustomFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeOffCustomFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeOffCustomFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentFace != nil {
		{
			size, err := m.CurrentFace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DelelteCustomFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DelelteCustomFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DelelteCustomFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DelelteCustomFace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DelelteCustomFace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DelelteCustomFace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentFace != nil {
		{
			size, err := m.CurrentFace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CustomFaceAuditResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CustomFaceAuditResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CustomFaceAuditResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Status)<<1)^uint32((*m.Status>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FaceUploadSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FaceUploadSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FaceUploadSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImageId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ImageId)<<1)^uint32((*m.ImageId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RolePetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RolePetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RolePetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RolePetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RolePetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RolePetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetInfo != nil {
		{
			size, err := m.PetInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SetPetFightStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SetPetFightStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SetPetFightStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SetPetFightStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SetPetFightStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SetPetFightStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i--
		if *m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PetEvolve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PetEvolve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PetEvolve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PetEvolve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PetEvolve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PetEvolve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewPet != nil {
		{
			size, err := m.NewPet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OldPetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.OldPetId)<<1)^uint32((*m.OldPetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PetTalentRebuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PetTalentRebuild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PetTalentRebuild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Site != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Site)<<1)^uint32((*m.Site>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PetTalentRebuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PetTalentRebuild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PetTalentRebuild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewPassiveId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NewPassiveId)<<1)^uint32((*m.NewPassiveId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FosterPet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FosterPet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FosterPet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FosterPet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FosterPet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FosterPet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exp != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Exp)<<1)^uint64((*m.Exp>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Level)<<1)^uint32((*m.Level>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PetAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PetAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PetAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PetList) > 0 {
		for iNdEx := len(m.PetList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PetList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PetUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PetUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PetUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PetList) > 0 {
		for iNdEx := len(m.PetList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PetList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncPetLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncPetLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncPetLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpDiff) > 0 {
		for iNdEx := len(m.ExpDiff) - 1; iNdEx >= 0; iNdEx-- {
			x135 := (uint64(m.ExpDiff[iNdEx]) << 1) ^ uint64((m.ExpDiff[iNdEx] >> 63))
			i = encodeVarintNet_Game(dAtA, i, uint64(x135))
			i--
			dAtA[i] = 0x20
		}
	}
	if m.Exp != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.Exp)<<1)^uint64((*m.Exp>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Level)<<1)^uint32((*m.Level>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PetEatPill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PetEatPill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PetEatPill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PetEatPill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PetEatPill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PetEatPill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewAttr != nil {
		{
			size, err := m.NewAttr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PetRefreshInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PetRefreshInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PetRefreshInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.PetId)<<1)^uint32((*m.PetId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.BornPos != nil {
		{
			size, err := m.BornPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_RoleNabPet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_RoleNabPet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_RoleNabPet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleNabPet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleNabPet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleNabPet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_HorseLight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_HorseLight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_HorseLight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Horse_LightList) > 0 {
		for iNdEx := len(m.Horse_LightList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Horse_LightList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AssistantTipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AssistantTipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AssistantTipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AssistantTipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AssistantTipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AssistantTipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TipReadIdList) > 0 {
		for iNdEx := len(m.TipReadIdList) - 1; iNdEx >= 0; iNdEx-- {
			x138 := (uint32(m.TipReadIdList[iNdEx]) << 1) ^ uint32((m.TipReadIdList[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x138))
			i--
			dAtA[i] = 0x18
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AssistantTipRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AssistantTipRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AssistantTipRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TipId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.TipId)<<1)^uint32((*m.TipId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_NiuDanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_NiuDanInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_NiuDanInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NiudanId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NiudanId)<<1)^uint32((*m.NiudanId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_NiuDanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_NiuDanInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_NiuDanInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ButtonInfo != nil {
		{
			size, err := m.ButtonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NiudanId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NiudanId)<<1)^uint32((*m.NiudanId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TouchNiuDan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TouchNiuDan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TouchNiuDan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ButtonId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ButtonId)<<1)^uint32((*m.ButtonId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.NiudanId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NiudanId)<<1)^uint32((*m.NiudanId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TouchNiuDan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TouchNiuDan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TouchNiuDan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MustRewardList) > 0 {
		for iNdEx := len(m.MustRewardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MustRewardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LeftTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.LeftTime)<<1)^uint64((*m.LeftTime>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.ButtonId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ButtonId)<<1)^uint32((*m.ButtonId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.NiudanId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NiudanId)<<1)^uint32((*m.NiudanId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ExchangeCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ExchangeCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ExchangeCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != nil {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ExchangeCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ExchangeCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ExchangeCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArchieveFinish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArchieveFinish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArchieveFinish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			x140 := (uint32(m.Id[iNdEx]) << 1) ^ uint32((m.Id[iNdEx] >> 31))
			i = encodeVarintNet_Game(dAtA, i, uint64(x140))
			i--
			dAtA[i] = 0x8
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetArchieveReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetArchieveReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetArchieveReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Id)<<1)^uint32((*m.Id>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetArchieveReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetArchieveReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetArchieveReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Id)<<1)^uint32((*m.Id>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ArchieveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ArchieveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ArchieveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ArchieveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ArchieveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ArchieveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ReadyEnterGuadratic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ReadyEnterGuadratic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ReadyEnterGuadratic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GwIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.GwIntaddr)<<1)^uint64((*m.GwIntaddr>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ReadyEnterGuadratic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ReadyEnterGuadratic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ReadyEnterGuadratic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EnterGuadratic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EnterGuadratic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EnterGuadratic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DupId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.DupId)<<1)^uint32((*m.DupId>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.MapId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MapId)<<1)^uint32((*m.MapId>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.SceneInstanceId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneInstanceId)<<1)^uint64((*m.SceneInstanceId>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.SceneIntaddr != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.SceneIntaddr)<<1)^uint64((*m.SceneIntaddr>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.SceneIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneIndex)<<1)^uint32((*m.SceneIndex>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SceneId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GuadraticReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GuadraticReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GuadraticReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *S2C_NextGuadraticDup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_NextGuadraticDup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_NextGuadraticDup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoleList) > 0 {
		for iNdEx := len(m.RoleList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DupId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.DupId)<<1)^uint64((*m.DupId>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GuadraticEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GuadraticEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GuadraticEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResultList) > 0 {
		for iNdEx := len(m.ResultList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncGuadraticRoleHP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncGuadraticRoleHP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncGuadraticRoleHP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoleHpList) > 0 {
		for iNdEx := len(m.RoleHpList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleHpList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SyncGuadraticRoleCD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SyncGuadraticRoleCD) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SyncGuadraticRoleCD) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoleCdList) > 0 {
		for iNdEx := len(m.RoleCdList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleCdList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GuadraticBossEnter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GuadraticBossEnter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GuadraticBossEnter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HurtRect != nil {
		{
			size, err := m.HurtRect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BossId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BossId)<<1)^uint32((*m.BossId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.BossIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BossIndex)<<1)^uint32((*m.BossIndex>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GuadraticBossUseSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GuadraticBossUseSkill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GuadraticBossUseSkill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HurtRect != nil {
		{
			size, err := m.HurtRect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Hurt != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Hurt)<<1)^uint32((*m.Hurt>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.SkillId)<<1)^uint32((*m.SkillId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.BossId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BossId)<<1)^uint32((*m.BossId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.BossIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.BossIndex)<<1)^uint32((*m.BossIndex>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SellBagThing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SellBagThing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SellBagThing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ItemList) > 0 {
		for iNdEx := len(m.ItemList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItemList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EquipList) > 0 {
		for iNdEx := len(m.EquipList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquipList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SellBagThing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SellBagThing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SellBagThing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_StoneExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_StoneExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_StoneExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Want != nil {
		{
			size, err := m.Want.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_StoneExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_StoneExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_StoneExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FirstMonery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FirstMonery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FirstMonery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FirstMonery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FirstMonery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FirstMonery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RewardList) > 0 {
		for iNdEx := len(m.RewardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.FirstFlag != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.FirstFlag)<<1)^uint32((*m.FirstFlag>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetFirstMonery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetFirstMonery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetFirstMonery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetFirstMonery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetFirstMonery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetFirstMonery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_OtherRechargeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_OtherRechargeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_OtherRechargeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.EndTime)<<1)^uint64((*m.EndTime>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.StartTime)<<1)^uint64((*m.StartTime>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CostList) > 0 {
		for iNdEx := len(m.CostList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CostList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RewardList) > 0 {
		for iNdEx := len(m.RewardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetOtherRechargeReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetOtherRechargeReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetOtherRechargeReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetOtherRechargeReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetOtherRechargeReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetOtherRechargeReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ShareToWeixin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ShareToWeixin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ShareToWeixin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RiskId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RiskId)<<1)^uint32((*m.RiskId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ChapterId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapterId)<<1)^uint32((*m.ChapterId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_IfShareRisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_IfShareRisk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_IfShareRisk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RiskId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.RiskId)<<1)^uint32((*m.RiskId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.ChapterId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.ChapterId)<<1)^uint32((*m.ChapterId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_IfShareRisk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_IfShareRisk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_IfShareRisk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != nil {
		i--
		if *m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AreYouKidding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AreYouKidding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AreYouKidding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BattlePlayerGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattlePlayerGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattlePlayerGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerList) > 0 {
		for iNdEx := len(m.PlayerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BattlePVEData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattlePVEData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattlePVEData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PassRiskData != nil {
		{
			size, err := m.PassRiskData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.FaceList) > 0 {
		for iNdEx := len(m.FaceList) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintNet_Game(dAtA, i, uint64(m.FaceList[iNdEx]))
			i--
			dAtA[i] = 0x48
		}
	}
	if m.FaceCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.FaceCount))
		i--
		dAtA[i] = 0x40
	}
	if m.Pet != nil {
		{
			size, err := m.Pet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Friend != nil {
		{
			size, err := m.Friend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MainHero != nil {
		{
			size, err := m.MainHero.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet_Game(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RiskID != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RiskID))
		i--
		dAtA[i] = 0x20
	}
	if m.ChapterID != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.ChapterID))
		i--
		dAtA[i] = 0x18
	}
	if m.Randomseed != nil {
		i -= len(m.Randomseed)
		copy(dAtA[i:], m.Randomseed)
		i = encodeVarintNet_Game(dAtA, i, uint64(len(m.Randomseed)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattlePVEVerifyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattlePVEVerifyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattlePVEVerifyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ExtendEquipBag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ExtendEquipBag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ExtendEquipBag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ExtendEquipBag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ExtendEquipBag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ExtendEquipBag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrExtendCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CurrExtendCount)<<1)^uint32((*m.CurrExtendCount>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrBagSize != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CurrBagSize)<<1)^uint32((*m.CurrBagSize>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ActivityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ActivityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActivityList) > 0 {
		for iNdEx := len(m.ActivityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActivityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetActivityReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetActivityReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetActivityReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Position != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Position)<<1)^uint32((*m.Position>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.Id)<<1)^uint32((*m.Id>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetActivityReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetActivityReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetActivityReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ActivityInfoUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ActivityInfoUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ActivityInfoUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActivityList) > 0 {
		for iNdEx := len(m.ActivityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActivityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNet_Game(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PianoStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PianoStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PianoStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PianoStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PianoStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PianoStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PianoPlay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PianoPlay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PianoPlay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoteId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NoteId)<<1)^uint32((*m.NoteId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PianoPlay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PianoPlay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PianoPlay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoteId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NoteId)<<1)^uint32((*m.NoteId>>31))))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *C2S_PianoEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PianoEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PianoEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PianoEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PianoEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PianoEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AskPianoStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AskPianoStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AskPianoStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AskPianoStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AskPianoStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AskPianoStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_RoleBagFull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_RoleBagFull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_RoleBagFull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_EquipMake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_EquipMake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_EquipMake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CaseId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.CaseId)<<1)^uint32((*m.CaseId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.MakeId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.MakeId)<<1)^uint32((*m.MakeId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_EquipMake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_EquipMake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_EquipMake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewEquipId != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.NewEquipId)<<1)^uint32((*m.NewEquipId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetMinigameBuyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetMinigameBuyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetMinigameBuyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetMinigameBuyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetMinigameBuyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetMinigameBuyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GetFlag != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.GetFlag)<<1)^uint32((*m.GetFlag>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.DayBuyCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.DayBuyCount)<<1)^uint32((*m.DayBuyCount>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetDailyBitCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetDailyBitCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetDailyBitCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_GetDailyBitCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetDailyBitCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetDailyBitCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BuyBitCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BuyBitCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BuyBitCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BuyBitCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BuyBitCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BuyBitCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DayBuyCount != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64((uint32(*m.DayBuyCount)<<1)^uint32((*m.DayBuyCount>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintNet_Game(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNet_Game(dAtA []byte, offset int, v uint64) int {
	offset -= sovNet_Game(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S_HeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetServerId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetServerId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != nil {
		n += 1 + sozNet_Game(uint64(*m.ServerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_CheckAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CheckAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.Password != nil {
		l = len(m.Password)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.ServerTime != nil {
		n += 1 + sozNet_Game(uint64(*m.ServerTime))
	}
	if m.ForbiddenTime != nil {
		n += 1 + sozNet_Game(uint64(*m.ForbiddenTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.Password != nil {
		l = len(m.Password)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RoleSum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleSum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.ListRoleIndex) > 0 {
		for _, e := range m.ListRoleIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ClearRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ClearRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.IsOk != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RandNickName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RandNickName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.ListNickName) > 0 {
		for _, b := range m.ListNickName {
			l = len(b)
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_CreateRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NickName != nil {
		l = len(m.NickName)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.DeviceKey != nil {
		l = len(m.DeviceKey)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.DeviceToken != nil {
		l = len(m.DeviceToken)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.DeviceType != nil {
		l = len(m.DeviceType)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.PlatformType != nil {
		l = len(m.PlatformType)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.HelmetId != nil {
		n += 1 + sozNet_Game(uint64(*m.HelmetId))
	}
	if m.FaceId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceId))
	}
	if m.WeaponId != nil {
		n += 1 + sozNet_Game(uint64(*m.WeaponId))
	}
	if m.OrnamentsId != nil {
		n += 1 + sozNet_Game(uint64(*m.OrnamentsId))
	}
	if m.EggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EggId))
	}
	if m.Gender != nil {
		n += 1 + sozNet_Game(uint64(*m.Gender))
	}
	if m.Channel != nil {
		l = len(m.Channel)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 2 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 2 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 2 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.IsTestVip != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CreateRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.NickName != nil {
		l = len(m.NickName)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RoleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.ForceApplyRoleInfo != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIntaddr))
	}
	if m.SceneIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneIntaddr))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ReadyEnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.LoginIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIntaddr))
	}
	if m.S2SRoleInfo != nil {
		l = m.S2SRoleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ReadyEnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.SceneIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneIndex))
	}
	if m.SceneIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneIntaddr))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.MapId != nil {
		n += 1 + sozNet_Game(uint64(*m.MapId))
	}
	if m.SceneType != nil {
		n += 1 + sovNet_Game(uint64(*m.SceneType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BornEnterSceneOK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BornEnterSceneOK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_ReadyChangeScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.NickName != nil {
		l = len(m.NickName)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.LoginIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIntaddr))
	}
	if m.OldSceneIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.OldSceneIntaddr))
	}
	if m.OldSceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.OldSceneInstanceId))
	}
	if m.S2SRoleInfo != nil {
		l = m.S2SRoleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_OffLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Account != nil {
		l = len(m.Account)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.Reason != nil {
		l = len(m.Reason)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Charset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Utf_8 != nil {
		n += 2
	}
	if m.MsgVersion != nil {
		n += 1 + sozNet_Game(uint64(*m.MsgVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		n += 1 + sozNet_Game(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		n += 1 + sozNet_Game(uint64(*m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_MaterialNotEnough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GameCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GameCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.GameCoin != nil {
		n += 1 + sozNet_Game(uint64(*m.GameCoin))
	}
	if len(m.DiffGameCoin) > 0 {
		for _, e := range m.DiffGameCoin {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DiamondCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DiamondCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.DiamondCoin != nil {
		n += 1 + sozNet_Game(uint64(*m.DiamondCoin))
	}
	if len(m.DiffDiamondCoin) > 0 {
		for _, e := range m.DiffDiamondCoin {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Endurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Endurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Endurance != nil {
		n += 1 + sozNet_Game(uint64(*m.Endurance))
	}
	if len(m.DiffEndurance) > 0 {
		for _, e := range m.DiffEndurance {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.StaminaInfo != nil {
		l = m.StaminaInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RecoveryEndurance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Endurance != nil {
		n += 1 + sozNet_Game(uint64(*m.Endurance))
	}
	if len(m.DiffEndurance) > 0 {
		for _, e := range m.DiffEndurance {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.StaminaInfo != nil {
		l = m.StaminaInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Exp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Exp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Exp != nil {
		n += 1 + sozNet_Game(uint64(*m.Exp))
	}
	if len(m.DiffExp) > 0 {
		for _, e := range m.DiffExp {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Level) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Level) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Level != nil {
		n += 1 + sozNet_Game(uint64(*m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SkillPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SkillPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillPoint != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillPoint))
	}
	if len(m.DiffSkillPoint) > 0 {
		for _, e := range m.DiffSkillPoint {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArenaScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ArenaScore != nil {
		n += 1 + sozNet_Game(uint64(*m.ArenaScore))
	}
	if len(m.DiffArenaScore) > 0 {
		for _, e := range m.DiffArenaScore {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Vip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Vip != nil {
		n += 1 + sozNet_Game(uint64(*m.Vip))
	}
	if len(m.DiffVip) > 0 {
		for _, e := range m.DiffVip {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.VipExp != nil {
		n += 1 + sozNet_Game(uint64(*m.VipExp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleInfo_EnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.BeginX != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginX))
	}
	if m.BeginY != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BornRoleInfo_EnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.EggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EggId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_OtherRoleInfo_EnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.BeginX != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginX))
	}
	if m.BeginY != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ManyOtherRoleInfo_EnterScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleInfo) > 0 {
		for _, e := range m.RoleInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncRoleShowInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.BeginX != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginX))
	}
	if m.BeginY != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginY))
	}
	if m.ChangeFlag != nil {
		n += 1 + sozNet_Game(uint64(*m.ChangeFlag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SceneRoleinfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MoveSpeed != nil {
		n += 1 + sozNet_Game(uint64(*m.MoveSpeed))
	}
	if m.DbCardInfo != nil {
		l = m.DbCardInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.MemoryInfo != nil {
		l = m.MemoryInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.ToLeft != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BroadcastRoleShowInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PlayerInfo != nil {
		l = m.PlayerInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.BeginX != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginX))
	}
	if m.BeginY != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleInfo_LeaveScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Request_Move) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.BeginX != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginX))
	}
	if m.BeginY != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginY))
	}
	if m.EndX != nil {
		n += 1 + sozNet_Game(uint64(*m.EndX))
	}
	if m.EndY != nil {
		n += 1 + sozNet_Game(uint64(*m.EndY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Request_Move) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.BeginX != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginX))
	}
	if m.BeginY != nil {
		n += 1 + sozNet_Game(uint64(*m.BeginY))
	}
	if m.EndX != nil {
		n += 1 + sozNet_Game(uint64(*m.EndX))
	}
	if m.EndY != nil {
		n += 1 + sozNet_Game(uint64(*m.EndY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Chat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.ChatType != nil {
		n += 1 + sovNet_Game(uint64(*m.ChatType))
	}
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.GroupId != nil {
		n += 1 + sozNet_Game(uint64(*m.GroupId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Chat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.ChatType != nil {
		n += 1 + sovNet_Game(uint64(*m.ChatType))
	}
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.IsGm != nil {
		n += 2
	}
	if m.GroupId != nil {
		n += 1 + sozNet_Game(uint64(*m.GroupId))
	}
	if m.SrcVisitInfo != nil {
		l = m.SrcVisitInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.ForbiddenTime != nil {
		n += 1 + sozNet_Game(uint64(*m.ForbiddenTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Use_SPItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ItemIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemIndex))
	}
	if m.SpId != nil {
		n += 1 + sozNet_Game(uint64(*m.SpId))
	}
	if m.Stamp != nil {
		n += 1 + sozNet_Game(uint64(*m.Stamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Use_SPItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Change_Scene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarSceneId != nil {
		n += 1 + sovNet_Game(uint64(*m.TarSceneId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.DefaultFlag != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QuerySceneLineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QuerySceneLineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if len(m.SceneIndex) > 0 {
		for _, e := range m.SceneIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if len(m.Loads) > 0 {
		for _, e := range m.Loads {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ChangeSceneLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarSceneId != nil {
		n += 1 + sovNet_Game(uint64(*m.TarSceneId))
	}
	if m.TarSceneIndex != nil {
		n += 1 + sovNet_Game(uint64(*m.TarSceneIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ChangeSceneLine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TransPortChangeScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TransportId != nil {
		n += 1 + sozNet_Game(uint64(*m.TransportId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TransPortChangeScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TransportId != nil {
		n += 1 + sozNet_Game(uint64(*m.TransportId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_NPC_ChangeScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.SceneType != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneType))
	}
	if m.TransInfoId != nil {
		n += 1 + sozNet_Game(uint64(*m.TransInfoId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_NPC_ChangeScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.SceneType != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Bag_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Items != nil {
		l = m.Items.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Use_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ItemIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemIndex))
	}
	if m.ItemCount != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Use_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ItemIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemIndex))
	}
	if m.NewItemInfo != nil {
		l = m.NewItemInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.ItemType != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemType))
	}
	if len(m.InsertItem) > 0 {
		for _, e := range m.InsertItem {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.RemoveItem) > 0 {
		for _, e := range m.RemoveItem {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.DressItem) > 0 {
		for _, e := range m.DressItem {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Sell_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ItemIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemIndex))
	}
	if m.ItemCount != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Sell_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ItemIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemIndex))
	}
	if m.ItemCount != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Sell_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Sell_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Bag_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Equips != nil {
		l = m.Equips.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Dress_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Dress_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Role_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Role_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Equips != nil {
		l = m.Equips.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeOff_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.SiteType != nil {
		n += 1 + sovNet_Game(uint64(*m.SiteType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeOff_Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.SiteType != nil {
		n += 1 + sovNet_Game(uint64(*m.SiteType))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Item_Insert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemInfo != nil {
		l = m.ItemInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Item_Remove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemInfo != nil {
		l = m.ItemInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Equip_Insert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipInfo) > 0 {
		for _, e := range m.EquipInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Equip_Remove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipInfo) > 0 {
		for _, e := range m.EquipInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Item_Add) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemInfo != nil {
		l = m.ItemInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.CountDiff) > 0 {
		for _, e := range m.CountDiff {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Equip_Add) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipInfo) > 0 {
		for _, e := range m.EquipInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Bag_Equip_Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipInfo) > 0 {
		for _, e := range m.EquipInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Role_Equip_Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleEquip != nil {
		l = m.RoleEquip.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SuitShopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SuitShopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if len(m.BuySuit) > 0 {
		for _, e := range m.BuySuit {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.SuitShopSurplusUpdateTime != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitShopSurplusUpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BuySuitInShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SuitShopId != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitShopId))
	}
	if m.SuitDuration != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitDuration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BuySuitInShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SuitShopId != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitShopId))
	}
	if m.SuitDuration != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitDuration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RoleSuitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleSuitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RoleSuitInfo != nil {
		l = m.RoleSuitInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DressSuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SuitId != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DressSuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SuitId != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeOffSuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SuitId != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeOffSuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SuitId != nil {
		n += 1 + sozNet_Game(uint64(*m.SuitId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FaceShopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FaceShopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if len(m.OriginalBuyFace) > 0 {
		for _, e := range m.OriginalBuyFace {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.DiscountBuyFace) > 0 {
		for _, e := range m.DiscountBuyFace {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.FaceShopSurplusUpdateTime != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceShopSurplusUpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BuyFaceInShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FaceShopId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceShopId))
	}
	if m.FaceDuration != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceDuration))
	}
	if m.FaceIsdiscount != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BuyFaceInShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FaceShopId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceShopId))
	}
	if m.FaceDuration != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceDuration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RoleFaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleFaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RoleFaceInfo != nil {
		l = m.RoleFaceInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DressFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FaceId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DressFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FaceId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeOffFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FaceId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeOffFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FaceId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ManualUpdateFaceShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ManualUpdateFaceShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KillMonster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sozNet_Game(uint64(*m.Id))
	}
	if m.Count != nil {
		n += 1 + sozNet_Game(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PassRisk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Passed != nil {
		n += 2
	}
	if m.ChapId != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapId))
	}
	if m.LevelId != nil {
		n += 1 + sozNet_Game(uint64(*m.LevelId))
	}
	if len(m.SkillUseInfos) > 0 {
		for _, e := range m.SkillUseInfos {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.BoxCount != nil {
		n += 1 + sozNet_Game(uint64(*m.BoxCount))
	}
	if len(m.MonsterInfo) > 0 {
		for _, e := range m.MonsterInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.Randomseed != nil {
		l = len(m.Randomseed)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.IsUseComposeSkill != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PassRisk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.ChapterReward != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapterReward))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_OpenChapterBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ChapId != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapId))
	}
	if m.Danger != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_OpenChapterBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_OpenRiskBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_OpenRiskBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ResetRiskFightCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ChapId != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapId))
	}
	if m.RiskId != nil {
		n += 1 + sozNet_Game(uint64(*m.RiskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ResetRiskFightCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ReadyEnterRisk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ChapId != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapId))
	}
	if m.RiskId != nil {
		n += 1 + sozNet_Game(uint64(*m.RiskId))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.SceneType != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneType))
	}
	if m.TransInfoId != nil {
		n += 1 + sozNet_Game(uint64(*m.TransInfoId))
	}
	if m.FriendId != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.Danger != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ReadyEnterRisk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RiskId != nil {
		n += 1 + sozNet_Game(uint64(*m.RiskId))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.TransInfoId != nil {
		n += 1 + sozNet_Game(uint64(*m.TransInfoId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FriendAssistTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeftAssistTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftAssistTime))
	}
	if m.FriendIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_NPC_Add_RecordQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ShowInfo != nil {
		l = m.ShowInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_NPC_Go_RecordQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Select_Recommend_Friends) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.FriendsCnt != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendsCnt))
	}
	if m.MinLvl != nil {
		n += 1 + sozNet_Game(uint64(*m.MinLvl))
	}
	if m.MaxLvl != nil {
		n += 1 + sozNet_Game(uint64(*m.MaxLvl))
	}
	if len(m.FriendInfoIndex) > 0 {
		for _, e := range m.FriendInfoIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.FriendNumLimit != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendNumLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Select_Recommend_Friends) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.FriendInfos) > 0 {
		for _, e := range m.FriendInfos {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FindFriend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NickName != nil {
		l = len(m.NickName)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FindFriend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.FriendInfo != nil {
		l = m.FriendInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Add_Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.CardInfo != nil {
		l = m.CardInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Add_Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.TarFriendInfo != nil {
		l = m.TarFriendInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TarSceneAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.TarSceneAddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_Add_Friend_Ret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnsRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.AnsRoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Remove_Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Remove_Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_Remove_Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Request_Add_Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.SrcFriendInfo != nil {
		l = m.SrcFriendInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Request_Add_Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.IsRefuse != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_Friend_Online) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FriendRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendRoleIndex))
	}
	if m.SrcFriendInfo != nil {
		l = m.SrcFriendInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.FirstEnterGame != nil {
		n += 2
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Friend_Online) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAleadyOnline != nil {
		n += 2
	}
	if m.FriendRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendRoleIndex))
	}
	if m.SrcFriendInfo != nil {
		l = m.SrcFriendInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Friend_Offline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FriendRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendRoleIndex))
	}
	if m.FriendInfo != nil {
		l = m.FriendInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ReadyEnterFriendFightScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ReadyEnterFriendFightScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Friend_Fight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FriendRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendRoleIndex))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Friend_Fight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.SelfPlayerInfo) > 0 {
		for _, e := range m.SelfPlayerInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.FriendPlayerInfo) > 0 {
		for _, e := range m.FriendPlayerInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_CommonShopGoodsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ShopId != nil {
		n += 1 + sozNet_Game(uint64(*m.ShopId))
	}
	if m.IsManual != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CommonShopGoodsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ShopId != nil {
		n += 1 + sozNet_Game(uint64(*m.ShopId))
	}
	if len(m.GoodsInfo) > 0 {
		for _, e := range m.GoodsInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.NextRefreshPrice != nil {
		n += 1 + sozNet_Game(uint64(*m.NextRefreshPrice))
	}
	if m.ManualRefreshCount != nil {
		n += 1 + sozNet_Game(uint64(*m.ManualRefreshCount))
	}
	if m.ManualTotalRefreshCount != nil {
		n += 1 + sozNet_Game(uint64(*m.ManualTotalRefreshCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ParkShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ParkShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.GoodsList) > 0 {
		for _, e := range m.GoodsList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BuyCommonShopGoods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ShopId != nil {
		n += 1 + sozNet_Game(uint64(*m.ShopId))
	}
	if m.ShopIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.ShopIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BuyCommonShopGoods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Skill_Study) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Skill_Study) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Skill_LevelUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.IsExcharge != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Skill_LevelUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Skill_DressTalent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Skill_DressTalent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Skill_TakeOffTalent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Skill_TakeOffTalent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Skill_DressBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Skill_DressBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Skill_TakeOffBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Skill_TakeOffBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Skill_ChangeBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.OldSkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.OldSkillId))
	}
	if m.NewSkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.NewSkillId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Skill_ChangeBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.OldSkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.OldSkillId))
	}
	if m.NewSkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.NewSkillId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PassMiniGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Passed != nil {
		n += 1 + sozNet_Game(uint64(*m.Passed))
	}
	if m.ChapId != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapId))
	}
	if m.LevelId != nil {
		n += 1 + sozNet_Game(uint64(*m.LevelId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PassMiniGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryMiniGameRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryMiniGameRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if len(m.RankInfos) > 0 {
		for _, e := range m.RankInfos {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QuerySelfGameRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if m.HistoryMaxScore != nil {
		n += 1 + sozNet_Game(uint64(*m.HistoryMaxScore))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QuerySelfGameRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if m.CurrRank != nil {
		n += 1 + sozNet_Game(uint64(*m.CurrRank))
	}
	if m.HistoryMaxScore != nil {
		n += 1 + sozNet_Game(uint64(*m.HistoryMaxScore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PlayMiniGameAgain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PlayMiniGameAgain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SubmitMiniGameScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if m.Score != nil {
		n += 1 + sozNet_Game(uint64(*m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SubmitMiniGameScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.HistoryMaxScore != nil {
		n += 1 + sozNet_Game(uint64(*m.HistoryMaxScore))
	}
	if m.CurrScore != nil {
		n += 1 + sozNet_Game(uint64(*m.CurrScore))
	}
	if m.FightPercent != nil {
		n += 1 + sozNet_Game(uint64(*m.FightPercent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ReadyEnterMiniGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.SceneType != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneType))
	}
	if m.TransInfoId != nil {
		n += 1 + sozNet_Game(uint64(*m.TransInfoId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ReadyEnterMiniGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MiniGameId != nil {
		n += 1 + sozNet_Game(uint64(*m.MiniGameId))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.TransInfoId != nil {
		n += 1 + sozNet_Game(uint64(*m.TransInfoId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_InteractAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if len(m.TarRoleIndex) > 0 {
		for _, e := range m.TarRoleIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.TarX != nil {
		n += 1 + sozNet_Game(uint64(*m.TarX))
	}
	if m.TarY != nil {
		n += 1 + sozNet_Game(uint64(*m.TarY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_InteractAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if len(m.TarRoleIndex) > 0 {
		for _, e := range m.TarRoleIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SelfHiAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SelfHiAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BathroomInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if len(m.TarRoleIndex) > 0 {
		for _, e := range m.TarRoleIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.TarX != nil {
		n += 1 + sozNet_Game(uint64(*m.TarX))
	}
	if m.TarY != nil {
		n += 1 + sozNet_Game(uint64(*m.TarY))
	}
	if m.Direction != nil {
		n += 1 + sozNet_Game(uint64(*m.Direction))
	}
	if m.LeftTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BathroomInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if len(m.TarRoleIndex) > 0 {
		for _, e := range m.TarRoleIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.LeftTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_BathroomInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SrcRoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Dress_Card_PVE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Dress_Card_PVE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeOff_Card_PVE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeOff_Card_PVE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Dress_Card_PVP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Dress_Card_PVP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeOff_Card_PVP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeOff_Card_PVP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.CardId != nil {
		n += 1 + sozNet_Game(uint64(*m.CardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ArenaPlayers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.RetLoginaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetLoginaddr))
	}
	if m.SelfBattleInfo != nil {
		l = m.SelfBattleInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArenaPlayers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.SelfBattle != nil {
		l = m.SelfBattle.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_StopArena) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Arena_NearSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Arena_NearSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ReadyEnterArenaScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ReadyEnterArenaScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RefreshArena) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RefreshArena) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ArenaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArenaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ArenaInfo != nil {
		l = m.ArenaInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ArenaFight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.TarArenaRank != nil {
		n += 1 + sozNet_Game(uint64(*m.TarArenaRank))
	}
	if m.RetAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetAddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArenaFight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.TarArenaRank != nil {
		n += 1 + sozNet_Game(uint64(*m.TarArenaRank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ArenaFightEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.Passed != nil {
		n += 2
	}
	if len(m.SkillUseInfos) > 0 {
		for _, e := range m.SkillUseInfos {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArenaFightEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.AtkOldRank != nil {
		n += 1 + sozNet_Game(uint64(*m.AtkOldRank))
	}
	if m.DefOldRank != nil {
		n += 1 + sozNet_Game(uint64(*m.DefOldRank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FriendFightEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.Passed != nil {
		n += 2
	}
	if len(m.SkillUseInfos) > 0 {
		for _, e := range m.SkillUseInfos {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FriendFightEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_HistoryRankReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.CurrRank != nil {
		n += 1 + sozNet_Game(uint64(*m.CurrRank))
	}
	if m.HistoryRank != nil {
		n += 1 + sozNet_Game(uint64(*m.HistoryRank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_KillListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_KillListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ShowMyself != nil {
		l = m.ShowMyself.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.KillList) > 0 {
		for _, e := range m.KillList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.TotalNum != nil {
		n += 1 + sozNet_Game(uint64(*m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_VisitingCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TarRoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.TarRoleIndex))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_VisitingCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.DbCardInfo != nil {
		l = m.DbCardInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BuyArenaCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BuyArenaCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.BuyCount != nil {
		n += 1 + sozNet_Game(uint64(*m.BuyCount))
	}
	if m.TotalCount != nil {
		n += 1 + sozNet_Game(uint64(*m.TotalCount))
	}
	if m.LeftCount != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ClearArenaCD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ClearArenaCD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_OpenStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_OpenStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RisenPlayInfo != nil {
		l = m.RisenPlayInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.ArenaPlayInfo != nil {
		l = m.ArenaPlayInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.DiamondPlayInfo != nil {
		l = m.DiamondPlayInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.KillPlayInfo != nil {
		l = m.KillPlayInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryRisenStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryRisenStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.RankInfos) > 0 {
		for _, e := range m.RankInfos {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.HistoryTopRank != nil {
		n += 1 + sozNet_Game(uint64(*m.HistoryTopRank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryLevelRankListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryLevelRankListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_LevelRankLocationSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_LevelRankLocationSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryArenaStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryArenaStar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.RankInfos) > 0 {
		for _, e := range m.RankInfos {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryArenaRankListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryArenaRankListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ArenaRankLocationSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.SelfRank != nil {
		n += 1 + sozNet_Game(uint64(*m.SelfRank))
	}
	if m.SelfSeqRank != nil {
		n += 1 + sozNet_Game(uint64(*m.SelfSeqRank))
	}
	if m.TotalNum != nil {
		n += 1 + sozNet_Game(uint64(*m.TotalNum))
	}
	if m.TheOneRank != nil {
		n += 1 + sozNet_Game(uint64(*m.TheOneRank))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArenaRankLocationSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryDiamondRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryDiamondRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DiamondRankLocationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DiamondRankLocationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryKillRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryKillRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_KillRankLocationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LoginAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginAddr))
	}
	if m.LoginIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.LoginIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_KillRankLocationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.IsEnd != nil {
		n += 2
	}
	if m.PageNum != nil {
		n += 1 + sozNet_Game(uint64(*m.PageNum))
	}
	if m.SelfInfo != nil {
		l = m.SelfInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.TheOne != nil {
		l = m.TheOne.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if len(m.RankList) > 0 {
		for _, e := range m.RankList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SwordInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SwordInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.SwordInfo != nil {
		l = m.SwordInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AddSwordCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ItemId != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AddSwordCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncSwordCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TotalCount != nil {
		n += 1 + sozNet_Game(uint64(*m.TotalCount))
	}
	if m.LeftCount != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftCount))
	}
	if len(m.DiffCount) > 0 {
		for _, e := range m.DiffCount {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SwordEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.IsSuccess != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SwordEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.CaliburnInfo != nil {
		l = m.CaliburnInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SelectSwordEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.IsSelect != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SelectSwordEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.IsEvent != nil {
		n += 2
	}
	if m.LeftEquipInfo != nil {
		l = m.LeftEquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.RightEquipInfo != nil {
		l = m.RightEquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SelectMountainGodEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Pos != nil {
		n += 1 + sozNet_Game(uint64(*m.Pos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SelectMountainGodEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.EventType != nil {
		n += 1 + sovNet_Game(uint64(*m.EventType))
	}
	if len(m.EquipInfo) > 0 {
		for _, e := range m.EquipInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DailyTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DailyTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if len(m.TaskInfoList) > 0 {
		for _, e := range m.TaskInfoList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DailyTaskReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.DailyTaskInfo != nil {
		l = m.DailyTaskInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DailyTaskReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.ActivityValue != nil {
		l = m.ActivityValue.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DailyActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DailyActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.ActivityInfo != nil {
		l = m.ActivityInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DailyActivityValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeInfo != nil {
		l = m.ChangeInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DailyActivityReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ActivityId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActivityId))
	}
	if m.TotalActivity != nil {
		n += 1 + sozNet_Game(uint64(*m.TotalActivity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DailyActivityReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != nil {
		n += 1 + sovNet_Game(uint64(*m.Ret))
	}
	if m.ActivityInfo != nil {
		l = m.ActivityInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BuyStamina) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BuyStamina) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Mail_Have_New) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Mail_Title) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.IntAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.IntAddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Mail_Title) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if len(m.MailTitles) > 0 {
		for _, e := range m.MailTitles {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Mail_Full) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MailIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.MailIndex))
	}
	if m.IntAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.IntAddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Mail_Full) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.MailFull != nil {
		l = m.MailFull.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_Mail_Full) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MailIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.MailIndex))
	}
	if m.IntAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.IntAddr))
	}
	if m.MailFull != nil {
		l = m.MailFull.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_Mail_Read) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MailIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.MailIndex))
	}
	if m.IntAddr != nil {
		n += 1 + sozNet_Game(uint64(*m.IntAddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_Mail_Read) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TodaySign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TodaySign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TodaySign != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.SignMonth != nil {
		n += 1 + sozNet_Game(uint64(*m.SignMonth))
	}
	if m.MonthTotalDays != nil {
		n += 1 + sozNet_Game(uint64(*m.MonthTotalDays))
	}
	if m.SignCount != nil {
		n += 1 + sozNet_Game(uint64(*m.SignCount))
	}
	if m.RetroactiveCount != nil {
		n += 1 + sozNet_Game(uint64(*m.RetroactiveCount))
	}
	if m.MissCount != nil {
		n += 1 + sozNet_Game(uint64(*m.MissCount))
	}
	if m.LotteryCount != nil {
		n += 1 + sozNet_Game(uint64(*m.LotteryCount))
	}
	if m.TodaySign != nil {
		n += 2
	}
	if m.RetroactiveLeft != nil {
		n += 1 + sozNet_Game(uint64(*m.RetroactiveLeft))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SignAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.IsMiss != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SignAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SignLottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SignLottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.LotteryCount != nil {
		n += 1 + sozNet_Game(uint64(*m.LotteryCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SignLotteryShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SignLotteryShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SevenDayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SevenDayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.DayTail) > 0 {
		for _, e := range m.DayTail {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.TotalLoginDays != nil {
		n += 1 + sozNet_Game(uint64(*m.TotalLoginDays))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetSevenDayReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TheDay != nil {
		n += 1 + sozNet_Game(uint64(*m.TheDay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetSevenDayReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.TheDay != nil {
		n += 1 + sozNet_Game(uint64(*m.TheDay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMSetLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Value != nil {
		n += 1 + sozNet_Game(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMSetLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Value != nil {
		n += 1 + sozNet_Game(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddStimina) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Value != nil {
		n += 1 + sozNet_Game(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddStimina) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddDiamond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Value != nil {
		n += 1 + sozNet_Game(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddDiamond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddCaliburnCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Value != nil {
		n += 1 + sozNet_Game(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddCaliburnCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddArenaCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Value != nil {
		n += 1 + sozNet_Game(uint64(*m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddArenaCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Face != nil {
		l = m.Face.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddSuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Suit != nil {
		l = m.Suit.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddSuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GMAddEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipId != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GMAddEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FunctionOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FunctionId != nil {
		n += 1 + sozNet_Game(uint64(*m.FunctionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FastTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FastTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EasterEggTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EggId))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_GetEasterEggTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EggId))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.LeftCdTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftCdTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EasterEggTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipStrongthen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipStrongthen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipStrongthenEquiped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SiteType != nil {
		n += 1 + sovNet_Game(uint64(*m.SiteType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipStrongthenEquiped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipResolve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if len(m.EquipIndex) > 0 {
		for _, e := range m.EquipIndex {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipResolve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipFix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipFix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipFixEquiped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SiteType != nil {
		n += 1 + sovNet_Game(uint64(*m.SiteType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipFixEquiped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AskFixEquipsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AskFixEquipsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.FixEquips != nil {
		l = m.FixEquips.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipFastFix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipFastFix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetFixedEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetFixedEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EquipInfo != nil {
		l = m.EquipInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PointGoldInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PointGoldInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ExchangedCount != nil {
		n += 1 + sozNet_Game(uint64(*m.ExchangedCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PointGold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PointGold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TouchPersonEasterEgg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EasterEggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EasterEggId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TouchPersonEasterEgg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EasterEggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EasterEggId))
	}
	if m.LeftCdTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftCdTime))
	}
	if m.DayGetCount != nil {
		n += 1 + sozNet_Game(uint64(*m.DayGetCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ResetPersonEasterEgg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EasterEggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EasterEggId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_GlobalEasterEggInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EasterEggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EasterEggId))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GlobalEasterEggInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EasterEggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EasterEggId))
	}
	if m.LeftCdTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftCdTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TouchGlobalEasterEgg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EasterEggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EasterEggId))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TouchGlobalEasterEgg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.EasterEggId != nil {
		n += 1 + sozNet_Game(uint64(*m.EasterEggId))
	}
	if m.LeftCdTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftCdTime))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RechargeMoneyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RechargeMoneyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RechargeInfo != nil {
		l = m.RechargeInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RechargeMoney) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.RechargeId != nil {
		n += 1 + sozNet_Game(uint64(*m.RechargeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RechargeMoney) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RechargeId != nil {
		n += 1 + sozNet_Game(uint64(*m.RechargeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_VipDailyRewardFlag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.DailyRewardFlag != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetVipDailyReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetVipDailyReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetSpecialVipReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.VipLevel != nil {
		n += 1 + sozNet_Game(uint64(*m.VipLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetSpecialVipReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AddInterActTool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ToolInfo) > 0 {
		for _, e := range m.ToolInfo {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RemoveInterActTool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ToolId != nil {
		n += 1 + sozNet_Game(uint64(*m.ToolId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RemoveOwnerTool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BathhouseFightEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TouchManInBlack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TouchManInBlack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.CdTime != nil {
		n += 1 + sozNet_Game(uint64(*m.CdTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_UseInterActTool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ToolType != nil {
		n += 1 + sozNet_Game(uint64(*m.ToolType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PickUpInterActTool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ToolId != nil {
		n += 1 + sozNet_Game(uint64(*m.ToolId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PickUpInterActTool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ToolInfo != nil {
		l = m.ToolInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BathFightStepInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BathFightStep != nil {
		n += 1 + sozNet_Game(uint64(*m.BathFightStep))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CanPlayWaterBall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanPlayWaterBall != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BathStatusChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.StatusId != nil {
		n += 1 + sozNet_Game(uint64(*m.StatusId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncBathPlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BathFullness != nil {
		n += 1 + sozNet_Game(uint64(*m.BathFullness))
	}
	if m.BathStamina != nil {
		n += 1 + sozNet_Game(uint64(*m.BathStamina))
	}
	if m.TodayBathStamina != nil {
		n += 1 + sozNet_Game(uint64(*m.TodayBathStamina))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PreferFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FaceId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PreferFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.FaceId != nil {
		n += 1 + sozNet_Game(uint64(*m.FaceId))
	}
	if m.IsPrefer != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FacePreferInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FacePreferInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaceRandomOnoff != nil {
		n += 2
	}
	if len(m.FaceIdList) > 0 {
		for _, e := range m.FaceIdList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_OnOffFaceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_InteractEnergy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Energy != nil {
		n += 1 + sozNet_Game(uint64(*m.Energy))
	}
	if len(m.EnergyDiff) > 0 {
		for _, e := range m.EnergyDiff {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_InterActInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_InterActInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InteractInfo != nil {
		l = m.InteractInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_QueryUnlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_QueryUnlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.Interact) > 0 {
		for _, e := range m.Interact {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.Level) > 0 {
		for _, e := range m.Level {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_UnlockInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_UnlockInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DressInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DressInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if len(m.EffectActList) > 0 {
		for _, e := range m.EffectActList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeOffInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeOffInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ActId != nil {
		n += 1 + sozNet_Game(uint64(*m.ActId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if len(m.EffectActList) > 0 {
		for _, e := range m.EffectActList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ExChangeInteractHole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Hole_1 != nil {
		n += 1 + sozNet_Game(uint64(*m.Hole_1))
	}
	if m.Hole_2 != nil {
		n += 1 + sozNet_Game(uint64(*m.Hole_2))
	}
	if m.ActType != nil {
		n += 1 + sozNet_Game(uint64(*m.ActType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ExChangeInteractHole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.EffectActList) > 0 {
		for _, e := range m.EffectActList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_InterActManualRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_InterActManualRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsNewReward != nil {
		n += 2
	}
	if m.Num != nil {
		n += 1 + sozNet_Game(uint64(*m.Num))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetInterActManualReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetInterActManualReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_VehicleCompose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MainVehicleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.MainVehicleIndex))
	}
	if len(m.ConsumeVehicleList) > 0 {
		for _, e := range m.ConsumeVehicleList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_VehicleCompose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.NewVehicle != nil {
		l = m.NewVehicle.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipManualInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipManualInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanGet != nil {
		n += 1 + sozNet_Game(uint64(*m.CanGet))
	}
	if len(m.EquipIdList) > 0 {
		for _, e := range m.EquipIdList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.Rate != nil {
		n += 1 + sozNet_Game(uint64(*m.Rate))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetEquipManualReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetEquipManualReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_NPCInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_NPCInteract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NpcId != nil {
		n += 1 + sozNet_Game(uint64(*m.NpcId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_InteractRedPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_InteractRedPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CanUnlockActList) > 0 {
		for _, e := range m.CanUnlockActList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FriendFightInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.FriendIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.FriendIndex))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozNet_Game(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.RetIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FriendFightInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Battle != nil {
		l = m.Battle.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_UploadSystemConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TouchEquip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.EquipIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.EquipIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TouchItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ItemIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.ItemIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_UploadForceGuideInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.GuideIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.GuideIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_UpdateFindwayGuideIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FindGuidIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.FindGuidIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ExtendSkillHole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ExtendSkillHole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleCurrentSkills) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrentSkills) > 0 {
		for _, e := range m.CurrentSkills {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipBroken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipId) > 0 {
		for _, e := range m.EquipId {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_CustomFaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CustomFaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CustomList) > 0 {
		for _, e := range m.CustomList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.CurrentFace != nil {
		l = m.CurrentFace.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.ForeverFree != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_CanUploadImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.BuyFree != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CanUploadImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.UniqueKey != nil {
		l = len(m.UniqueKey)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.PlatformId != nil {
		n += 1 + sozNet_Game(uint64(*m.PlatformId))
	}
	if m.ServerId != nil {
		n += 1 + sozNet_Game(uint64(*m.ServerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_UploadImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.UniqueKey != nil {
		l = len(m.UniqueKey)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_UploadImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.UniqueKey != nil {
		l = len(m.UniqueKey)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_UploadImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DressCustomFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DressCustomFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.CurrentFace != nil {
		l = m.CurrentFace.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeOffCustomFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeOffCustomFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.CurrentFace != nil {
		l = m.CurrentFace.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DelelteCustomFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DelelteCustomFace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.CurrentFace != nil {
		l = m.CurrentFace.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CustomFaceAuditResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.Status != nil {
		n += 1 + sozNet_Game(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FaceUploadSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ImageId != nil {
		n += 1 + sozNet_Game(uint64(*m.ImageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RolePetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RolePetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetInfo != nil {
		l = m.PetInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SetPetFightStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SetPetFightStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if m.Status != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PetEvolve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PetEvolve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.OldPetId != nil {
		n += 1 + sozNet_Game(uint64(*m.OldPetId))
	}
	if m.NewPet != nil {
		l = m.NewPet.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PetTalentRebuild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if m.Site != nil {
		n += 1 + sozNet_Game(uint64(*m.Site))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PetTalentRebuild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.NewPassiveId != nil {
		n += 1 + sozNet_Game(uint64(*m.NewPassiveId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FosterPet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FosterPet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Level != nil {
		n += 1 + sozNet_Game(uint64(*m.Level))
	}
	if m.Exp != nil {
		n += 1 + sozNet_Game(uint64(*m.Exp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PetAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if len(m.PetList) > 0 {
		for _, e := range m.PetList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PetUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PetList) > 0 {
		for _, e := range m.PetList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncPetLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if m.Level != nil {
		n += 1 + sozNet_Game(uint64(*m.Level))
	}
	if m.Exp != nil {
		n += 1 + sozNet_Game(uint64(*m.Exp))
	}
	if len(m.ExpDiff) > 0 {
		for _, e := range m.ExpDiff {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PetEatPill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PetEatPill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.NewAttr != nil {
		l = m.NewAttr.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PetRefreshInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BornPos != nil {
		l = m.BornPos.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.PetId != nil {
		n += 1 + sozNet_Game(uint64(*m.PetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_RoleNabPet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleNabPet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_HorseLight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Horse_LightList) > 0 {
		for _, e := range m.Horse_LightList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AssistantTipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AssistantTipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TipReadIdList) > 0 {
		for _, e := range m.TipReadIdList {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AssistantTipRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.TipId != nil {
		n += 1 + sozNet_Game(uint64(*m.TipId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_NiuDanInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NiudanId != nil {
		n += 1 + sozNet_Game(uint64(*m.NiudanId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_NiuDanInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NiudanId != nil {
		n += 1 + sozNet_Game(uint64(*m.NiudanId))
	}
	if m.ButtonInfo != nil {
		l = m.ButtonInfo.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TouchNiuDan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NiudanId != nil {
		n += 1 + sozNet_Game(uint64(*m.NiudanId))
	}
	if m.ButtonId != nil {
		n += 1 + sozNet_Game(uint64(*m.ButtonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TouchNiuDan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.NiudanId != nil {
		n += 1 + sozNet_Game(uint64(*m.NiudanId))
	}
	if m.ButtonId != nil {
		n += 1 + sozNet_Game(uint64(*m.ButtonId))
	}
	if m.LeftTime != nil {
		n += 1 + sozNet_Game(uint64(*m.LeftTime))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.MustRewardList) > 0 {
		for _, e := range m.MustRewardList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ExchangeCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Code != nil {
		l = len(m.Code)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ExchangeCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArchieveFinish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sozNet_Game(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetArchieveReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Id != nil {
		n += 1 + sozNet_Game(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetArchieveReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.Id != nil {
		n += 1 + sozNet_Game(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ArchieveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ArchieveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ReadyEnterGuadratic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.GwIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.GwIntaddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ReadyEnterGuadratic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EnterGuadratic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneId))
	}
	if m.SceneIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneIndex))
	}
	if m.SceneIntaddr != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneIntaddr))
	}
	if m.SceneInstanceId != nil {
		n += 1 + sozNet_Game(uint64(*m.SceneInstanceId))
	}
	if m.MapId != nil {
		n += 1 + sozNet_Game(uint64(*m.MapId))
	}
	if m.DupId != nil {
		n += 1 + sozNet_Game(uint64(*m.DupId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GuadraticReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_NextGuadraticDup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DupId != nil {
		n += 1 + sozNet_Game(uint64(*m.DupId))
	}
	if len(m.RoleList) > 0 {
		for _, e := range m.RoleList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GuadraticEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResultList) > 0 {
		for _, e := range m.ResultList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncGuadraticRoleHP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleHpList) > 0 {
		for _, e := range m.RoleHpList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SyncGuadraticRoleCD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleCdList) > 0 {
		for _, e := range m.RoleCdList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GuadraticBossEnter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.BossIndex))
	}
	if m.BossId != nil {
		n += 1 + sozNet_Game(uint64(*m.BossId))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.HurtRect != nil {
		l = m.HurtRect.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GuadraticBossUseSkill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.BossIndex))
	}
	if m.BossId != nil {
		n += 1 + sozNet_Game(uint64(*m.BossId))
	}
	if m.SkillId != nil {
		n += 1 + sozNet_Game(uint64(*m.SkillId))
	}
	if m.Hurt != nil {
		n += 1 + sozNet_Game(uint64(*m.Hurt))
	}
	if m.HurtRect != nil {
		l = m.HurtRect.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SellBagThing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if len(m.EquipList) > 0 {
		for _, e := range m.EquipList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SellBagThing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_StoneExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Want != nil {
		l = m.Want.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_StoneExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FirstMonery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FirstMonery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirstFlag != nil {
		n += 1 + sozNet_Game(uint64(*m.FirstFlag))
	}
	if len(m.RewardList) > 0 {
		for _, e := range m.RewardList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetFirstMonery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetFirstMonery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_OtherRechargeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardList) > 0 {
		for _, e := range m.RewardList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if len(m.CostList) > 0 {
		for _, e := range m.CostList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.StartTime != nil {
		n += 1 + sozNet_Game(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sozNet_Game(uint64(*m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetOtherRechargeReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetOtherRechargeReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ShareToWeixin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ChapterId != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapterId))
	}
	if m.RiskId != nil {
		n += 1 + sozNet_Game(uint64(*m.RiskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_IfShareRisk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.ChapterId != nil {
		n += 1 + sozNet_Game(uint64(*m.ChapterId))
	}
	if m.RiskId != nil {
		n += 1 + sozNet_Game(uint64(*m.RiskId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_IfShareRisk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AreYouKidding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BattlePlayerGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BattlePVEData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovNet_Game(uint64(*m.Version))
	}
	if m.Randomseed != nil {
		l = len(m.Randomseed)
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.ChapterID != nil {
		n += 1 + sovNet_Game(uint64(*m.ChapterID))
	}
	if m.RiskID != nil {
		n += 1 + sovNet_Game(uint64(*m.RiskID))
	}
	if m.MainHero != nil {
		l = m.MainHero.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.Friend != nil {
		l = m.Friend.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.Pet != nil {
		l = m.Pet.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.FaceCount != nil {
		n += 1 + sovNet_Game(uint64(*m.FaceCount))
	}
	if len(m.FaceList) > 0 {
		for _, e := range m.FaceList {
			n += 1 + sovNet_Game(uint64(e))
		}
	}
	if m.PassRiskData != nil {
		l = m.PassRiskData.Size()
		n += 1 + l + sovNet_Game(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BattlePVEVerifyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ExtendEquipBag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ExtendEquipBag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.CurrBagSize != nil {
		n += 1 + sozNet_Game(uint64(*m.CurrBagSize))
	}
	if m.CurrExtendCount != nil {
		n += 1 + sozNet_Game(uint64(*m.CurrExtendCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ActivityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ActivityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActivityList) > 0 {
		for _, e := range m.ActivityList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetActivityReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.Id != nil {
		n += 1 + sozNet_Game(uint64(*m.Id))
	}
	if m.Position != nil {
		n += 1 + sozNet_Game(uint64(*m.Position))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetActivityReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ActivityInfoUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActivityList) > 0 {
		for _, e := range m.ActivityList {
			l = e.Size()
			n += 1 + l + sovNet_Game(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PianoStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PianoStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PianoPlay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.NoteId != nil {
		n += 1 + sozNet_Game(uint64(*m.NoteId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PianoPlay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteId != nil {
		n += 1 + sozNet_Game(uint64(*m.NoteId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_PianoEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_PianoEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AskPianoStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AskPianoStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_RoleBagFull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_EquipMake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.MakeId != nil {
		n += 1 + sozNet_Game(uint64(*m.MakeId))
	}
	if m.CaseId != nil {
		n += 1 + sozNet_Game(uint64(*m.CaseId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_EquipMake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.NewEquipId != nil {
		n += 1 + sozNet_Game(uint64(*m.NewEquipId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetMinigameBuyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetMinigameBuyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DayBuyCount != nil {
		n += 1 + sozNet_Game(uint64(*m.DayBuyCount))
	}
	if m.GetFlag != nil {
		n += 1 + sozNet_Game(uint64(*m.GetFlag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_GetDailyBitCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_GetDailyBitCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BuyBitCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozNet_Game(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BuyBitCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovNet_Game(uint64(*m.RetCode))
	}
	if m.DayBuyCount != nil {
		n += 1 + sozNet_Game(uint64(*m.DayBuyCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNet_Game(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNet_Game(x uint64) (n int) {
	return sovNet_Game(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S_HeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_HeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_HeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetServerId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetServerId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetServerId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetServerId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetServerId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetServerId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ServerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_CheckAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_CheckAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_CheckAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CheckAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CheckAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CheckAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)
			if m.Password == nil {
				m.Password = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ServerTime = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForbiddenTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ForbiddenTime = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Register) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Register: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Register: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)
			if m.Password == nil {
				m.Password = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Register) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Register: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Register: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RoleSum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RoleSum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RoleSum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleSum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleSum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleSum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.ListRoleIndex = append(m.ListRoleIndex, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ListRoleIndex) == 0 {
					m.ListRoleIndex = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.ListRoleIndex = append(m.ListRoleIndex, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ListRoleIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ClearRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ClearRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ClearRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ClearRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ClearRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ClearRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOk = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RandNickName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RandNickName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RandNickName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RandNickName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RandNickName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RandNickName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListNickName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListNickName = append(m.ListNickName, make([]byte, postIndex-iNdEx))
			copy(m.ListNickName[len(m.ListNickName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_CreateRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_CreateRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_CreateRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName[:0], dAtA[iNdEx:postIndex]...)
			if m.NickName == nil {
				m.NickName = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceKey = append(m.DeviceKey[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceKey == nil {
				m.DeviceKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = append(m.DeviceToken[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceToken == nil {
				m.DeviceToken = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = append(m.DeviceType[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceType == nil {
				m.DeviceType = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformType = append(m.PlatformType[:0], dAtA[iNdEx:postIndex]...)
			if m.PlatformType == nil {
				m.PlatformType = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelmetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.HelmetId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.WeaponId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrnamentsId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.OrnamentsId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EggId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Gender = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel[:0], dAtA[iNdEx:postIndex]...)
			if m.Channel == nil {
				m.Channel = []byte{}
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &SqlResultRoleinfo{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTestVip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTestVip = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CreateRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CreateRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CreateRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName[:0], dAtA[iNdEx:postIndex]...)
			if m.NickName == nil {
				m.NickName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceApplyRoleInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ForceApplyRoleInfo = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &SqlResultRoleinfo{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIntaddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneIntaddr = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ReadyEnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ReadyEnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ReadyEnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIntaddr = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2SRoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2SRoleInfo == nil {
				m.S2SRoleInfo = &SqlResultRoleinfo{}
			}
			if err := m.S2SRoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ReadyEnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ReadyEnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ReadyEnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneIndex = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneIntaddr = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MapId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			var v E_SCENE_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_SCENE_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SceneType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BornEnterSceneOK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BornEnterSceneOK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BornEnterSceneOK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BornEnterSceneOK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BornEnterSceneOK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BornEnterSceneOK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_ReadyChangeScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_ReadyChangeScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_ReadyChangeScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName[:0], dAtA[iNdEx:postIndex]...)
			if m.NickName == nil {
				m.NickName = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIntaddr = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSceneIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.OldSceneIntaddr = &v2
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.OldSceneInstanceId = &v2
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2SRoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2SRoleInfo == nil {
				m.S2SRoleInfo = &SqlResultRoleinfo{}
			}
			if err := m.S2SRoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_OffLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_OffLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_OffLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = append(m.Reason[:0], dAtA[iNdEx:postIndex]...)
			if m.Reason == nil {
				m.Reason = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Charset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Charset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Charset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utf_8", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Utf_8 = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgVersion", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MsgVersion = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Time = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Time = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_MaterialNotEnough) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_MaterialNotEnough: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_MaterialNotEnough: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ItemId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GameCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GameCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GameCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GameCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GameCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GameCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameCoin", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GameCoin = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffGameCoin = append(m.DiffGameCoin, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffGameCoin) == 0 {
					m.DiffGameCoin = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffGameCoin = append(m.DiffGameCoin, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffGameCoin", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DiamondCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DiamondCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DiamondCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DiamondCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DiamondCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DiamondCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondCoin", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.DiamondCoin = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffDiamondCoin = append(m.DiffDiamondCoin, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffDiamondCoin) == 0 {
					m.DiffDiamondCoin = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffDiamondCoin = append(m.DiffDiamondCoin, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffDiamondCoin", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Endurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Endurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Endurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Endurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Endurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Endurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endurance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Endurance = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffEndurance = append(m.DiffEndurance, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffEndurance) == 0 {
					m.DiffEndurance = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffEndurance = append(m.DiffEndurance, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffEndurance", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaminaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaminaInfo == nil {
				m.StaminaInfo = &DbStaminaInfo{}
			}
			if err := m.StaminaInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RecoveryEndurance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RecoveryEndurance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RecoveryEndurance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endurance", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Endurance = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffEndurance = append(m.DiffEndurance, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffEndurance) == 0 {
					m.DiffEndurance = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffEndurance = append(m.DiffEndurance, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffEndurance", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaminaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaminaInfo == nil {
				m.StaminaInfo = &DbStaminaInfo{}
			}
			if err := m.StaminaInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Exp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Exp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Exp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Exp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Exp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Exp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Exp = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffExp = append(m.DiffExp, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffExp) == 0 {
					m.DiffExp = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffExp = append(m.DiffExp, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffExp", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Level = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SkillPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SkillPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SkillPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SkillPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SkillPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SkillPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillPoint", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SkillPoint = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffSkillPoint = append(m.DiffSkillPoint, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffSkillPoint) == 0 {
					m.DiffSkillPoint = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffSkillPoint = append(m.DiffSkillPoint, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffSkillPoint", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArenaScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArenaScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArenaScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaScore", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ArenaScore = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffArenaScore = append(m.DiffArenaScore, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffArenaScore) == 0 {
					m.DiffArenaScore = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffArenaScore = append(m.DiffArenaScore, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffArenaScore", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Vip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Vip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Vip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Vip = &v
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.DiffVip = append(m.DiffVip, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffVip) == 0 {
					m.DiffVip = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.DiffVip = append(m.DiffVip, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffVip", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipExp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.VipExp = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleInfo_EnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleInfo_EnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleInfo_EnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &SqlResultRoleinfo{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginX = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginY = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BornRoleInfo_EnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BornRoleInfo_EnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BornRoleInfo_EnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &S2C_RoleInfo_EnterScene{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EggId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_OtherRoleInfo_EnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_OtherRoleInfo_EnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_OtherRoleInfo_EnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &SceneRoleinfo{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginX = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginY = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ManyOtherRoleInfo_EnterScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ManyOtherRoleInfo_EnterScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ManyOtherRoleInfo_EnterScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleInfo = append(m.RoleInfo, &S2C_OtherRoleInfo_EnterScene{})
			if err := m.RoleInfo[len(m.RoleInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncRoleShowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncRoleShowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncRoleShowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &SceneRoleinfo{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginX = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginY = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChangeFlag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SceneRoleinfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: scene_roleinfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: scene_roleinfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveSpeed", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MoveSpeed = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbCardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DbCardInfo == nil {
				m.DbCardInfo = &VisitingCardInfo{}
			}
			if err := m.DbCardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemoryInfo == nil {
				m.MemoryInfo = &TempInfoInMemory{}
			}
			if err := m.MemoryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLeft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ToLeft = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BroadcastRoleShowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BroadcastRoleShowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BroadcastRoleShowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = &PlayerShowInfo{}
			}
			if err := m.PlayerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginX = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginY = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleInfo_LeaveScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleInfo_LeaveScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleInfo_LeaveScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Request_Move) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Request_Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Request_Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginX = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginY = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EndX = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EndY = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Request_Move) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Request_Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Request_Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginX = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginY = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EndX = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EndY = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Chat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Chat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Chat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			var v E_CHAT_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_CHAT_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChatType = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.GroupId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Chat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Chat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Chat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			var v E_CHAT_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_CHAT_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChatType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsGm = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.GroupId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcVisitInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcVisitInfo == nil {
				m.SrcVisitInfo = &VisitingCardInfo{}
			}
			if err := m.SrcVisitInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForbiddenTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ForbiddenTime = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Use_SPItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Use_SPItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Use_SPItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ItemIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SpId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Stamp = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Use_SPItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Use_SPItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Use_SPItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &SpInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Change_Scene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Change_Scene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Change_Scene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarSceneId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TarSceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DefaultFlag = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QuerySceneLineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QuerySceneLineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QuerySceneLineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QuerySceneLineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QuerySceneLineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QuerySceneLineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.SceneIndex = append(m.SceneIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SceneIndex) == 0 {
					m.SceneIndex = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.SceneIndex = append(m.SceneIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneIndex", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Loads = append(m.Loads, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Loads) == 0 {
					m.Loads = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Loads = append(m.Loads, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Loads", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ChangeSceneLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ChangeSceneLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ChangeSceneLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarSceneId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TarSceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarSceneIndex", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TarSceneIndex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ChangeSceneLine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ChangeSceneLine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ChangeSceneLine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TransPortChangeScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TransPortChangeScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TransPortChangeScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TransportId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TransPortChangeScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TransPortChangeScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TransPortChangeScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TransportId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_NPC_ChangeScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_NPC_ChangeScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_NPC_ChangeScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransInfoId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TransInfoId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_NPC_ChangeScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_NPC_ChangeScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_NPC_ChangeScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Bag_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Bag_Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Bag_Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = &ListDbBagItems{}
			}
			if err := m.Items.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Use_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Use_Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Use_Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ItemIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ItemCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Use_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Use_Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Use_Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ItemIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewItemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewItemInfo == nil {
				m.NewItemInfo = &DbBagItem{}
			}
			if err := m.NewItemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ItemType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsertItem = append(m.InsertItem, &DbBagEquip{})
			if err := m.InsertItem[len(m.InsertItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveItem = append(m.RemoveItem, &DbBagEquip{})
			if err := m.RemoveItem[len(m.RemoveItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DressItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DressItem = append(m.DressItem, &DbRoleEquip{})
			if err := m.DressItem[len(m.DressItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Sell_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Sell_Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Sell_Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ItemIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ItemCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Sell_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Sell_Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Sell_Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ItemIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ItemCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Sell_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Sell_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Sell_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Sell_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Sell_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Sell_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Bag_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Bag_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Bag_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equips == nil {
				m.Equips = &ListDbBagEquips{}
			}
			if err := m.Equips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Dress_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Dress_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Dress_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Dress_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Dress_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Dress_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbRoleEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Role_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Role_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Role_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Role_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Role_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Role_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equips == nil {
				m.Equips = &ListDbRoleEquips{}
			}
			if err := m.Equips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeOff_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeOff_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeOff_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteType", wireType)
			}
			var v E_EQUIP_SITE_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_EQUIP_SITE_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SiteType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeOff_Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeOff_Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeOff_Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteType", wireType)
			}
			var v E_EQUIP_SITE_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_EQUIP_SITE_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SiteType = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbRoleEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Item_Insert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Item_Insert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Item_Insert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ItemInfo == nil {
				m.ItemInfo = &DbBagItem{}
			}
			if err := m.ItemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Item_Remove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Item_Remove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Item_Remove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ItemInfo == nil {
				m.ItemInfo = &DbBagItem{}
			}
			if err := m.ItemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Equip_Insert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Insert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Insert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipInfo = append(m.EquipInfo, &DbBagEquip{})
			if err := m.EquipInfo[len(m.EquipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Equip_Remove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Remove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Remove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipInfo = append(m.EquipInfo, &DbBagEquip{})
			if err := m.EquipInfo[len(m.EquipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Item_Add) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Item_Add: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Item_Add: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ItemInfo == nil {
				m.ItemInfo = &DbBagItem{}
			}
			if err := m.ItemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.CountDiff = append(m.CountDiff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CountDiff) == 0 {
					m.CountDiff = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.CountDiff = append(m.CountDiff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CountDiff", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Equip_Add) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Add: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Add: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipInfo = append(m.EquipInfo, &DbBagEquip{})
			if err := m.EquipInfo[len(m.EquipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Bag_Equip_Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Bag_Equip_Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipInfo = append(m.EquipInfo, &DbBagEquip{})
			if err := m.EquipInfo[len(m.EquipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Role_Equip_Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Role_Equip_Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Role_Equip_Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleEquip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleEquip == nil {
				m.RoleEquip = &DbRoleEquip{}
			}
			if err := m.RoleEquip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SuitShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SuitShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SuitShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SuitShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SuitShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SuitShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuySuit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuySuit = append(m.BuySuit, &SuitGoodsInfo{})
			if err := m.BuySuit[len(m.BuySuit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitShopSurplusUpdateTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SuitShopSurplusUpdateTime = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BuySuitInShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BuySuitInShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BuySuitInShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitShopId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitShopId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitDuration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitDuration = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BuySuitInShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BuySuitInShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BuySuitInShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitShopId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitShopId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitDuration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitDuration = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RoleSuitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RoleSuitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RoleSuitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleSuitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleSuitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleSuitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleSuitInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleSuitInfo == nil {
				m.RoleSuitInfo = &ListDbRoleSuitInfo{}
			}
			if err := m.RoleSuitInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DressSuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DressSuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DressSuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DressSuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DressSuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DressSuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeOffSuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeOffSuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeOffSuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeOffSuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeOffSuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeOffSuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SuitId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FaceShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FaceShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FaceShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FaceShopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FaceShopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FaceShopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalBuyFace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalBuyFace = append(m.OriginalBuyFace, &FaceGoodsInfo{})
			if err := m.OriginalBuyFace[len(m.OriginalBuyFace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountBuyFace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountBuyFace = append(m.DiscountBuyFace, &FaceGoodsInfo{})
			if err := m.DiscountBuyFace[len(m.DiscountBuyFace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceShopSurplusUpdateTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceShopSurplusUpdateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BuyFaceInShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BuyFaceInShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BuyFaceInShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceShopId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceShopId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceDuration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceDuration = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceIsdiscount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FaceIsdiscount = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BuyFaceInShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BuyFaceInShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BuyFaceInShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceShopId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceShopId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceDuration", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceDuration = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RoleFaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RoleFaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RoleFaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleFaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleFaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleFaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleFaceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleFaceInfo == nil {
				m.RoleFaceInfo = &ListDbRoleFaceInfo{}
			}
			if err := m.RoleFaceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DressFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DressFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DressFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DressFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DressFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DressFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeOffFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeOffFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeOffFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeOffFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeOffFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeOffFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ManualUpdateFaceShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ManualUpdateFaceShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ManualUpdateFaceShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ManualUpdateFaceShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ManualUpdateFaceShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ManualUpdateFaceShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kill_monster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kill_monster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PassRisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PassRisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PassRisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Passed = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LevelId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillUseInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillUseInfos = append(m.SkillUseInfos, &SkillUseInfo{})
			if err := m.SkillUseInfos[len(m.SkillUseInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BoxCount = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonsterInfo = append(m.MonsterInfo, &KillMonster{})
			if err := m.MonsterInfo[len(m.MonsterInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomseed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Randomseed = append(m.Randomseed[:0], dAtA[iNdEx:postIndex]...)
			if m.Randomseed == nil {
				m.Randomseed = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUseComposeSkill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsUseComposeSkill = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PassRisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PassRisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PassRisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterReward", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapterReward = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_OpenChapterBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_OpenChapterBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_OpenChapterBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Danger", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Danger = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_OpenChapterBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_OpenChapterBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_OpenChapterBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_OpenRiskBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_OpenRiskBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_OpenRiskBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_OpenRiskBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_OpenRiskBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_OpenRiskBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ResetRiskFightCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ResetRiskFightCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ResetRiskFightCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RiskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ResetRiskFightCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ResetRiskFightCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ResetRiskFightCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ReadyEnterRisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ReadyEnterRisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ReadyEnterRisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RiskId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransInfoId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TransInfoId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FriendId = &v2
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Danger", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Danger = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ReadyEnterRisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ReadyEnterRisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ReadyEnterRisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RiskId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransInfoId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TransInfoId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FriendAssistTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FriendAssistTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FriendAssistTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftAssistTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftAssistTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FriendIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_NPC_Add_RecordQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_NPC_Add_RecordQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_NPC_Add_RecordQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowInfo == nil {
				m.ShowInfo = &PlayerShowInfo{}
			}
			if err := m.ShowInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_NPC_Go_RecordQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_NPC_Go_RecordQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_NPC_Go_RecordQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Select_Recommend_Friends) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Select_Recommend_Friends: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Select_Recommend_Friends: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendsCnt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FriendsCnt = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLvl", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MinLvl = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLvl", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MaxLvl = &v
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.FriendInfoIndex = append(m.FriendInfoIndex, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FriendInfoIndex) == 0 {
					m.FriendInfoIndex = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.FriendInfoIndex = append(m.FriendInfoIndex, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInfoIndex", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendNumLimit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FriendNumLimit = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Select_Recommend_Friends) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Select_Recommend_Friends: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Select_Recommend_Friends: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendInfos = append(m.FriendInfos, &DbFriendInfo{})
			if err := m.FriendInfos[len(m.FriendInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FindFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FindFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FindFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName[:0], dAtA[iNdEx:postIndex]...)
			if m.NickName == nil {
				m.NickName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FindFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FindFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FindFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendInfo == nil {
				m.FriendInfo = &DbFriendInfo{}
			}
			if err := m.FriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Add_Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Add_Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Add_Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardInfo == nil {
				m.CardInfo = &VisitingCardInfo{}
			}
			if err := m.CardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Add_Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Add_Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Add_Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarFriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TarFriendInfo == nil {
				m.TarFriendInfo = &DbFriendInfo{}
			}
			if err := m.TarFriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarSceneAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarSceneAddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_Add_Friend_Ret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_Add_Friend_Ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_Add_Friend_Ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnsRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.AnsRoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Remove_Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Remove_Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Remove_Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Remove_Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Remove_Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Remove_Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_Remove_Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_Remove_Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_Remove_Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Request_Add_Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Request_Add_Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Request_Add_Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcFriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcFriendInfo == nil {
				m.SrcFriendInfo = &DbFriendInfo{}
			}
			if err := m.SrcFriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Request_Add_Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Request_Add_Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Request_Add_Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefuse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRefuse = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_Friend_Online) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_Friend_Online: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_Friend_Online: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FriendRoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcFriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcFriendInfo == nil {
				m.SrcFriendInfo = &DbFriendInfo{}
			}
			if err := m.SrcFriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstEnterGame", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FirstEnterGame = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Friend_Online) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Friend_Online: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Friend_Online: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAleadyOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAleadyOnline = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FriendRoleIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcFriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcFriendInfo == nil {
				m.SrcFriendInfo = &DbFriendInfo{}
			}
			if err := m.SrcFriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Friend_Offline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Friend_Offline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Friend_Offline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FriendRoleIndex = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendInfo == nil {
				m.FriendInfo = &DbFriendInfo{}
			}
			if err := m.FriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ReadyEnterFriendFightScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ReadyEnterFriendFightScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ReadyEnterFriendFightScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ReadyEnterFriendFightScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ReadyEnterFriendFightScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ReadyEnterFriendFightScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Friend_Fight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Friend_Fight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Friend_Fight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FriendRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Friend_Fight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Friend_Fight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Friend_Fight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfPlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelfPlayerInfo = append(m.SelfPlayerInfo, &BattlePlayerInfo{})
			if err := m.SelfPlayerInfo[len(m.SelfPlayerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendPlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendPlayerInfo = append(m.FriendPlayerInfo, &BattlePlayerInfo{})
			if err := m.FriendPlayerInfo[len(m.FriendPlayerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_CommonShopGoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_CommonShopGoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_CommonShopGoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ShopId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsManual = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CommonShopGoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CommonShopGoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CommonShopGoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ShopId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsInfo = append(m.GoodsInfo, &CommonShopGoodsInfo{})
			if err := m.GoodsInfo[len(m.GoodsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshPrice", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NextRefreshPrice = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManualRefreshCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ManualRefreshCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManualTotalRefreshCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ManualTotalRefreshCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ParkShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ParkShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ParkShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ParkShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ParkShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ParkShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsList = append(m.GoodsList, &CommonShopGoodsInfo{})
			if err := m.GoodsList[len(m.GoodsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BuyCommonShopGoods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BuyCommonShopGoods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BuyCommonShopGoods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ShopId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ShopIndex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BuyCommonShopGoods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BuyCommonShopGoods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BuyCommonShopGoods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Skill_Study) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Skill_Study: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Skill_Study: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Skill_Study) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Skill_Study: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Skill_Study: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Skill_LevelUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Skill_LevelUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Skill_LevelUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExcharge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsExcharge = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Skill_LevelUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Skill_LevelUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Skill_LevelUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Skill_DressTalent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Skill_DressTalent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Skill_DressTalent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Skill_DressTalent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Skill_DressTalent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Skill_DressTalent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Skill_TakeOffTalent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Skill_TakeOffTalent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Skill_TakeOffTalent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Skill_TakeOffTalent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Skill_TakeOffTalent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Skill_TakeOffTalent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Skill_DressBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Skill_DressBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Skill_DressBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Skill_DressBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Skill_DressBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Skill_DressBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Skill_TakeOffBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Skill_TakeOffBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Skill_TakeOffBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Skill_TakeOffBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Skill_TakeOffBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Skill_TakeOffBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Skill_ChangeBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Skill_ChangeBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Skill_ChangeBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.OldSkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NewSkillId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Skill_ChangeBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Skill_ChangeBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Skill_ChangeBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.OldSkillId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NewSkillId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PassMiniGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PassMiniGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PassMiniGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passed", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Passed = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LevelId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PassMiniGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PassMiniGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PassMiniGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryMiniGameRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryMiniGameRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryMiniGameRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryMiniGameRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryMiniGameRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryMiniGameRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankInfos = append(m.RankInfos, &RankInfo{})
			if err := m.RankInfos[len(m.RankInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QuerySelfGameRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QuerySelfGameRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QuerySelfGameRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.HistoryMaxScore = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QuerySelfGameRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QuerySelfGameRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QuerySelfGameRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CurrRank = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.HistoryMaxScore = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PlayMiniGameAgain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PlayMiniGameAgain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PlayMiniGameAgain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PlayMiniGameAgain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PlayMiniGameAgain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PlayMiniGameAgain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SubmitMiniGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SubmitMiniGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SubmitMiniGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Score = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SubmitMiniGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SubmitMiniGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SubmitMiniGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.HistoryMaxScore = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrScore", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CurrScore = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightPercent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FightPercent = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ReadyEnterMiniGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ReadyEnterMiniGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ReadyEnterMiniGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneType = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransInfoId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TransInfoId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ReadyEnterMiniGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ReadyEnterMiniGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ReadyEnterMiniGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiniGameId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MiniGameId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransInfoId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TransInfoId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_InteractAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_InteractAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_InteractAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TarRoleIndex) == 0 {
					m.TarRoleIndex = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TarX = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TarY = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_InteractAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_InteractAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_InteractAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TarRoleIndex) == 0 {
					m.TarRoleIndex = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SelfHiAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SelfHiAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SelfHiAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SelfHiAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SelfHiAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SelfHiAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BathroomInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BathroomInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BathroomInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TarRoleIndex) == 0 {
					m.TarRoleIndex = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarX", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TarX = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarY", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TarY = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Direction = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BathroomInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BathroomInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BathroomInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TarRoleIndex) == 0 {
					m.TarRoleIndex = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.TarRoleIndex = append(m.TarRoleIndex, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_BathroomInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_BathroomInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_BathroomInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SrcRoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Dress_Card_PVE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Dress_Card_PVE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Dress_Card_PVE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Dress_Card_PVE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Dress_Card_PVE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Dress_Card_PVE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeOff_Card_PVE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeOff_Card_PVE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeOff_Card_PVE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeOff_Card_PVE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeOff_Card_PVE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeOff_Card_PVE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Dress_Card_PVP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Dress_Card_PVP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Dress_Card_PVP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Dress_Card_PVP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Dress_Card_PVP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Dress_Card_PVP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeOff_Card_PVP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeOff_Card_PVP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeOff_Card_PVP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeOff_Card_PVP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeOff_Card_PVP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeOff_Card_PVP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CardId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ArenaPlayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ArenaPlayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ArenaPlayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetLoginaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetLoginaddr = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfBattleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfBattleInfo == nil {
				m.SelfBattleInfo = &BattlePlayerInfo{}
			}
			if err := m.SelfBattleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArenaPlayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArenaPlayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArenaPlayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfBattle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfBattle == nil {
				m.SelfBattle = &ArenaBattleInfo{}
			}
			if err := m.SelfBattle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &ArenaBattleInfo{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_StopArena) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_StopArena: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_StopArena: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Arena_NearSelf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Arena_NearSelf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Arena_NearSelf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &ArenaPlayerInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Arena_NearSelf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Arena_NearSelf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Arena_NearSelf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &ArenaPlayerInfo{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ReadyEnterArenaScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ReadyEnterArenaScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ReadyEnterArenaScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ReadyEnterArenaScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ReadyEnterArenaScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ReadyEnterArenaScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RefreshArena) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RefreshArena: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RefreshArena: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RefreshArena) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RefreshArena: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RefreshArena: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &ArenaPlayerInfo{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ArenaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ArenaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ArenaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArenaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArenaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArenaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArenaInfo == nil {
				m.ArenaInfo = &DbArenaInfo{}
			}
			if err := m.ArenaInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ArenaFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ArenaFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ArenaFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarArenaRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TarArenaRank = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetAddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArenaFight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArenaFight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArenaFight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarArenaRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TarArenaRank = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ArenaFightEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ArenaFightEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ArenaFightEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Passed = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillUseInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillUseInfos = append(m.SkillUseInfos, &SkillUseInfo{})
			if err := m.SkillUseInfos[len(m.SkillUseInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArenaFightEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArenaFightEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArenaFightEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkOldRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.AtkOldRank = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefOldRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DefOldRank = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FriendFightEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FriendFightEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FriendFightEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Passed = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillUseInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillUseInfos = append(m.SkillUseInfos, &SkillUseInfo{})
			if err := m.SkillUseInfos[len(m.SkillUseInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FriendFightEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FriendFightEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FriendFightEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_HistoryRankReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_HistoryRankReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_HistoryRankReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CurrRank = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.HistoryRank = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_KillListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_KillListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_KillListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_KillListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_KillListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_KillListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowMyself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowMyself == nil {
				m.ShowMyself = &PlayerShowInfo{}
			}
			if err := m.ShowMyself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillList = append(m.KillList, &DbArenaKillInfo{})
			if err := m.KillList[len(m.KillList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_VisitingCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_VisitingCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_VisitingCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TarRoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_VisitingCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_VisitingCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_VisitingCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbCardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DbCardInfo == nil {
				m.DbCardInfo = &VisitingCardInfo{}
			}
			if err := m.DbCardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BuyArenaCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BuyArenaCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BuyArenaCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BuyArenaCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BuyArenaCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BuyArenaCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BuyCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ClearArenaCD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ClearArenaCD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ClearArenaCD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ClearArenaCD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ClearArenaCD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ClearArenaCD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_OpenStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_OpenStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_OpenStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_OpenStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_OpenStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_OpenStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RisenPlayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RisenPlayInfo == nil {
				m.RisenPlayInfo = &PlayerShowInfo{}
			}
			if err := m.RisenPlayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaPlayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArenaPlayInfo == nil {
				m.ArenaPlayInfo = &PlayerShowInfo{}
			}
			if err := m.ArenaPlayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondPlayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiamondPlayInfo == nil {
				m.DiamondPlayInfo = &PlayerShowInfo{}
			}
			if err := m.DiamondPlayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillPlayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KillPlayInfo == nil {
				m.KillPlayInfo = &PlayerShowInfo{}
			}
			if err := m.KillPlayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryRisenStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryRisenStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryRisenStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryRisenStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryRisenStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryRisenStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankInfos = append(m.RankInfos, &RankInfo{})
			if err := m.RankInfos[len(m.RankInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryTopRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.HistoryTopRank = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryLevelRankListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryLevelRankListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryLevelRankListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryLevelRankListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryLevelRankListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryLevelRankListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_LevelRankLocationSelf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_LevelRankLocationSelf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_LevelRankLocationSelf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_LevelRankLocationSelf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_LevelRankLocationSelf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_LevelRankLocationSelf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryArenaStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryArenaStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryArenaStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryArenaStar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryArenaStar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryArenaStar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankInfos = append(m.RankInfos, &RankInfo{})
			if err := m.RankInfos[len(m.RankInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryArenaRankListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryArenaRankListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryArenaRankListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryArenaRankListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryArenaRankListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryArenaRankListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ArenaRankLocationSelf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ArenaRankLocationSelf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ArenaRankLocationSelf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SelfRank = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfSeqRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SelfSeqRank = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalNum = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOneRank", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TheOneRank = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArenaRankLocationSelf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArenaRankLocationSelf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArenaRankLocationSelf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryDiamondRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryDiamondRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryDiamondRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryDiamondRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryDiamondRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryDiamondRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DiamondRankLocationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DiamondRankLocationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DiamondRankLocationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DiamondRankLocationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DiamondRankLocationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DiamondRankLocationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryKillRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryKillRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryKillRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryKillRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryKillRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryKillRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_KillRankLocationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_KillRankLocationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_KillRankLocationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginAddr = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LoginIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_KillRankLocationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_KillRankLocationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_KillRankLocationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnd = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PageNum = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfInfo == nil {
				m.SelfInfo = &RankInfo{}
			}
			if err := m.SelfInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheOne == nil {
				m.TheOne = &RankInfo{}
			}
			if err := m.TheOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankList = append(m.RankList, &RankInfo{})
			if err := m.RankList[len(m.RankList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SwordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SwordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SwordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SwordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SwordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SwordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwordInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwordInfo == nil {
				m.SwordInfo = &DbSwordInfo{}
			}
			if err := m.SwordInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AddSwordCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AddSwordCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AddSwordCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ItemId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AddSwordCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AddSwordCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AddSwordCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncSwordCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncSwordCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncSwordCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.TotalCount = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LeftCount = &v2
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.DiffCount = append(m.DiffCount, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiffCount) == 0 {
					m.DiffCount = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.DiffCount = append(m.DiffCount, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffCount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SwordEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SwordEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SwordEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSuccess = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SwordEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SwordEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SwordEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaliburnInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaliburnInfo == nil {
				m.CaliburnInfo = &DbSwordInfo{}
			}
			if err := m.CaliburnInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbBagEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SelectSwordEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SelectSwordEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SelectSwordEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSelect = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SelectSwordEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SelectSwordEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SelectSwordEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEvent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEvent = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftEquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftEquipInfo == nil {
				m.LeftEquipInfo = &DbBagEquip{}
			}
			if err := m.LeftEquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightEquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightEquipInfo == nil {
				m.RightEquipInfo = &DbBagEquip{}
			}
			if err := m.RightEquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SelectMountainGodEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SelectMountainGodEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SelectMountainGodEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Pos = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SelectMountainGodEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SelectMountainGodEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SelectMountainGodEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var v E_MountainGodEvent_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MountainGodEvent_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipInfo = append(m.EquipInfo, &DbBagEquip{})
			if err := m.EquipInfo[len(m.EquipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DailyTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DailyTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DailyTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DailyTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DailyTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DailyTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfoList = append(m.TaskInfoList, &DbDailyTaskInfo{})
			if err := m.TaskInfoList[len(m.TaskInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DailyTaskReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DailyTaskReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DailyTaskReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyTaskInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DailyTaskInfo == nil {
				m.DailyTaskInfo = &DbDailyTaskInfo{}
			}
			if err := m.DailyTaskInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DailyTaskReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DailyTaskReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DailyTaskReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityValue == nil {
				m.ActivityValue = &DailyActivityChangeInfo{}
			}
			if err := m.ActivityValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DailyActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DailyActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DailyActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DailyActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DailyActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DailyActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityInfo == nil {
				m.ActivityInfo = &DbDailyActivityInfo{}
			}
			if err := m.ActivityInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DailyActivityValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DailyActivityValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DailyActivityValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangeInfo == nil {
				m.ChangeInfo = &DailyActivityChangeInfo{}
			}
			if err := m.ChangeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DailyActivityReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DailyActivityReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DailyActivityReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActivityId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActivity", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalActivity = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DailyActivityReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DailyActivityReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DailyActivityReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityInfo == nil {
				m.ActivityInfo = &DbDailyActivityInfo{}
			}
			if err := m.ActivityInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BuyStamina) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BuyStamina: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BuyStamina: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BuyStamina) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BuyStamina: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BuyStamina: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Mail_Have_New) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Mail_Have_New: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Mail_Have_New: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Mail_Title) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Mail_Title: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Mail_Title: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.IntAddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Mail_Title) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Mail_Title: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Mail_Title: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailTitles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailTitles = append(m.MailTitles, &MinosMailTitle{})
			if err := m.MailTitles[len(m.MailTitles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Mail_Full) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Mail_Full: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Mail_Full: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MailIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.IntAddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Mail_Full) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Mail_Full: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Mail_Full: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailFull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MailFull == nil {
				m.MailFull = &MinosMail{}
			}
			if err := m.MailFull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_Mail_Full) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_Mail_Full: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_Mail_Full: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MailIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.IntAddr = &v2
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailFull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MailFull == nil {
				m.MailFull = &MinosMail{}
			}
			if err := m.MailFull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Mail_Read) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Mail_Read: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Mail_Read: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MailIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntAddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.IntAddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Mail_Read) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Mail_Read: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Mail_Read: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TodaySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TodaySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TodaySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TodaySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TodaySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TodaySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodaySign", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TodaySign = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignMonth", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SignMonth = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthTotalDays", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MonthTotalDays = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SignCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetroactiveCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RetroactiveCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MissCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LotteryCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodaySign", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TodaySign = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetroactiveLeft", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RetroactiveLeft = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SignAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SignAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SignAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMiss", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMiss = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SignAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SignAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SignAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SignLottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SignLottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SignLottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SignLottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SignLottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SignLottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &RewardInfo{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LotteryCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SignLotteryShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SignLotteryShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SignLotteryShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SignLotteryShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SignLotteryShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SignLotteryShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SevenDayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SevenDayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SevenDayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SevenDayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SevenDayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SevenDayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayTail = append(m.DayTail, &SevenDayDetail{})
			if err := m.DayTail[len(m.DayTail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLoginDays", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalLoginDays = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetSevenDayReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetSevenDayReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetSevenDayReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheDay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TheDay = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetSevenDayReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetSevenDayReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetSevenDayReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheDay", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TheDay = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMSetLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMSetLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMSetLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMSetLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMSetLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMSetLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ItemConfig{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddStimina) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddStimina: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddStimina: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddStimina) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddStimina: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddStimina: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddDiamond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddDiamond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddDiamond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddDiamond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddDiamond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddDiamond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddCaliburnCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddCaliburnCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddCaliburnCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddCaliburnCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddCaliburnCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddCaliburnCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddArenaCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddArenaCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddArenaCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddArenaCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddArenaCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddArenaCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Face == nil {
				m.Face = &FaceConfig{}
			}
			if err := m.Face.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddSuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddSuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddSuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Suit == nil {
				m.Suit = &SuitConfig{}
			}
			if err := m.Suit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddSuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddSuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddSuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GMAddEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GMAddEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GMAddEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EquipId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GMAddEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GMAddEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GMAddEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FunctionOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FunctionOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FunctionOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FunctionId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FastTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FastTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FastTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FastTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FastTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FastTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EasterEggTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EasterEggTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EasterEggTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EggId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_GetEasterEggTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_GetEasterEggTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_GetEasterEggTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EggId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCdTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftCdTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EasterEggTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EasterEggTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EasterEggTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipStrongthen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipStrongthen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipStrongthen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipStrongthen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipStrongthen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipStrongthen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbBagEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipStrongthenEquiped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipStrongthenEquiped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipStrongthenEquiped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteType", wireType)
			}
			var v E_EQUIP_SITE_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_EQUIP_SITE_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SiteType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipStrongthenEquiped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipStrongthenEquiped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipStrongthenEquiped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbRoleEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipResolve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipResolve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipResolve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.EquipIndex = append(m.EquipIndex, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EquipIndex) == 0 {
					m.EquipIndex = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.EquipIndex = append(m.EquipIndex, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipResolve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipResolve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipResolve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &ItemConfig{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipFix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipFix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipFix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipFix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipFix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipFix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbBagEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipFixEquiped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipFixEquiped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipFixEquiped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteType", wireType)
			}
			var v E_EQUIP_SITE_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_EQUIP_SITE_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SiteType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipFixEquiped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipFixEquiped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipFixEquiped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbRoleEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AskFixEquipsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AskFixEquipsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AskFixEquipsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AskFixEquipsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AskFixEquipsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AskFixEquipsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixEquips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FixEquips == nil {
				m.FixEquips = &ListDbFixEquips{}
			}
			if err := m.FixEquips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipFastFix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipFastFix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipFastFix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipFastFix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipFastFix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipFastFix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbFixEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetFixedEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetFixedEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetFixedEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetFixedEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetFixedEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetFixedEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipInfo == nil {
				m.EquipInfo = &DbBagEquip{}
			}
			if err := m.EquipInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PointGoldInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PointGoldInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PointGoldInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PointGoldInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PointGoldInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PointGoldInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ExchangedCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PointGold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PointGold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PointGold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PointGold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PointGold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PointGold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TouchPersonEasterEgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TouchPersonEasterEgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TouchPersonEasterEgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EasterEggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EasterEggId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TouchPersonEasterEgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TouchPersonEasterEgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TouchPersonEasterEgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EasterEggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EasterEggId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCdTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftCdTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayGetCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DayGetCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ResetPersonEasterEgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ResetPersonEasterEgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ResetPersonEasterEgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EasterEggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EasterEggId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_GlobalEasterEggInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_GlobalEasterEggInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_GlobalEasterEggInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EasterEggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EasterEggId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GlobalEasterEggInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GlobalEasterEggInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GlobalEasterEggInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EasterEggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EasterEggId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCdTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftCdTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TouchGlobalEasterEgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TouchGlobalEasterEgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TouchGlobalEasterEgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EasterEggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EasterEggId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TouchGlobalEasterEgg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TouchGlobalEasterEgg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TouchGlobalEasterEgg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EasterEggId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EasterEggId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCdTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LeftCdTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RechargeMoneyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RechargeMoneyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RechargeMoneyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RechargeMoneyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RechargeMoneyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RechargeMoneyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RechargeInfo == nil {
				m.RechargeInfo = &RechargeMoneyInfo{}
			}
			if err := m.RechargeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RechargeMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RechargeMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RechargeMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RechargeId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RechargeMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RechargeMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RechargeMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RechargeId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_VipDailyRewardFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_VipDailyRewardFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_VipDailyRewardFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyRewardFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DailyRewardFlag = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetVipDailyReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetVipDailyReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetVipDailyReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetVipDailyReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetVipDailyReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetVipDailyReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetSpecialVipReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetSpecialVipReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetSpecialVipReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.VipLevel = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetSpecialVipReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetSpecialVipReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetSpecialVipReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AddInterActTool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AddInterActTool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AddInterActTool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToolInfo = append(m.ToolInfo, &BathhouseTool{})
			if err := m.ToolInfo[len(m.ToolInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RemoveInterActTool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RemoveInterActTool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RemoveInterActTool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToolId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ToolId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RemoveOwnerTool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RemoveOwnerTool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RemoveOwnerTool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BathhouseFightEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BathhouseFightEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BathhouseFightEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TouchManInBlack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TouchManInBlack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TouchManInBlack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TouchManInBlack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TouchManInBlack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TouchManInBlack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CdTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_UseInterActTool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_UseInterActTool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_UseInterActTool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToolType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ToolType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PickUpInterActTool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PickUpInterActTool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PickUpInterActTool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToolId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ToolId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PickUpInterActTool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PickUpInterActTool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PickUpInterActTool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToolInfo == nil {
				m.ToolInfo = &BathhouseTool{}
			}
			if err := m.ToolInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BathFightStepInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BathFightStepInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BathFightStepInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BathFightStep", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BathFightStep = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CanPlayWaterBall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CanPlayWaterBall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CanPlayWaterBall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlayWaterBall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CanPlayWaterBall = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BathStatusChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BathStatusChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BathStatusChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.StatusId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncBathPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncBathPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncBathPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BathFullness", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BathFullness = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BathStamina", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BathStamina = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayBathStamina", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TodayBathStamina = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PreferFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PreferFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PreferFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PreferFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PreferFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PreferFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FaceId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrefer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPrefer = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FacePreferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FacePreferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FacePreferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FacePreferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FacePreferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FacePreferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceRandomOnoff", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FaceRandomOnoff = &b
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.FaceIdList = append(m.FaceIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FaceIdList) == 0 {
					m.FaceIdList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.FaceIdList = append(m.FaceIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_OnOffFaceRandom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_OnOffFaceRandom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_OnOffFaceRandom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_InteractEnergy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_InteractEnergy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_InteractEnergy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Energy = &v
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.EnergyDiff = append(m.EnergyDiff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EnergyDiff) == 0 {
					m.EnergyDiff = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.EnergyDiff = append(m.EnergyDiff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyDiff", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_InterActInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_InterActInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_InterActInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_InterActInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_InterActInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_InterActInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InteractInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InteractInfo == nil {
				m.InteractInfo = &RoleInteractInfo{}
			}
			if err := m.InteractInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_QueryUnlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_QueryUnlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_QueryUnlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_QueryUnlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_QueryUnlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_QueryUnlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interact = append(m.Interact, &ItemNeed{})
			if err := m.Interact[len(m.Interact)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ItemNeed{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = append(m.Level, &LevelNeed{})
			if err := m.Level[len(m.Level)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UnlockInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UnlockInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UnlockInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UnlockInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UnlockInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UnlockInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DressInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DressInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DressInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DressInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DressInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DressInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.EffectActList = append(m.EffectActList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EffectActList) == 0 {
					m.EffectActList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.EffectActList = append(m.EffectActList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectActList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeOffInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeOffInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeOffInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeOffInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeOffInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeOffInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.EffectActList = append(m.EffectActList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EffectActList) == 0 {
					m.EffectActList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.EffectActList = append(m.EffectActList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectActList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ExChangeInteractHole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ExChangeInteractHole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ExChangeInteractHole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hole_1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Hole_1 = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hole_2", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Hole_2 = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ExChangeInteractHole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ExChangeInteractHole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ExChangeInteractHole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.EffectActList = append(m.EffectActList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EffectActList) == 0 {
					m.EffectActList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.EffectActList = append(m.EffectActList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectActList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_InterActManualRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_InterActManualRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_InterActManualRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_InterActManualRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_InterActManualRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_InterActManualRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsNewReward = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Num = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &ItemConfig{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetInterActManualReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetInterActManualReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetInterActManualReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetInterActManualReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetInterActManualReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetInterActManualReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_VehicleCompose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_VehicleCompose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_VehicleCompose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainVehicleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.MainVehicleIndex = &v2
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.ConsumeVehicleList = append(m.ConsumeVehicleList, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ConsumeVehicleList) == 0 {
					m.ConsumeVehicleList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.ConsumeVehicleList = append(m.ConsumeVehicleList, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeVehicleList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_VehicleCompose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_VehicleCompose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_VehicleCompose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVehicle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewVehicle == nil {
				m.NewVehicle = &DbBagEquip{}
			}
			if err := m.NewVehicle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipManualInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipManualInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipManualInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipManualInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipManualInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipManualInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanGet", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CanGet = &v
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.EquipIdList = append(m.EquipIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EquipIdList) == 0 {
					m.EquipIdList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.EquipIdList = append(m.EquipIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIdList", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Rate = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &ItemConfig{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetEquipManualReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetEquipManualReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetEquipManualReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetEquipManualReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetEquipManualReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetEquipManualReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_NPCInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_NPCInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_NPCInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_NPCInteract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_NPCInteract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_NPCInteract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NpcId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_InteractRedPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_InteractRedPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_InteractRedPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_InteractRedPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_InteractRedPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_InteractRedPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.CanUnlockActList = append(m.CanUnlockActList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CanUnlockActList) == 0 {
					m.CanUnlockActList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.CanUnlockActList = append(m.CanUnlockActList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUnlockActList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FriendFightInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FriendFightInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FriendFightInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FriendIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FriendFightInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FriendFightInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FriendFightInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Battle == nil {
				m.Battle = &BattlePlayerInfo{}
			}
			if err := m.Battle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UploadSystemConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UploadSystemConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UploadSystemConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &DbRoleSystemConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TouchEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TouchEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TouchEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EquipIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TouchItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TouchItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TouchItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ItemIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UploadForceGuideInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UploadForceGuideInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UploadForceGuideInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.GuideIndex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UpdateFindwayGuideIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UpdateFindwayGuideIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UpdateFindwayGuideIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindGuidIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FindGuidIndex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ExtendSkillHole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ExtendSkillHole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ExtendSkillHole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ExtendSkillHole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ExtendSkillHole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ExtendSkillHole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleCurrentSkills) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleCurrentSkills: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleCurrentSkills: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.CurrentSkills = append(m.CurrentSkills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CurrentSkills) == 0 {
					m.CurrentSkills = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.CurrentSkills = append(m.CurrentSkills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSkills", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipBroken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipBroken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipBroken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.EquipId = append(m.EquipId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EquipId) == 0 {
					m.EquipId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.EquipId = append(m.EquipId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_CustomFaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_CustomFaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_CustomFaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CustomFaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CustomFaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CustomFaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomList = append(m.CustomList, &RoleCustomFace{})
			if err := m.CustomList[len(m.CustomList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentFace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentFace == nil {
				m.CurrentFace = &RoleFace{}
			}
			if err := m.CurrentFace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeverFree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ForeverFree = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_CanUploadImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_CanUploadImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_CanUploadImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyFree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.BuyFree = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CanUploadImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CanUploadImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CanUploadImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueKey = append(m.UniqueKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UniqueKey == nil {
				m.UniqueKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PlatformId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ServerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UploadImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UploadImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UploadImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueKey = append(m.UniqueKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UniqueKey == nil {
				m.UniqueKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_UploadImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_UploadImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_UploadImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueKey = append(m.UniqueKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UniqueKey == nil {
				m.UniqueKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UploadImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UploadImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UploadImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DressCustomFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DressCustomFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DressCustomFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DressCustomFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DressCustomFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DressCustomFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentFace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentFace == nil {
				m.CurrentFace = &RoleFace{}
			}
			if err := m.CurrentFace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeOffCustomFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeOffCustomFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeOffCustomFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeOffCustomFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeOffCustomFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeOffCustomFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentFace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentFace == nil {
				m.CurrentFace = &RoleFace{}
			}
			if err := m.CurrentFace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DelelteCustomFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DelelteCustomFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DelelteCustomFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DelelteCustomFace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DelelteCustomFace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DelelteCustomFace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentFace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentFace == nil {
				m.CurrentFace = &RoleFace{}
			}
			if err := m.CurrentFace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CustomFaceAuditResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CustomFaceAuditResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CustomFaceAuditResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FaceUploadSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FaceUploadSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FaceUploadSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ImageId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RolePetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RolePetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RolePetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RolePetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RolePetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RolePetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PetInfo == nil {
				m.PetInfo = &DbRolePetInfo{}
			}
			if err := m.PetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SetPetFightStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SetPetFightStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SetPetFightStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SetPetFightStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SetPetFightStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SetPetFightStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Status = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PetEvolve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PetEvolve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PetEvolve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PetEvolve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PetEvolve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PetEvolve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.OldPetId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewPet == nil {
				m.NewPet = &PetInfo{}
			}
			if err := m.NewPet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PetTalentRebuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PetTalentRebuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PetTalentRebuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Site = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PetTalentRebuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PetTalentRebuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PetTalentRebuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassiveId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NewPassiveId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FosterPet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FosterPet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FosterPet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &ItemConfig{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FosterPet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FosterPet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FosterPet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Level = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Exp = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PetAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PetAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PetAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PetList = append(m.PetList, &PetInfo{})
			if err := m.PetList[len(m.PetList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PetUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PetUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PetUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PetList = append(m.PetList, &PetInfo{})
			if err := m.PetList[len(m.PetList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncPetLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncPetLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncPetLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Level = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.Exp = &v2
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.ExpDiff = append(m.ExpDiff, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExpDiff) == 0 {
					m.ExpDiff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.ExpDiff = append(m.ExpDiff, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpDiff", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PetEatPill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PetEatPill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PetEatPill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &ItemConfig{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PetEatPill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PetEatPill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PetEatPill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewAttr == nil {
				m.NewAttr = &PetBaseFight{}
			}
			if err := m.NewAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PetRefreshInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PetRefreshInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PetRefreshInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BornPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BornPos == nil {
				m.BornPos = &LuaPos{}
			}
			if err := m.BornPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PetId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_RoleNabPet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_RoleNabPet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_RoleNabPet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleNabPet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleNabPet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleNabPet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_HorseLight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_HorseLight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_HorseLight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Horse_LightList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Horse_LightList = append(m.Horse_LightList, &HorseLightInfo{})
			if err := m.Horse_LightList[len(m.Horse_LightList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AssistantTipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AssistantTipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AssistantTipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AssistantTipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AssistantTipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AssistantTipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.TipReadIdList = append(m.TipReadIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TipReadIdList) == 0 {
					m.TipReadIdList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.TipReadIdList = append(m.TipReadIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TipReadIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AssistantTipRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AssistantTipRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AssistantTipRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TipId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TipId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_NiuDanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_NiuDanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_NiuDanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NiudanId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NiudanId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_NiuDanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_NiuDanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_NiuDanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NiudanId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NiudanId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ButtonInfo == nil {
				m.ButtonInfo = &ButtonCd{}
			}
			if err := m.ButtonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TouchNiuDan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TouchNiuDan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TouchNiuDan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NiudanId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NiudanId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ButtonId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TouchNiuDan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TouchNiuDan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TouchNiuDan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NiudanId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NiudanId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ButtonId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LeftTime = &v2
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &RewardInfo{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustRewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MustRewardList = append(m.MustRewardList, &RewardInfo{})
			if err := m.MustRewardList[len(m.MustRewardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ExchangeCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ExchangeCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ExchangeCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ExchangeCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ExchangeCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ExchangeCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArchieveFinish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArchieveFinish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArchieveFinish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetArchieveReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetArchieveReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetArchieveReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetArchieveReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetArchieveReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetArchieveReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ArchieveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ArchieveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ArchieveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ArchieveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ArchieveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ArchieveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ListDbRoleSuccessInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ReadyEnterGuadratic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ReadyEnterGuadratic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ReadyEnterGuadratic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.GwIntaddr = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ReadyEnterGuadratic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ReadyEnterGuadratic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ReadyEnterGuadratic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EnterGuadratic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EnterGuadratic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EnterGuadratic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneIndex = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneIntaddr = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneInstanceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.SceneInstanceId = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MapId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DupId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DupId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GuadraticReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GuadraticReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GuadraticReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_NextGuadraticDup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_NextGuadraticDup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_NextGuadraticDup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.DupId = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleList = append(m.RoleList, &GuadraticRoleInfo{})
			if err := m.RoleList[len(m.RoleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GuadraticEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GuadraticEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GuadraticEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultList = append(m.ResultList, &GuadraticResult{})
			if err := m.ResultList[len(m.ResultList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncGuadraticRoleHP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncGuadraticRoleHP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncGuadraticRoleHP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleHpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleHpList = append(m.RoleHpList, &GuadraticRoleHp{})
			if err := m.RoleHpList[len(m.RoleHpList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SyncGuadraticRoleCD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SyncGuadraticRoleCD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SyncGuadraticRoleCD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleCdList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleCdList = append(m.RoleCdList, &GuadraticRoleCd{})
			if err := m.RoleCdList[len(m.RoleCdList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GuadraticBossEnter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GuadraticBossEnter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GuadraticBossEnter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BossIndex = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BossId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &LuaPos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HurtRect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HurtRect == nil {
				m.HurtRect = &LuaPosRect{}
			}
			if err := m.HurtRect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GuadraticBossUseSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GuadraticBossUseSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GuadraticBossUseSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BossIndex = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BossId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SkillId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Hurt = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HurtRect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HurtRect == nil {
				m.HurtRect = &LuaPosRect{}
			}
			if err := m.HurtRect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SellBagThing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SellBagThing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SellBagThing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipList = append(m.EquipList, &SellInfo{})
			if err := m.EquipList[len(m.EquipList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &SellInfo{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SellBagThing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SellBagThing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SellBagThing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_StoneExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_StoneExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_StoneExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Want", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Want == nil {
				m.Want = &ItemConfig{}
			}
			if err := m.Want.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_StoneExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_StoneExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_StoneExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FirstMonery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FirstMonery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FirstMonery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FirstMonery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FirstMonery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FirstMonery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.FirstFlag = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardList = append(m.RewardList, &ItemConfig{})
			if err := m.RewardList[len(m.RewardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetFirstMonery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetFirstMonery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetFirstMonery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetFirstMonery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetFirstMonery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetFirstMonery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_OtherRechargeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_OtherRechargeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_OtherRechargeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardList = append(m.RewardList, &ItemConfig{})
			if err := m.RewardList[len(m.RewardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CostList = append(m.CostList, &ItemConfig{})
			if err := m.CostList[len(m.CostList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.StartTime = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EndTime = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetOtherRechargeReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetOtherRechargeReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetOtherRechargeReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetOtherRechargeReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetOtherRechargeReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetOtherRechargeReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ShareToWeixin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ShareToWeixin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ShareToWeixin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapterId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RiskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_IfShareRisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_IfShareRisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_IfShareRisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ChapterId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RiskId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_IfShareRisk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_IfShareRisk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_IfShareRisk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Result = &b
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AreYouKidding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AreYouKidding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AreYouKidding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattlePlayerGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattlePlayerGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattlePlayerGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, &BattlePlayerInfo{})
			if err := m.PlayerList[len(m.PlayerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattlePVEData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattlePVEData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattlePVEData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomseed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Randomseed = append(m.Randomseed[:0], dAtA[iNdEx:postIndex]...)
			if m.Randomseed == nil {
				m.Randomseed = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChapterID = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RiskID = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MainHero == nil {
				m.MainHero = &BattlePlayerInfo{}
			}
			if err := m.MainHero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friend == nil {
				m.Friend = &BattlePlayerInfo{}
			}
			if err := m.Friend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pet == nil {
				m.Pet = &PetInfo{}
			}
			if err := m.Pet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FaceCount = &v
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FaceList = append(m.FaceList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNet_Game
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNet_Game
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNet_Game
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FaceList) == 0 {
					m.FaceList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNet_Game
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FaceList = append(m.FaceList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceList", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassRiskData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PassRiskData == nil {
				m.PassRiskData = &C2S_PassRisk{}
			}
			if err := m.PassRiskData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattlePVEVerifyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattlePVEVerifyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattlePVEVerifyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ExtendEquipBag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ExtendEquipBag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ExtendEquipBag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ExtendEquipBag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ExtendEquipBag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ExtendEquipBag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrBagSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CurrBagSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrExtendCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CurrExtendCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityList = append(m.ActivityList, &ActivityInfo{})
			if err := m.ActivityList[len(m.ActivityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetActivityReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetActivityReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetActivityReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Id = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Position = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetActivityReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetActivityReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetActivityReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ActivityInfoUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ActivityInfoUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ActivityInfoUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet_Game
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet_Game
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityList = append(m.ActivityList, &ActivityInfo{})
			if err := m.ActivityList[len(m.ActivityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PianoStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PianoStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PianoStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PianoStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PianoStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PianoStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PianoPlay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PianoPlay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PianoPlay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NoteId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PianoPlay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PianoPlay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PianoPlay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NoteId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_PianoEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PianoEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PianoEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PianoEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PianoEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PianoEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AskPianoStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AskPianoStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AskPianoStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AskPianoStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AskPianoStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AskPianoStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_RoleBagFull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_RoleBagFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_RoleBagFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_EquipMake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_EquipMake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_EquipMake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MakeId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CaseId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_EquipMake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_EquipMake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_EquipMake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEquipId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NewEquipId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetMinigameBuyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetMinigameBuyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetMinigameBuyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetMinigameBuyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetMinigameBuyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetMinigameBuyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayBuyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DayBuyCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetFlag", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.GetFlag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetDailyBitCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetDailyBitCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetDailyBitCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetDailyBitCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetDailyBitCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetDailyBitCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BuyBitCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BuyBitCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BuyBitCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BuyBitCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BuyBitCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BuyBitCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayBuyCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DayBuyCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNet_Game(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet_Game
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNet_Game(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNet_Game
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNet_Game
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNet_Game
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNet_Game
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNet_Game
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNet_Game        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNet_Game          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNet_Game = fmt.Errorf("proto: unexpected end of group")
)
