// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ParkLot.proto

package pbd

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 车信息
type DbCarInfo struct {
	CarIndex             *int64        `protobuf:"zigzag64,1,opt,name=car_index" json:"car_index,omitempty"`
	CarId                *int32        `protobuf:"zigzag32,2,opt,name=car_id" json:"car_id,omitempty"`
	Level                *int32        `protobuf:"zigzag32,3,opt,name=level" json:"level,omitempty"`
	Armor                *int32        `protobuf:"zigzag32,4,opt,name=armor" json:"armor,omitempty"`
	Status               *E_CAR_STATUS `protobuf:"varint,5,opt,name=status,enum=pbd.E_CAR_STATUS" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DbCarInfo) Reset()         { *m = DbCarInfo{} }
func (m *DbCarInfo) String() string { return proto.CompactTextString(m) }
func (*DbCarInfo) ProtoMessage()    {}
func (*DbCarInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{0}
}
func (m *DbCarInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DbCarInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DbCarInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DbCarInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbCarInfo.Merge(m, src)
}
func (m *DbCarInfo) XXX_Size() int {
	return m.Size()
}
func (m *DbCarInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DbCarInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DbCarInfo proto.InternalMessageInfo

func (m *DbCarInfo) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

func (m *DbCarInfo) GetCarId() int32 {
	if m != nil && m.CarId != nil {
		return *m.CarId
	}
	return 0
}

func (m *DbCarInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *DbCarInfo) GetArmor() int32 {
	if m != nil && m.Armor != nil {
		return *m.Armor
	}
	return 0
}

func (m *DbCarInfo) GetStatus() E_CAR_STATUS {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return E_CAR_STATUS_ECS_NORMAL
}

// 修理中的汽车
type DbFixCar struct {
	FixTimestamp         *int64     `protobuf:"zigzag64,1,opt,name=fix_timestamp" json:"fix_timestamp,omitempty"`
	NeedTime             *int32     `protobuf:"zigzag32,2,opt,name=need_time" json:"need_time,omitempty"`
	Car                  *DbCarInfo `protobuf:"bytes,3,opt,name=car" json:"car,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DbFixCar) Reset()         { *m = DbFixCar{} }
func (m *DbFixCar) String() string { return proto.CompactTextString(m) }
func (*DbFixCar) ProtoMessage()    {}
func (*DbFixCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{1}
}
func (m *DbFixCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DbFixCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DbFixCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DbFixCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbFixCar.Merge(m, src)
}
func (m *DbFixCar) XXX_Size() int {
	return m.Size()
}
func (m *DbFixCar) XXX_DiscardUnknown() {
	xxx_messageInfo_DbFixCar.DiscardUnknown(m)
}

var xxx_messageInfo_DbFixCar proto.InternalMessageInfo

func (m *DbFixCar) GetFixTimestamp() int64 {
	if m != nil && m.FixTimestamp != nil {
		return *m.FixTimestamp
	}
	return 0
}

func (m *DbFixCar) GetNeedTime() int32 {
	if m != nil && m.NeedTime != nil {
		return *m.NeedTime
	}
	return 0
}

func (m *DbFixCar) GetCar() *DbCarInfo {
	if m != nil {
		return m.Car
	}
	return nil
}

// 玩家停车记录(停车场,停车位, 车index),
type RoleParkRecord struct {
	ParkId               *int32   `protobuf:"zigzag32,1,opt,name=park_id" json:"park_id,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	CarId                *int32   `protobuf:"zigzag32,3,opt,name=car_id" json:"car_id,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,4,opt,name=car_index" json:"car_index,omitempty"`
	ParkTimestamp        *int64   `protobuf:"zigzag64,5,opt,name=park_timestamp" json:"park_timestamp,omitempty"`
	LeftParkTime         *int64   `protobuf:"zigzag64,6,opt,name=left_park_time" json:"left_park_time,omitempty"`
	GetCar               *ParkCar `protobuf:"bytes,7,opt,name=get_car" json:"get_car,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleParkRecord) Reset()         { *m = RoleParkRecord{} }
func (m *RoleParkRecord) String() string { return proto.CompactTextString(m) }
func (*RoleParkRecord) ProtoMessage()    {}
func (*RoleParkRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{2}
}
func (m *RoleParkRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleParkRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleParkRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleParkRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleParkRecord.Merge(m, src)
}
func (m *RoleParkRecord) XXX_Size() int {
	return m.Size()
}
func (m *RoleParkRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleParkRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RoleParkRecord proto.InternalMessageInfo

func (m *RoleParkRecord) GetParkId() int32 {
	if m != nil && m.ParkId != nil {
		return *m.ParkId
	}
	return 0
}

func (m *RoleParkRecord) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *RoleParkRecord) GetCarId() int32 {
	if m != nil && m.CarId != nil {
		return *m.CarId
	}
	return 0
}

func (m *RoleParkRecord) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

func (m *RoleParkRecord) GetParkTimestamp() int64 {
	if m != nil && m.ParkTimestamp != nil {
		return *m.ParkTimestamp
	}
	return 0
}

func (m *RoleParkRecord) GetLeftParkTime() int64 {
	if m != nil && m.LeftParkTime != nil {
		return *m.LeftParkTime
	}
	return 0
}

func (m *RoleParkRecord) GetGetCar() *ParkCar {
	if m != nil {
		return m.GetCar
	}
	return nil
}

// 老司机信息(等级,经验)
type OldDriver struct {
	Level                 *int32            `protobuf:"zigzag32,1,opt,name=level" json:"level,omitempty"`
	Exp                   *int32            `protobuf:"zigzag32,2,opt,name=exp" json:"exp,omitempty"`
	PortNum               *int32            `protobuf:"zigzag32,3,opt,name=port_num" json:"port_num,omitempty"`
	ExpandCount           *int32            `protobuf:"zigzag32,4,opt,name=expand_count" json:"expand_count,omitempty"`
	RepairPortNum         *int32            `protobuf:"zigzag32,5,opt,name=repair_port_num" json:"repair_port_num,omitempty"`
	RepairExpandCount     *int32            `protobuf:"zigzag32,6,opt,name=repair_expand_count" json:"repair_expand_count,omitempty"`
	ActionedCount         *int32            `protobuf:"zigzag32,7,opt,name=actioned_count" json:"actioned_count,omitempty"`
	ActionRefreshLastTime *int64            `protobuf:"zigzag64,8,opt,name=action_refresh_last_time" json:"action_refresh_last_time,omitempty"`
	Carport               *ListRoleCarport  `protobuf:"bytes,9,opt,name=carport" json:"carport,omitempty"`
	RolePark              []*RoleParkRecord `protobuf:"bytes,10,rep,name=role_park" json:"role_park,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-"`
	XXX_unrecognized      []byte            `json:"-"`
	XXX_sizecache         int32             `json:"-"`
}

func (m *OldDriver) Reset()         { *m = OldDriver{} }
func (m *OldDriver) String() string { return proto.CompactTextString(m) }
func (*OldDriver) ProtoMessage()    {}
func (*OldDriver) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{3}
}
func (m *OldDriver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldDriver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldDriver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldDriver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldDriver.Merge(m, src)
}
func (m *OldDriver) XXX_Size() int {
	return m.Size()
}
func (m *OldDriver) XXX_DiscardUnknown() {
	xxx_messageInfo_OldDriver.DiscardUnknown(m)
}

var xxx_messageInfo_OldDriver proto.InternalMessageInfo

func (m *OldDriver) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *OldDriver) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *OldDriver) GetPortNum() int32 {
	if m != nil && m.PortNum != nil {
		return *m.PortNum
	}
	return 0
}

func (m *OldDriver) GetExpandCount() int32 {
	if m != nil && m.ExpandCount != nil {
		return *m.ExpandCount
	}
	return 0
}

func (m *OldDriver) GetRepairPortNum() int32 {
	if m != nil && m.RepairPortNum != nil {
		return *m.RepairPortNum
	}
	return 0
}

func (m *OldDriver) GetRepairExpandCount() int32 {
	if m != nil && m.RepairExpandCount != nil {
		return *m.RepairExpandCount
	}
	return 0
}

func (m *OldDriver) GetActionedCount() int32 {
	if m != nil && m.ActionedCount != nil {
		return *m.ActionedCount
	}
	return 0
}

func (m *OldDriver) GetActionRefreshLastTime() int64 {
	if m != nil && m.ActionRefreshLastTime != nil {
		return *m.ActionRefreshLastTime
	}
	return 0
}

func (m *OldDriver) GetCarport() *ListRoleCarport {
	if m != nil {
		return m.Carport
	}
	return nil
}

func (m *OldDriver) GetRolePark() []*RoleParkRecord {
	if m != nil {
		return m.RolePark
	}
	return nil
}

// 玩家车车库信息
type ListRoleCarport struct {
	CarInfo              []*DbCarInfo `protobuf:"bytes,1,rep,name=car_info" json:"car_info,omitempty"`
	FixCarInfo           []*DbFixCar  `protobuf:"bytes,2,rep,name=fix_car_info" json:"fix_car_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListRoleCarport) Reset()         { *m = ListRoleCarport{} }
func (m *ListRoleCarport) String() string { return proto.CompactTextString(m) }
func (*ListRoleCarport) ProtoMessage()    {}
func (*ListRoleCarport) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{4}
}
func (m *ListRoleCarport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoleCarport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoleCarport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoleCarport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoleCarport.Merge(m, src)
}
func (m *ListRoleCarport) XXX_Size() int {
	return m.Size()
}
func (m *ListRoleCarport) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoleCarport.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoleCarport proto.InternalMessageInfo

func (m *ListRoleCarport) GetCarInfo() []*DbCarInfo {
	if m != nil {
		return m.CarInfo
	}
	return nil
}

func (m *ListRoleCarport) GetFixCarInfo() []*DbFixCar {
	if m != nil {
		return m.FixCarInfo
	}
	return nil
}

// 对汽车使用道具效果列表
type CarEffect struct {
	Id                   *int32   `protobuf:"zigzag32,1,opt,name=id" json:"id,omitempty"`
	Type                 *int32   `protobuf:"zigzag32,2,opt,name=type" json:"type,omitempty"`
	LastTime             *int64   `protobuf:"zigzag64,3,opt,name=last_time" json:"last_time,omitempty"`
	Effect               *int32   `protobuf:"zigzag32,4,opt,name=effect" json:"effect,omitempty"`
	BeginTime            *int64   `protobuf:"zigzag64,5,opt,name=begin_time" json:"begin_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CarEffect) Reset()         { *m = CarEffect{} }
func (m *CarEffect) String() string { return proto.CompactTextString(m) }
func (*CarEffect) ProtoMessage()    {}
func (*CarEffect) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{5}
}
func (m *CarEffect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CarEffect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CarEffect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CarEffect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarEffect.Merge(m, src)
}
func (m *CarEffect) XXX_Size() int {
	return m.Size()
}
func (m *CarEffect) XXX_DiscardUnknown() {
	xxx_messageInfo_CarEffect.DiscardUnknown(m)
}

var xxx_messageInfo_CarEffect proto.InternalMessageInfo

func (m *CarEffect) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CarEffect) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CarEffect) GetLastTime() int64 {
	if m != nil && m.LastTime != nil {
		return *m.LastTime
	}
	return 0
}

func (m *CarEffect) GetEffect() int32 {
	if m != nil && m.Effect != nil {
		return *m.Effect
	}
	return 0
}

func (m *CarEffect) GetBeginTime() int64 {
	if m != nil && m.BeginTime != nil {
		return *m.BeginTime
	}
	return 0
}

// 停车位的车信息
type ParkCar struct {
	RoleIndex            *int64        `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	NickName             []byte        `protobuf:"bytes,2,opt,name=nick_name" json:"nick_name,omitempty"`
	EffectTime           *int32        `protobuf:"zigzag32,3,opt,name=effect_time" json:"effect_time,omitempty"`
	BeginTimestamp       *int64        `protobuf:"zigzag64,4,opt,name=begin_timestamp" json:"begin_timestamp,omitempty"`
	ParkTime             *int64        `protobuf:"zigzag64,5,opt,name=park_time" json:"park_time,omitempty"`
	EndTimestamp         *int64        `protobuf:"zigzag64,6,opt,name=end_timestamp" json:"end_timestamp,omitempty"`
	EffectPercent        *float32      `protobuf:"fixed32,7,opt,name=effect_percent" json:"effect_percent,omitempty"`
	BenefitTime          *float32      `protobuf:"fixed32,8,opt,name=benefit_time" json:"benefit_time,omitempty"`
	OutputItem           []*ItemConfig `protobuf:"bytes,9,rep,name=output_item" json:"output_item,omitempty"`
	GoodEffect           []*CarEffect  `protobuf:"bytes,10,rep,name=good_effect" json:"good_effect,omitempty"`
	BadEffect            []*CarEffect  `protobuf:"bytes,11,rep,name=bad_effect" json:"bad_effect,omitempty"`
	Car                  *DbCarInfo    `protobuf:"bytes,12,opt,name=car" json:"car,omitempty"`
	ExtraArmor           *int32        `protobuf:"zigzag32,13,opt,name=extra_armor" json:"extra_armor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ParkCar) Reset()         { *m = ParkCar{} }
func (m *ParkCar) String() string { return proto.CompactTextString(m) }
func (*ParkCar) ProtoMessage()    {}
func (*ParkCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{6}
}
func (m *ParkCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParkCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParkCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParkCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParkCar.Merge(m, src)
}
func (m *ParkCar) XXX_Size() int {
	return m.Size()
}
func (m *ParkCar) XXX_DiscardUnknown() {
	xxx_messageInfo_ParkCar.DiscardUnknown(m)
}

var xxx_messageInfo_ParkCar proto.InternalMessageInfo

func (m *ParkCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *ParkCar) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *ParkCar) GetEffectTime() int32 {
	if m != nil && m.EffectTime != nil {
		return *m.EffectTime
	}
	return 0
}

func (m *ParkCar) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *ParkCar) GetParkTime() int64 {
	if m != nil && m.ParkTime != nil {
		return *m.ParkTime
	}
	return 0
}

func (m *ParkCar) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *ParkCar) GetEffectPercent() float32 {
	if m != nil && m.EffectPercent != nil {
		return *m.EffectPercent
	}
	return 0
}

func (m *ParkCar) GetBenefitTime() float32 {
	if m != nil && m.BenefitTime != nil {
		return *m.BenefitTime
	}
	return 0
}

func (m *ParkCar) GetOutputItem() []*ItemConfig {
	if m != nil {
		return m.OutputItem
	}
	return nil
}

func (m *ParkCar) GetGoodEffect() []*CarEffect {
	if m != nil {
		return m.GoodEffect
	}
	return nil
}

func (m *ParkCar) GetBadEffect() []*CarEffect {
	if m != nil {
		return m.BadEffect
	}
	return nil
}

func (m *ParkCar) GetCar() *DbCarInfo {
	if m != nil {
		return m.Car
	}
	return nil
}

func (m *ParkCar) GetExtraArmor() int32 {
	if m != nil && m.ExtraArmor != nil {
		return *m.ExtraArmor
	}
	return 0
}

// 车位信息
type ParkLot struct {
	PortId               *int32             `protobuf:"zigzag32,1,opt,name=port_id" json:"port_id,omitempty"`
	Status               *E_PARK_LOT_STATUS `protobuf:"varint,2,opt,name=status,enum=pbd.E_PARK_LOT_STATUS" json:"status,omitempty"`
	ProtectTime          *int32             `protobuf:"zigzag32,3,opt,name=protect_time" json:"protect_time,omitempty"`
	ActTimestamp         *int64             `protobuf:"zigzag64,4,opt,name=act_timestamp" json:"act_timestamp,omitempty"`
	ActorIndex           *int64             `protobuf:"zigzag64,5,opt,name=actor_index" json:"actor_index,omitempty"`
	CarInfo              *ParkCar           `protobuf:"bytes,6,opt,name=car_info" json:"car_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ParkLot) Reset()         { *m = ParkLot{} }
func (m *ParkLot) String() string { return proto.CompactTextString(m) }
func (*ParkLot) ProtoMessage()    {}
func (*ParkLot) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{7}
}
func (m *ParkLot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParkLot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParkLot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParkLot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParkLot.Merge(m, src)
}
func (m *ParkLot) XXX_Size() int {
	return m.Size()
}
func (m *ParkLot) XXX_DiscardUnknown() {
	xxx_messageInfo_ParkLot.DiscardUnknown(m)
}

var xxx_messageInfo_ParkLot proto.InternalMessageInfo

func (m *ParkLot) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *ParkLot) GetStatus() E_PARK_LOT_STATUS {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return E_PARK_LOT_STATUS_EPLS_NO_PARK
}

func (m *ParkLot) GetProtectTime() int32 {
	if m != nil && m.ProtectTime != nil {
		return *m.ProtectTime
	}
	return 0
}

func (m *ParkLot) GetActTimestamp() int64 {
	if m != nil && m.ActTimestamp != nil {
		return *m.ActTimestamp
	}
	return 0
}

func (m *ParkLot) GetActorIndex() int64 {
	if m != nil && m.ActorIndex != nil {
		return *m.ActorIndex
	}
	return 0
}

func (m *ParkLot) GetCarInfo() *ParkCar {
	if m != nil {
		return m.CarInfo
	}
	return nil
}

// 整个停车场管理信息(管理信息放在管理亭中:0号车位)
type ParkLotManagerInfo struct {
	TotalParkCarNum       *int32   `protobuf:"zigzag32,1,opt,name=total_park_car_num" json:"total_park_car_num,omitempty"`
	TotalParkPlayerNum    *int32   `protobuf:"zigzag32,2,opt,name=total_park_player_num" json:"total_park_player_num,omitempty"`
	TotalEnterPlayerNum   *int32   `protobuf:"zigzag32,3,opt,name=total_enter_player_num" json:"total_enter_player_num,omitempty"`
	TotalSystemCarNum     *int32   `protobuf:"zigzag32,4,opt,name=total_system_car_num" json:"total_system_car_num,omitempty"`
	NextAutoParkTimestamp *int64   `protobuf:"zigzag64,5,opt,name=next_auto_park_timestamp" json:"next_auto_park_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ParkLotManagerInfo) Reset()         { *m = ParkLotManagerInfo{} }
func (m *ParkLotManagerInfo) String() string { return proto.CompactTextString(m) }
func (*ParkLotManagerInfo) ProtoMessage()    {}
func (*ParkLotManagerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{8}
}
func (m *ParkLotManagerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParkLotManagerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParkLotManagerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParkLotManagerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParkLotManagerInfo.Merge(m, src)
}
func (m *ParkLotManagerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ParkLotManagerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ParkLotManagerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ParkLotManagerInfo proto.InternalMessageInfo

func (m *ParkLotManagerInfo) GetTotalParkCarNum() int32 {
	if m != nil && m.TotalParkCarNum != nil {
		return *m.TotalParkCarNum
	}
	return 0
}

func (m *ParkLotManagerInfo) GetTotalParkPlayerNum() int32 {
	if m != nil && m.TotalParkPlayerNum != nil {
		return *m.TotalParkPlayerNum
	}
	return 0
}

func (m *ParkLotManagerInfo) GetTotalEnterPlayerNum() int32 {
	if m != nil && m.TotalEnterPlayerNum != nil {
		return *m.TotalEnterPlayerNum
	}
	return 0
}

func (m *ParkLotManagerInfo) GetTotalSystemCarNum() int32 {
	if m != nil && m.TotalSystemCarNum != nil {
		return *m.TotalSystemCarNum
	}
	return 0
}

func (m *ParkLotManagerInfo) GetNextAutoParkTimestamp() int64 {
	if m != nil && m.NextAutoParkTimestamp != nil {
		return *m.NextAutoParkTimestamp
	}
	return 0
}

// 车辆概况信息结构
type RoleCarLog struct {
	ActorIndex           *int64          `protobuf:"zigzag64,1,opt,name=actor_index" json:"actor_index,omitempty"`
	NickName             []byte          `protobuf:"bytes,2,opt,name=nick_name" json:"nick_name,omitempty"`
	ActType              *E_ACT_CAR_TYPE `protobuf:"varint,3,opt,name=act_type,enum=pbd.E_ACT_CAR_TYPE" json:"act_type,omitempty"`
	ActionId             *int32          `protobuf:"zigzag32,4,opt,name=action_id" json:"action_id,omitempty"`
	CarId                *int32          `protobuf:"zigzag32,5,opt,name=car_id" json:"car_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RoleCarLog) Reset()         { *m = RoleCarLog{} }
func (m *RoleCarLog) String() string { return proto.CompactTextString(m) }
func (*RoleCarLog) ProtoMessage()    {}
func (*RoleCarLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{9}
}
func (m *RoleCarLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleCarLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleCarLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleCarLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleCarLog.Merge(m, src)
}
func (m *RoleCarLog) XXX_Size() int {
	return m.Size()
}
func (m *RoleCarLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleCarLog.DiscardUnknown(m)
}

var xxx_messageInfo_RoleCarLog proto.InternalMessageInfo

func (m *RoleCarLog) GetActorIndex() int64 {
	if m != nil && m.ActorIndex != nil {
		return *m.ActorIndex
	}
	return 0
}

func (m *RoleCarLog) GetNickName() []byte {
	if m != nil {
		return m.NickName
	}
	return nil
}

func (m *RoleCarLog) GetActType() E_ACT_CAR_TYPE {
	if m != nil && m.ActType != nil {
		return *m.ActType
	}
	return E_ACT_CAR_TYPE_EACT_DESTORY
}

func (m *RoleCarLog) GetActionId() int32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *RoleCarLog) GetCarId() int32 {
	if m != nil && m.CarId != nil {
		return *m.CarId
	}
	return 0
}

// 抢车位商店物品信息
type ParkGoodsInfo struct {
	ItemId               *int32   `protobuf:"zigzag32,1,opt,name=item_id" json:"item_id,omitempty"`
	Count                *int32   `protobuf:"zigzag32,2,opt,name=count" json:"count,omitempty"`
	Currency             *int32   `protobuf:"zigzag32,3,opt,name=currency" json:"currency,omitempty"`
	Price                *int32   `protobuf:"zigzag32,4,opt,name=price" json:"price,omitempty"`
	IsBuy                *bool    `protobuf:"varint,5,opt,name=is_buy" json:"is_buy,omitempty"`
	ShopIndex            *int32   `protobuf:"zigzag32,6,opt,name=shop_index" json:"shop_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParkGoodsInfo) Reset()         { *m = ParkGoodsInfo{} }
func (m *ParkGoodsInfo) String() string { return proto.CompactTextString(m) }
func (*ParkGoodsInfo) ProtoMessage()    {}
func (*ParkGoodsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{10}
}
func (m *ParkGoodsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParkGoodsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParkGoodsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParkGoodsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParkGoodsInfo.Merge(m, src)
}
func (m *ParkGoodsInfo) XXX_Size() int {
	return m.Size()
}
func (m *ParkGoodsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ParkGoodsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ParkGoodsInfo proto.InternalMessageInfo

func (m *ParkGoodsInfo) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ParkGoodsInfo) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *ParkGoodsInfo) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

func (m *ParkGoodsInfo) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *ParkGoodsInfo) GetIsBuy() bool {
	if m != nil && m.IsBuy != nil {
		return *m.IsBuy
	}
	return false
}

func (m *ParkGoodsInfo) GetShopIndex() int32 {
	if m != nil && m.ShopIndex != nil {
		return *m.ShopIndex
	}
	return 0
}

// 推送当前停车场车位信息
type S2C_ParkLotInfo struct {
	LotList              []*ParkLot `protobuf:"bytes,1,rep,name=lot_list" json:"lot_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2C_ParkLotInfo) Reset()         { *m = S2C_ParkLotInfo{} }
func (m *S2C_ParkLotInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_ParkLotInfo) ProtoMessage()    {}
func (*S2C_ParkLotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{11}
}
func (m *S2C_ParkLotInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ParkLotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ParkLotInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ParkLotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ParkLotInfo.Merge(m, src)
}
func (m *S2C_ParkLotInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ParkLotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ParkLotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ParkLotInfo proto.InternalMessageInfo

func (m *S2C_ParkLotInfo) GetLotList() []*ParkLot {
	if m != nil {
		return m.LotList
	}
	return nil
}

// 切换到停车场场景
type C2S_ReadyEnterParkScene struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32   `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	MapId                *int32   `protobuf:"zigzag32,3,opt,name=map_id" json:"map_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ReadyEnterParkScene) Reset()         { *m = C2S_ReadyEnterParkScene{} }
func (m *C2S_ReadyEnterParkScene) String() string { return proto.CompactTextString(m) }
func (*C2S_ReadyEnterParkScene) ProtoMessage()    {}
func (*C2S_ReadyEnterParkScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{12}
}
func (m *C2S_ReadyEnterParkScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ReadyEnterParkScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ReadyEnterParkScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ReadyEnterParkScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ReadyEnterParkScene.Merge(m, src)
}
func (m *C2S_ReadyEnterParkScene) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ReadyEnterParkScene) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ReadyEnterParkScene.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ReadyEnterParkScene proto.InternalMessageInfo

func (m *C2S_ReadyEnterParkScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ReadyEnterParkScene) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *C2S_ReadyEnterParkScene) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

type S2S_ReadyEnterParkScene struct {
	RoleIndex            *int64          `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	SceneId              *int32          `protobuf:"zigzag32,2,opt,name=scene_id" json:"scene_id,omitempty"`
	MapId                *int32          `protobuf:"zigzag32,3,opt,name=map_id" json:"map_id,omitempty"`
	SceneType            *E_SCENE_TYPE   `protobuf:"varint,4,opt,name=scene_type,enum=pbd.E_SCENE_TYPE" json:"scene_type,omitempty"`
	RetUnitindex         *int64          `protobuf:"zigzag64,5,opt,name=ret_unitindex" json:"ret_unitindex,omitempty"`
	RetIntaddr           *int64          `protobuf:"zigzag64,6,opt,name=ret_intaddr" json:"ret_intaddr,omitempty"`
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,7,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2S_ReadyEnterParkScene) Reset()         { *m = S2S_ReadyEnterParkScene{} }
func (m *S2S_ReadyEnterParkScene) String() string { return proto.CompactTextString(m) }
func (*S2S_ReadyEnterParkScene) ProtoMessage()    {}
func (*S2S_ReadyEnterParkScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{13}
}
func (m *S2S_ReadyEnterParkScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2S_ReadyEnterParkScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2S_ReadyEnterParkScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2S_ReadyEnterParkScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2S_ReadyEnterParkScene.Merge(m, src)
}
func (m *S2S_ReadyEnterParkScene) XXX_Size() int {
	return m.Size()
}
func (m *S2S_ReadyEnterParkScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2S_ReadyEnterParkScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2S_ReadyEnterParkScene proto.InternalMessageInfo

const Default_S2S_ReadyEnterParkScene_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2S_ReadyEnterParkScene) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *S2S_ReadyEnterParkScene) GetSceneId() int32 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

func (m *S2S_ReadyEnterParkScene) GetMapId() int32 {
	if m != nil && m.MapId != nil {
		return *m.MapId
	}
	return 0
}

func (m *S2S_ReadyEnterParkScene) GetSceneType() E_SCENE_TYPE {
	if m != nil && m.SceneType != nil {
		return *m.SceneType
	}
	return E_SCENE_TYPE_EST_CITY
}

func (m *S2S_ReadyEnterParkScene) GetRetUnitindex() int64 {
	if m != nil && m.RetUnitindex != nil {
		return *m.RetUnitindex
	}
	return 0
}

func (m *S2S_ReadyEnterParkScene) GetRetIntaddr() int64 {
	if m != nil && m.RetIntaddr != nil {
		return *m.RetIntaddr
	}
	return 0
}

func (m *S2S_ReadyEnterParkScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2S_ReadyEnterParkScene_RetCode
}

type S2C_ReadyEnterParkScene struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ReadyEnterParkScene) Reset()         { *m = S2C_ReadyEnterParkScene{} }
func (m *S2C_ReadyEnterParkScene) String() string { return proto.CompactTextString(m) }
func (*S2C_ReadyEnterParkScene) ProtoMessage()    {}
func (*S2C_ReadyEnterParkScene) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{14}
}
func (m *S2C_ReadyEnterParkScene) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ReadyEnterParkScene) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ReadyEnterParkScene.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ReadyEnterParkScene) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ReadyEnterParkScene.Merge(m, src)
}
func (m *S2C_ReadyEnterParkScene) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ReadyEnterParkScene) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ReadyEnterParkScene.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ReadyEnterParkScene proto.InternalMessageInfo

const Default_S2C_ReadyEnterParkScene_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_ReadyEnterParkScene) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_ReadyEnterParkScene_RetCode
}

type C2S_ParkCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,3,opt,name=port_id" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ParkCar) Reset()         { *m = C2S_ParkCar{} }
func (m *C2S_ParkCar) String() string { return proto.CompactTextString(m) }
func (*C2S_ParkCar) ProtoMessage()    {}
func (*C2S_ParkCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{15}
}
func (m *C2S_ParkCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ParkCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ParkCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ParkCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ParkCar.Merge(m, src)
}
func (m *C2S_ParkCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ParkCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ParkCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ParkCar proto.InternalMessageInfo

func (m *C2S_ParkCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_ParkCar) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

func (m *C2S_ParkCar) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

type S2C_ParkCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CarIndex             *int64          `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ParkCar) Reset()         { *m = S2C_ParkCar{} }
func (m *S2C_ParkCar) String() string { return proto.CompactTextString(m) }
func (*S2C_ParkCar) ProtoMessage()    {}
func (*S2C_ParkCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{16}
}
func (m *S2C_ParkCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ParkCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ParkCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ParkCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ParkCar.Merge(m, src)
}
func (m *S2C_ParkCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ParkCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ParkCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ParkCar proto.InternalMessageInfo

func (m *S2C_ParkCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_ParkCar) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

// 对自己的车加道具
type C2S_UseItemSelfCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	ActionId             *int32   `protobuf:"zigzag32,3,opt,name=action_id" json:"action_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_UseItemSelfCar) Reset()         { *m = C2S_UseItemSelfCar{} }
func (m *C2S_UseItemSelfCar) String() string { return proto.CompactTextString(m) }
func (*C2S_UseItemSelfCar) ProtoMessage()    {}
func (*C2S_UseItemSelfCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{17}
}
func (m *C2S_UseItemSelfCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UseItemSelfCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UseItemSelfCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_UseItemSelfCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UseItemSelfCar.Merge(m, src)
}
func (m *C2S_UseItemSelfCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UseItemSelfCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UseItemSelfCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UseItemSelfCar proto.InternalMessageInfo

func (m *C2S_UseItemSelfCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_UseItemSelfCar) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *C2S_UseItemSelfCar) GetActionId() int32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

type S2C_UseItemSelfCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_UseItemSelfCar) Reset()         { *m = S2C_UseItemSelfCar{} }
func (m *S2C_UseItemSelfCar) String() string { return proto.CompactTextString(m) }
func (*S2C_UseItemSelfCar) ProtoMessage()    {}
func (*S2C_UseItemSelfCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{18}
}
func (m *S2C_UseItemSelfCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UseItemSelfCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UseItemSelfCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_UseItemSelfCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UseItemSelfCar.Merge(m, src)
}
func (m *S2C_UseItemSelfCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UseItemSelfCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UseItemSelfCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UseItemSelfCar proto.InternalMessageInfo

const Default_S2C_UseItemSelfCar_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_UseItemSelfCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_UseItemSelfCar_RetCode
}

// 恶搞请求行动id
type C2S_DestoryAction struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DestoryAction) Reset()         { *m = C2S_DestoryAction{} }
func (m *C2S_DestoryAction) String() string { return proto.CompactTextString(m) }
func (*C2S_DestoryAction) ProtoMessage()    {}
func (*C2S_DestoryAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{19}
}
func (m *C2S_DestoryAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DestoryAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DestoryAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DestoryAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DestoryAction.Merge(m, src)
}
func (m *C2S_DestoryAction) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DestoryAction) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DestoryAction.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DestoryAction proto.InternalMessageInfo

func (m *C2S_DestoryAction) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DestoryAction) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

type S2C_DestoryAction struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	ActionId             *int32          `protobuf:"zigzag32,2,opt,name=action_id" json:"action_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DestoryAction) Reset()         { *m = S2C_DestoryAction{} }
func (m *S2C_DestoryAction) String() string { return proto.CompactTextString(m) }
func (*S2C_DestoryAction) ProtoMessage()    {}
func (*S2C_DestoryAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{20}
}
func (m *S2C_DestoryAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DestoryAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DestoryAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DestoryAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DestoryAction.Merge(m, src)
}
func (m *S2C_DestoryAction) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DestoryAction) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DestoryAction.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DestoryAction proto.InternalMessageInfo

const Default_S2C_DestoryAction_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_DestoryAction) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_DestoryAction_RetCode
}

func (m *S2C_DestoryAction) GetActionId() int32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

// 恶搞指定车位的车
type C2S_DestoryTheCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DestoryTheCar) Reset()         { *m = C2S_DestoryTheCar{} }
func (m *C2S_DestoryTheCar) String() string { return proto.CompactTextString(m) }
func (*C2S_DestoryTheCar) ProtoMessage()    {}
func (*C2S_DestoryTheCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{21}
}
func (m *C2S_DestoryTheCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DestoryTheCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DestoryTheCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DestoryTheCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DestoryTheCar.Merge(m, src)
}
func (m *C2S_DestoryTheCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DestoryTheCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DestoryTheCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DestoryTheCar proto.InternalMessageInfo

func (m *C2S_DestoryTheCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DestoryTheCar) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

// 最终装甲事件
type S2C_FinalArmorEvent struct {
	PortId               *int32   `protobuf:"zigzag32,1,opt,name=port_id" json:"port_id,omitempty"`
	ActionId             *int32   `protobuf:"zigzag32,2,opt,name=action_id" json:"action_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_FinalArmorEvent) Reset()         { *m = S2C_FinalArmorEvent{} }
func (m *S2C_FinalArmorEvent) String() string { return proto.CompactTextString(m) }
func (*S2C_FinalArmorEvent) ProtoMessage()    {}
func (*S2C_FinalArmorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{22}
}
func (m *S2C_FinalArmorEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FinalArmorEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FinalArmorEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FinalArmorEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FinalArmorEvent.Merge(m, src)
}
func (m *S2C_FinalArmorEvent) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FinalArmorEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FinalArmorEvent.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FinalArmorEvent proto.InternalMessageInfo

func (m *S2C_FinalArmorEvent) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *S2C_FinalArmorEvent) GetActionId() int32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

// 客户端上报最终装甲事件结果
type C2S_FinalArmorEventResult struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FinalArmorEventResult) Reset()         { *m = C2S_FinalArmorEventResult{} }
func (m *C2S_FinalArmorEventResult) String() string { return proto.CompactTextString(m) }
func (*C2S_FinalArmorEventResult) ProtoMessage()    {}
func (*C2S_FinalArmorEventResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{23}
}
func (m *C2S_FinalArmorEventResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FinalArmorEventResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FinalArmorEventResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FinalArmorEventResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FinalArmorEventResult.Merge(m, src)
}
func (m *C2S_FinalArmorEventResult) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FinalArmorEventResult) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FinalArmorEventResult.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FinalArmorEventResult proto.InternalMessageInfo

func (m *C2S_FinalArmorEventResult) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FinalArmorEventResult) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

type S2C_DestoryTheCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	PortId               *int32          `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	ActionId             *int32          `protobuf:"zigzag32,3,opt,name=action_id" json:"action_id,omitempty"`
	RewardList           []*ItemConfig   `protobuf:"bytes,4,rep,name=reward_list" json:"reward_list,omitempty"`
	IsOk                 *bool           `protobuf:"varint,5,opt,name=is_ok" json:"is_ok,omitempty"`
	EffectId             *int32          `protobuf:"zigzag32,6,opt,name=effect_id" json:"effect_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DestoryTheCar) Reset()         { *m = S2C_DestoryTheCar{} }
func (m *S2C_DestoryTheCar) String() string { return proto.CompactTextString(m) }
func (*S2C_DestoryTheCar) ProtoMessage()    {}
func (*S2C_DestoryTheCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{24}
}
func (m *S2C_DestoryTheCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DestoryTheCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DestoryTheCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DestoryTheCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DestoryTheCar.Merge(m, src)
}
func (m *S2C_DestoryTheCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DestoryTheCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DestoryTheCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DestoryTheCar proto.InternalMessageInfo

const Default_S2C_DestoryTheCar_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_DestoryTheCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_DestoryTheCar_RetCode
}

func (m *S2C_DestoryTheCar) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *S2C_DestoryTheCar) GetActionId() int32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *S2C_DestoryTheCar) GetRewardList() []*ItemConfig {
	if m != nil {
		return m.RewardList
	}
	return nil
}

func (m *S2C_DestoryTheCar) GetIsOk() bool {
	if m != nil && m.IsOk != nil {
		return *m.IsOk
	}
	return false
}

func (m *S2C_DestoryTheCar) GetEffectId() int32 {
	if m != nil && m.EffectId != nil {
		return *m.EffectId
	}
	return 0
}

// 点赞请求行动id
type C2S_SayYesAction struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SayYesAction) Reset()         { *m = C2S_SayYesAction{} }
func (m *C2S_SayYesAction) String() string { return proto.CompactTextString(m) }
func (*C2S_SayYesAction) ProtoMessage()    {}
func (*C2S_SayYesAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{25}
}
func (m *C2S_SayYesAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SayYesAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SayYesAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SayYesAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SayYesAction.Merge(m, src)
}
func (m *C2S_SayYesAction) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SayYesAction) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SayYesAction.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SayYesAction proto.InternalMessageInfo

func (m *C2S_SayYesAction) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SayYesAction) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

type S2C_SayYesAction struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	ActionId             *int32          `protobuf:"zigzag32,2,opt,name=action_id" json:"action_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SayYesAction) Reset()         { *m = S2C_SayYesAction{} }
func (m *S2C_SayYesAction) String() string { return proto.CompactTextString(m) }
func (*S2C_SayYesAction) ProtoMessage()    {}
func (*S2C_SayYesAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{26}
}
func (m *S2C_SayYesAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SayYesAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SayYesAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SayYesAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SayYesAction.Merge(m, src)
}
func (m *S2C_SayYesAction) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SayYesAction) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SayYesAction.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SayYesAction proto.InternalMessageInfo

const Default_S2C_SayYesAction_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_SayYesAction) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_SayYesAction_RetCode
}

func (m *S2C_SayYesAction) GetActionId() int32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

// 点赞指定车位的车
type C2S_SayYesTheCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_SayYesTheCar) Reset()         { *m = C2S_SayYesTheCar{} }
func (m *C2S_SayYesTheCar) String() string { return proto.CompactTextString(m) }
func (*C2S_SayYesTheCar) ProtoMessage()    {}
func (*C2S_SayYesTheCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{27}
}
func (m *C2S_SayYesTheCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_SayYesTheCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_SayYesTheCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_SayYesTheCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_SayYesTheCar.Merge(m, src)
}
func (m *C2S_SayYesTheCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_SayYesTheCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_SayYesTheCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_SayYesTheCar proto.InternalMessageInfo

func (m *C2S_SayYesTheCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_SayYesTheCar) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

// 时间乱流事件
type S2C_TimeTurbulence struct {
	PortId               *int32   `protobuf:"zigzag32,1,opt,name=port_id" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_TimeTurbulence) Reset()         { *m = S2C_TimeTurbulence{} }
func (m *S2C_TimeTurbulence) String() string { return proto.CompactTextString(m) }
func (*S2C_TimeTurbulence) ProtoMessage()    {}
func (*S2C_TimeTurbulence) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{28}
}
func (m *S2C_TimeTurbulence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TimeTurbulence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TimeTurbulence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TimeTurbulence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TimeTurbulence.Merge(m, src)
}
func (m *S2C_TimeTurbulence) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TimeTurbulence) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TimeTurbulence.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TimeTurbulence proto.InternalMessageInfo

func (m *S2C_TimeTurbulence) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

// 上报时间乱流结果
type C2S_TimeTurbulenceResult struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	PortId               *int32   `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	IsOk                 *bool    `protobuf:"varint,3,opt,name=is_ok" json:"is_ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TimeTurbulenceResult) Reset()         { *m = C2S_TimeTurbulenceResult{} }
func (m *C2S_TimeTurbulenceResult) String() string { return proto.CompactTextString(m) }
func (*C2S_TimeTurbulenceResult) ProtoMessage()    {}
func (*C2S_TimeTurbulenceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{29}
}
func (m *C2S_TimeTurbulenceResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TimeTurbulenceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TimeTurbulenceResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TimeTurbulenceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TimeTurbulenceResult.Merge(m, src)
}
func (m *C2S_TimeTurbulenceResult) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TimeTurbulenceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TimeTurbulenceResult.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TimeTurbulenceResult proto.InternalMessageInfo

func (m *C2S_TimeTurbulenceResult) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TimeTurbulenceResult) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *C2S_TimeTurbulenceResult) GetIsOk() bool {
	if m != nil && m.IsOk != nil {
		return *m.IsOk
	}
	return false
}

type S2C_SayYesTheCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	PortId               *int32          `protobuf:"zigzag32,2,opt,name=port_id" json:"port_id,omitempty"`
	ActionId             *int32          `protobuf:"zigzag32,3,opt,name=action_id" json:"action_id,omitempty"`
	RewardList           []*ItemConfig   `protobuf:"bytes,4,rep,name=reward_list" json:"reward_list,omitempty"`
	IsOk                 *bool           `protobuf:"varint,5,opt,name=is_ok" json:"is_ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_SayYesTheCar) Reset()         { *m = S2C_SayYesTheCar{} }
func (m *S2C_SayYesTheCar) String() string { return proto.CompactTextString(m) }
func (*S2C_SayYesTheCar) ProtoMessage()    {}
func (*S2C_SayYesTheCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{30}
}
func (m *S2C_SayYesTheCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_SayYesTheCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_SayYesTheCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_SayYesTheCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_SayYesTheCar.Merge(m, src)
}
func (m *S2C_SayYesTheCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_SayYesTheCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_SayYesTheCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_SayYesTheCar proto.InternalMessageInfo

const Default_S2C_SayYesTheCar_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_SayYesTheCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_SayYesTheCar_RetCode
}

func (m *S2C_SayYesTheCar) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *S2C_SayYesTheCar) GetActionId() int32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *S2C_SayYesTheCar) GetRewardList() []*ItemConfig {
	if m != nil {
		return m.RewardList
	}
	return nil
}

func (m *S2C_SayYesTheCar) GetIsOk() bool {
	if m != nil && m.IsOk != nil {
		return *m.IsOk
	}
	return false
}

// 同步老司机信息
type S2C_OldDriver struct {
	Level                *int32   `protobuf:"zigzag32,1,opt,name=level" json:"level,omitempty"`
	Exp                  *int32   `protobuf:"zigzag32,2,opt,name=exp" json:"exp,omitempty"`
	DiffExp              *int32   `protobuf:"zigzag32,3,opt,name=diff_exp" json:"diff_exp,omitempty"`
	PortNum              *int32   `protobuf:"zigzag32,4,opt,name=port_num" json:"port_num,omitempty"`
	ActionedCount        *int32   `protobuf:"zigzag32,5,opt,name=actioned_count" json:"actioned_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2C_OldDriver) Reset()         { *m = S2C_OldDriver{} }
func (m *S2C_OldDriver) String() string { return proto.CompactTextString(m) }
func (*S2C_OldDriver) ProtoMessage()    {}
func (*S2C_OldDriver) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{31}
}
func (m *S2C_OldDriver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_OldDriver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_OldDriver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_OldDriver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_OldDriver.Merge(m, src)
}
func (m *S2C_OldDriver) XXX_Size() int {
	return m.Size()
}
func (m *S2C_OldDriver) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_OldDriver.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_OldDriver proto.InternalMessageInfo

func (m *S2C_OldDriver) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *S2C_OldDriver) GetExp() int32 {
	if m != nil && m.Exp != nil {
		return *m.Exp
	}
	return 0
}

func (m *S2C_OldDriver) GetDiffExp() int32 {
	if m != nil && m.DiffExp != nil {
		return *m.DiffExp
	}
	return 0
}

func (m *S2C_OldDriver) GetPortNum() int32 {
	if m != nil && m.PortNum != nil {
		return *m.PortNum
	}
	return 0
}

func (m *S2C_OldDriver) GetActionedCount() int32 {
	if m != nil && m.ActionedCount != nil {
		return *m.ActionedCount
	}
	return 0
}

// 扩充车库(一次一个)
type C2S_ExpandCarport struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ExpandCarport) Reset()         { *m = C2S_ExpandCarport{} }
func (m *C2S_ExpandCarport) String() string { return proto.CompactTextString(m) }
func (*C2S_ExpandCarport) ProtoMessage()    {}
func (*C2S_ExpandCarport) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{32}
}
func (m *C2S_ExpandCarport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ExpandCarport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ExpandCarport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ExpandCarport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ExpandCarport.Merge(m, src)
}
func (m *C2S_ExpandCarport) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ExpandCarport) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ExpandCarport.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ExpandCarport proto.InternalMessageInfo

func (m *C2S_ExpandCarport) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ExpandCarport struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ExpandCarport) Reset()         { *m = S2C_ExpandCarport{} }
func (m *S2C_ExpandCarport) String() string { return proto.CompactTextString(m) }
func (*S2C_ExpandCarport) ProtoMessage()    {}
func (*S2C_ExpandCarport) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{33}
}
func (m *S2C_ExpandCarport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ExpandCarport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ExpandCarport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ExpandCarport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ExpandCarport.Merge(m, src)
}
func (m *S2C_ExpandCarport) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ExpandCarport) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ExpandCarport.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ExpandCarport proto.InternalMessageInfo

const Default_S2C_ExpandCarport_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_ExpandCarport) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_ExpandCarport_RetCode
}

// 扩充修理车位
type C2S_ExpandFixCarport struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_ExpandFixCarport) Reset()         { *m = C2S_ExpandFixCarport{} }
func (m *C2S_ExpandFixCarport) String() string { return proto.CompactTextString(m) }
func (*C2S_ExpandFixCarport) ProtoMessage()    {}
func (*C2S_ExpandFixCarport) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{34}
}
func (m *C2S_ExpandFixCarport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_ExpandFixCarport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_ExpandFixCarport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_ExpandFixCarport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_ExpandFixCarport.Merge(m, src)
}
func (m *C2S_ExpandFixCarport) XXX_Size() int {
	return m.Size()
}
func (m *C2S_ExpandFixCarport) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_ExpandFixCarport.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_ExpandFixCarport proto.InternalMessageInfo

func (m *C2S_ExpandFixCarport) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_ExpandFixCarport struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_ExpandFixCarport) Reset()         { *m = S2C_ExpandFixCarport{} }
func (m *S2C_ExpandFixCarport) String() string { return proto.CompactTextString(m) }
func (*S2C_ExpandFixCarport) ProtoMessage()    {}
func (*S2C_ExpandFixCarport) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{35}
}
func (m *S2C_ExpandFixCarport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ExpandFixCarport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ExpandFixCarport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ExpandFixCarport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ExpandFixCarport.Merge(m, src)
}
func (m *S2C_ExpandFixCarport) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ExpandFixCarport) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ExpandFixCarport.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ExpandFixCarport proto.InternalMessageInfo

const Default_S2C_ExpandFixCarport_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_ExpandFixCarport) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_ExpandFixCarport_RetCode
}

// 修理指定车
type C2S_FixCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FixCar) Reset()         { *m = C2S_FixCar{} }
func (m *C2S_FixCar) String() string { return proto.CompactTextString(m) }
func (*C2S_FixCar) ProtoMessage()    {}
func (*C2S_FixCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{36}
}
func (m *C2S_FixCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FixCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FixCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FixCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FixCar.Merge(m, src)
}
func (m *C2S_FixCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FixCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FixCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FixCar proto.InternalMessageInfo

func (m *C2S_FixCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FixCar) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

type S2C_FixCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	Car                  *DbFixCar       `protobuf:"bytes,2,opt,name=car" json:"car,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_FixCar) Reset()         { *m = S2C_FixCar{} }
func (m *S2C_FixCar) String() string { return proto.CompactTextString(m) }
func (*S2C_FixCar) ProtoMessage()    {}
func (*S2C_FixCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{37}
}
func (m *S2C_FixCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FixCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FixCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FixCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FixCar.Merge(m, src)
}
func (m *S2C_FixCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FixCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FixCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FixCar proto.InternalMessageInfo

const Default_S2C_FixCar_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_FixCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_FixCar_RetCode
}

func (m *S2C_FixCar) GetCar() *DbFixCar {
	if m != nil {
		return m.Car
	}
	return nil
}

// 快速修理车(使用元宝)
type C2S_FastFixRoleCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FastFixRoleCar) Reset()         { *m = C2S_FastFixRoleCar{} }
func (m *C2S_FastFixRoleCar) String() string { return proto.CompactTextString(m) }
func (*C2S_FastFixRoleCar) ProtoMessage()    {}
func (*C2S_FastFixRoleCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{38}
}
func (m *C2S_FastFixRoleCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FastFixRoleCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FastFixRoleCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FastFixRoleCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FastFixRoleCar.Merge(m, src)
}
func (m *C2S_FastFixRoleCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FastFixRoleCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FastFixRoleCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FastFixRoleCar proto.InternalMessageInfo

func (m *C2S_FastFixRoleCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FastFixRoleCar) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

type S2C_FastFixRoleCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE,def=0" json:"ret_code,omitempty"`
	Car                  *DbCarInfo      `protobuf:"bytes,2,opt,name=car" json:"car,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_FastFixRoleCar) Reset()         { *m = S2C_FastFixRoleCar{} }
func (m *S2C_FastFixRoleCar) String() string { return proto.CompactTextString(m) }
func (*S2C_FastFixRoleCar) ProtoMessage()    {}
func (*S2C_FastFixRoleCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{39}
}
func (m *S2C_FastFixRoleCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FastFixRoleCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FastFixRoleCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FastFixRoleCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FastFixRoleCar.Merge(m, src)
}
func (m *S2C_FastFixRoleCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FastFixRoleCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FastFixRoleCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FastFixRoleCar proto.InternalMessageInfo

const Default_S2C_FastFixRoleCar_RetCode E_MSG_RET_CODE = E_MSG_RET_CODE_Msg_Ret_Code_Unknow

func (m *S2C_FastFixRoleCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return Default_S2C_FastFixRoleCar_RetCode
}

func (m *S2C_FastFixRoleCar) GetCar() *DbCarInfo {
	if m != nil {
		return m.Car
	}
	return nil
}

// 使用时间水晶修理车(减少cd时间)
type C2S_FixRoleCarByCrtStal struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	CrystalNum           *int32   `protobuf:"zigzag32,3,opt,name=crystal_num" json:"crystal_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_FixRoleCarByCrtStal) Reset()         { *m = C2S_FixRoleCarByCrtStal{} }
func (m *C2S_FixRoleCarByCrtStal) String() string { return proto.CompactTextString(m) }
func (*C2S_FixRoleCarByCrtStal) ProtoMessage()    {}
func (*C2S_FixRoleCarByCrtStal) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{40}
}
func (m *C2S_FixRoleCarByCrtStal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_FixRoleCarByCrtStal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_FixRoleCarByCrtStal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_FixRoleCarByCrtStal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_FixRoleCarByCrtStal.Merge(m, src)
}
func (m *C2S_FixRoleCarByCrtStal) XXX_Size() int {
	return m.Size()
}
func (m *C2S_FixRoleCarByCrtStal) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_FixRoleCarByCrtStal.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_FixRoleCarByCrtStal proto.InternalMessageInfo

func (m *C2S_FixRoleCarByCrtStal) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_FixRoleCarByCrtStal) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

func (m *C2S_FixRoleCarByCrtStal) GetCrystalNum() int32 {
	if m != nil && m.CrystalNum != nil {
		return *m.CrystalNum
	}
	return 0
}

type S2C_FixRoleCarByCrtStal struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	NeedNum              *int32          `protobuf:"zigzag32,2,opt,name=need_num" json:"need_num,omitempty"`
	Car                  *DbFixCar       `protobuf:"bytes,3,opt,name=car" json:"car,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_FixRoleCarByCrtStal) Reset()         { *m = S2C_FixRoleCarByCrtStal{} }
func (m *S2C_FixRoleCarByCrtStal) String() string { return proto.CompactTextString(m) }
func (*S2C_FixRoleCarByCrtStal) ProtoMessage()    {}
func (*S2C_FixRoleCarByCrtStal) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{41}
}
func (m *S2C_FixRoleCarByCrtStal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_FixRoleCarByCrtStal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_FixRoleCarByCrtStal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_FixRoleCarByCrtStal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_FixRoleCarByCrtStal.Merge(m, src)
}
func (m *S2C_FixRoleCarByCrtStal) XXX_Size() int {
	return m.Size()
}
func (m *S2C_FixRoleCarByCrtStal) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_FixRoleCarByCrtStal.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_FixRoleCarByCrtStal proto.InternalMessageInfo

func (m *S2C_FixRoleCarByCrtStal) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_FixRoleCarByCrtStal) GetNeedNum() int32 {
	if m != nil && m.NeedNum != nil {
		return *m.NeedNum
	}
	return 0
}

func (m *S2C_FixRoleCarByCrtStal) GetCar() *DbFixCar {
	if m != nil {
		return m.Car
	}
	return nil
}

// 分解车
type C2S_DecomposeCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_DecomposeCar) Reset()         { *m = C2S_DecomposeCar{} }
func (m *C2S_DecomposeCar) String() string { return proto.CompactTextString(m) }
func (*C2S_DecomposeCar) ProtoMessage()    {}
func (*C2S_DecomposeCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{42}
}
func (m *C2S_DecomposeCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DecomposeCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DecomposeCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_DecomposeCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DecomposeCar.Merge(m, src)
}
func (m *C2S_DecomposeCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DecomposeCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DecomposeCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DecomposeCar proto.InternalMessageInfo

func (m *C2S_DecomposeCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_DecomposeCar) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

type S2C_DecomposeCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	CarIndex             *int64          `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_DecomposeCar) Reset()         { *m = S2C_DecomposeCar{} }
func (m *S2C_DecomposeCar) String() string { return proto.CompactTextString(m) }
func (*S2C_DecomposeCar) ProtoMessage()    {}
func (*S2C_DecomposeCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{43}
}
func (m *S2C_DecomposeCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DecomposeCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DecomposeCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_DecomposeCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DecomposeCar.Merge(m, src)
}
func (m *S2C_DecomposeCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DecomposeCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DecomposeCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DecomposeCar proto.InternalMessageInfo

func (m *S2C_DecomposeCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_DecomposeCar) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

// 从车辆动态中取车
type C2S_TakeCar struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_TakeCar) Reset()         { *m = C2S_TakeCar{} }
func (m *C2S_TakeCar) String() string { return proto.CompactTextString(m) }
func (*C2S_TakeCar) ProtoMessage()    {}
func (*C2S_TakeCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{44}
}
func (m *C2S_TakeCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TakeCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TakeCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TakeCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TakeCar.Merge(m, src)
}
func (m *C2S_TakeCar) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TakeCar) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TakeCar.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TakeCar proto.InternalMessageInfo

func (m *C2S_TakeCar) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_TakeCar) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

type S2C_TakeCar struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Car                  *DbCarInfo      `protobuf:"bytes,2,opt,name=car" json:"car,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_TakeCar) Reset()         { *m = S2C_TakeCar{} }
func (m *S2C_TakeCar) String() string { return proto.CompactTextString(m) }
func (*S2C_TakeCar) ProtoMessage()    {}
func (*S2C_TakeCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{45}
}
func (m *S2C_TakeCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TakeCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TakeCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TakeCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TakeCar.Merge(m, src)
}
func (m *S2C_TakeCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TakeCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TakeCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TakeCar proto.InternalMessageInfo

func (m *S2C_TakeCar) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_TakeCar) GetCar() *DbCarInfo {
	if m != nil {
		return m.Car
	}
	return nil
}

// 请求自己的概况信息
type C2S_AskCarLog struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AskCarLog) Reset()         { *m = C2S_AskCarLog{} }
func (m *C2S_AskCarLog) String() string { return proto.CompactTextString(m) }
func (*C2S_AskCarLog) ProtoMessage()    {}
func (*C2S_AskCarLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{46}
}
func (m *C2S_AskCarLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AskCarLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AskCarLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AskCarLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AskCarLog.Merge(m, src)
}
func (m *C2S_AskCarLog) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AskCarLog) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AskCarLog.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AskCarLog proto.InternalMessageInfo

func (m *C2S_AskCarLog) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_AskCarLog struct {
	LogList              []*RoleCarLog `protobuf:"bytes,1,rep,name=log_list" json:"log_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *S2C_AskCarLog) Reset()         { *m = S2C_AskCarLog{} }
func (m *S2C_AskCarLog) String() string { return proto.CompactTextString(m) }
func (*S2C_AskCarLog) ProtoMessage()    {}
func (*S2C_AskCarLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{47}
}
func (m *S2C_AskCarLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AskCarLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AskCarLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AskCarLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AskCarLog.Merge(m, src)
}
func (m *S2C_AskCarLog) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AskCarLog) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AskCarLog.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AskCarLog proto.InternalMessageInfo

func (m *S2C_AskCarLog) GetLogList() []*RoleCarLog {
	if m != nil {
		return m.LogList
	}
	return nil
}

// 车辆动态信息
type C2S_AskCarParkInfo struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_AskCarParkInfo) Reset()         { *m = C2S_AskCarParkInfo{} }
func (m *C2S_AskCarParkInfo) String() string { return proto.CompactTextString(m) }
func (*C2S_AskCarParkInfo) ProtoMessage()    {}
func (*C2S_AskCarParkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{48}
}
func (m *C2S_AskCarParkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_AskCarParkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_AskCarParkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_AskCarParkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_AskCarParkInfo.Merge(m, src)
}
func (m *C2S_AskCarParkInfo) XXX_Size() int {
	return m.Size()
}
func (m *C2S_AskCarParkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_AskCarParkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_AskCarParkInfo proto.InternalMessageInfo

func (m *C2S_AskCarParkInfo) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

type S2C_AskCarParkInfo struct {
	CarList              []*ParkCar `protobuf:"bytes,1,rep,name=car_list" json:"car_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2C_AskCarParkInfo) Reset()         { *m = S2C_AskCarParkInfo{} }
func (m *S2C_AskCarParkInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_AskCarParkInfo) ProtoMessage()    {}
func (*S2C_AskCarParkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{49}
}
func (m *S2C_AskCarParkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AskCarParkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AskCarParkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AskCarParkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AskCarParkInfo.Merge(m, src)
}
func (m *S2C_AskCarParkInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AskCarParkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AskCarParkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AskCarParkInfo proto.InternalMessageInfo

func (m *S2C_AskCarParkInfo) GetCarList() []*ParkCar {
	if m != nil {
		return m.CarList
	}
	return nil
}

// 购买抢车位商店的商品
type C2S_BuyParkShopGood struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	ShopIndex            *int32   `protobuf:"zigzag32,2,opt,name=shop_index" json:"shop_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_BuyParkShopGood) Reset()         { *m = C2S_BuyParkShopGood{} }
func (m *C2S_BuyParkShopGood) String() string { return proto.CompactTextString(m) }
func (*C2S_BuyParkShopGood) ProtoMessage()    {}
func (*C2S_BuyParkShopGood) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{50}
}
func (m *C2S_BuyParkShopGood) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_BuyParkShopGood) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_BuyParkShopGood.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_BuyParkShopGood) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_BuyParkShopGood.Merge(m, src)
}
func (m *C2S_BuyParkShopGood) XXX_Size() int {
	return m.Size()
}
func (m *C2S_BuyParkShopGood) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_BuyParkShopGood.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_BuyParkShopGood proto.InternalMessageInfo

func (m *C2S_BuyParkShopGood) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_BuyParkShopGood) GetShopIndex() int32 {
	if m != nil && m.ShopIndex != nil {
		return *m.ShopIndex
	}
	return 0
}

type S2C_BuyParkShopGood struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_BuyParkShopGood) Reset()         { *m = S2C_BuyParkShopGood{} }
func (m *S2C_BuyParkShopGood) String() string { return proto.CompactTextString(m) }
func (*S2C_BuyParkShopGood) ProtoMessage()    {}
func (*S2C_BuyParkShopGood) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{51}
}
func (m *S2C_BuyParkShopGood) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_BuyParkShopGood) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_BuyParkShopGood.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_BuyParkShopGood) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_BuyParkShopGood.Merge(m, src)
}
func (m *S2C_BuyParkShopGood) XXX_Size() int {
	return m.Size()
}
func (m *S2C_BuyParkShopGood) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_BuyParkShopGood.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_BuyParkShopGood proto.InternalMessageInfo

func (m *S2C_BuyParkShopGood) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

// 增加一辆车
type S2C_AddCar struct {
	CarInfo              []*DbCarInfo `protobuf:"bytes,1,rep,name=car_info" json:"car_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *S2C_AddCar) Reset()         { *m = S2C_AddCar{} }
func (m *S2C_AddCar) String() string { return proto.CompactTextString(m) }
func (*S2C_AddCar) ProtoMessage()    {}
func (*S2C_AddCar) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{52}
}
func (m *S2C_AddCar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_AddCar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_AddCar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_AddCar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_AddCar.Merge(m, src)
}
func (m *S2C_AddCar) XXX_Size() int {
	return m.Size()
}
func (m *S2C_AddCar) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_AddCar.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_AddCar proto.InternalMessageInfo

func (m *S2C_AddCar) GetCarInfo() []*DbCarInfo {
	if m != nil {
		return m.CarInfo
	}
	return nil
}

// 车是否修理完成
type C2S_CheckFixCarIsOK struct {
	RoleIndex            *int64   `protobuf:"zigzag64,1,opt,name=role_index" json:"role_index,omitempty"`
	CarIndex             *int64   `protobuf:"zigzag64,2,opt,name=car_index" json:"car_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2S_CheckFixCarIsOK) Reset()         { *m = C2S_CheckFixCarIsOK{} }
func (m *C2S_CheckFixCarIsOK) String() string { return proto.CompactTextString(m) }
func (*C2S_CheckFixCarIsOK) ProtoMessage()    {}
func (*C2S_CheckFixCarIsOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{53}
}
func (m *C2S_CheckFixCarIsOK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_CheckFixCarIsOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_CheckFixCarIsOK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_CheckFixCarIsOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_CheckFixCarIsOK.Merge(m, src)
}
func (m *C2S_CheckFixCarIsOK) XXX_Size() int {
	return m.Size()
}
func (m *C2S_CheckFixCarIsOK) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_CheckFixCarIsOK.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_CheckFixCarIsOK proto.InternalMessageInfo

func (m *C2S_CheckFixCarIsOK) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func (m *C2S_CheckFixCarIsOK) GetCarIndex() int64 {
	if m != nil && m.CarIndex != nil {
		return *m.CarIndex
	}
	return 0
}

type S2C_CheckFixCarIsOK struct {
	RetCode              *E_MSG_RET_CODE `protobuf:"varint,1,opt,name=ret_code,enum=pbd.E_MSG_RET_CODE" json:"ret_code,omitempty"`
	Car                  *DbFixCar       `protobuf:"bytes,2,opt,name=car" json:"car,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *S2C_CheckFixCarIsOK) Reset()         { *m = S2C_CheckFixCarIsOK{} }
func (m *S2C_CheckFixCarIsOK) String() string { return proto.CompactTextString(m) }
func (*S2C_CheckFixCarIsOK) ProtoMessage()    {}
func (*S2C_CheckFixCarIsOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{54}
}
func (m *S2C_CheckFixCarIsOK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_CheckFixCarIsOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_CheckFixCarIsOK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_CheckFixCarIsOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_CheckFixCarIsOK.Merge(m, src)
}
func (m *S2C_CheckFixCarIsOK) XXX_Size() int {
	return m.Size()
}
func (m *S2C_CheckFixCarIsOK) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_CheckFixCarIsOK.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_CheckFixCarIsOK proto.InternalMessageInfo

func (m *S2C_CheckFixCarIsOK) GetRetCode() E_MSG_RET_CODE {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return E_MSG_RET_CODE_Msg_Ret_Code_Unknow
}

func (m *S2C_CheckFixCarIsOK) GetCar() *DbFixCar {
	if m != nil {
		return m.Car
	}
	return nil
}

// 通知玩家车被移到车管所原因
type S2C_ParkEventInform struct {
	Event                *E_PARK_TICK_EVENT `protobuf:"varint,1,opt,name=event,enum=pbd.E_PARK_TICK_EVENT" json:"event,omitempty"`
	RoleIndex            *int64             `protobuf:"zigzag64,2,opt,name=role_index" json:"role_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *S2C_ParkEventInform) Reset()         { *m = S2C_ParkEventInform{} }
func (m *S2C_ParkEventInform) String() string { return proto.CompactTextString(m) }
func (*S2C_ParkEventInform) ProtoMessage()    {}
func (*S2C_ParkEventInform) Descriptor() ([]byte, []int) {
	return fileDescriptor_63659dbda05d6282, []int{55}
}
func (m *S2C_ParkEventInform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ParkEventInform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ParkEventInform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ParkEventInform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ParkEventInform.Merge(m, src)
}
func (m *S2C_ParkEventInform) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ParkEventInform) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ParkEventInform.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ParkEventInform proto.InternalMessageInfo

func (m *S2C_ParkEventInform) GetEvent() E_PARK_TICK_EVENT {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return E_PARK_TICK_EVENT_EPTE_TIMEOUT
}

func (m *S2C_ParkEventInform) GetRoleIndex() int64 {
	if m != nil && m.RoleIndex != nil {
		return *m.RoleIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*DbCarInfo)(nil), "pbd.db_car_info")
	proto.RegisterType((*DbFixCar)(nil), "pbd.db_fix_car")
	proto.RegisterType((*RoleParkRecord)(nil), "pbd.role_park_record")
	proto.RegisterType((*OldDriver)(nil), "pbd.old_driver")
	proto.RegisterType((*ListRoleCarport)(nil), "pbd.list_role_carport")
	proto.RegisterType((*CarEffect)(nil), "pbd.car_effect")
	proto.RegisterType((*ParkCar)(nil), "pbd.park_car")
	proto.RegisterType((*ParkLot)(nil), "pbd.park_lot")
	proto.RegisterType((*ParkLotManagerInfo)(nil), "pbd.park_lot_manager_info")
	proto.RegisterType((*RoleCarLog)(nil), "pbd.role_car_log")
	proto.RegisterType((*ParkGoodsInfo)(nil), "pbd.park_goods_info")
	proto.RegisterType((*S2C_ParkLotInfo)(nil), "pbd.S2C_ParkLotInfo")
	proto.RegisterType((*C2S_ReadyEnterParkScene)(nil), "pbd.C2S_ReadyEnterParkScene")
	proto.RegisterType((*S2S_ReadyEnterParkScene)(nil), "pbd.S2S_ReadyEnterParkScene")
	proto.RegisterType((*S2C_ReadyEnterParkScene)(nil), "pbd.S2C_ReadyEnterParkScene")
	proto.RegisterType((*C2S_ParkCar)(nil), "pbd.C2S_ParkCar")
	proto.RegisterType((*S2C_ParkCar)(nil), "pbd.S2C_ParkCar")
	proto.RegisterType((*C2S_UseItemSelfCar)(nil), "pbd.C2S_UseItemSelfCar")
	proto.RegisterType((*S2C_UseItemSelfCar)(nil), "pbd.S2C_UseItemSelfCar")
	proto.RegisterType((*C2S_DestoryAction)(nil), "pbd.C2S_DestoryAction")
	proto.RegisterType((*S2C_DestoryAction)(nil), "pbd.S2C_DestoryAction")
	proto.RegisterType((*C2S_DestoryTheCar)(nil), "pbd.C2S_DestoryTheCar")
	proto.RegisterType((*S2C_FinalArmorEvent)(nil), "pbd.S2C_FinalArmorEvent")
	proto.RegisterType((*C2S_FinalArmorEventResult)(nil), "pbd.C2S_FinalArmorEventResult")
	proto.RegisterType((*S2C_DestoryTheCar)(nil), "pbd.S2C_DestoryTheCar")
	proto.RegisterType((*C2S_SayYesAction)(nil), "pbd.C2S_SayYesAction")
	proto.RegisterType((*S2C_SayYesAction)(nil), "pbd.S2C_SayYesAction")
	proto.RegisterType((*C2S_SayYesTheCar)(nil), "pbd.C2S_SayYesTheCar")
	proto.RegisterType((*S2C_TimeTurbulence)(nil), "pbd.S2C_TimeTurbulence")
	proto.RegisterType((*C2S_TimeTurbulenceResult)(nil), "pbd.C2S_TimeTurbulenceResult")
	proto.RegisterType((*S2C_SayYesTheCar)(nil), "pbd.S2C_SayYesTheCar")
	proto.RegisterType((*S2C_OldDriver)(nil), "pbd.S2C_OldDriver")
	proto.RegisterType((*C2S_ExpandCarport)(nil), "pbd.C2S_ExpandCarport")
	proto.RegisterType((*S2C_ExpandCarport)(nil), "pbd.S2C_ExpandCarport")
	proto.RegisterType((*C2S_ExpandFixCarport)(nil), "pbd.C2S_ExpandFixCarport")
	proto.RegisterType((*S2C_ExpandFixCarport)(nil), "pbd.S2C_ExpandFixCarport")
	proto.RegisterType((*C2S_FixCar)(nil), "pbd.C2S_FixCar")
	proto.RegisterType((*S2C_FixCar)(nil), "pbd.S2C_FixCar")
	proto.RegisterType((*C2S_FastFixRoleCar)(nil), "pbd.C2S_FastFixRoleCar")
	proto.RegisterType((*S2C_FastFixRoleCar)(nil), "pbd.S2C_FastFixRoleCar")
	proto.RegisterType((*C2S_FixRoleCarByCrtStal)(nil), "pbd.C2S_FixRoleCarByCrtStal")
	proto.RegisterType((*S2C_FixRoleCarByCrtStal)(nil), "pbd.S2C_FixRoleCarByCrtStal")
	proto.RegisterType((*C2S_DecomposeCar)(nil), "pbd.C2S_DecomposeCar")
	proto.RegisterType((*S2C_DecomposeCar)(nil), "pbd.S2C_DecomposeCar")
	proto.RegisterType((*C2S_TakeCar)(nil), "pbd.C2S_TakeCar")
	proto.RegisterType((*S2C_TakeCar)(nil), "pbd.S2C_TakeCar")
	proto.RegisterType((*C2S_AskCarLog)(nil), "pbd.C2S_AskCarLog")
	proto.RegisterType((*S2C_AskCarLog)(nil), "pbd.S2C_AskCarLog")
	proto.RegisterType((*C2S_AskCarParkInfo)(nil), "pbd.C2S_AskCarParkInfo")
	proto.RegisterType((*S2C_AskCarParkInfo)(nil), "pbd.S2C_AskCarParkInfo")
	proto.RegisterType((*C2S_BuyParkShopGood)(nil), "pbd.C2S_BuyParkShopGood")
	proto.RegisterType((*S2C_BuyParkShopGood)(nil), "pbd.S2C_BuyParkShopGood")
	proto.RegisterType((*S2C_AddCar)(nil), "pbd.S2C_AddCar")
	proto.RegisterType((*C2S_CheckFixCarIsOK)(nil), "pbd.C2S_CheckFixCarIsOK")
	proto.RegisterType((*S2C_CheckFixCarIsOK)(nil), "pbd.S2C_CheckFixCarIsOK")
	proto.RegisterType((*S2C_ParkEventInform)(nil), "pbd.S2C_ParkEventInform")
}

func init() { proto.RegisterFile("ParkLot.proto", fileDescriptor_63659dbda05d6282) }

var fileDescriptor_63659dbda05d6282 = []byte{
	// 1688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xff, 0xaf, 0xe3, 0x24, 0xce, 0x71, 0x9c, 0xd8, 0xeb, 0x24, 0xf5, 0xbf, 0xb4, 0x69, 0xd8,
	0x12, 0x1a, 0x71, 0x51, 0xa1, 0x50, 0x04, 0x2d, 0x20, 0xe1, 0x3a, 0x4e, 0x15, 0x35, 0x6d, 0x22,
	0xdb, 0x41, 0x2a, 0x12, 0x8c, 0xc6, 0xbb, 0x63, 0x67, 0x95, 0xf5, 0xce, 0x32, 0x3b, 0x4e, 0xed,
	0x3b, 0xde, 0x81, 0x1b, 0x9e, 0x00, 0xb8, 0xe6, 0x9a, 0x07, 0xe0, 0x92, 0x17, 0x00, 0xa1, 0xf2,
	0x22, 0x68, 0x3e, 0xd6, 0xbb, 0xeb, 0x6c, 0x8a, 0x43, 0x7a, 0xc1, 0x9d, 0x77, 0xe6, 0xcc, 0x39,
	0xbf, 0xf3, 0xf5, 0x9b, 0x33, 0x86, 0xd2, 0x31, 0x66, 0x67, 0x87, 0x94, 0xdf, 0x0f, 0x18, 0xe5,
	0xd4, 0x9c, 0x0b, 0xba, 0xce, 0xcd, 0x95, 0x63, 0xf1, 0x7b, 0x8f, 0xf4, 0xd4, 0xe2, 0xcd, 0x52,
	0xd3, 0x1f, 0x0e, 0x26, 0x9f, 0xd6, 0x37, 0x50, 0x74, 0xba, 0xc8, 0xc6, 0x0c, 0xb9, 0x7e, 0x8f,
	0x9a, 0x15, 0x58, 0x52, 0xbf, 0x1d, 0x32, 0xaa, 0x19, 0x5b, 0xc6, 0x8e, 0x69, 0xae, 0xc0, 0x82,
	0x5c, 0x72, 0x6a, 0xb9, 0x2d, 0x63, 0xa7, 0x62, 0x96, 0x60, 0xde, 0x23, 0xe7, 0xc4, 0xab, 0xcd,
	0x45, 0x9f, 0x98, 0x0d, 0x28, 0xab, 0xe5, 0xe5, 0xe7, 0xdb, 0xb0, 0x10, 0x72, 0xcc, 0x87, 0x61,
	0x6d, 0x7e, 0xcb, 0xd8, 0x59, 0xd9, 0xad, 0xdc, 0x0f, 0xba, 0xce, 0xfd, 0x26, 0x6a, 0xd4, 0x5b,
	0xa8, 0xdd, 0xa9, 0x77, 0x4e, 0xda, 0xd6, 0x09, 0x80, 0xd3, 0x45, 0x3d, 0x77, 0x24, 0xcc, 0x9a,
	0xeb, 0x50, 0x12, 0x3f, 0xb9, 0x3b, 0x20, 0x21, 0xc7, 0x83, 0x40, 0x5b, 0xad, 0xc0, 0x92, 0x4f,
	0x88, 0x23, 0xd7, 0xb5, 0xe1, 0xdb, 0x30, 0x67, 0x63, 0x26, 0xcd, 0x16, 0x77, 0xcb, 0x52, 0x6f,
	0x02, 0xba, 0xf5, 0xa3, 0x01, 0x65, 0x46, 0x3d, 0x82, 0x02, 0xcc, 0xce, 0x10, 0x23, 0x36, 0x65,
	0x8e, 0xb9, 0x0a, 0x8b, 0xf2, 0xd3, 0x75, 0xa4, 0xde, 0x8a, 0x5c, 0xa0, 0x8c, 0xc7, 0xee, 0xc4,
	0xee, 0x29, 0x7f, 0x52, 0x11, 0xc8, 0x4b, 0x2c, 0x1b, 0xb0, 0x22, 0x95, 0xc4, 0x18, 0xe7, 0xa3,
	0x75, 0x8f, 0xf4, 0x38, 0x9a, 0x6c, 0xd6, 0x16, 0xe4, 0xfa, 0x26, 0x2c, 0xf6, 0x09, 0x17, 0xc8,
	0x6a, 0x8b, 0x12, 0x6c, 0x49, 0x82, 0x95, 0x62, 0x36, 0x66, 0xd6, 0x77, 0x39, 0x00, 0xea, 0x39,
	0xc8, 0x61, 0xee, 0x39, 0x61, 0x71, 0x40, 0x15, 0xc2, 0x22, 0xcc, 0x91, 0x51, 0xa0, 0xd1, 0x95,
	0xa1, 0x20, 0xe1, 0xfa, 0xc3, 0x81, 0xc6, 0xb7, 0x06, 0xcb, 0x64, 0x14, 0x60, 0xdf, 0x41, 0x36,
	0x1d, 0xfa, 0x5c, 0x87, 0xfd, 0x06, 0xac, 0x32, 0x12, 0x60, 0x97, 0xa1, 0x89, 0xf8, 0xbc, 0xdc,
	0x78, 0x0b, 0xaa, 0x7a, 0x23, 0x75, 0x6a, 0x41, 0x6e, 0x6e, 0xc0, 0x0a, 0xb6, 0xb9, 0x4b, 0x7d,
	0x12, 0xad, 0x2f, 0xca, 0xf5, 0x2d, 0xa8, 0xa9, 0x75, 0xc4, 0x48, 0x8f, 0x91, 0xf0, 0x14, 0x79,
	0x38, 0xe4, 0xca, 0xc5, 0x82, 0x74, 0xf1, 0x1e, 0x2c, 0xda, 0x98, 0x09, 0x5b, 0xb5, 0x25, 0xe9,
	0xe2, 0x86, 0x74, 0xd1, 0x73, 0x43, 0x8e, 0x64, 0x12, 0xf4, 0xae, 0xb9, 0x03, 0x4b, 0x93, 0xa4,
	0xd4, 0x60, 0x6b, 0x6e, 0xa7, 0xb8, 0xbb, 0x2e, 0x45, 0xa7, 0x53, 0x65, 0x7d, 0x0d, 0x95, 0x8b,
	0xc7, 0x2d, 0x28, 0x44, 0x09, 0xae, 0x19, 0xf2, 0xf4, 0x85, 0xc4, 0x9b, 0xdb, 0xb0, 0xac, 0x8b,
	0x49, 0xc9, 0xe5, 0xa4, 0xdc, 0x6a, 0x24, 0xa7, 0xf7, 0xac, 0xaf, 0x00, 0x84, 0x08, 0xe9, 0xf5,
	0x88, 0xcd, 0x4d, 0x80, 0xdc, 0xa4, 0x26, 0x96, 0x21, 0xcf, 0xc7, 0x41, 0x54, 0x66, 0x15, 0x58,
	0x8a, 0xbd, 0x9d, 0x8b, 0x5a, 0x40, 0x1d, 0xd3, 0xd1, 0x36, 0x01, 0xba, 0xa4, 0xef, 0xfa, 0x4a,
	0x46, 0x16, 0x83, 0xf5, 0x7b, 0x0e, 0x0a, 0x51, 0x86, 0x85, 0x80, 0x74, 0x23, 0xd9, 0x47, 0xa2,
	0xa2, 0x5d, 0xfb, 0x0c, 0xf9, 0x58, 0x57, 0xf4, 0xb2, 0x59, 0x85, 0xa2, 0xd2, 0x1b, 0x1b, 0x93,
	0xa9, 0x8c, 0x95, 0xab, 0x72, 0xcb, 0x47, 0x0a, 0xe2, 0x4a, 0x53, 0x15, 0xb8, 0x0e, 0x25, 0xe2,
	0x3b, 0x09, 0xc9, 0x85, 0xa8, 0x30, 0xb5, 0xde, 0x80, 0x30, 0x9b, 0xe8, 0xbc, 0xe6, 0x44, 0xed,
	0x74, 0x89, 0x4f, 0x7a, 0x6e, 0x22, 0x97, 0x39, 0x73, 0x1b, 0x8a, 0x74, 0xc8, 0x83, 0x21, 0x47,
	0x2e, 0x27, 0x83, 0xda, 0x52, 0x22, 0xcc, 0x62, 0x01, 0xd9, 0xd4, 0xef, 0xb9, 0x7d, 0xf3, 0x1d,
	0x28, 0xf6, 0x29, 0x75, 0x74, 0x00, 0x75, 0x2e, 0x55, 0x94, 0x13, 0x71, 0xbd, 0x0b, 0xd0, 0xc5,
	0x13, 0xa1, 0x62, 0xb6, 0x90, 0xee, 0xe4, 0xe5, 0xec, 0x4e, 0x96, 0x61, 0x19, 0x71, 0x86, 0x91,
	0x22, 0x96, 0x92, 0x08, 0x8b, 0xf5, 0x83, 0xa1, 0xe3, 0xeb, 0x51, 0x9e, 0xec, 0x62, 0x95, 0xc2,
	0x77, 0x27, 0xb4, 0x93, 0x93, 0xb4, 0xb3, 0xa1, 0x69, 0xe7, 0xb8, 0xde, 0x7a, 0x8a, 0x0e, 0x8f,
	0x3a, 0x9a, 0x7b, 0x44, 0x04, 0x04, 0xef, 0x4d, 0x85, 0x7c, 0x1d, 0x4a, 0x58, 0xaf, 0x24, 0x03,
	0x5e, 0x85, 0x22, 0xb6, 0x39, 0x8d, 0xc8, 0x40, 0x85, 0xfc, 0x4e, 0xa2, 0x22, 0x17, 0xb2, 0xba,
	0xfb, 0x67, 0x03, 0xd6, 0x23, 0xa0, 0x68, 0x80, 0x7d, 0xdc, 0x27, 0xda, 0xaf, 0x9b, 0x60, 0x72,
	0xca, 0xb1, 0x87, 0x22, 0x59, 0xd9, 0xa7, 0x86, 0x26, 0xb7, 0xf5, 0xc4, 0x5e, 0xe0, 0xe1, 0x31,
	0x51, 0xdb, 0xaa, 0x28, 0x37, 0x61, 0x43, 0x6d, 0x13, 0x9f, 0x13, 0x96, 0xdc, 0x57, 0x1e, 0xdc,
	0x82, 0x35, 0xb5, 0x1f, 0x8e, 0x43, 0x99, 0x33, 0xad, 0x3c, 0x1f, 0xf5, 0xb3, 0x4f, 0x46, 0x1c,
	0xe1, 0x21, 0xa7, 0x28, 0x8b, 0xca, 0xac, 0x6f, 0x0d, 0x58, 0x8e, 0x1a, 0x0f, 0x79, 0xb4, 0x3f,
	0xed, 0xfb, 0xa5, 0x25, 0xbc, 0x0d, 0x05, 0x19, 0x3a, 0xd1, 0x3f, 0x73, 0x32, 0xf4, 0x55, 0x1d,
	0xfa, 0x7a, 0xa3, 0x23, 0x59, 0xbf, 0xf3, 0xe2, 0xb8, 0x29, 0x4e, 0x6a, 0x46, 0x71, 0x1d, 0x0d,
	0x2a, 0x26, 0x5e, 0xc9, 0x54, 0xd6, 0x39, 0xac, 0x4a, 0x68, 0xa2, 0xc8, 0x42, 0x15, 0xb0, 0x55,
	0x58, 0x94, 0x15, 0x38, 0x49, 0x73, 0x09, 0xe6, 0x15, 0x4f, 0x4d, 0xd8, 0xd1, 0x1e, 0x32, 0x46,
	0x7c, 0x7b, 0x1c, 0xdf, 0x46, 0x01, 0x73, 0x6d, 0x12, 0xdb, 0x70, 0x43, 0xd4, 0x1d, 0x8e, 0xa5,
	0x8d, 0x82, 0xe8, 0xcb, 0xf0, 0x94, 0x06, 0xda, 0x29, 0x49, 0x82, 0xd6, 0x2e, 0xac, 0xb6, 0x77,
	0x1b, 0x48, 0x5f, 0x9d, 0x07, 0xc2, 0xee, 0x1d, 0x28, 0x88, 0xe4, 0x09, 0x3a, 0xd2, 0xac, 0x93,
	0xc8, 0xb1, 0x47, 0xb9, 0x75, 0x04, 0x37, 0x1a, 0xbb, 0x6d, 0xd4, 0x22, 0xd8, 0x19, 0x37, 0x45,
	0x46, 0xc4, 0xe9, 0xb6, 0x4d, 0x7c, 0x92, 0xd9, 0xfa, 0x65, 0x28, 0x84, 0x62, 0x33, 0x75, 0xeb,
	0x0c, 0x70, 0x30, 0xb9, 0x75, 0xac, 0x3f, 0x0c, 0xb8, 0xd1, 0x7e, 0x93, 0x1a, 0xcd, 0x6d, 0x00,
	0x25, 0x21, 0x53, 0x93, 0x4f, 0x5d, 0xc6, 0xed, 0x46, 0xf3, 0x79, 0x53, 0x25, 0x66, 0x1d, 0x4a,
	0x8c, 0x70, 0x34, 0xf4, 0x5d, 0x9e, 0xac, 0xf2, 0x2a, 0x14, 0xc5, 0xb2, 0xeb, 0x73, 0xec, 0x38,
	0x4c, 0xd3, 0xca, 0x23, 0x28, 0x88, 0x45, 0x9b, 0x3a, 0x44, 0x12, 0x4a, 0x9c, 0xeb, 0x67, 0xed,
	0x27, 0xa8, 0xd5, 0xec, 0xa0, 0xc6, 0xd1, 0x5e, 0xf3, 0x51, 0xf5, 0x59, 0xd8, 0x47, 0x2d, 0xc2,
	0x51, 0x83, 0x3a, 0x04, 0x9d, 0xf8, 0x67, 0x3e, 0x7d, 0x69, 0x9d, 0x08, 0xff, 0x1a, 0x99, 0xfe,
	0x25, 0xd5, 0x1a, 0x57, 0x54, 0xdb, 0x84, 0xa2, 0x48, 0x84, 0x50, 0xd6, 0xb8, 0x9c, 0x77, 0xe3,
	0x0b, 0x3d, 0x27, 0x97, 0x12, 0xf4, 0xa1, 0xc2, 0xff, 0x04, 0x8a, 0x51, 0x0d, 0x08, 0x35, 0xdb,
	0x33, 0x21, 0xca, 0xd0, 0x6c, 0x1d, 0x82, 0x29, 0xf0, 0x9c, 0x84, 0xe4, 0x80, 0x93, 0x41, 0x9b,
	0x78, 0xbd, 0xcb, 0x60, 0x5d, 0x18, 0x44, 0x52, 0x2d, 0xa2, 0x60, 0x1d, 0x83, 0x29, 0x60, 0x4d,
	0x69, 0xbb, 0x4e, 0xbc, 0x3e, 0x86, 0x8a, 0xc0, 0xb7, 0x47, 0x42, 0x4e, 0xd9, 0xb8, 0x2e, 0xed,
	0xcd, 0x04, 0xcf, 0xea, 0x42, 0x45, 0x60, 0x49, 0x9f, 0xbc, 0x06, 0x94, 0xb4, 0xbf, 0xca, 0x46,
	0x1a, 0x5d, 0xe7, 0x94, 0xcc, 0x1a, 0x3c, 0xeb, 0x21, 0x54, 0x05, 0xba, 0x7d, 0xd7, 0xc7, 0x5e,
	0x5d, 0xdc, 0x1a, 0xcd, 0x73, 0xe2, 0x67, 0xdc, 0x13, 0x19, 0x46, 0x3f, 0x87, 0xff, 0x0b, 0xa3,
	0x53, 0x47, 0x5b, 0x24, 0x1c, 0x7a, 0x7c, 0x36, 0xe3, 0xbf, 0x18, 0xa9, 0xd8, 0x68, 0xdc, 0xd7,
	0x89, 0xcd, 0x0c, 0xc5, 0x21, 0xae, 0x6d, 0x46, 0x5e, 0x62, 0xe6, 0x28, 0x9e, 0xca, 0x5f, 0x72,
	0x6d, 0x97, 0x60, 0xde, 0x0d, 0x11, 0x3d, 0xd3, 0x0c, 0x58, 0x81, 0x25, 0x3d, 0x1a, 0xb8, 0x8e,
	0x26, 0xc0, 0x8f, 0xa0, 0x2c, 0x02, 0xd0, 0xc6, 0xe3, 0x17, 0x24, 0xbc, 0x4a, 0x49, 0x60, 0x28,
	0x0b, 0xb7, 0x53, 0x07, 0xdf, 0x70, 0x45, 0xa4, 0xb0, 0x5d, 0xa5, 0x20, 0xb6, 0x55, 0xeb, 0x74,
	0xdc, 0x01, 0xe9, 0x0c, 0x59, 0x77, 0xe8, 0x11, 0xdf, 0x26, 0x17, 0xea, 0xc1, 0x7a, 0x0e, 0x35,
	0xa1, 0x3f, 0x2d, 0x76, 0x85, 0xdc, 0xc7, 0xe1, 0x15, 0x49, 0x29, 0x58, 0x3f, 0x19, 0xc9, 0x98,
	0xfc, 0x97, 0x2b, 0xc1, 0xea, 0x43, 0x49, 0x20, 0x3d, 0xf2, 0x9c, 0xbd, 0x99, 0xde, 0x21, 0x8e,
	0xdb, 0xeb, 0x89, 0x47, 0x84, 0x36, 0x9a, 0x7c, 0x99, 0xe4, 0x2f, 0x79, 0x4d, 0xa8, 0x8b, 0xfd,
	0x9e, 0xea, 0xea, 0xa6, 0x7c, 0x7f, 0x34, 0xf4, 0x60, 0x9f, 0x11, 0x5c, 0xeb, 0x48, 0xb5, 0x51,
	0x5a, 0xf0, 0x3a, 0x6c, 0xf7, 0x1e, 0xac, 0xc5, 0x96, 0xf7, 0xdd, 0xd1, 0xeb, 0x8c, 0xb7, 0x60,
	0x2d, 0x36, 0x9e, 0x90, 0xbd, 0x8e, 0xfd, 0x0f, 0x00, 0x14, 0xb5, 0x8c, 0x66, 0xbf, 0x9c, 0xac,
	0x1e, 0x80, 0xa2, 0xb2, 0xd1, 0x75, 0x6b, 0xe7, 0x96, 0x1a, 0xb3, 0x73, 0x72, 0x4a, 0xbd, 0xf0,
	0x1e, 0xfa, 0x44, 0x5d, 0x55, 0xfb, 0x38, 0xe4, 0xfb, 0xee, 0xa8, 0x45, 0x3d, 0x72, 0x05, 0x90,
	0x54, 0xb5, 0xd7, 0xd4, 0xe1, 0xeb, 0x80, 0xbd, 0x9d, 0x04, 0x7b, 0xf1, 0x75, 0x7f, 0xa2, 0x26,
	0xae, 0xd8, 0xd8, 0xe3, 0x71, 0x83, 0xf1, 0x36, 0xc7, 0xde, 0xac, 0x97, 0x7e, 0x15, 0x8a, 0x36,
	0x1b, 0x87, 0x62, 0x48, 0x9e, 0xcc, 0xcd, 0x56, 0xa0, 0xc6, 0x92, 0x2c, 0xb5, 0x33, 0x0e, 0x01,
	0x65, 0x28, 0xc8, 0x3f, 0x2a, 0xe2, 0x59, 0xfd, 0x56, 0xf2, 0x7f, 0x8a, 0x0b, 0x61, 0x7f, 0xa8,
	0x18, 0x6d, 0x8f, 0xd8, 0x74, 0x10, 0xd0, 0xf0, 0x2a, 0x41, 0x3f, 0x54, 0xdc, 0x92, 0x3a, 0xfa,
	0xef, 0x47, 0x95, 0x07, 0x6a, 0x74, 0xea, 0xe0, 0xb3, 0xab, 0x60, 0x68, 0xab, 0x49, 0x29, 0x3a,
	0x35, 0xa3, 0xf9, 0x7f, 0x48, 0xee, 0x5d, 0x28, 0x09, 0x28, 0xf5, 0x50, 0x4c, 0x5f, 0x87, 0xb4,
	0x9f, 0xd9, 0xa0, 0x0f, 0x14, 0x5f, 0xc5, 0x42, 0x77, 0xc5, 0x94, 0xde, 0x4f, 0x4e, 0xe9, 0x95,
	0xf8, 0x9f, 0x05, 0xfd, 0x8e, 0xb1, 0x76, 0x54, 0x95, 0xab, 0x53, 0x62, 0xbe, 0x93, 0x03, 0x7e,
	0x96, 0xfe, 0x0f, 0x55, 0x49, 0x4f, 0x49, 0xea, 0xe7, 0x5e, 0xf6, 0x53, 0x40, 0xe4, 0xf3, 0x33,
	0xa8, 0x0a, 0x03, 0x8f, 0x87, 0x63, 0x39, 0xd1, 0x9e, 0xd2, 0xe0, 0x09, 0xa5, 0x4e, 0x66, 0x38,
	0xd3, 0xaf, 0x0f, 0x75, 0x4f, 0x7d, 0xaa, 0x06, 0x97, 0xe9, 0xe3, 0xb3, 0xc5, 0xd5, 0x7a, 0x5f,
	0x71, 0x45, 0xdd, 0x11, 0x74, 0x39, 0xcb, 0x9f, 0x25, 0xc2, 0x9e, 0x80, 0xdb, 0x38, 0x25, 0xf6,
	0x99, 0xa2, 0x98, 0x83, 0xf0, 0xe8, 0xe9, 0xac, 0xd9, 0xff, 0x52, 0xa1, 0x9d, 0x3e, 0x3d, 0x63,
	0x15, 0xbc, 0x9e, 0x8f, 0x8e, 0x95, 0x6e, 0x11, 0x06, 0x39, 0x81, 0x89, 0xf0, 0xb3, 0x81, 0xb9,
	0x0d, 0xf3, 0x44, 0x7c, 0x6a, 0xc5, 0xa9, 0x87, 0x7d, 0xe7, 0xa0, 0xf1, 0x14, 0x35, 0xbf, 0x68,
	0x3e, 0xef, 0x4c, 0x39, 0x20, 0xd1, 0x3e, 0x2e, 0xff, 0xfa, 0x6a, 0xd3, 0xf8, 0xed, 0xd5, 0xa6,
	0xf1, 0xe7, 0xab, 0x4d, 0xe3, 0xfb, 0xbf, 0x36, 0xff, 0xf7, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd1, 0xdc, 0xb6, 0x3f, 0x21, 0x15, 0x00, 0x00,
}

func (m *DbCarInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DbCarInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DbCarInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Armor != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Armor)<<1)^uint32((*m.Armor>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Level)<<1)^uint32((*m.Level>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.CarId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.CarId)<<1)^uint32((*m.CarId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DbFixCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DbFixCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DbFixCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Car != nil {
		{
			size, err := m.Car.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NeedTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.NeedTime)<<1)^uint32((*m.NeedTime>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.FixTimestamp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.FixTimestamp)<<1)^uint64((*m.FixTimestamp>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleParkRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleParkRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleParkRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GetCar != nil {
		{
			size, err := m.GetCar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LeftParkTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.LeftParkTime)<<1)^uint64((*m.LeftParkTime>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.ParkTimestamp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.ParkTimestamp)<<1)^uint64((*m.ParkTimestamp>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.CarId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.CarId)<<1)^uint32((*m.CarId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.ParkId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ParkId)<<1)^uint32((*m.ParkId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OldDriver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldDriver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldDriver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RolePark) > 0 {
		for iNdEx := len(m.RolePark) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RolePark[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Carport != nil {
		{
			size, err := m.Carport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ActionRefreshLastTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.ActionRefreshLastTime)<<1)^uint64((*m.ActionRefreshLastTime>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.ActionedCount != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionedCount)<<1)^uint32((*m.ActionedCount>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.RepairExpandCount != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.RepairExpandCount)<<1)^uint32((*m.RepairExpandCount>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.RepairPortNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.RepairPortNum)<<1)^uint32((*m.RepairPortNum>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpandCount != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ExpandCount)<<1)^uint32((*m.ExpandCount>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.PortNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortNum)<<1)^uint32((*m.PortNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Exp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Exp)<<1)^uint32((*m.Exp>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Level)<<1)^uint32((*m.Level>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRoleCarport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoleCarport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoleCarport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FixCarInfo) > 0 {
		for iNdEx := len(m.FixCarInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FixCarInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CarInfo) > 0 {
		for iNdEx := len(m.CarInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CarInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CarEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CarEffect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CarEffect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BeginTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.BeginTime)<<1)^uint64((*m.BeginTime>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.Effect != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Effect)<<1)^uint32((*m.Effect>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.LastTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.LastTime)<<1)^uint64((*m.LastTime>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Type)<<1)^uint32((*m.Type>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Id)<<1)^uint32((*m.Id>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParkCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParkCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParkCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtraArmor != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ExtraArmor)<<1)^uint32((*m.ExtraArmor>>31))))
		i--
		dAtA[i] = 0x68
	}
	if m.Car != nil {
		{
			size, err := m.Car.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.BadEffect) > 0 {
		for iNdEx := len(m.BadEffect) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BadEffect[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.GoodEffect) > 0 {
		for iNdEx := len(m.GoodEffect) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodEffect[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.OutputItem) > 0 {
		for iNdEx := len(m.OutputItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.BenefitTime != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.BenefitTime))))
		i--
		dAtA[i] = 0x45
	}
	if m.EffectPercent != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.EffectPercent))))
		i--
		dAtA[i] = 0x3d
	}
	if m.EndTimestamp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.EndTimestamp)<<1)^uint64((*m.EndTimestamp>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.ParkTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.ParkTime)<<1)^uint64((*m.ParkTime>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.BeginTimestamp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.BeginTimestamp)<<1)^uint64((*m.BeginTimestamp>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.EffectTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.EffectTime)<<1)^uint32((*m.EffectTime>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.NickName != nil {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintParkLot(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParkLot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParkLot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParkLot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarInfo != nil {
		{
			size, err := m.CarInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ActorIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.ActorIndex)<<1)^uint64((*m.ActorIndex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.ActTimestamp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.ActTimestamp)<<1)^uint64((*m.ActTimestamp>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.ProtectTime != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ProtectTime)<<1)^uint32((*m.ProtectTime>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParkLotManagerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParkLotManagerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParkLotManagerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NextAutoParkTimestamp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.NextAutoParkTimestamp)<<1)^uint64((*m.NextAutoParkTimestamp>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalSystemCarNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.TotalSystemCarNum)<<1)^uint32((*m.TotalSystemCarNum>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalEnterPlayerNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.TotalEnterPlayerNum)<<1)^uint32((*m.TotalEnterPlayerNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalParkPlayerNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.TotalParkPlayerNum)<<1)^uint32((*m.TotalParkPlayerNum>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalParkCarNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.TotalParkCarNum)<<1)^uint32((*m.TotalParkCarNum>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleCarLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleCarLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleCarLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.CarId)<<1)^uint32((*m.CarId>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.ActionId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionId)<<1)^uint32((*m.ActionId>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.ActType != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.ActType))
		i--
		dAtA[i] = 0x18
	}
	if m.NickName != nil {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintParkLot(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActorIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.ActorIndex)<<1)^uint64((*m.ActorIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParkGoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParkGoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParkGoodsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShopIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ShopIndex)<<1)^uint32((*m.ShopIndex>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.IsBuy != nil {
		i--
		if *m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Price != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Price)<<1)^uint32((*m.Price>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.Currency != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Currency)<<1)^uint32((*m.Currency>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Count)<<1)^uint32((*m.Count>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ItemId)<<1)^uint32((*m.ItemId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ParkLotInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ParkLotInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ParkLotInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LotList) > 0 {
		for iNdEx := len(m.LotList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LotList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ReadyEnterParkScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ReadyEnterParkScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ReadyEnterParkScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MapId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.MapId)<<1)^uint32((*m.MapId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2S_ReadyEnterParkScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2S_ReadyEnterParkScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2S_ReadyEnterParkScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x38
	}
	if m.RetIntaddr != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RetIntaddr)<<1)^uint64((*m.RetIntaddr>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.RetUnitindex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RetUnitindex)<<1)^uint64((*m.RetUnitindex>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.SceneType != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.SceneType))
		i--
		dAtA[i] = 0x20
	}
	if m.MapId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.MapId)<<1)^uint32((*m.MapId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.SceneId)<<1)^uint32((*m.SceneId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ReadyEnterParkScene) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ReadyEnterParkScene) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ReadyEnterParkScene) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ParkCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ParkCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ParkCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ParkCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ParkCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ParkCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_UseItemSelfCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UseItemSelfCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_UseItemSelfCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionId)<<1)^uint32((*m.ActionId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_UseItemSelfCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UseItemSelfCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_UseItemSelfCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DestoryAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DestoryAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DestoryAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DestoryAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DestoryAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DestoryAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionId)<<1)^uint32((*m.ActionId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DestoryTheCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DestoryTheCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DestoryTheCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FinalArmorEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FinalArmorEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FinalArmorEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionId)<<1)^uint32((*m.ActionId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FinalArmorEventResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FinalArmorEventResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FinalArmorEventResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DestoryTheCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DestoryTheCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DestoryTheCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EffectId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.EffectId)<<1)^uint32((*m.EffectId>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.IsOk != nil {
		i--
		if *m.IsOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RewardList) > 0 {
		for iNdEx := len(m.RewardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ActionId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionId)<<1)^uint32((*m.ActionId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SayYesAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SayYesAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SayYesAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SayYesAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SayYesAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SayYesAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionId)<<1)^uint32((*m.ActionId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_SayYesTheCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_SayYesTheCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_SayYesTheCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TimeTurbulence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TimeTurbulence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TimeTurbulence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TimeTurbulenceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TimeTurbulenceResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TimeTurbulenceResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOk != nil {
		i--
		if *m.IsOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_SayYesTheCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_SayYesTheCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_SayYesTheCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOk != nil {
		i--
		if *m.IsOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RewardList) > 0 {
		for iNdEx := len(m.RewardList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ActionId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionId)<<1)^uint32((*m.ActionId>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.PortId != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortId)<<1)^uint32((*m.PortId>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_OldDriver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_OldDriver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_OldDriver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActionedCount != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ActionedCount)<<1)^uint32((*m.ActionedCount>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.PortNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.PortNum)<<1)^uint32((*m.PortNum>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.DiffExp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.DiffExp)<<1)^uint32((*m.DiffExp>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Exp != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Exp)<<1)^uint32((*m.Exp>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.Level)<<1)^uint32((*m.Level>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ExpandCarport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ExpandCarport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ExpandCarport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ExpandCarport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ExpandCarport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ExpandCarport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_ExpandFixCarport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_ExpandFixCarport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_ExpandFixCarport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ExpandFixCarport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ExpandFixCarport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ExpandFixCarport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FixCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FixCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FixCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FixCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FixCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FixCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Car != nil {
		{
			size, err := m.Car.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FastFixRoleCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FastFixRoleCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FastFixRoleCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FastFixRoleCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FastFixRoleCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FastFixRoleCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Car != nil {
		{
			size, err := m.Car.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_FixRoleCarByCrtStal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_FixRoleCarByCrtStal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_FixRoleCarByCrtStal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CrystalNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.CrystalNum)<<1)^uint32((*m.CrystalNum>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_FixRoleCarByCrtStal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_FixRoleCarByCrtStal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_FixRoleCarByCrtStal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Car != nil {
		{
			size, err := m.Car.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NeedNum != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.NeedNum)<<1)^uint32((*m.NeedNum>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_DecomposeCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DecomposeCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_DecomposeCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_DecomposeCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DecomposeCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_DecomposeCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_TakeCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TakeCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TakeCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TakeCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TakeCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TakeCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Car != nil {
		{
			size, err := m.Car.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AskCarLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AskCarLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AskCarLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AskCarLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AskCarLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AskCarLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogList) > 0 {
		for iNdEx := len(m.LogList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LogList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_AskCarParkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_AskCarParkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_AskCarParkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AskCarParkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AskCarParkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AskCarParkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CarList) > 0 {
		for iNdEx := len(m.CarList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CarList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_BuyParkShopGood) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_BuyParkShopGood) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_BuyParkShopGood) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShopIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint32(*m.ShopIndex)<<1)^uint32((*m.ShopIndex>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_BuyParkShopGood) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_BuyParkShopGood) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_BuyParkShopGood) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_AddCar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_AddCar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_AddCar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CarInfo) > 0 {
		for iNdEx := len(m.CarInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CarInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParkLot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2S_CheckFixCarIsOK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_CheckFixCarIsOK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_CheckFixCarIsOK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CarIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.CarIndex)<<1)^uint64((*m.CarIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_CheckFixCarIsOK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_CheckFixCarIsOK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_CheckFixCarIsOK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Car != nil {
		{
			size, err := m.Car.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParkLot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ParkEventInform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ParkEventInform) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ParkEventInform) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoleIndex != nil {
		i = encodeVarintParkLot(dAtA, i, uint64((uint64(*m.RoleIndex)<<1)^uint64((*m.RoleIndex>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Event != nil {
		i = encodeVarintParkLot(dAtA, i, uint64(*m.Event))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParkLot(dAtA []byte, offset int, v uint64) int {
	offset -= sovParkLot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DbCarInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.CarId != nil {
		n += 1 + sozParkLot(uint64(*m.CarId))
	}
	if m.Level != nil {
		n += 1 + sozParkLot(uint64(*m.Level))
	}
	if m.Armor != nil {
		n += 1 + sozParkLot(uint64(*m.Armor))
	}
	if m.Status != nil {
		n += 1 + sovParkLot(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DbFixCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixTimestamp != nil {
		n += 1 + sozParkLot(uint64(*m.FixTimestamp))
	}
	if m.NeedTime != nil {
		n += 1 + sozParkLot(uint64(*m.NeedTime))
	}
	if m.Car != nil {
		l = m.Car.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoleParkRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParkId != nil {
		n += 1 + sozParkLot(uint64(*m.ParkId))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.CarId != nil {
		n += 1 + sozParkLot(uint64(*m.CarId))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.ParkTimestamp != nil {
		n += 1 + sozParkLot(uint64(*m.ParkTimestamp))
	}
	if m.LeftParkTime != nil {
		n += 1 + sozParkLot(uint64(*m.LeftParkTime))
	}
	if m.GetCar != nil {
		l = m.GetCar.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OldDriver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != nil {
		n += 1 + sozParkLot(uint64(*m.Level))
	}
	if m.Exp != nil {
		n += 1 + sozParkLot(uint64(*m.Exp))
	}
	if m.PortNum != nil {
		n += 1 + sozParkLot(uint64(*m.PortNum))
	}
	if m.ExpandCount != nil {
		n += 1 + sozParkLot(uint64(*m.ExpandCount))
	}
	if m.RepairPortNum != nil {
		n += 1 + sozParkLot(uint64(*m.RepairPortNum))
	}
	if m.RepairExpandCount != nil {
		n += 1 + sozParkLot(uint64(*m.RepairExpandCount))
	}
	if m.ActionedCount != nil {
		n += 1 + sozParkLot(uint64(*m.ActionedCount))
	}
	if m.ActionRefreshLastTime != nil {
		n += 1 + sozParkLot(uint64(*m.ActionRefreshLastTime))
	}
	if m.Carport != nil {
		l = m.Carport.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if len(m.RolePark) > 0 {
		for _, e := range m.RolePark {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRoleCarport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CarInfo) > 0 {
		for _, e := range m.CarInfo {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if len(m.FixCarInfo) > 0 {
		for _, e := range m.FixCarInfo {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CarEffect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sozParkLot(uint64(*m.Id))
	}
	if m.Type != nil {
		n += 1 + sozParkLot(uint64(*m.Type))
	}
	if m.LastTime != nil {
		n += 1 + sozParkLot(uint64(*m.LastTime))
	}
	if m.Effect != nil {
		n += 1 + sozParkLot(uint64(*m.Effect))
	}
	if m.BeginTime != nil {
		n += 1 + sozParkLot(uint64(*m.BeginTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParkCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.NickName != nil {
		l = len(m.NickName)
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.EffectTime != nil {
		n += 1 + sozParkLot(uint64(*m.EffectTime))
	}
	if m.BeginTimestamp != nil {
		n += 1 + sozParkLot(uint64(*m.BeginTimestamp))
	}
	if m.ParkTime != nil {
		n += 1 + sozParkLot(uint64(*m.ParkTime))
	}
	if m.EndTimestamp != nil {
		n += 1 + sozParkLot(uint64(*m.EndTimestamp))
	}
	if m.EffectPercent != nil {
		n += 5
	}
	if m.BenefitTime != nil {
		n += 5
	}
	if len(m.OutputItem) > 0 {
		for _, e := range m.OutputItem {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if len(m.GoodEffect) > 0 {
		for _, e := range m.GoodEffect {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if len(m.BadEffect) > 0 {
		for _, e := range m.BadEffect {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.Car != nil {
		l = m.Car.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.ExtraArmor != nil {
		n += 1 + sozParkLot(uint64(*m.ExtraArmor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParkLot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.Status != nil {
		n += 1 + sovParkLot(uint64(*m.Status))
	}
	if m.ProtectTime != nil {
		n += 1 + sozParkLot(uint64(*m.ProtectTime))
	}
	if m.ActTimestamp != nil {
		n += 1 + sozParkLot(uint64(*m.ActTimestamp))
	}
	if m.ActorIndex != nil {
		n += 1 + sozParkLot(uint64(*m.ActorIndex))
	}
	if m.CarInfo != nil {
		l = m.CarInfo.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParkLotManagerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalParkCarNum != nil {
		n += 1 + sozParkLot(uint64(*m.TotalParkCarNum))
	}
	if m.TotalParkPlayerNum != nil {
		n += 1 + sozParkLot(uint64(*m.TotalParkPlayerNum))
	}
	if m.TotalEnterPlayerNum != nil {
		n += 1 + sozParkLot(uint64(*m.TotalEnterPlayerNum))
	}
	if m.TotalSystemCarNum != nil {
		n += 1 + sozParkLot(uint64(*m.TotalSystemCarNum))
	}
	if m.NextAutoParkTimestamp != nil {
		n += 1 + sozParkLot(uint64(*m.NextAutoParkTimestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoleCarLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActorIndex != nil {
		n += 1 + sozParkLot(uint64(*m.ActorIndex))
	}
	if m.NickName != nil {
		l = len(m.NickName)
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.ActType != nil {
		n += 1 + sovParkLot(uint64(*m.ActType))
	}
	if m.ActionId != nil {
		n += 1 + sozParkLot(uint64(*m.ActionId))
	}
	if m.CarId != nil {
		n += 1 + sozParkLot(uint64(*m.CarId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParkGoodsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != nil {
		n += 1 + sozParkLot(uint64(*m.ItemId))
	}
	if m.Count != nil {
		n += 1 + sozParkLot(uint64(*m.Count))
	}
	if m.Currency != nil {
		n += 1 + sozParkLot(uint64(*m.Currency))
	}
	if m.Price != nil {
		n += 1 + sozParkLot(uint64(*m.Price))
	}
	if m.IsBuy != nil {
		n += 2
	}
	if m.ShopIndex != nil {
		n += 1 + sozParkLot(uint64(*m.ShopIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ParkLotInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LotList) > 0 {
		for _, e := range m.LotList {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ReadyEnterParkScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozParkLot(uint64(*m.SceneId))
	}
	if m.MapId != nil {
		n += 1 + sozParkLot(uint64(*m.MapId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2S_ReadyEnterParkScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.SceneId != nil {
		n += 1 + sozParkLot(uint64(*m.SceneId))
	}
	if m.MapId != nil {
		n += 1 + sozParkLot(uint64(*m.MapId))
	}
	if m.SceneType != nil {
		n += 1 + sovParkLot(uint64(*m.SceneType))
	}
	if m.RetUnitindex != nil {
		n += 1 + sozParkLot(uint64(*m.RetUnitindex))
	}
	if m.RetIntaddr != nil {
		n += 1 + sozParkLot(uint64(*m.RetIntaddr))
	}
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ReadyEnterParkScene) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ParkCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ParkCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_UseItemSelfCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.ActionId != nil {
		n += 1 + sozParkLot(uint64(*m.ActionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_UseItemSelfCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DestoryAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DestoryAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.ActionId != nil {
		n += 1 + sozParkLot(uint64(*m.ActionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DestoryTheCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FinalArmorEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.ActionId != nil {
		n += 1 + sozParkLot(uint64(*m.ActionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FinalArmorEventResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DestoryTheCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.ActionId != nil {
		n += 1 + sozParkLot(uint64(*m.ActionId))
	}
	if len(m.RewardList) > 0 {
		for _, e := range m.RewardList {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.IsOk != nil {
		n += 2
	}
	if m.EffectId != nil {
		n += 1 + sozParkLot(uint64(*m.EffectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SayYesAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SayYesAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.ActionId != nil {
		n += 1 + sozParkLot(uint64(*m.ActionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_SayYesTheCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TimeTurbulence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TimeTurbulenceResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.IsOk != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_SayYesTheCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.PortId != nil {
		n += 1 + sozParkLot(uint64(*m.PortId))
	}
	if m.ActionId != nil {
		n += 1 + sozParkLot(uint64(*m.ActionId))
	}
	if len(m.RewardList) > 0 {
		for _, e := range m.RewardList {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.IsOk != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_OldDriver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != nil {
		n += 1 + sozParkLot(uint64(*m.Level))
	}
	if m.Exp != nil {
		n += 1 + sozParkLot(uint64(*m.Exp))
	}
	if m.DiffExp != nil {
		n += 1 + sozParkLot(uint64(*m.DiffExp))
	}
	if m.PortNum != nil {
		n += 1 + sozParkLot(uint64(*m.PortNum))
	}
	if m.ActionedCount != nil {
		n += 1 + sozParkLot(uint64(*m.ActionedCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ExpandCarport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ExpandCarport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_ExpandFixCarport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ExpandFixCarport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FixCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FixCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.Car != nil {
		l = m.Car.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FastFixRoleCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FastFixRoleCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.Car != nil {
		l = m.Car.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_FixRoleCarByCrtStal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.CrystalNum != nil {
		n += 1 + sozParkLot(uint64(*m.CrystalNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_FixRoleCarByCrtStal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.NeedNum != nil {
		n += 1 + sozParkLot(uint64(*m.NeedNum))
	}
	if m.Car != nil {
		l = m.Car.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_DecomposeCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_DecomposeCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_TakeCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_TakeCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.Car != nil {
		l = m.Car.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AskCarLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AskCarLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LogList) > 0 {
		for _, e := range m.LogList {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_AskCarParkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AskCarParkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CarList) > 0 {
		for _, e := range m.CarList {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_BuyParkShopGood) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.ShopIndex != nil {
		n += 1 + sozParkLot(uint64(*m.ShopIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_BuyParkShopGood) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_AddCar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CarInfo) > 0 {
		for _, e := range m.CarInfo {
			l = e.Size()
			n += 1 + l + sovParkLot(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2S_CheckFixCarIsOK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.CarIndex != nil {
		n += 1 + sozParkLot(uint64(*m.CarIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_CheckFixCarIsOK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovParkLot(uint64(*m.RetCode))
	}
	if m.Car != nil {
		l = m.Car.Size()
		n += 1 + l + sovParkLot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2C_ParkEventInform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += 1 + sovParkLot(uint64(*m.Event))
	}
	if m.RoleIndex != nil {
		n += 1 + sozParkLot(uint64(*m.RoleIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovParkLot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParkLot(x uint64) (n int) {
	return sovParkLot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DbCarInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: db_car_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: db_car_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CarId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Level = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Armor = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v E_CAR_STATUS
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_CAR_STATUS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DbFixCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: db_fix_car: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: db_fix_car: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixTimestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.FixTimestamp = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NeedTime = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Car", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Car == nil {
				m.Car = &DbCarInfo{}
			}
			if err := m.Car.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleParkRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_park_record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_park_record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ParkId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CarId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkTimestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ParkTimestamp = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftParkTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LeftParkTime = &v2
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetCar == nil {
				m.GetCar = &ParkCar{}
			}
			if err := m.GetCar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldDriver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: old_driver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: old_driver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Level = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Exp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortNum = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpandCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ExpandCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairPortNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RepairPortNum = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepairExpandCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.RepairExpandCount = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionedCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionedCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionRefreshLastTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ActionRefreshLastTime = &v2
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Carport == nil {
				m.Carport = &ListRoleCarport{}
			}
			if err := m.Carport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolePark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RolePark = append(m.RolePark, &RoleParkRecord{})
			if err := m.RolePark[len(m.RolePark)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoleCarport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: list_role_carport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: list_role_carport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarInfo = append(m.CarInfo, &DbCarInfo{})
			if err := m.CarInfo[len(m.CarInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixCarInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixCarInfo = append(m.FixCarInfo, &DbFixCar{})
			if err := m.FixCarInfo[len(m.FixCarInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: car_effect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: car_effect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.LastTime = &v2
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Effect = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.BeginTime = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParkCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: park_car: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: park_car: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName[:0], dAtA[iNdEx:postIndex]...)
			if m.NickName == nil {
				m.NickName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EffectTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.BeginTimestamp = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ParkTime = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.EndTimestamp = &v2
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.EffectPercent = &v2
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BenefitTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.BenefitTime = &v2
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputItem = append(m.OutputItem, &ItemConfig{})
			if err := m.OutputItem[len(m.OutputItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodEffect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodEffect = append(m.GoodEffect, &CarEffect{})
			if err := m.GoodEffect[len(m.GoodEffect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadEffect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadEffect = append(m.BadEffect, &CarEffect{})
			if err := m.BadEffect[len(m.BadEffect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Car", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Car == nil {
				m.Car = &DbCarInfo{}
			}
			if err := m.Car.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraArmor", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ExtraArmor = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParkLot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: park_lot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: park_lot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v E_PARK_LOT_STATUS
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_PARK_LOT_STATUS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ProtectTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActTimestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ActTimestamp = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ActorIndex = &v2
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarInfo == nil {
				m.CarInfo = &ParkCar{}
			}
			if err := m.CarInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParkLotManagerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: park_lot_manager_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: park_lot_manager_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalParkCarNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalParkCarNum = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalParkPlayerNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalParkPlayerNum = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEnterPlayerNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalEnterPlayerNum = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSystemCarNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TotalSystemCarNum = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAutoParkTimestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.NextAutoParkTimestamp = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleCarLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_car_log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_car_log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.ActorIndex = &v2
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = append(m.NickName[:0], dAtA[iNdEx:postIndex]...)
			if m.NickName == nil {
				m.NickName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			var v E_ACT_CAR_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_ACT_CAR_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CarId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParkGoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: park_goods_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: park_goods_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ItemId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Count = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Currency = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Price = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBuy = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ShopIndex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ParkLotInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ParkLotInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ParkLotInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotList = append(m.LotList, &ParkLot{})
			if err := m.LotList[len(m.LotList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ReadyEnterParkScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ReadyEnterParkScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ReadyEnterParkScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MapId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2S_ReadyEnterParkScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2S_ReadyEnterParkScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2S_ReadyEnterParkScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SceneId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MapId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			var v E_SCENE_TYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_SCENE_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SceneType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetUnitindex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetUnitindex = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetIntaddr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RetIntaddr = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ReadyEnterParkScene) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ReadyEnterParkScene: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ReadyEnterParkScene: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ParkCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ParkCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ParkCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ParkCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ParkCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ParkCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UseItemSelfCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UseItemSelfCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UseItemSelfCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UseItemSelfCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UseItemSelfCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UseItemSelfCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DestoryAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DestoryAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DestoryAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DestoryAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DestoryAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DestoryAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DestoryTheCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DestoryTheCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DestoryTheCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FinalArmorEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FinalArmorEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FinalArmorEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FinalArmorEventResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FinalArmorEventResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FinalArmorEventResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DestoryTheCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DestoryTheCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DestoryTheCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardList = append(m.RewardList, &ItemConfig{})
			if err := m.RewardList[len(m.RewardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOk = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.EffectId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SayYesAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SayYesAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SayYesAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SayYesAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SayYesAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SayYesAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_SayYesTheCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_SayYesTheCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_SayYesTheCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TimeTurbulence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TimeTurbulence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TimeTurbulence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TimeTurbulenceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TimeTurbulenceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TimeTurbulenceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOk = &b
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_SayYesTheCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_SayYesTheCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_SayYesTheCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardList = append(m.RewardList, &ItemConfig{})
			if err := m.RewardList[len(m.RewardList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOk = &b
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_OldDriver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_OldDriver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_OldDriver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Level = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Exp = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffExp", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DiffExp = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PortNum = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionedCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ActionedCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ExpandCarport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ExpandCarport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ExpandCarport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ExpandCarport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ExpandCarport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ExpandCarport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_ExpandFixCarport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_ExpandFixCarport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_ExpandFixCarport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ExpandFixCarport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ExpandFixCarport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ExpandFixCarport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FixCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FixCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FixCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FixCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FixCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FixCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Car", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Car == nil {
				m.Car = &DbFixCar{}
			}
			if err := m.Car.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FastFixRoleCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FastFixRoleCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FastFixRoleCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FastFixRoleCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FastFixRoleCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FastFixRoleCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Car", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Car == nil {
				m.Car = &DbCarInfo{}
			}
			if err := m.Car.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_FixRoleCarByCrtStal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_FixRoleCarByCrtStal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_FixRoleCarByCrtStal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrystalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.CrystalNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_FixRoleCarByCrtStal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_FixRoleCarByCrtStal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_FixRoleCarByCrtStal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NeedNum = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Car", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Car == nil {
				m.Car = &DbFixCar{}
			}
			if err := m.Car.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DecomposeCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DecomposeCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DecomposeCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DecomposeCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DecomposeCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DecomposeCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_TakeCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TakeCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TakeCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TakeCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TakeCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TakeCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Car", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Car == nil {
				m.Car = &DbCarInfo{}
			}
			if err := m.Car.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AskCarLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AskCarLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AskCarLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AskCarLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AskCarLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AskCarLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogList = append(m.LogList, &RoleCarLog{})
			if err := m.LogList[len(m.LogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_AskCarParkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_AskCarParkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_AskCarParkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AskCarParkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AskCarParkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AskCarParkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarList = append(m.CarList, &ParkCar{})
			if err := m.CarList[len(m.CarList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_BuyParkShopGood) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_BuyParkShopGood: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_BuyParkShopGood: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.ShopIndex = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_BuyParkShopGood) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_BuyParkShopGood: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_BuyParkShopGood: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_AddCar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_AddCar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_AddCar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarInfo = append(m.CarInfo, &DbCarInfo{})
			if err := m.CarInfo[len(m.CarInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_CheckFixCarIsOK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_CheckFixCarIsOK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_CheckFixCarIsOK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.CarIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_CheckFixCarIsOK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_CheckFixCarIsOK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_CheckFixCarIsOK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v E_MSG_RET_CODE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_MSG_RET_CODE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Car", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParkLot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParkLot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Car == nil {
				m.Car = &DbFixCar{}
			}
			if err := m.Car.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ParkEventInform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ParkEventInform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ParkEventInform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var v E_PARK_TICK_EVENT
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= E_PARK_TICK_EVENT(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Event = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			v2 := int64(v)
			m.RoleIndex = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipParkLot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParkLot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParkLot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParkLot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParkLot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParkLot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParkLot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParkLot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParkLot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParkLot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParkLot = fmt.Errorf("proto: unexpected end of group")
)
