// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: EnumDef.proto

package pbd

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 协议版本号
type E_MSG_VERSION int32

const (
	E_MSG_VERSION_Msg_Version_Id E_MSG_VERSION = 2
)

var E_MSG_VERSION_name = map[int32]string{
	2: "Msg_Version_Id",
}

var E_MSG_VERSION_value = map[string]int32{
	"Msg_Version_Id": 2,
}

func (x E_MSG_VERSION) Enum() *E_MSG_VERSION {
	p := new(E_MSG_VERSION)
	*p = x
	return p
}

func (x E_MSG_VERSION) String() string {
	return proto.EnumName(E_MSG_VERSION_name, int32(x))
}

func (x *E_MSG_VERSION) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MSG_VERSION_value, data, "E_MSG_VERSION")
	if err != nil {
		return err
	}
	*x = E_MSG_VERSION(value)
	return nil
}

func (E_MSG_VERSION) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{0}
}

type E_ONLINE_UNIT_RET int32

const (
	E_ONLINE_UNIT_RET_EOUR_OK                   E_ONLINE_UNIT_RET = 0
	E_ONLINE_UNIT_RET_EOUR_FAILED               E_ONLINE_UNIT_RET = 1
	E_ONLINE_UNIT_RET_EOUR_NOT_EXIST            E_ONLINE_UNIT_RET = 2
	E_ONLINE_UNIT_RET_EOUR_EXIST                E_ONLINE_UNIT_RET = 3
	E_ONLINE_UNIT_RET_EOUR_COUNT_LIMIT          E_ONLINE_UNIT_RET = 4
	E_ONLINE_UNIT_RET_EOUR_CENTER_CAN_NOT_REACH E_ONLINE_UNIT_RET = 5
)

var E_ONLINE_UNIT_RET_name = map[int32]string{
	0: "EOUR_OK",
	1: "EOUR_FAILED",
	2: "EOUR_NOT_EXIST",
	3: "EOUR_EXIST",
	4: "EOUR_COUNT_LIMIT",
	5: "EOUR_CENTER_CAN_NOT_REACH",
}

var E_ONLINE_UNIT_RET_value = map[string]int32{
	"EOUR_OK":                   0,
	"EOUR_FAILED":               1,
	"EOUR_NOT_EXIST":            2,
	"EOUR_EXIST":                3,
	"EOUR_COUNT_LIMIT":          4,
	"EOUR_CENTER_CAN_NOT_REACH": 5,
}

func (x E_ONLINE_UNIT_RET) Enum() *E_ONLINE_UNIT_RET {
	p := new(E_ONLINE_UNIT_RET)
	*p = x
	return p
}

func (x E_ONLINE_UNIT_RET) String() string {
	return proto.EnumName(E_ONLINE_UNIT_RET_name, int32(x))
}

func (x *E_ONLINE_UNIT_RET) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ONLINE_UNIT_RET_value, data, "E_ONLINE_UNIT_RET")
	if err != nil {
		return err
	}
	*x = E_ONLINE_UNIT_RET(value)
	return nil
}

func (E_ONLINE_UNIT_RET) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{1}
}

type E_CHAPTER_GIFT_TAKE_FALG int32

const (
	E_CHAPTER_GIFT_TAKE_FALG_ECGTF_NOTPASSED      E_CHAPTER_GIFT_TAKE_FALG = 0
	E_CHAPTER_GIFT_TAKE_FALG_ECGTF_PASSED_NOTTAKE E_CHAPTER_GIFT_TAKE_FALG = 1
	E_CHAPTER_GIFT_TAKE_FALG_ECGTF_PASSED_TAKE    E_CHAPTER_GIFT_TAKE_FALG = 2
)

var E_CHAPTER_GIFT_TAKE_FALG_name = map[int32]string{
	0: "ECGTF_NOTPASSED",
	1: "ECGTF_PASSED_NOTTAKE",
	2: "ECGTF_PASSED_TAKE",
}

var E_CHAPTER_GIFT_TAKE_FALG_value = map[string]int32{
	"ECGTF_NOTPASSED":      0,
	"ECGTF_PASSED_NOTTAKE": 1,
	"ECGTF_PASSED_TAKE":    2,
}

func (x E_CHAPTER_GIFT_TAKE_FALG) Enum() *E_CHAPTER_GIFT_TAKE_FALG {
	p := new(E_CHAPTER_GIFT_TAKE_FALG)
	*p = x
	return p
}

func (x E_CHAPTER_GIFT_TAKE_FALG) String() string {
	return proto.EnumName(E_CHAPTER_GIFT_TAKE_FALG_name, int32(x))
}

func (x *E_CHAPTER_GIFT_TAKE_FALG) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_CHAPTER_GIFT_TAKE_FALG_value, data, "E_CHAPTER_GIFT_TAKE_FALG")
	if err != nil {
		return err
	}
	*x = E_CHAPTER_GIFT_TAKE_FALG(value)
	return nil
}

func (E_CHAPTER_GIFT_TAKE_FALG) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{2}
}

type E_GMAE_DATA_TYPE int32

const (
	E_GMAE_DATA_TYPE_EGDT_SKILL_BOOK_SHOP_BUY     E_GMAE_DATA_TYPE = 1
	E_GMAE_DATA_TYPE_EGDT_SKILL_BOOK_SHOP_REFRESH E_GMAE_DATA_TYPE = 2
	E_GMAE_DATA_TYPE_EGDT_MINI_GAME_SHOP_REFRESH  E_GMAE_DATA_TYPE = 3
	E_GMAE_DATA_TYPE_EGDT_ARENA_COUNT_BUY         E_GMAE_DATA_TYPE = 4
	E_GMAE_DATA_TYPE_EGDT_ARENA_CLEAN_CD          E_GMAE_DATA_TYPE = 5
	E_GMAE_DATA_TYPE_EGDT_SIGN_RETROACTIVE        E_GMAE_DATA_TYPE = 6
	E_GMAE_DATA_TYPE_EGDT_PARK_CAR_SHOP_BUY       E_GMAE_DATA_TYPE = 7
	E_GMAE_DATA_TYPE_EGDT_PARK_CAR_SHOP_REFRESH   E_GMAE_DATA_TYPE = 8
	E_GMAE_DATA_TYPE_EGDT_PARK_CAR_FIX_CLEAN_CD   E_GMAE_DATA_TYPE = 9
	E_GMAE_DATA_TYPE_EGDT_PARK_CAR_EXTEND         E_GMAE_DATA_TYPE = 10
	E_GMAE_DATA_TYPE_EGDT_FACE_SHOP_BUY           E_GMAE_DATA_TYPE = 11
	E_GMAE_DATA_TYPE_EGDT_FACE_SHOP_REFRESH       E_GMAE_DATA_TYPE = 12
	E_GMAE_DATA_TYPE_EGDT_SUIT_SHOP_BUY           E_GMAE_DATA_TYPE = 13
	E_GMAE_DATA_TYPE_EGDT_MONERY_BUY              E_GMAE_DATA_TYPE = 14
	E_GMAE_DATA_TYPE_EGDT_ARENA_BUY               E_GMAE_DATA_TYPE = 15
	E_GMAE_DATA_TYPE_EGDT_EQUIP_FAST_FIX          E_GMAE_DATA_TYPE = 16
	E_GMAE_DATA_TYPE_EGDT_SHARE_WEIXIN            E_GMAE_DATA_TYPE = 17
	E_GMAE_DATA_TYPE_EGDT_EXTEND_EQUIP_BAG_SIZE   E_GMAE_DATA_TYPE = 18
	E_GMAE_DATA_TYPE_EGDT_NIUDAN                  E_GMAE_DATA_TYPE = 1000
	E_GMAE_DATA_TYPE_EGDT_SEVEN_DAY               E_GMAE_DATA_TYPE = 1001
	E_GMAE_DATA_TYPE_EGDT_SOLD                    E_GMAE_DATA_TYPE = 1002
	E_GMAE_DATA_TYPE_EGDT_SELF_FACE               E_GMAE_DATA_TYPE = 1003
	E_GMAE_DATA_TYPE_EGDT_BUY_STEMINA             E_GMAE_DATA_TYPE = 1004
	E_GMAE_DATA_TYPE_EGDT_POINT_GOD               E_GMAE_DATA_TYPE = 1005
)

var E_GMAE_DATA_TYPE_name = map[int32]string{
	1:    "EGDT_SKILL_BOOK_SHOP_BUY",
	2:    "EGDT_SKILL_BOOK_SHOP_REFRESH",
	3:    "EGDT_MINI_GAME_SHOP_REFRESH",
	4:    "EGDT_ARENA_COUNT_BUY",
	5:    "EGDT_ARENA_CLEAN_CD",
	6:    "EGDT_SIGN_RETROACTIVE",
	7:    "EGDT_PARK_CAR_SHOP_BUY",
	8:    "EGDT_PARK_CAR_SHOP_REFRESH",
	9:    "EGDT_PARK_CAR_FIX_CLEAN_CD",
	10:   "EGDT_PARK_CAR_EXTEND",
	11:   "EGDT_FACE_SHOP_BUY",
	12:   "EGDT_FACE_SHOP_REFRESH",
	13:   "EGDT_SUIT_SHOP_BUY",
	14:   "EGDT_MONERY_BUY",
	15:   "EGDT_ARENA_BUY",
	16:   "EGDT_EQUIP_FAST_FIX",
	17:   "EGDT_SHARE_WEIXIN",
	18:   "EGDT_EXTEND_EQUIP_BAG_SIZE",
	1000: "EGDT_NIUDAN",
	1001: "EGDT_SEVEN_DAY",
	1002: "EGDT_SOLD",
	1003: "EGDT_SELF_FACE",
	1004: "EGDT_BUY_STEMINA",
	1005: "EGDT_POINT_GOD",
}

var E_GMAE_DATA_TYPE_value = map[string]int32{
	"EGDT_SKILL_BOOK_SHOP_BUY":     1,
	"EGDT_SKILL_BOOK_SHOP_REFRESH": 2,
	"EGDT_MINI_GAME_SHOP_REFRESH":  3,
	"EGDT_ARENA_COUNT_BUY":         4,
	"EGDT_ARENA_CLEAN_CD":          5,
	"EGDT_SIGN_RETROACTIVE":        6,
	"EGDT_PARK_CAR_SHOP_BUY":       7,
	"EGDT_PARK_CAR_SHOP_REFRESH":   8,
	"EGDT_PARK_CAR_FIX_CLEAN_CD":   9,
	"EGDT_PARK_CAR_EXTEND":         10,
	"EGDT_FACE_SHOP_BUY":           11,
	"EGDT_FACE_SHOP_REFRESH":       12,
	"EGDT_SUIT_SHOP_BUY":           13,
	"EGDT_MONERY_BUY":              14,
	"EGDT_ARENA_BUY":               15,
	"EGDT_EQUIP_FAST_FIX":          16,
	"EGDT_SHARE_WEIXIN":            17,
	"EGDT_EXTEND_EQUIP_BAG_SIZE":   18,
	"EGDT_NIUDAN":                  1000,
	"EGDT_SEVEN_DAY":               1001,
	"EGDT_SOLD":                    1002,
	"EGDT_SELF_FACE":               1003,
	"EGDT_BUY_STEMINA":             1004,
	"EGDT_POINT_GOD":               1005,
}

func (x E_GMAE_DATA_TYPE) Enum() *E_GMAE_DATA_TYPE {
	p := new(E_GMAE_DATA_TYPE)
	*p = x
	return p
}

func (x E_GMAE_DATA_TYPE) String() string {
	return proto.EnumName(E_GMAE_DATA_TYPE_name, int32(x))
}

func (x *E_GMAE_DATA_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_GMAE_DATA_TYPE_value, data, "E_GMAE_DATA_TYPE")
	if err != nil {
		return err
	}
	*x = E_GMAE_DATA_TYPE(value)
	return nil
}

func (E_GMAE_DATA_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{3}
}

type E_GMAE_ONLINE_NUM_TYPE int32

const (
	E_GMAE_ONLINE_NUM_TYPE_EGOT_ROLE_ONLINE_TIME E_GMAE_ONLINE_NUM_TYPE = 1
	E_GMAE_ONLINE_NUM_TYPE_EGOT_ONLINE_TOTAL_NUM E_GMAE_ONLINE_NUM_TYPE = 2
	E_GMAE_ONLINE_NUM_TYPE_EGOT_ONLINE_TOP_NUM   E_GMAE_ONLINE_NUM_TYPE = 3
)

var E_GMAE_ONLINE_NUM_TYPE_name = map[int32]string{
	1: "EGOT_ROLE_ONLINE_TIME",
	2: "EGOT_ONLINE_TOTAL_NUM",
	3: "EGOT_ONLINE_TOP_NUM",
}

var E_GMAE_ONLINE_NUM_TYPE_value = map[string]int32{
	"EGOT_ROLE_ONLINE_TIME": 1,
	"EGOT_ONLINE_TOTAL_NUM": 2,
	"EGOT_ONLINE_TOP_NUM":   3,
}

func (x E_GMAE_ONLINE_NUM_TYPE) Enum() *E_GMAE_ONLINE_NUM_TYPE {
	p := new(E_GMAE_ONLINE_NUM_TYPE)
	*p = x
	return p
}

func (x E_GMAE_ONLINE_NUM_TYPE) String() string {
	return proto.EnumName(E_GMAE_ONLINE_NUM_TYPE_name, int32(x))
}

func (x *E_GMAE_ONLINE_NUM_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_GMAE_ONLINE_NUM_TYPE_value, data, "E_GMAE_ONLINE_NUM_TYPE")
	if err != nil {
		return err
	}
	*x = E_GMAE_ONLINE_NUM_TYPE(value)
	return nil
}

func (E_GMAE_ONLINE_NUM_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{4}
}

type E_GMAE_ONLINE_TYPE int32

const (
	E_GMAE_ONLINE_TYPE_EGOT_ONLINE  E_GMAE_ONLINE_TYPE = 1
	E_GMAE_ONLINE_TYPE_EGOT_OFFLINE E_GMAE_ONLINE_TYPE = 0
)

var E_GMAE_ONLINE_TYPE_name = map[int32]string{
	1: "EGOT_ONLINE",
	0: "EGOT_OFFLINE",
}

var E_GMAE_ONLINE_TYPE_value = map[string]int32{
	"EGOT_ONLINE":  1,
	"EGOT_OFFLINE": 0,
}

func (x E_GMAE_ONLINE_TYPE) Enum() *E_GMAE_ONLINE_TYPE {
	p := new(E_GMAE_ONLINE_TYPE)
	*p = x
	return p
}

func (x E_GMAE_ONLINE_TYPE) String() string {
	return proto.EnumName(E_GMAE_ONLINE_TYPE_name, int32(x))
}

func (x *E_GMAE_ONLINE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_GMAE_ONLINE_TYPE_value, data, "E_GMAE_ONLINE_TYPE")
	if err != nil {
		return err
	}
	*x = E_GMAE_ONLINE_TYPE(value)
	return nil
}

func (E_GMAE_ONLINE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{5}
}

type E_BATH_STATUS_TYPE int32

const (
	E_BATH_STATUS_TYPE_EBST_TIME E_BATH_STATUS_TYPE = 1
	E_BATH_STATUS_TYPE_EBST_NUM  E_BATH_STATUS_TYPE = 2
)

var E_BATH_STATUS_TYPE_name = map[int32]string{
	1: "EBST_TIME",
	2: "EBST_NUM",
}

var E_BATH_STATUS_TYPE_value = map[string]int32{
	"EBST_TIME": 1,
	"EBST_NUM":  2,
}

func (x E_BATH_STATUS_TYPE) Enum() *E_BATH_STATUS_TYPE {
	p := new(E_BATH_STATUS_TYPE)
	*p = x
	return p
}

func (x E_BATH_STATUS_TYPE) String() string {
	return proto.EnumName(E_BATH_STATUS_TYPE_name, int32(x))
}

func (x *E_BATH_STATUS_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_BATH_STATUS_TYPE_value, data, "E_BATH_STATUS_TYPE")
	if err != nil {
		return err
	}
	*x = E_BATH_STATUS_TYPE(value)
	return nil
}

func (E_BATH_STATUS_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{6}
}

type E_BATH_STATUS_ID int32

const (
	E_BATH_STATUS_ID_EBSI_HANGUP_LAND E_BATH_STATUS_ID = 1
	E_BATH_STATUS_ID_EBSI_SHOWER      E_BATH_STATUS_ID = 2
	E_BATH_STATUS_ID_EBSI_RUB         E_BATH_STATUS_ID = 3
	E_BATH_STATUS_ID_EBSI_HANGUP_POOL E_BATH_STATUS_ID = 4
)

var E_BATH_STATUS_ID_name = map[int32]string{
	1: "EBSI_HANGUP_LAND",
	2: "EBSI_SHOWER",
	3: "EBSI_RUB",
	4: "EBSI_HANGUP_POOL",
}

var E_BATH_STATUS_ID_value = map[string]int32{
	"EBSI_HANGUP_LAND": 1,
	"EBSI_SHOWER":      2,
	"EBSI_RUB":         3,
	"EBSI_HANGUP_POOL": 4,
}

func (x E_BATH_STATUS_ID) Enum() *E_BATH_STATUS_ID {
	p := new(E_BATH_STATUS_ID)
	*p = x
	return p
}

func (x E_BATH_STATUS_ID) String() string {
	return proto.EnumName(E_BATH_STATUS_ID_name, int32(x))
}

func (x *E_BATH_STATUS_ID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_BATH_STATUS_ID_value, data, "E_BATH_STATUS_ID")
	if err != nil {
		return err
	}
	*x = E_BATH_STATUS_ID(value)
	return nil
}

func (E_BATH_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{7}
}

type E_INTERACT_TOOL_TYPE int32

const (
	E_INTERACT_TOOL_TYPE_EITT_WATER_BALL  E_INTERACT_TOOL_TYPE = 1
	E_INTERACT_TOOL_TYPE_EITT_WATER_GUN   E_INTERACT_TOOL_TYPE = 2
	E_INTERACT_TOOL_TYPE_EITT_WASHBASIN   E_INTERACT_TOOL_TYPE = 3
	E_INTERACT_TOOL_TYPE_EITT_WATERSPALSH E_INTERACT_TOOL_TYPE = 4
)

var E_INTERACT_TOOL_TYPE_name = map[int32]string{
	1: "EITT_WATER_BALL",
	2: "EITT_WATER_GUN",
	3: "EITT_WASHBASIN",
	4: "EITT_WATERSPALSH",
}

var E_INTERACT_TOOL_TYPE_value = map[string]int32{
	"EITT_WATER_BALL":  1,
	"EITT_WATER_GUN":   2,
	"EITT_WASHBASIN":   3,
	"EITT_WATERSPALSH": 4,
}

func (x E_INTERACT_TOOL_TYPE) Enum() *E_INTERACT_TOOL_TYPE {
	p := new(E_INTERACT_TOOL_TYPE)
	*p = x
	return p
}

func (x E_INTERACT_TOOL_TYPE) String() string {
	return proto.EnumName(E_INTERACT_TOOL_TYPE_name, int32(x))
}

func (x *E_INTERACT_TOOL_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_INTERACT_TOOL_TYPE_value, data, "E_INTERACT_TOOL_TYPE")
	if err != nil {
		return err
	}
	*x = E_INTERACT_TOOL_TYPE(value)
	return nil
}

func (E_INTERACT_TOOL_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{8}
}

// 游戏定义
type E_ITEM_DEF int32

const (
	E_ITEM_DEF_GOLD_ID              E_ITEM_DEF = 1
	E_ITEM_DEF_ENDURANCE_ID         E_ITEM_DEF = 2
	E_ITEM_DEF_DIAMOND_COIN_ID      E_ITEM_DEF = 3
	E_ITEM_DEF_EXP_ID               E_ITEM_DEF = 4
	E_ITEM_DEF_SKILL_POIN_ID        E_ITEM_DEF = 5
	E_ITEM_DEF_ARENASCROE_ID        E_ITEM_DEF = 6
	E_ITEM_DEF_ARENA_COUNT_ID       E_ITEM_DEF = 7
	E_ITEM_DEF_SWORD_COUNT_ID       E_ITEM_DEF = 8
	E_ITEM_DEF_VIP_EXP_ID           E_ITEM_DEF = 9
	E_ITEM_DEF_ID_UNKNOWN3          E_ITEM_DEF = 10
	E_ITEM_DEF_ID_UNKNOWN4          E_ITEM_DEF = 11
	E_ITEM_DEF_ID_UNKNOWN5          E_ITEM_DEF = 12
	E_ITEM_DEF_PACKAGE_MIN_ID       E_ITEM_DEF = 10001
	E_ITEM_DEF_PACKAGE_MAX_ID       E_ITEM_DEF = 19999
	E_ITEM_DEF_PROP_MIN_ID          E_ITEM_DEF = 20001
	E_ITEM_DEF_PROP_MAX_ID          E_ITEM_DEF = 24999
	E_ITEM_DEF_MATERIAL_MIN_ID      E_ITEM_DEF = 25000
	E_ITEM_DEF_MATERIAL_MAX_ID      E_ITEM_DEF = 29999
	E_ITEM_DEF_CARD_MIN_ID          E_ITEM_DEF = 30001
	E_ITEM_DEF_CARD_MAX_ID          E_ITEM_DEF = 30999
	E_ITEM_DEF_PET_MIN_ID           E_ITEM_DEF = 31001
	E_ITEM_DEF_PET_MAX_ID           E_ITEM_DEF = 31999
	E_ITEM_DEF_EQUIP_MIN_ID         E_ITEM_DEF = 40001
	E_ITEM_DEF_EQUIP_MAX_ID         E_ITEM_DEF = 49999
	E_ITEM_DEF_FACE_MIN_ID          E_ITEM_DEF = 80001
	E_ITEM_DEF_FACE_MAX_ID          E_ITEM_DEF = 89999
	E_ITEM_DEF_SUIT_MIN_ID          E_ITEM_DEF = 90001
	E_ITEM_DEF_SUIT_MAX_ID          E_ITEM_DEF = 91999
	E_ITEM_DEF_CAR_MIN_ID           E_ITEM_DEF = 92001
	E_ITEM_DEF_CAR_MAX_ID           E_ITEM_DEF = 92999
	E_ITEM_DEF_FURNITURE_MIN_ID     E_ITEM_DEF = 93001
	E_ITEM_DEF_FURNITURE_MAX_ID     E_ITEM_DEF = 95999
	E_ITEM_DEF_INTERACT_BASE_MIN_ID E_ITEM_DEF = 100000
	E_ITEM_DEF_INTERACT_BASE_MAX_ID E_ITEM_DEF = 100999
	E_ITEM_DEF_INTERACT_EX_MIN_ID   E_ITEM_DEF = 101000
	E_ITEM_DEF_INTERACT_EX_MAX_ID   E_ITEM_DEF = 104999
)

var E_ITEM_DEF_name = map[int32]string{
	1:      "GOLD_ID",
	2:      "ENDURANCE_ID",
	3:      "DIAMOND_COIN_ID",
	4:      "EXP_ID",
	5:      "SKILL_POIN_ID",
	6:      "ARENASCROE_ID",
	7:      "ARENA_COUNT_ID",
	8:      "SWORD_COUNT_ID",
	9:      "VIP_EXP_ID",
	10:     "ID_UNKNOWN3",
	11:     "ID_UNKNOWN4",
	12:     "ID_UNKNOWN5",
	10001:  "PACKAGE_MIN_ID",
	19999:  "PACKAGE_MAX_ID",
	20001:  "PROP_MIN_ID",
	24999:  "PROP_MAX_ID",
	25000:  "MATERIAL_MIN_ID",
	29999:  "MATERIAL_MAX_ID",
	30001:  "CARD_MIN_ID",
	30999:  "CARD_MAX_ID",
	31001:  "PET_MIN_ID",
	31999:  "PET_MAX_ID",
	40001:  "EQUIP_MIN_ID",
	49999:  "EQUIP_MAX_ID",
	80001:  "FACE_MIN_ID",
	89999:  "FACE_MAX_ID",
	90001:  "SUIT_MIN_ID",
	91999:  "SUIT_MAX_ID",
	92001:  "CAR_MIN_ID",
	92999:  "CAR_MAX_ID",
	93001:  "FURNITURE_MIN_ID",
	95999:  "FURNITURE_MAX_ID",
	100000: "INTERACT_BASE_MIN_ID",
	100999: "INTERACT_BASE_MAX_ID",
	101000: "INTERACT_EX_MIN_ID",
	104999: "INTERACT_EX_MAX_ID",
}

var E_ITEM_DEF_value = map[string]int32{
	"GOLD_ID":              1,
	"ENDURANCE_ID":         2,
	"DIAMOND_COIN_ID":      3,
	"EXP_ID":               4,
	"SKILL_POIN_ID":        5,
	"ARENASCROE_ID":        6,
	"ARENA_COUNT_ID":       7,
	"SWORD_COUNT_ID":       8,
	"VIP_EXP_ID":           9,
	"ID_UNKNOWN3":          10,
	"ID_UNKNOWN4":          11,
	"ID_UNKNOWN5":          12,
	"PACKAGE_MIN_ID":       10001,
	"PACKAGE_MAX_ID":       19999,
	"PROP_MIN_ID":          20001,
	"PROP_MAX_ID":          24999,
	"MATERIAL_MIN_ID":      25000,
	"MATERIAL_MAX_ID":      29999,
	"CARD_MIN_ID":          30001,
	"CARD_MAX_ID":          30999,
	"PET_MIN_ID":           31001,
	"PET_MAX_ID":           31999,
	"EQUIP_MIN_ID":         40001,
	"EQUIP_MAX_ID":         49999,
	"FACE_MIN_ID":          80001,
	"FACE_MAX_ID":          89999,
	"SUIT_MIN_ID":          90001,
	"SUIT_MAX_ID":          91999,
	"CAR_MIN_ID":           92001,
	"CAR_MAX_ID":           92999,
	"FURNITURE_MIN_ID":     93001,
	"FURNITURE_MAX_ID":     95999,
	"INTERACT_BASE_MIN_ID": 100000,
	"INTERACT_BASE_MAX_ID": 100999,
	"INTERACT_EX_MIN_ID":   101000,
	"INTERACT_EX_MAX_ID":   104999,
}

func (x E_ITEM_DEF) Enum() *E_ITEM_DEF {
	p := new(E_ITEM_DEF)
	*p = x
	return p
}

func (x E_ITEM_DEF) String() string {
	return proto.EnumName(E_ITEM_DEF_name, int32(x))
}

func (x *E_ITEM_DEF) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ITEM_DEF_value, data, "E_ITEM_DEF")
	if err != nil {
		return err
	}
	*x = E_ITEM_DEF(value)
	return nil
}

func (E_ITEM_DEF) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{9}
}

// 物品类型
type E_GOODS_TYPE int32

const (
	E_GOODS_TYPE_EGT_INVALID      E_GOODS_TYPE = -1
	E_GOODS_TYPE_EGT_GOLD         E_GOODS_TYPE = 1
	E_GOODS_TYPE_EGT_ENDURANCE    E_GOODS_TYPE = 2
	E_GOODS_TYPE_EGT_DIAMOND_COIN E_GOODS_TYPE = 3
	E_GOODS_TYPE_EGT_EXP          E_GOODS_TYPE = 4
	E_GOODS_TYPE_EGT_SKILL_POINT  E_GOODS_TYPE = 5
	E_GOODS_TYPE_EGT_ARENASCROE   E_GOODS_TYPE = 6
	E_GOODS_TYPE_EGT_ARENA_COUNT  E_GOODS_TYPE = 7
	E_GOODS_TYPE_EGT_SWORD_COUNT  E_GOODS_TYPE = 8
	E_GOODS_TYPE_EGT_VIP_EXP      E_GOODS_TYPE = 9
	E_GOODS_TYPE_EGT_CARD         E_GOODS_TYPE = 50
	E_GOODS_TYPE_EGT_MATERIAL     E_GOODS_TYPE = 100
	E_GOODS_TYPE_EGT_PACKAGE      E_GOODS_TYPE = 101
	E_GOODS_TYPE_EGT_PROP         E_GOODS_TYPE = 102
	E_GOODS_TYPE_EGT_EQUIP        E_GOODS_TYPE = 103
	E_GOODS_TYPE_EGT_PET          E_GOODS_TYPE = 104
	E_GOODS_TYPE_EGT_FACE         E_GOODS_TYPE = 105
	E_GOODS_TYPE_EGT_SUIT         E_GOODS_TYPE = 106
	E_GOODS_TYPE_EGT_CAR          E_GOODS_TYPE = 107
	E_GOODS_TYPE_EGT_FURNITURE    E_GOODS_TYPE = 108
	E_GOODS_TYPE_EGT_INTERACT     E_GOODS_TYPE = 109
)

var E_GOODS_TYPE_name = map[int32]string{
	-1:  "EGT_INVALID",
	1:   "EGT_GOLD",
	2:   "EGT_ENDURANCE",
	3:   "EGT_DIAMOND_COIN",
	4:   "EGT_EXP",
	5:   "EGT_SKILL_POINT",
	6:   "EGT_ARENASCROE",
	7:   "EGT_ARENA_COUNT",
	8:   "EGT_SWORD_COUNT",
	9:   "EGT_VIP_EXP",
	50:  "EGT_CARD",
	100: "EGT_MATERIAL",
	101: "EGT_PACKAGE",
	102: "EGT_PROP",
	103: "EGT_EQUIP",
	104: "EGT_PET",
	105: "EGT_FACE",
	106: "EGT_SUIT",
	107: "EGT_CAR",
	108: "EGT_FURNITURE",
	109: "EGT_INTERACT",
}

var E_GOODS_TYPE_value = map[string]int32{
	"EGT_INVALID":      -1,
	"EGT_GOLD":         1,
	"EGT_ENDURANCE":    2,
	"EGT_DIAMOND_COIN": 3,
	"EGT_EXP":          4,
	"EGT_SKILL_POINT":  5,
	"EGT_ARENASCROE":   6,
	"EGT_ARENA_COUNT":  7,
	"EGT_SWORD_COUNT":  8,
	"EGT_VIP_EXP":      9,
	"EGT_CARD":         50,
	"EGT_MATERIAL":     100,
	"EGT_PACKAGE":      101,
	"EGT_PROP":         102,
	"EGT_EQUIP":        103,
	"EGT_PET":          104,
	"EGT_FACE":         105,
	"EGT_SUIT":         106,
	"EGT_CAR":          107,
	"EGT_FURNITURE":    108,
	"EGT_INTERACT":     109,
}

func (x E_GOODS_TYPE) Enum() *E_GOODS_TYPE {
	p := new(E_GOODS_TYPE)
	*p = x
	return p
}

func (x E_GOODS_TYPE) String() string {
	return proto.EnumName(E_GOODS_TYPE_name, int32(x))
}

func (x *E_GOODS_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_GOODS_TYPE_value, data, "E_GOODS_TYPE")
	if err != nil {
		return err
	}
	*x = E_GOODS_TYPE(value)
	return nil
}

func (E_GOODS_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{10}
}

// 装备部位类型
type E_EQUIP_SITE_TYPE int32

const (
	E_EQUIP_SITE_TYPE_EEST_HELMET    E_EQUIP_SITE_TYPE = 1
	E_EQUIP_SITE_TYPE_EEST_CLOTHES   E_EQUIP_SITE_TYPE = 2
	E_EQUIP_SITE_TYPE_EEST_SHOES     E_EQUIP_SITE_TYPE = 3
	E_EQUIP_SITE_TYPE_EEST_ORNAMENTS E_EQUIP_SITE_TYPE = 4
	E_EQUIP_SITE_TYPE_EEST_WEAPONS   E_EQUIP_SITE_TYPE = 5
	E_EQUIP_SITE_TYPE_EEST_VEHICLE   E_EQUIP_SITE_TYPE = 6
)

var E_EQUIP_SITE_TYPE_name = map[int32]string{
	1: "EEST_HELMET",
	2: "EEST_CLOTHES",
	3: "EEST_SHOES",
	4: "EEST_ORNAMENTS",
	5: "EEST_WEAPONS",
	6: "EEST_VEHICLE",
}

var E_EQUIP_SITE_TYPE_value = map[string]int32{
	"EEST_HELMET":    1,
	"EEST_CLOTHES":   2,
	"EEST_SHOES":     3,
	"EEST_ORNAMENTS": 4,
	"EEST_WEAPONS":   5,
	"EEST_VEHICLE":   6,
}

func (x E_EQUIP_SITE_TYPE) Enum() *E_EQUIP_SITE_TYPE {
	p := new(E_EQUIP_SITE_TYPE)
	*p = x
	return p
}

func (x E_EQUIP_SITE_TYPE) String() string {
	return proto.EnumName(E_EQUIP_SITE_TYPE_name, int32(x))
}

func (x *E_EQUIP_SITE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_EQUIP_SITE_TYPE_value, data, "E_EQUIP_SITE_TYPE")
	if err != nil {
		return err
	}
	*x = E_EQUIP_SITE_TYPE(value)
	return nil
}

func (E_EQUIP_SITE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{11}
}

// 外观显示改变标识,前6个与E_EQUIP_SITE_TYPE必须一致
type E_ROLE_SHOW_SITE int32

const (
	E_ROLE_SHOW_SITE_ERSS_HELMET    E_ROLE_SHOW_SITE = 1
	E_ROLE_SHOW_SITE_ERSS_CLOTHES   E_ROLE_SHOW_SITE = 2
	E_ROLE_SHOW_SITE_ERSS_SHOES     E_ROLE_SHOW_SITE = 3
	E_ROLE_SHOW_SITE_ERSS_ORNAMENTS E_ROLE_SHOW_SITE = 4
	E_ROLE_SHOW_SITE_ERSS_WEAPONS   E_ROLE_SHOW_SITE = 5
	E_ROLE_SHOW_SITE_ERSS_VEHICLE   E_ROLE_SHOW_SITE = 6
	E_ROLE_SHOW_SITE_ERSS_FACE      E_ROLE_SHOW_SITE = 10
	E_ROLE_SHOW_SITE_ERSS_SUIT      E_ROLE_SHOW_SITE = 11
)

var E_ROLE_SHOW_SITE_name = map[int32]string{
	1:  "ERSS_HELMET",
	2:  "ERSS_CLOTHES",
	3:  "ERSS_SHOES",
	4:  "ERSS_ORNAMENTS",
	5:  "ERSS_WEAPONS",
	6:  "ERSS_VEHICLE",
	10: "ERSS_FACE",
	11: "ERSS_SUIT",
}

var E_ROLE_SHOW_SITE_value = map[string]int32{
	"ERSS_HELMET":    1,
	"ERSS_CLOTHES":   2,
	"ERSS_SHOES":     3,
	"ERSS_ORNAMENTS": 4,
	"ERSS_WEAPONS":   5,
	"ERSS_VEHICLE":   6,
	"ERSS_FACE":      10,
	"ERSS_SUIT":      11,
}

func (x E_ROLE_SHOW_SITE) Enum() *E_ROLE_SHOW_SITE {
	p := new(E_ROLE_SHOW_SITE)
	*p = x
	return p
}

func (x E_ROLE_SHOW_SITE) String() string {
	return proto.EnumName(E_ROLE_SHOW_SITE_name, int32(x))
}

func (x *E_ROLE_SHOW_SITE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ROLE_SHOW_SITE_value, data, "E_ROLE_SHOW_SITE")
	if err != nil {
		return err
	}
	*x = E_ROLE_SHOW_SITE(value)
	return nil
}

func (E_ROLE_SHOW_SITE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{12}
}

// 技能类型
type E_SKILL_TYPE int32

const (
	E_SKILL_TYPE_EST_INVALID_SKILL E_SKILL_TYPE = -1
	E_SKILL_TYPE_EST_TALENT_SKILL  E_SKILL_TYPE = 1
	E_SKILL_TYPE_EST_BOOK_SKILL    E_SKILL_TYPE = 2
	E_SKILL_TYPE_EST_SUIT_SKILL    E_SKILL_TYPE = 3
)

var E_SKILL_TYPE_name = map[int32]string{
	-1: "EST_INVALID_SKILL",
	1:  "EST_TALENT_SKILL",
	2:  "EST_BOOK_SKILL",
	3:  "EST_SUIT_SKILL",
}

var E_SKILL_TYPE_value = map[string]int32{
	"EST_INVALID_SKILL": -1,
	"EST_TALENT_SKILL":  1,
	"EST_BOOK_SKILL":    2,
	"EST_SUIT_SKILL":    3,
}

func (x E_SKILL_TYPE) Enum() *E_SKILL_TYPE {
	p := new(E_SKILL_TYPE)
	*p = x
	return p
}

func (x E_SKILL_TYPE) String() string {
	return proto.EnumName(E_SKILL_TYPE_name, int32(x))
}

func (x *E_SKILL_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_SKILL_TYPE_value, data, "E_SKILL_TYPE")
	if err != nil {
		return err
	}
	*x = E_SKILL_TYPE(value)
	return nil
}

func (E_SKILL_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{13}
}

// 道具类型
type E_ITEM_TYPE int32

const (
	E_ITEM_TYPE_ETT_INVALID             E_ITEM_TYPE = -1
	E_ITEM_TYPE_ETT_PET_EGG             E_ITEM_TYPE = 5
	E_ITEM_TYPE_ETT_TEST_WEAR_LIST_TYPE E_ITEM_TYPE = 100
)

var E_ITEM_TYPE_name = map[int32]string{
	-1:  "ETT_INVALID",
	5:   "ETT_PET_EGG",
	100: "ETT_TEST_WEAR_LIST_TYPE",
}

var E_ITEM_TYPE_value = map[string]int32{
	"ETT_INVALID":             -1,
	"ETT_PET_EGG":             5,
	"ETT_TEST_WEAR_LIST_TYPE": 100,
}

func (x E_ITEM_TYPE) Enum() *E_ITEM_TYPE {
	p := new(E_ITEM_TYPE)
	*p = x
	return p
}

func (x E_ITEM_TYPE) String() string {
	return proto.EnumName(E_ITEM_TYPE_name, int32(x))
}

func (x *E_ITEM_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ITEM_TYPE_value, data, "E_ITEM_TYPE")
	if err != nil {
		return err
	}
	*x = E_ITEM_TYPE(value)
	return nil
}

func (E_ITEM_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{14}
}

// 场景类型
type E_SCENE_TYPE int32

const (
	E_SCENE_TYPE_EST_CITY      E_SCENE_TYPE = 1
	E_SCENE_TYPE_EST_CYKJ      E_SCENE_TYPE = 2
	E_SCENE_TYPE_EST_BATHHOUSE E_SCENE_TYPE = 3
	E_SCENE_TYPE_EST_MXFB      E_SCENE_TYPE = 4
	E_SCENE_TYPE_EST_MGAME     E_SCENE_TYPE = 5
	E_SCENE_TYPE_EST_ARENA     E_SCENE_TYPE = 6
	E_SCENE_TYPE_EST_PARK      E_SCENE_TYPE = 7
	E_SCENE_TYPE_EST_DANMUKA   E_SCENE_TYPE = 8
	E_SCENE_TYPE_EST_WILD      E_SCENE_TYPE = 9
)

var E_SCENE_TYPE_name = map[int32]string{
	1: "EST_CITY",
	2: "EST_CYKJ",
	3: "EST_BATHHOUSE",
	4: "EST_MXFB",
	5: "EST_MGAME",
	6: "EST_ARENA",
	7: "EST_PARK",
	8: "EST_DANMUKA",
	9: "EST_WILD",
}

var E_SCENE_TYPE_value = map[string]int32{
	"EST_CITY":      1,
	"EST_CYKJ":      2,
	"EST_BATHHOUSE": 3,
	"EST_MXFB":      4,
	"EST_MGAME":     5,
	"EST_ARENA":     6,
	"EST_PARK":      7,
	"EST_DANMUKA":   8,
	"EST_WILD":      9,
}

func (x E_SCENE_TYPE) Enum() *E_SCENE_TYPE {
	p := new(E_SCENE_TYPE)
	*p = x
	return p
}

func (x E_SCENE_TYPE) String() string {
	return proto.EnumName(E_SCENE_TYPE_name, int32(x))
}

func (x *E_SCENE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_SCENE_TYPE_value, data, "E_SCENE_TYPE")
	if err != nil {
		return err
	}
	*x = E_SCENE_TYPE(value)
	return nil
}

func (E_SCENE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{15}
}

// 小游戏场景类型
type E_MINIGAME_TYPE int32

const (
	E_MINIGAME_TYPE_EMT_DOWNSTAIRS_MAN E_MINIGAME_TYPE = 1
	E_MINIGAME_TYPE_EMT_WALKON_SWORD   E_MINIGAME_TYPE = 2
	E_MINIGAME_TYPE_EMT_FIGHT_TOWN     E_MINIGAME_TYPE = 3
	E_MINIGAME_TYPE_EMT_GREEDY_SNAKE   E_MINIGAME_TYPE = 4
)

var E_MINIGAME_TYPE_name = map[int32]string{
	1: "EMT_DOWNSTAIRS_MAN",
	2: "EMT_WALKON_SWORD",
	3: "EMT_FIGHT_TOWN",
	4: "EMT_GREEDY_SNAKE",
}

var E_MINIGAME_TYPE_value = map[string]int32{
	"EMT_DOWNSTAIRS_MAN": 1,
	"EMT_WALKON_SWORD":   2,
	"EMT_FIGHT_TOWN":     3,
	"EMT_GREEDY_SNAKE":   4,
}

func (x E_MINIGAME_TYPE) Enum() *E_MINIGAME_TYPE {
	p := new(E_MINIGAME_TYPE)
	*p = x
	return p
}

func (x E_MINIGAME_TYPE) String() string {
	return proto.EnumName(E_MINIGAME_TYPE_name, int32(x))
}

func (x *E_MINIGAME_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MINIGAME_TYPE_value, data, "E_MINIGAME_TYPE")
	if err != nil {
		return err
	}
	*x = E_MINIGAME_TYPE(value)
	return nil
}

func (E_MINIGAME_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{16}
}

// 商店id
type E_COMMON_SHOP_ID int32

const (
	E_COMMON_SHOP_ID_ECSI_SKILL_BOOK   E_COMMON_SHOP_ID = 100
	E_COMMON_SHOP_ID_ECSI_MINI_GAME    E_COMMON_SHOP_ID = 101
	E_COMMON_SHOP_ID_ECSI_PARK_SHOP    E_COMMON_SHOP_ID = 102
	E_COMMON_SHOP_ID_ECSI_ARENA_SHOP   E_COMMON_SHOP_ID = 103
	E_COMMON_SHOP_ID_ECSI_BLACK_SHOP   E_COMMON_SHOP_ID = 104
	E_COMMON_SHOP_ID_ECSI_DiAMOND_SHOP E_COMMON_SHOP_ID = 105
	E_COMMON_SHOP_ID_ECSI_NIUDAN_SHOP  E_COMMON_SHOP_ID = 106
)

var E_COMMON_SHOP_ID_name = map[int32]string{
	100: "ECSI_SKILL_BOOK",
	101: "ECSI_MINI_GAME",
	102: "ECSI_PARK_SHOP",
	103: "ECSI_ARENA_SHOP",
	104: "ECSI_BLACK_SHOP",
	105: "ECSI_DiAMOND_SHOP",
	106: "ECSI_NIUDAN_SHOP",
}

var E_COMMON_SHOP_ID_value = map[string]int32{
	"ECSI_SKILL_BOOK":   100,
	"ECSI_MINI_GAME":    101,
	"ECSI_PARK_SHOP":    102,
	"ECSI_ARENA_SHOP":   103,
	"ECSI_BLACK_SHOP":   104,
	"ECSI_DiAMOND_SHOP": 105,
	"ECSI_NIUDAN_SHOP":  106,
}

func (x E_COMMON_SHOP_ID) Enum() *E_COMMON_SHOP_ID {
	p := new(E_COMMON_SHOP_ID)
	*p = x
	return p
}

func (x E_COMMON_SHOP_ID) String() string {
	return proto.EnumName(E_COMMON_SHOP_ID_name, int32(x))
}

func (x *E_COMMON_SHOP_ID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_COMMON_SHOP_ID_value, data, "E_COMMON_SHOP_ID")
	if err != nil {
		return err
	}
	*x = E_COMMON_SHOP_ID(value)
	return nil
}

func (E_COMMON_SHOP_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{17}
}

type E_FUNCTION_OPEN_ID int32

const (
	E_FUNCTION_OPEN_ID_EFOI_RISK            E_FUNCTION_OPEN_ID = 1
	E_FUNCTION_OPEN_ID_EFOI_TALENT          E_FUNCTION_OPEN_ID = 2
	E_FUNCTION_OPEN_ID_EFOI_FRIEND          E_FUNCTION_OPEN_ID = 3
	E_FUNCTION_OPEN_ID_EFOI_CHAT            E_FUNCTION_OPEN_ID = 4
	E_FUNCTION_OPEN_ID_EFOI_MINIGAME        E_FUNCTION_OPEN_ID = 5
	E_FUNCTION_OPEN_ID_EFOI_MINIGAME_SHOP   E_FUNCTION_OPEN_ID = 6
	E_FUNCTION_OPEN_ID_EFOI_CLOTHES_FACE    E_FUNCTION_OPEN_ID = 7
	E_FUNCTION_OPEN_ID_EFOI_FACE_SHOP       E_FUNCTION_OPEN_ID = 8
	E_FUNCTION_OPEN_ID_EFOI_ARENA           E_FUNCTION_OPEN_ID = 9
	E_FUNCTION_OPEN_ID_EFOI_LANGYA          E_FUNCTION_OPEN_ID = 10
	E_FUNCTION_OPEN_ID_EFOI_BATHHOUSE       E_FUNCTION_OPEN_ID = 11
	E_FUNCTION_OPEN_ID_EFOI_DAILY_TASK      E_FUNCTION_OPEN_ID = 12
	E_FUNCTION_OPEN_ID_EFOI_CALIBURN        E_FUNCTION_OPEN_ID = 13
	E_FUNCTION_OPEN_ID_EFOI_CLOTHES_SUIT    E_FUNCTION_OPEN_ID = 14
	E_FUNCTION_OPEN_ID_EFOI_SUIT_SHOP       E_FUNCTION_OPEN_ID = 15
	E_FUNCTION_OPEN_ID_EFOI_SKILL_BOOK_SHOP E_FUNCTION_OPEN_ID = 16
	E_FUNCTION_OPEN_ID_EFOI_GONGFU          E_FUNCTION_OPEN_ID = 17
	E_FUNCTION_OPEN_ID_EFOI_CLOTHES         E_FUNCTION_OPEN_ID = 18
	E_FUNCTION_OPEN_ID_EFOI_CYKJ            E_FUNCTION_OPEN_ID = 19
)

var E_FUNCTION_OPEN_ID_name = map[int32]string{
	1:  "EFOI_RISK",
	2:  "EFOI_TALENT",
	3:  "EFOI_FRIEND",
	4:  "EFOI_CHAT",
	5:  "EFOI_MINIGAME",
	6:  "EFOI_MINIGAME_SHOP",
	7:  "EFOI_CLOTHES_FACE",
	8:  "EFOI_FACE_SHOP",
	9:  "EFOI_ARENA",
	10: "EFOI_LANGYA",
	11: "EFOI_BATHHOUSE",
	12: "EFOI_DAILY_TASK",
	13: "EFOI_CALIBURN",
	14: "EFOI_CLOTHES_SUIT",
	15: "EFOI_SUIT_SHOP",
	16: "EFOI_SKILL_BOOK_SHOP",
	17: "EFOI_GONGFU",
	18: "EFOI_CLOTHES",
	19: "EFOI_CYKJ",
}

var E_FUNCTION_OPEN_ID_value = map[string]int32{
	"EFOI_RISK":            1,
	"EFOI_TALENT":          2,
	"EFOI_FRIEND":          3,
	"EFOI_CHAT":            4,
	"EFOI_MINIGAME":        5,
	"EFOI_MINIGAME_SHOP":   6,
	"EFOI_CLOTHES_FACE":    7,
	"EFOI_FACE_SHOP":       8,
	"EFOI_ARENA":           9,
	"EFOI_LANGYA":          10,
	"EFOI_BATHHOUSE":       11,
	"EFOI_DAILY_TASK":      12,
	"EFOI_CALIBURN":        13,
	"EFOI_CLOTHES_SUIT":    14,
	"EFOI_SUIT_SHOP":       15,
	"EFOI_SKILL_BOOK_SHOP": 16,
	"EFOI_GONGFU":          17,
	"EFOI_CLOTHES":         18,
	"EFOI_CYKJ":            19,
}

func (x E_FUNCTION_OPEN_ID) Enum() *E_FUNCTION_OPEN_ID {
	p := new(E_FUNCTION_OPEN_ID)
	*p = x
	return p
}

func (x E_FUNCTION_OPEN_ID) String() string {
	return proto.EnumName(E_FUNCTION_OPEN_ID_name, int32(x))
}

func (x *E_FUNCTION_OPEN_ID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_FUNCTION_OPEN_ID_value, data, "E_FUNCTION_OPEN_ID")
	if err != nil {
		return err
	}
	*x = E_FUNCTION_OPEN_ID(value)
	return nil
}

func (E_FUNCTION_OPEN_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{18}
}

// 网络消息_返回结果
type E_MSG_RET_CODE int32

const (
	E_MSG_RET_CODE_Msg_Ret_Code_Unknow                               E_MSG_RET_CODE = 0
	E_MSG_RET_CODE_Msg_Ret_Code_OK                                   E_MSG_RET_CODE = 1
	E_MSG_RET_CODE_Msg_Ret_Code_Username_To_Short                    E_MSG_RET_CODE = 2
	E_MSG_RET_CODE_Msg_Ret_Code_Username_To_Long                     E_MSG_RET_CODE = 3
	E_MSG_RET_CODE_Msg_Ret_Code_Username_Exist                       E_MSG_RET_CODE = 4
	E_MSG_RET_CODE_Msg_Ret_Code_Login_Failed                         E_MSG_RET_CODE = 5
	E_MSG_RET_CODE_Msg_Ret_Code_Nickname_Exist                       E_MSG_RET_CODE = 6
	E_MSG_RET_CODE_Msg_Ret_Code_CreateRole_Failed                    E_MSG_RET_CODE = 7
	E_MSG_RET_CODE_Msg_Ret_Code_EnterScene_Failed                    E_MSG_RET_CODE = 8
	E_MSG_RET_CODE_Msg_Ret_Code_Use_Item_Ok                          E_MSG_RET_CODE = 9
	E_MSG_RET_CODE_Msg_Ret_Code_Use_Item_Failed                      E_MSG_RET_CODE = 10
	E_MSG_RET_CODE_Msg_Ret_Code_Dress_Equip_Failed                   E_MSG_RET_CODE = 12
	E_MSG_RET_CODE_Msg_Ret_Code_TakeOff_Equip_Failed                 E_MSG_RET_CODE = 14
	E_MSG_RET_CODE_Msg_Ret_Code_BuySuitInShop_Ok                     E_MSG_RET_CODE = 16
	E_MSG_RET_CODE_Msg_Ret_Code_BuySuitInShop_Exist_Permanent_Failed E_MSG_RET_CODE = 17
	E_MSG_RET_CODE_Msg_Ret_Code_BuySuitInShop_Exist_Failed           E_MSG_RET_CODE = 18
	E_MSG_RET_CODE_Msg_Ret_Code_BuySuitInShop_Unknow_Failed          E_MSG_RET_CODE = 20
	E_MSG_RET_CODE_Msg_Ret_Code_BuySuitInShop_Add_Suit_Failed        E_MSG_RET_CODE = 34
	E_MSG_RET_CODE_Msg_Ret_Code_BuySuitInShop_Shop_TimeOut           E_MSG_RET_CODE = 35
	E_MSG_RET_CODE_Msg_Ret_Code_DressSuit_Failed                     E_MSG_RET_CODE = 36
	E_MSG_RET_CODE_Msg_Ret_Code_TakeOffSuit_Failed                   E_MSG_RET_CODE = 37
	E_MSG_RET_CODE_Msg_Ret_Code_BuyFaceInShop_Ok                     E_MSG_RET_CODE = 64
	E_MSG_RET_CODE_Msg_Ret_Code_BuyFaceInShop_Exist_Permanent_Failed E_MSG_RET_CODE = 65
	E_MSG_RET_CODE_Msg_Ret_Code_BuyFaceInShop_Exist_Failed           E_MSG_RET_CODE = 66
	E_MSG_RET_CODE_Msg_Ret_Code_BuyFaceInShop_Unknow_Failed          E_MSG_RET_CODE = 68
	E_MSG_RET_CODE_Msg_Ret_Code_Face_Unconfirm_Failed                E_MSG_RET_CODE = 69
	E_MSG_RET_CODE_Msg_Ret_Code_Face_VipLevel_Invalid_Failed         E_MSG_RET_CODE = 70
	E_MSG_RET_CODE_Msg_Ret_Code_BuyFaceInShop_Add_Face_Failed        E_MSG_RET_CODE = 82
	E_MSG_RET_CODE_Msg_Ret_Code_BuyFaceInShop_Shop_TimeOut           E_MSG_RET_CODE = 83
	E_MSG_RET_CODE_Msg_Ret_Code_DressFace_Failed                     E_MSG_RET_CODE = 84
	E_MSG_RET_CODE_Msg_Ret_Code_TakeOffFace_Failed                   E_MSG_RET_CODE = 85
	E_MSG_RET_CODE_Msg_Ret_Code_ManualUpdateFace_Failed              E_MSG_RET_CODE = 86
	E_MSG_RET_CODE_Msg_Ret_Code_ManualUpdateFace_Count_Limit         E_MSG_RET_CODE = 87
	E_MSG_RET_CODE_Msg_Ret_Code_ReadyEnterSceneFailed                E_MSG_RET_CODE = 256
	E_MSG_RET_CODE_Msg_Ret_Code_ReadyEnterRisk_Failed                E_MSG_RET_CODE = 272
	E_MSG_RET_CODE_Msg_Ret_Code_ChapterBoxIsOpened                   E_MSG_RET_CODE = 273
	E_MSG_RET_CODE_Msg_Ret_Code_NotPassChapter                       E_MSG_RET_CODE = 274
	E_MSG_RET_CODE_Msg_Ret_Code_Passwd_Error                         E_MSG_RET_CODE = 275
	E_MSG_RET_CODE_Msg_Ret_Code_Username_Not_Exist                   E_MSG_RET_CODE = 276
	E_MSG_RET_CODE_Msg_Ret_Code_Username_Is_Invalid                  E_MSG_RET_CODE = 277
	E_MSG_RET_CODE_Msg_Ret_Code_Forbidden_Login_Forever              E_MSG_RET_CODE = 278
	E_MSG_RET_CODE_Msg_Ret_Code_Forbidden_Login_Temporary            E_MSG_RET_CODE = 279
	E_MSG_RET_CODE_Msg_Ret_Code_Forbidden_Speak_Forever              E_MSG_RET_CODE = 280
	E_MSG_RET_CODE_Msg_Ret_Code_Forbidden_Speak_Temporary            E_MSG_RET_CODE = 281
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Money                     E_MSG_RET_CODE = 65536
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Diamond                   E_MSG_RET_CODE = 65537
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Stimina                   E_MSG_RET_CODE = 65538
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Exp                       E_MSG_RET_CODE = 65539
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Material                  E_MSG_RET_CODE = 65540
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Exist_Prop                       E_MSG_RET_CODE = 65541
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Exist_Equip                      E_MSG_RET_CODE = 65542
	E_MSG_RET_CODE_Msg_Ret_Code_Cannot_Use_Item                      E_MSG_RET_CODE = 65543
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Exist_Face                       E_MSG_RET_CODE = 65544
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Sell_Fail                        E_MSG_RET_CODE = 65545
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Arena_Score               E_MSG_RET_CODE = 65552
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Furniture                 E_MSG_RET_CODE = 65553
	E_MSG_RET_CODE_Msg_Ret_Code_No_Chapter                           E_MSG_RET_CODE = 131073
	E_MSG_RET_CODE_Msg_Ret_Code_No_Level                             E_MSG_RET_CODE = 131074
	E_MSG_RET_CODE_Msg_Ret_Code_Need_Level                           E_MSG_RET_CODE = 131075
	E_MSG_RET_CODE_Msg_Ret_Code_Need_PassDup                         E_MSG_RET_CODE = 131076
	E_MSG_RET_CODE_Msg_Ret_Code_Need_More_Fight_Count                E_MSG_RET_CODE = 131077
	E_MSG_RET_CODE_Msg_Ret_Code_Need_KillAllMonster                  E_MSG_RET_CODE = 131329
	E_MSG_RET_CODE_Msg_Ret_Code_Need_KillTheMonster                  E_MSG_RET_CODE = 131330
	E_MSG_RET_CODE_Msg_Ret_Code_FindFriend_NoExist                   E_MSG_RET_CODE = 135169
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_NoExist                    E_MSG_RET_CODE = 135170
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_IsFriend                   E_MSG_RET_CODE = 135171
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_Wait                       E_MSG_RET_CODE = 135172
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_SelfFriendsFull            E_MSG_RET_CODE = 135173
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_TarFriendsFull             E_MSG_RET_CODE = 135174
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_RequestQueueFull           E_MSG_RET_CODE = 135175
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_TarRefuse                  E_MSG_RET_CODE = 135176
	E_MSG_RET_CODE_Msg_Ret_Code_Remove_Friend_NoExist                E_MSG_RET_CODE = 135177
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_IsOffLine                  E_MSG_RET_CODE = 135184
	E_MSG_RET_CODE_Msg_Ret_Code_AddFriend_AlreadyRequest             E_MSG_RET_CODE = 135185
	E_MSG_RET_CODE_Msg_Ret_Code_FriendFight_IsNotFriend              E_MSG_RET_CODE = 135186
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_Study_Failed                   E_MSG_RET_CODE = 139265
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_LevelUp_Failed                 E_MSG_RET_CODE = 139266
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_DressTalent_Failed             E_MSG_RET_CODE = 139267
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_TakeOffTalent_Failed           E_MSG_RET_CODE = 139268
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_DressBook_Failed               E_MSG_RET_CODE = 139269
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_TakeOffBook_Failed             E_MSG_RET_CODE = 139270
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_Site_Invalid_Failed            E_MSG_RET_CODE = 139271
	E_MSG_RET_CODE_Msg_Ret_Code_Skill_Site_Vip_Not_Reached           E_MSG_RET_CODE = 139272
	E_MSG_RET_CODE_Msg_Ret_Code_Dress_Card_PVE_Failed                E_MSG_RET_CODE = 143361
	E_MSG_RET_CODE_Msg_Ret_Code_TakeOff_Card_PVE_Failed              E_MSG_RET_CODE = 143362
	E_MSG_RET_CODE_Msg_Ret_Code_Dress_Card_PVP_Failed                E_MSG_RET_CODE = 143363
	E_MSG_RET_CODE_Msg_Ret_Code_TakeOff_Card_PVP_Failed              E_MSG_RET_CODE = 143364
	E_MSG_RET_CODE_Msg_Ret_Code_GoMiniGame_Failed                    E_MSG_RET_CODE = 147457
	E_MSG_RET_CODE_Msg_Ret_Code_ArenaFight_Failed                    E_MSG_RET_CODE = 151553
	E_MSG_RET_CODE_Msg_Ret_Code_ArenaFight_Num_Failed                E_MSG_RET_CODE = 151554
	E_MSG_RET_CODE_Msg_Ret_Code_ArenaFight_Cd_Failed                 E_MSG_RET_CODE = 151555
	E_MSG_RET_CODE_Msg_Ret_Code_Role_NoExist                         E_MSG_RET_CODE = 151556
	E_MSG_RET_CODE_Msg_Ret_Code_ArenaFight_Verify_Fail               E_MSG_RET_CODE = 151557
	E_MSG_RET_CODE_Msg_Ret_Code_Someone_Fight_With_You               E_MSG_RET_CODE = 151558
	E_MSG_RET_CODE_Msg_Ret_Code_Sword_Failed                         E_MSG_RET_CODE = 155649
	E_MSG_RET_CODE_Msg_Ret_Code_Sword_Num_Failed                     E_MSG_RET_CODE = 155650
	E_MSG_RET_CODE_Msg_Ret_Code_Daily_Task_Condtion_Failed           E_MSG_RET_CODE = 159745
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Buy_Count                 E_MSG_RET_CODE = 163841
	E_MSG_RET_CODE_Msg_Ret_Code_RequestShop_TimeOut                  E_MSG_RET_CODE = 167937
	E_MSG_RET_CODE_Msg_Ret_Code_SkillBookShop_Not_Open_Time          E_MSG_RET_CODE = 167938
	E_MSG_RET_CODE_Msg_Ret_Code_Request_Goods_Is_Not_Exist           E_MSG_RET_CODE = 167939
	E_MSG_RET_CODE_Msg_Ret_Code_Request_Goods_Is_Already_Sold        E_MSG_RET_CODE = 167940
	E_MSG_RET_CODE_Msg_Ret_Code_ForceRefresh_Num_Not_Enough          E_MSG_RET_CODE = 167941
	E_MSG_RET_CODE_Msg_Ret_Code_Player_Was_OnLine                    E_MSG_RET_CODE = 196609
	E_MSG_RET_CODE_Msg_Ret_Code_Mail_Not_Exist                       E_MSG_RET_CODE = 262145
	// 签到
	E_MSG_RET_CODE_Msg_Ret_Code_Signin_Failure               E_MSG_RET_CODE = 327936
	E_MSG_RET_CODE_Msg_Ret_Code_Signin_Repeated              E_MSG_RET_CODE = 327937
	E_MSG_RET_CODE_Msg_Ret_Code_Signin_Additional_Not_Enough E_MSG_RET_CODE = 327938
	// 七天登录
	E_MSG_RET_CODE_Msg_Ret_Code_GetCondition_Not_Enough         E_MSG_RET_CODE = 393472
	E_MSG_RET_CODE_Msg_Ret_Code_FunctionOpen_Condition_Fail     E_MSG_RET_CODE = 393728
	E_MSG_RET_CODE_Msg_Ret_Code_Dress_Equip_Level_Failed        E_MSG_RET_CODE = 393744
	E_MSG_RET_CODE_Msg_Ret_Code_Data_Failed                     E_MSG_RET_CODE = 393760
	E_MSG_RET_CODE_Msg_Ret_Code_Equip_Is_Top_Level              E_MSG_RET_CODE = 393765
	E_MSG_RET_CODE_Msg_Ret_Code_Fix_Bag_Space_Full              E_MSG_RET_CODE = 393776
	E_MSG_RET_CODE_Msg_Ret_Code_Cannot_Fix_Equip                E_MSG_RET_CODE = 393777
	E_MSG_RET_CODE_Msg_Ret_Code_Equip_Is_Fixing                 E_MSG_RET_CODE = 393778
	E_MSG_RET_CODE_Msg_Ret_Code_Equip_Endurance_Is_Zero         E_MSG_RET_CODE = 393779
	E_MSG_RET_CODE_Msg_Ret_Code_Equip_Cannot_Resolved           E_MSG_RET_CODE = 393780
	E_MSG_RET_CODE_Msg_Ret_Code_AcceptTask_Failed               E_MSG_RET_CODE = 458753
	E_MSG_RET_CODE_Msg_Ret_Code_AcceptTask_Num_Upper_Limit      E_MSG_RET_CODE = 458769
	E_MSG_RET_CODE_Msg_Ret_Code_Task_Not_Exist                  E_MSG_RET_CODE = 458770
	E_MSG_RET_CODE_Msg_Ret_Code_CompleteTask_Failed             E_MSG_RET_CODE = 458784
	E_MSG_RET_CODE_Msg_Ret_Code_Task_Is_Complete_Failed         E_MSG_RET_CODE = 458785
	E_MSG_RET_CODE_Msg_Ret_Code_Task_Matrial_Missed_Failed      E_MSG_RET_CODE = 458786
	E_MSG_RET_CODE_Msg_Ret_Code_Task_Not_Permit_GiveUp_Failed   E_MSG_RET_CODE = 458787
	E_MSG_RET_CODE_Msg_Ret_Code_Exchange_Num_Failed             E_MSG_RET_CODE = 458800
	E_MSG_RET_CODE_Msg_Ret_Code_CdTime_Failed                   E_MSG_RET_CODE = 458816
	E_MSG_RET_CODE_Msg_Ret_Code_Please_More_Try                 E_MSG_RET_CODE = 458832
	E_MSG_RET_CODE_Msg_Ret_Code_Distance_failed                 E_MSG_RET_CODE = 458848
	E_MSG_RET_CODE_Msg_Ret_Code_Got_By_Other                    E_MSG_RET_CODE = 458864
	E_MSG_RET_CODE_Msg_Ret_RoomCreate_Failed                    E_MSG_RET_CODE = 524304
	E_MSG_RET_CODE_Msg_Ret_RoomJoin_Failed                      E_MSG_RET_CODE = 524320
	E_MSG_RET_CODE_Msg_Ret_RoomFastJoin_Failed                  E_MSG_RET_CODE = 524336
	E_MSG_RET_CODE_Msg_Ret_RoomLeave_Failed                     E_MSG_RET_CODE = 524352
	E_MSG_RET_CODE_Msg_Ret_RoomReady_Failed                     E_MSG_RET_CODE = 524368
	E_MSG_RET_CODE_Msg_Ret_MasterKickPlayer_Failed              E_MSG_RET_CODE = 524384
	E_MSG_RET_CODE_Msg_Ret_Car_Not_Exist_Failed                 E_MSG_RET_CODE = 589824
	E_MSG_RET_CODE_Msg_Ret_Code_Cannot_Fix_Car                  E_MSG_RET_CODE = 589840
	E_MSG_RET_CODE_Msg_Ret_Code_Car_Space_Full                  E_MSG_RET_CODE = 589843
	E_MSG_RET_CODE_Msg_Ret_Code_Car_Not_Broken                  E_MSG_RET_CODE = 589845
	E_MSG_RET_CODE_Msg_Ret_Code_Car_Not_Good                    E_MSG_RET_CODE = 589849
	E_MSG_RET_CODE_Msg_Ret_Code_Carport_Is_Protect              E_MSG_RET_CODE = 589857
	E_MSG_RET_CODE_Msg_Ret_Code_Action_Count_Not_Enough         E_MSG_RET_CODE = 589859
	E_MSG_RET_CODE_Msg_Ret_Code_Get_Car_Too_Early               E_MSG_RET_CODE = 589861
	E_MSG_RET_CODE_Msg_Ret_Code_Park_Car_Too_Much               E_MSG_RET_CODE = 589863
	E_MSG_RET_CODE_Msg_Ret_Code_Out_Player_Num_Range            E_MSG_RET_CODE = 589865
	E_MSG_RET_CODE_Msg_Ret_Code_Must_Go_Special_Line            E_MSG_RET_CODE = 589873
	E_MSG_RET_CODE_Msg_Ret_Code_System_Collect_Car              E_MSG_RET_CODE = 589875
	E_MSG_RET_CODE_Msg_Ret_Code_Carport_Drink_Pnvu              E_MSG_RET_CODE = 589876
	E_MSG_RET_CODE_Msg_Ret_Code_SceneIndex_Is_Same_Fail         E_MSG_RET_CODE = 589878
	E_MSG_RET_CODE_Msg_Ret_Code_Hangup_Too_Fast_Fail            E_MSG_RET_CODE = 590080
	E_MSG_RET_CODE_Msg_Ret_Code_Hangup_Time_Run_Out             E_MSG_RET_CODE = 590081
	E_MSG_RET_CODE_Msg_Ret_Code_Interact_Not_Exist_Fail         E_MSG_RET_CODE = 590096
	E_MSG_RET_CODE_Msg_Ret_Code_Interact_Was_Exist_Fail         E_MSG_RET_CODE = 590097
	E_MSG_RET_CODE_Msg_Ret_Code_Interact_Use_Count_Fail         E_MSG_RET_CODE = 590101
	E_MSG_RET_CODE_Msg_Ret_Code_Interact_Reward_Got_Fail        E_MSG_RET_CODE = 590102
	E_MSG_RET_CODE_Msg_Ret_Code_Interact_Energy_Count_Fail      E_MSG_RET_CODE = 590103
	E_MSG_RET_CODE_Msg_Ret_Code_quality_Not_Same_Fail           E_MSG_RET_CODE = 590112
	E_MSG_RET_CODE_Msg_Ret_Code_quality_Top_Level_Fail          E_MSG_RET_CODE = 590113
	E_MSG_RET_CODE_Msg_Ret_Code_Compose_Rolelevel_Fail          E_MSG_RET_CODE = 590114
	E_MSG_RET_CODE_Msg_Ret_Code_Not_In_Rank_Fail                E_MSG_RET_CODE = 590130
	E_MSG_RET_CODE_Msg_Ret_Code_NpcInteract_Wait_And_Wait       E_MSG_RET_CODE = 590144
	E_MSG_RET_CODE_Msg_Ret_Code_Pet_Not_Exist                   E_MSG_RET_CODE = 590336
	E_MSG_RET_CODE_Msg_Ret_Code_Pet_Level_Max_Limit_Fail        E_MSG_RET_CODE = 590337
	E_MSG_RET_CODE_Msg_Ret_Code_Pet_Need_Evolve_Fail            E_MSG_RET_CODE = 590338
	E_MSG_RET_CODE_Msg_Ret_Code_Pet_Attr_Is_Top_Fail            E_MSG_RET_CODE = 590339
	E_MSG_RET_CODE_Msg_Ret_Code_Pet_Was_Nab_Fail                E_MSG_RET_CODE = 590340
	E_MSG_RET_CODE_Msg_Ret_Code_Pet_Egg_Get_Nothing             E_MSG_RET_CODE = 590341
	E_MSG_RET_CODE_Msg_Ret_Code_Set_Fight_Pet_Invalid           E_MSG_RET_CODE = 590342
	E_MSG_RET_CODE_Msg_Ret_Code_Pet_Level_Reach_Role_Level      E_MSG_RET_CODE = 590343
	E_MSG_RET_CODE_Msg_Ret_Code_Size_Is_Max_Size                E_MSG_RET_CODE = 590592
	E_MSG_RET_CODE_Msg_Ret_Code_Did_Not_Open_Home               E_MSG_RET_CODE = 590593
	E_MSG_RET_CODE_Msg_Ret_Code_Home_Level_Not_Enough           E_MSG_RET_CODE = 590594
	E_MSG_RET_CODE_Msg_Ret_Code_Server_Is_Full                  E_MSG_RET_CODE = 590848
	E_MSG_RET_CODE_Msg_Ret_Code_Friend_Fight_Num_Not_Enough     E_MSG_RET_CODE = 591105
	E_MSG_RET_CODE_Msg_Ret_Code_Archieve_Not_Reached            E_MSG_RET_CODE = 591361
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Guadratic_Count      E_MSG_RET_CODE = 591617
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Enough_Interact             E_MSG_RET_CODE = 591618
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Guadratic_Enter_Time        E_MSG_RET_CODE = 591619
	E_MSG_RET_CODE_Msg_Ret_Code_Redeem_Not_Exist                E_MSG_RET_CODE = 591873
	E_MSG_RET_CODE_Msg_Ret_Code_Redeem_Expire                   E_MSG_RET_CODE = 591874
	E_MSG_RET_CODE_Msg_Ret_Code_Redeem_Aleady_Get               E_MSG_RET_CODE = 591875
	E_MSG_RET_CODE_Msg_Ret_Code_Redeem_ServerId_Error           E_MSG_RET_CODE = 591876
	E_MSG_RET_CODE_Msg_Ret_Code_Stone_Not_Exist                 E_MSG_RET_CODE = 591904
	E_MSG_RET_CODE_Msg_Ret_Code_First_Monery_Not_OK             E_MSG_RET_CODE = 592128
	E_MSG_RET_CODE_Msg_Ret_Code_First_Monery_Aleady_Get         E_MSG_RET_CODE = 592129
	E_MSG_RET_CODE_Msg_Ret_Code_Kick                            E_MSG_RET_CODE = 593921
	E_MSG_RET_CODE_Msg_Ret_Code_Login_Again                     E_MSG_RET_CODE = 593922
	E_MSG_RET_CODE_Msg_Ret_Code_Equip_Bag_Is_Full               E_MSG_RET_CODE = 598016
	E_MSG_RET_CODE_Msg_Ret_Code_Equip_Bag_Reach_Uplimit         E_MSG_RET_CODE = 598017
	E_MSG_RET_CODE_Msg_Ret_Code_Equip_Bag_Full_Insert_Mail      E_MSG_RET_CODE = 598018
	E_MSG_RET_CODE_Msg_Ret_Code_Activity_Not_Exist              E_MSG_RET_CODE = 602112
	E_MSG_RET_CODE_Msg_Ret_Code_Activity_Reward_Get_Count_Limit E_MSG_RET_CODE = 602113
	E_MSG_RET_CODE_Msg_Ret_Code_Activity_Aim_Not_Reach          E_MSG_RET_CODE = 602114
	E_MSG_RET_CODE_Msg_Ret_Code_Piano_Was_Playing               E_MSG_RET_CODE = 602368
	E_MSG_RET_CODE_Msg_Ret_Code_Verify_PVE_Invalid_Data         E_MSG_RET_CODE = 606464
	E_MSG_RET_CODE_Msg_Ret_Code_Verify_PVE_Error                E_MSG_RET_CODE = 606465
	E_MSG_RET_CODE_Msg_Ret_Code_Verify_PVE_Failed               E_MSG_RET_CODE = 606466
	E_MSG_RET_CODE_Msg_Ret_Code_Verify_PVE_Box_Failed           E_MSG_RET_CODE = 606467
	E_MSG_RET_CODE_Msg_Ret_Code_Verify_PVE_Skill_Failed         E_MSG_RET_CODE = 606468
	E_MSG_RET_CODE_Msg_Ret_Code_Verify_PVE_KillMonster_Failed   E_MSG_RET_CODE = 606469
	E_MSG_RET_CODE_Msg_Ret_Code_Not_Exist_Make_Id               E_MSG_RET_CODE = 610560
)

var E_MSG_RET_CODE_name = map[int32]string{
	0:      "Msg_Ret_Code_Unknow",
	1:      "Msg_Ret_Code_OK",
	2:      "Msg_Ret_Code_Username_To_Short",
	3:      "Msg_Ret_Code_Username_To_Long",
	4:      "Msg_Ret_Code_Username_Exist",
	5:      "Msg_Ret_Code_Login_Failed",
	6:      "Msg_Ret_Code_Nickname_Exist",
	7:      "Msg_Ret_Code_CreateRole_Failed",
	8:      "Msg_Ret_Code_EnterScene_Failed",
	9:      "Msg_Ret_Code_Use_Item_Ok",
	10:     "Msg_Ret_Code_Use_Item_Failed",
	12:     "Msg_Ret_Code_Dress_Equip_Failed",
	14:     "Msg_Ret_Code_TakeOff_Equip_Failed",
	16:     "Msg_Ret_Code_BuySuitInShop_Ok",
	17:     "Msg_Ret_Code_BuySuitInShop_Exist_Permanent_Failed",
	18:     "Msg_Ret_Code_BuySuitInShop_Exist_Failed",
	20:     "Msg_Ret_Code_BuySuitInShop_Unknow_Failed",
	34:     "Msg_Ret_Code_BuySuitInShop_Add_Suit_Failed",
	35:     "Msg_Ret_Code_BuySuitInShop_Shop_TimeOut",
	36:     "Msg_Ret_Code_DressSuit_Failed",
	37:     "Msg_Ret_Code_TakeOffSuit_Failed",
	64:     "Msg_Ret_Code_BuyFaceInShop_Ok",
	65:     "Msg_Ret_Code_BuyFaceInShop_Exist_Permanent_Failed",
	66:     "Msg_Ret_Code_BuyFaceInShop_Exist_Failed",
	68:     "Msg_Ret_Code_BuyFaceInShop_Unknow_Failed",
	69:     "Msg_Ret_Code_Face_Unconfirm_Failed",
	70:     "Msg_Ret_Code_Face_VipLevel_Invalid_Failed",
	82:     "Msg_Ret_Code_BuyFaceInShop_Add_Face_Failed",
	83:     "Msg_Ret_Code_BuyFaceInShop_Shop_TimeOut",
	84:     "Msg_Ret_Code_DressFace_Failed",
	85:     "Msg_Ret_Code_TakeOffFace_Failed",
	86:     "Msg_Ret_Code_ManualUpdateFace_Failed",
	87:     "Msg_Ret_Code_ManualUpdateFace_Count_Limit",
	256:    "Msg_Ret_Code_ReadyEnterSceneFailed",
	272:    "Msg_Ret_Code_ReadyEnterRisk_Failed",
	273:    "Msg_Ret_Code_ChapterBoxIsOpened",
	274:    "Msg_Ret_Code_NotPassChapter",
	275:    "Msg_Ret_Code_Passwd_Error",
	276:    "Msg_Ret_Code_Username_Not_Exist",
	277:    "Msg_Ret_Code_Username_Is_Invalid",
	278:    "Msg_Ret_Code_Forbidden_Login_Forever",
	279:    "Msg_Ret_Code_Forbidden_Login_Temporary",
	280:    "Msg_Ret_Code_Forbidden_Speak_Forever",
	281:    "Msg_Ret_Code_Forbidden_Speak_Temporary",
	65536:  "Msg_Ret_Code_Not_Enough_Money",
	65537:  "Msg_Ret_Code_Not_Enough_Diamond",
	65538:  "Msg_Ret_Code_Not_Enough_Stimina",
	65539:  "Msg_Ret_Code_Not_Enough_Exp",
	65540:  "Msg_Ret_Code_Not_Enough_Material",
	65541:  "Msg_Ret_Code_Not_Exist_Prop",
	65542:  "Msg_Ret_Code_Not_Exist_Equip",
	65543:  "Msg_Ret_Code_Cannot_Use_Item",
	65544:  "Msg_Ret_Code_Not_Exist_Face",
	65545:  "Msg_Ret_Code_Not_Sell_Fail",
	65552:  "Msg_Ret_Code_Not_Enough_Arena_Score",
	65553:  "Msg_Ret_Code_Not_Enough_Furniture",
	131073: "Msg_Ret_Code_No_Chapter",
	131074: "Msg_Ret_Code_No_Level",
	131075: "Msg_Ret_Code_Need_Level",
	131076: "Msg_Ret_Code_Need_PassDup",
	131077: "Msg_Ret_Code_Need_More_Fight_Count",
	131329: "Msg_Ret_Code_Need_KillAllMonster",
	131330: "Msg_Ret_Code_Need_KillTheMonster",
	135169: "Msg_Ret_Code_FindFriend_NoExist",
	135170: "Msg_Ret_Code_AddFriend_NoExist",
	135171: "Msg_Ret_Code_AddFriend_IsFriend",
	135172: "Msg_Ret_Code_AddFriend_Wait",
	135173: "Msg_Ret_Code_AddFriend_SelfFriendsFull",
	135174: "Msg_Ret_Code_AddFriend_TarFriendsFull",
	135175: "Msg_Ret_Code_AddFriend_RequestQueueFull",
	135176: "Msg_Ret_Code_AddFriend_TarRefuse",
	135177: "Msg_Ret_Code_Remove_Friend_NoExist",
	135184: "Msg_Ret_Code_AddFriend_IsOffLine",
	135185: "Msg_Ret_Code_AddFriend_AlreadyRequest",
	135186: "Msg_Ret_Code_FriendFight_IsNotFriend",
	139265: "Msg_Ret_Code_Skill_Study_Failed",
	139266: "Msg_Ret_Code_Skill_LevelUp_Failed",
	139267: "Msg_Ret_Code_Skill_DressTalent_Failed",
	139268: "Msg_Ret_Code_Skill_TakeOffTalent_Failed",
	139269: "Msg_Ret_Code_Skill_DressBook_Failed",
	139270: "Msg_Ret_Code_Skill_TakeOffBook_Failed",
	139271: "Msg_Ret_Code_Skill_Site_Invalid_Failed",
	139272: "Msg_Ret_Code_Skill_Site_Vip_Not_Reached",
	143361: "Msg_Ret_Code_Dress_Card_PVE_Failed",
	143362: "Msg_Ret_Code_TakeOff_Card_PVE_Failed",
	143363: "Msg_Ret_Code_Dress_Card_PVP_Failed",
	143364: "Msg_Ret_Code_TakeOff_Card_PVP_Failed",
	147457: "Msg_Ret_Code_GoMiniGame_Failed",
	151553: "Msg_Ret_Code_ArenaFight_Failed",
	151554: "Msg_Ret_Code_ArenaFight_Num_Failed",
	151555: "Msg_Ret_Code_ArenaFight_Cd_Failed",
	151556: "Msg_Ret_Code_Role_NoExist",
	151557: "Msg_Ret_Code_ArenaFight_Verify_Fail",
	151558: "Msg_Ret_Code_Someone_Fight_With_You",
	155649: "Msg_Ret_Code_Sword_Failed",
	155650: "Msg_Ret_Code_Sword_Num_Failed",
	159745: "Msg_Ret_Code_Daily_Task_Condtion_Failed",
	163841: "Msg_Ret_Code_Not_Enough_Buy_Count",
	167937: "Msg_Ret_Code_RequestShop_TimeOut",
	167938: "Msg_Ret_Code_SkillBookShop_Not_Open_Time",
	167939: "Msg_Ret_Code_Request_Goods_Is_Not_Exist",
	167940: "Msg_Ret_Code_Request_Goods_Is_Already_Sold",
	167941: "Msg_Ret_Code_ForceRefresh_Num_Not_Enough",
	196609: "Msg_Ret_Code_Player_Was_OnLine",
	262145: "Msg_Ret_Code_Mail_Not_Exist",
	327936: "Msg_Ret_Code_Signin_Failure",
	327937: "Msg_Ret_Code_Signin_Repeated",
	327938: "Msg_Ret_Code_Signin_Additional_Not_Enough",
	393472: "Msg_Ret_Code_GetCondition_Not_Enough",
	393728: "Msg_Ret_Code_FunctionOpen_Condition_Fail",
	393744: "Msg_Ret_Code_Dress_Equip_Level_Failed",
	393760: "Msg_Ret_Code_Data_Failed",
	393765: "Msg_Ret_Code_Equip_Is_Top_Level",
	393776: "Msg_Ret_Code_Fix_Bag_Space_Full",
	393777: "Msg_Ret_Code_Cannot_Fix_Equip",
	393778: "Msg_Ret_Code_Equip_Is_Fixing",
	393779: "Msg_Ret_Code_Equip_Endurance_Is_Zero",
	393780: "Msg_Ret_Code_Equip_Cannot_Resolved",
	458753: "Msg_Ret_Code_AcceptTask_Failed",
	458769: "Msg_Ret_Code_AcceptTask_Num_Upper_Limit",
	458770: "Msg_Ret_Code_Task_Not_Exist",
	458784: "Msg_Ret_Code_CompleteTask_Failed",
	458785: "Msg_Ret_Code_Task_Is_Complete_Failed",
	458786: "Msg_Ret_Code_Task_Matrial_Missed_Failed",
	458787: "Msg_Ret_Code_Task_Not_Permit_GiveUp_Failed",
	458800: "Msg_Ret_Code_Exchange_Num_Failed",
	458816: "Msg_Ret_Code_CdTime_Failed",
	458832: "Msg_Ret_Code_Please_More_Try",
	458848: "Msg_Ret_Code_Distance_failed",
	458864: "Msg_Ret_Code_Got_By_Other",
	524304: "Msg_Ret_RoomCreate_Failed",
	524320: "Msg_Ret_RoomJoin_Failed",
	524336: "Msg_Ret_RoomFastJoin_Failed",
	524352: "Msg_Ret_RoomLeave_Failed",
	524368: "Msg_Ret_RoomReady_Failed",
	524384: "Msg_Ret_MasterKickPlayer_Failed",
	589824: "Msg_Ret_Car_Not_Exist_Failed",
	589840: "Msg_Ret_Code_Cannot_Fix_Car",
	589843: "Msg_Ret_Code_Car_Space_Full",
	589845: "Msg_Ret_Code_Car_Not_Broken",
	589849: "Msg_Ret_Code_Car_Not_Good",
	589857: "Msg_Ret_Code_Carport_Is_Protect",
	589859: "Msg_Ret_Code_Action_Count_Not_Enough",
	589861: "Msg_Ret_Code_Get_Car_Too_Early",
	589863: "Msg_Ret_Code_Park_Car_Too_Much",
	589865: "Msg_Ret_Code_Out_Player_Num_Range",
	589873: "Msg_Ret_Code_Must_Go_Special_Line",
	589875: "Msg_Ret_Code_System_Collect_Car",
	589876: "Msg_Ret_Code_Carport_Drink_Pnvu",
	589878: "Msg_Ret_Code_SceneIndex_Is_Same_Fail",
	590080: "Msg_Ret_Code_Hangup_Too_Fast_Fail",
	590081: "Msg_Ret_Code_Hangup_Time_Run_Out",
	590096: "Msg_Ret_Code_Interact_Not_Exist_Fail",
	590097: "Msg_Ret_Code_Interact_Was_Exist_Fail",
	590101: "Msg_Ret_Code_Interact_Use_Count_Fail",
	590102: "Msg_Ret_Code_Interact_Reward_Got_Fail",
	590103: "Msg_Ret_Code_Interact_Energy_Count_Fail",
	590112: "Msg_Ret_Code_quality_Not_Same_Fail",
	590113: "Msg_Ret_Code_quality_Top_Level_Fail",
	590114: "Msg_Ret_Code_Compose_Rolelevel_Fail",
	590130: "Msg_Ret_Code_Not_In_Rank_Fail",
	590144: "Msg_Ret_Code_NpcInteract_Wait_And_Wait",
	590336: "Msg_Ret_Code_Pet_Not_Exist",
	590337: "Msg_Ret_Code_Pet_Level_Max_Limit_Fail",
	590338: "Msg_Ret_Code_Pet_Need_Evolve_Fail",
	590339: "Msg_Ret_Code_Pet_Attr_Is_Top_Fail",
	590340: "Msg_Ret_Code_Pet_Was_Nab_Fail",
	590341: "Msg_Ret_Code_Pet_Egg_Get_Nothing",
	590342: "Msg_Ret_Code_Set_Fight_Pet_Invalid",
	590343: "Msg_Ret_Code_Pet_Level_Reach_Role_Level",
	590592: "Msg_Ret_Code_Size_Is_Max_Size",
	590593: "Msg_Ret_Code_Did_Not_Open_Home",
	590594: "Msg_Ret_Code_Home_Level_Not_Enough",
	590848: "Msg_Ret_Code_Server_Is_Full",
	591105: "Msg_Ret_Code_Friend_Fight_Num_Not_Enough",
	591361: "Msg_Ret_Code_Archieve_Not_Reached",
	591617: "Msg_Ret_Code_Not_Enough_Guadratic_Count",
	591618: "Msg_Ret_Code_Not_Enough_Interact",
	591619: "Msg_Ret_Code_Not_Guadratic_Enter_Time",
	591873: "Msg_Ret_Code_Redeem_Not_Exist",
	591874: "Msg_Ret_Code_Redeem_Expire",
	591875: "Msg_Ret_Code_Redeem_Aleady_Get",
	591876: "Msg_Ret_Code_Redeem_ServerId_Error",
	591904: "Msg_Ret_Code_Stone_Not_Exist",
	592128: "Msg_Ret_Code_First_Monery_Not_OK",
	592129: "Msg_Ret_Code_First_Monery_Aleady_Get",
	593921: "Msg_Ret_Code_Kick",
	593922: "Msg_Ret_Code_Login_Again",
	598016: "Msg_Ret_Code_Equip_Bag_Is_Full",
	598017: "Msg_Ret_Code_Equip_Bag_Reach_Uplimit",
	598018: "Msg_Ret_Code_Equip_Bag_Full_Insert_Mail",
	602112: "Msg_Ret_Code_Activity_Not_Exist",
	602113: "Msg_Ret_Code_Activity_Reward_Get_Count_Limit",
	602114: "Msg_Ret_Code_Activity_Aim_Not_Reach",
	602368: "Msg_Ret_Code_Piano_Was_Playing",
	606464: "Msg_Ret_Code_Verify_PVE_Invalid_Data",
	606465: "Msg_Ret_Code_Verify_PVE_Error",
	606466: "Msg_Ret_Code_Verify_PVE_Failed",
	606467: "Msg_Ret_Code_Verify_PVE_Box_Failed",
	606468: "Msg_Ret_Code_Verify_PVE_Skill_Failed",
	606469: "Msg_Ret_Code_Verify_PVE_KillMonster_Failed",
	610560: "Msg_Ret_Code_Not_Exist_Make_Id",
}

var E_MSG_RET_CODE_value = map[string]int32{
	"Msg_Ret_Code_Unknow":                               0,
	"Msg_Ret_Code_OK":                                   1,
	"Msg_Ret_Code_Username_To_Short":                    2,
	"Msg_Ret_Code_Username_To_Long":                     3,
	"Msg_Ret_Code_Username_Exist":                       4,
	"Msg_Ret_Code_Login_Failed":                         5,
	"Msg_Ret_Code_Nickname_Exist":                       6,
	"Msg_Ret_Code_CreateRole_Failed":                    7,
	"Msg_Ret_Code_EnterScene_Failed":                    8,
	"Msg_Ret_Code_Use_Item_Ok":                          9,
	"Msg_Ret_Code_Use_Item_Failed":                      10,
	"Msg_Ret_Code_Dress_Equip_Failed":                   12,
	"Msg_Ret_Code_TakeOff_Equip_Failed":                 14,
	"Msg_Ret_Code_BuySuitInShop_Ok":                     16,
	"Msg_Ret_Code_BuySuitInShop_Exist_Permanent_Failed": 17,
	"Msg_Ret_Code_BuySuitInShop_Exist_Failed":           18,
	"Msg_Ret_Code_BuySuitInShop_Unknow_Failed":          20,
	"Msg_Ret_Code_BuySuitInShop_Add_Suit_Failed":        34,
	"Msg_Ret_Code_BuySuitInShop_Shop_TimeOut":           35,
	"Msg_Ret_Code_DressSuit_Failed":                     36,
	"Msg_Ret_Code_TakeOffSuit_Failed":                   37,
	"Msg_Ret_Code_BuyFaceInShop_Ok":                     64,
	"Msg_Ret_Code_BuyFaceInShop_Exist_Permanent_Failed": 65,
	"Msg_Ret_Code_BuyFaceInShop_Exist_Failed":           66,
	"Msg_Ret_Code_BuyFaceInShop_Unknow_Failed":          68,
	"Msg_Ret_Code_Face_Unconfirm_Failed":                69,
	"Msg_Ret_Code_Face_VipLevel_Invalid_Failed":         70,
	"Msg_Ret_Code_BuyFaceInShop_Add_Face_Failed":        82,
	"Msg_Ret_Code_BuyFaceInShop_Shop_TimeOut":           83,
	"Msg_Ret_Code_DressFace_Failed":                     84,
	"Msg_Ret_Code_TakeOffFace_Failed":                   85,
	"Msg_Ret_Code_ManualUpdateFace_Failed":              86,
	"Msg_Ret_Code_ManualUpdateFace_Count_Limit":         87,
	"Msg_Ret_Code_ReadyEnterSceneFailed":                256,
	"Msg_Ret_Code_ReadyEnterRisk_Failed":                272,
	"Msg_Ret_Code_ChapterBoxIsOpened":                   273,
	"Msg_Ret_Code_NotPassChapter":                       274,
	"Msg_Ret_Code_Passwd_Error":                         275,
	"Msg_Ret_Code_Username_Not_Exist":                   276,
	"Msg_Ret_Code_Username_Is_Invalid":                  277,
	"Msg_Ret_Code_Forbidden_Login_Forever":              278,
	"Msg_Ret_Code_Forbidden_Login_Temporary":            279,
	"Msg_Ret_Code_Forbidden_Speak_Forever":              280,
	"Msg_Ret_Code_Forbidden_Speak_Temporary":            281,
	"Msg_Ret_Code_Not_Enough_Money":                     65536,
	"Msg_Ret_Code_Not_Enough_Diamond":                   65537,
	"Msg_Ret_Code_Not_Enough_Stimina":                   65538,
	"Msg_Ret_Code_Not_Enough_Exp":                       65539,
	"Msg_Ret_Code_Not_Enough_Material":                  65540,
	"Msg_Ret_Code_Not_Exist_Prop":                       65541,
	"Msg_Ret_Code_Not_Exist_Equip":                      65542,
	"Msg_Ret_Code_Cannot_Use_Item":                      65543,
	"Msg_Ret_Code_Not_Exist_Face":                       65544,
	"Msg_Ret_Code_Not_Sell_Fail":                        65545,
	"Msg_Ret_Code_Not_Enough_Arena_Score":               65552,
	"Msg_Ret_Code_Not_Enough_Furniture":                 65553,
	"Msg_Ret_Code_No_Chapter":                           131073,
	"Msg_Ret_Code_No_Level":                             131074,
	"Msg_Ret_Code_Need_Level":                           131075,
	"Msg_Ret_Code_Need_PassDup":                         131076,
	"Msg_Ret_Code_Need_More_Fight_Count":                131077,
	"Msg_Ret_Code_Need_KillAllMonster":                  131329,
	"Msg_Ret_Code_Need_KillTheMonster":                  131330,
	"Msg_Ret_Code_FindFriend_NoExist":                   135169,
	"Msg_Ret_Code_AddFriend_NoExist":                    135170,
	"Msg_Ret_Code_AddFriend_IsFriend":                   135171,
	"Msg_Ret_Code_AddFriend_Wait":                       135172,
	"Msg_Ret_Code_AddFriend_SelfFriendsFull":            135173,
	"Msg_Ret_Code_AddFriend_TarFriendsFull":             135174,
	"Msg_Ret_Code_AddFriend_RequestQueueFull":           135175,
	"Msg_Ret_Code_AddFriend_TarRefuse":                  135176,
	"Msg_Ret_Code_Remove_Friend_NoExist":                135177,
	"Msg_Ret_Code_AddFriend_IsOffLine":                  135184,
	"Msg_Ret_Code_AddFriend_AlreadyRequest":             135185,
	"Msg_Ret_Code_FriendFight_IsNotFriend":              135186,
	"Msg_Ret_Code_Skill_Study_Failed":                   139265,
	"Msg_Ret_Code_Skill_LevelUp_Failed":                 139266,
	"Msg_Ret_Code_Skill_DressTalent_Failed":             139267,
	"Msg_Ret_Code_Skill_TakeOffTalent_Failed":           139268,
	"Msg_Ret_Code_Skill_DressBook_Failed":               139269,
	"Msg_Ret_Code_Skill_TakeOffBook_Failed":             139270,
	"Msg_Ret_Code_Skill_Site_Invalid_Failed":            139271,
	"Msg_Ret_Code_Skill_Site_Vip_Not_Reached":           139272,
	"Msg_Ret_Code_Dress_Card_PVE_Failed":                143361,
	"Msg_Ret_Code_TakeOff_Card_PVE_Failed":              143362,
	"Msg_Ret_Code_Dress_Card_PVP_Failed":                143363,
	"Msg_Ret_Code_TakeOff_Card_PVP_Failed":              143364,
	"Msg_Ret_Code_GoMiniGame_Failed":                    147457,
	"Msg_Ret_Code_ArenaFight_Failed":                    151553,
	"Msg_Ret_Code_ArenaFight_Num_Failed":                151554,
	"Msg_Ret_Code_ArenaFight_Cd_Failed":                 151555,
	"Msg_Ret_Code_Role_NoExist":                         151556,
	"Msg_Ret_Code_ArenaFight_Verify_Fail":               151557,
	"Msg_Ret_Code_Someone_Fight_With_You":               151558,
	"Msg_Ret_Code_Sword_Failed":                         155649,
	"Msg_Ret_Code_Sword_Num_Failed":                     155650,
	"Msg_Ret_Code_Daily_Task_Condtion_Failed":           159745,
	"Msg_Ret_Code_Not_Enough_Buy_Count":                 163841,
	"Msg_Ret_Code_RequestShop_TimeOut":                  167937,
	"Msg_Ret_Code_SkillBookShop_Not_Open_Time":          167938,
	"Msg_Ret_Code_Request_Goods_Is_Not_Exist":           167939,
	"Msg_Ret_Code_Request_Goods_Is_Already_Sold":        167940,
	"Msg_Ret_Code_ForceRefresh_Num_Not_Enough":          167941,
	"Msg_Ret_Code_Player_Was_OnLine":                    196609,
	"Msg_Ret_Code_Mail_Not_Exist":                       262145,
	"Msg_Ret_Code_Signin_Failure":                       327936,
	"Msg_Ret_Code_Signin_Repeated":                      327937,
	"Msg_Ret_Code_Signin_Additional_Not_Enough":         327938,
	"Msg_Ret_Code_GetCondition_Not_Enough":              393472,
	"Msg_Ret_Code_FunctionOpen_Condition_Fail":          393728,
	"Msg_Ret_Code_Dress_Equip_Level_Failed":             393744,
	"Msg_Ret_Code_Data_Failed":                          393760,
	"Msg_Ret_Code_Equip_Is_Top_Level":                   393765,
	"Msg_Ret_Code_Fix_Bag_Space_Full":                   393776,
	"Msg_Ret_Code_Cannot_Fix_Equip":                     393777,
	"Msg_Ret_Code_Equip_Is_Fixing":                      393778,
	"Msg_Ret_Code_Equip_Endurance_Is_Zero":              393779,
	"Msg_Ret_Code_Equip_Cannot_Resolved":                393780,
	"Msg_Ret_Code_AcceptTask_Failed":                    458753,
	"Msg_Ret_Code_AcceptTask_Num_Upper_Limit":           458769,
	"Msg_Ret_Code_Task_Not_Exist":                       458770,
	"Msg_Ret_Code_CompleteTask_Failed":                  458784,
	"Msg_Ret_Code_Task_Is_Complete_Failed":              458785,
	"Msg_Ret_Code_Task_Matrial_Missed_Failed":           458786,
	"Msg_Ret_Code_Task_Not_Permit_GiveUp_Failed":        458787,
	"Msg_Ret_Code_Exchange_Num_Failed":                  458800,
	"Msg_Ret_Code_CdTime_Failed":                        458816,
	"Msg_Ret_Code_Please_More_Try":                      458832,
	"Msg_Ret_Code_Distance_failed":                      458848,
	"Msg_Ret_Code_Got_By_Other":                         458864,
	"Msg_Ret_RoomCreate_Failed":                         524304,
	"Msg_Ret_RoomJoin_Failed":                           524320,
	"Msg_Ret_RoomFastJoin_Failed":                       524336,
	"Msg_Ret_RoomLeave_Failed":                          524352,
	"Msg_Ret_RoomReady_Failed":                          524368,
	"Msg_Ret_MasterKickPlayer_Failed":                   524384,
	"Msg_Ret_Car_Not_Exist_Failed":                      589824,
	"Msg_Ret_Code_Cannot_Fix_Car":                       589840,
	"Msg_Ret_Code_Car_Space_Full":                       589843,
	"Msg_Ret_Code_Car_Not_Broken":                       589845,
	"Msg_Ret_Code_Car_Not_Good":                         589849,
	"Msg_Ret_Code_Carport_Is_Protect":                   589857,
	"Msg_Ret_Code_Action_Count_Not_Enough":              589859,
	"Msg_Ret_Code_Get_Car_Too_Early":                    589861,
	"Msg_Ret_Code_Park_Car_Too_Much":                    589863,
	"Msg_Ret_Code_Out_Player_Num_Range":                 589865,
	"Msg_Ret_Code_Must_Go_Special_Line":                 589873,
	"Msg_Ret_Code_System_Collect_Car":                   589875,
	"Msg_Ret_Code_Carport_Drink_Pnvu":                   589876,
	"Msg_Ret_Code_SceneIndex_Is_Same_Fail":              589878,
	"Msg_Ret_Code_Hangup_Too_Fast_Fail":                 590080,
	"Msg_Ret_Code_Hangup_Time_Run_Out":                  590081,
	"Msg_Ret_Code_Interact_Not_Exist_Fail":              590096,
	"Msg_Ret_Code_Interact_Was_Exist_Fail":              590097,
	"Msg_Ret_Code_Interact_Use_Count_Fail":              590101,
	"Msg_Ret_Code_Interact_Reward_Got_Fail":             590102,
	"Msg_Ret_Code_Interact_Energy_Count_Fail":           590103,
	"Msg_Ret_Code_quality_Not_Same_Fail":                590112,
	"Msg_Ret_Code_quality_Top_Level_Fail":               590113,
	"Msg_Ret_Code_Compose_Rolelevel_Fail":               590114,
	"Msg_Ret_Code_Not_In_Rank_Fail":                     590130,
	"Msg_Ret_Code_NpcInteract_Wait_And_Wait":            590144,
	"Msg_Ret_Code_Pet_Not_Exist":                        590336,
	"Msg_Ret_Code_Pet_Level_Max_Limit_Fail":             590337,
	"Msg_Ret_Code_Pet_Need_Evolve_Fail":                 590338,
	"Msg_Ret_Code_Pet_Attr_Is_Top_Fail":                 590339,
	"Msg_Ret_Code_Pet_Was_Nab_Fail":                     590340,
	"Msg_Ret_Code_Pet_Egg_Get_Nothing":                  590341,
	"Msg_Ret_Code_Set_Fight_Pet_Invalid":                590342,
	"Msg_Ret_Code_Pet_Level_Reach_Role_Level":           590343,
	"Msg_Ret_Code_Size_Is_Max_Size":                     590592,
	"Msg_Ret_Code_Did_Not_Open_Home":                    590593,
	"Msg_Ret_Code_Home_Level_Not_Enough":                590594,
	"Msg_Ret_Code_Server_Is_Full":                       590848,
	"Msg_Ret_Code_Friend_Fight_Num_Not_Enough":          591105,
	"Msg_Ret_Code_Archieve_Not_Reached":                 591361,
	"Msg_Ret_Code_Not_Enough_Guadratic_Count":           591617,
	"Msg_Ret_Code_Not_Enough_Interact":                  591618,
	"Msg_Ret_Code_Not_Guadratic_Enter_Time":             591619,
	"Msg_Ret_Code_Redeem_Not_Exist":                     591873,
	"Msg_Ret_Code_Redeem_Expire":                        591874,
	"Msg_Ret_Code_Redeem_Aleady_Get":                    591875,
	"Msg_Ret_Code_Redeem_ServerId_Error":                591876,
	"Msg_Ret_Code_Stone_Not_Exist":                      591904,
	"Msg_Ret_Code_First_Monery_Not_OK":                  592128,
	"Msg_Ret_Code_First_Monery_Aleady_Get":              592129,
	"Msg_Ret_Code_Kick":                                 593921,
	"Msg_Ret_Code_Login_Again":                          593922,
	"Msg_Ret_Code_Equip_Bag_Is_Full":                    598016,
	"Msg_Ret_Code_Equip_Bag_Reach_Uplimit":              598017,
	"Msg_Ret_Code_Equip_Bag_Full_Insert_Mail":           598018,
	"Msg_Ret_Code_Activity_Not_Exist":                   602112,
	"Msg_Ret_Code_Activity_Reward_Get_Count_Limit":      602113,
	"Msg_Ret_Code_Activity_Aim_Not_Reach":               602114,
	"Msg_Ret_Code_Piano_Was_Playing":                    602368,
	"Msg_Ret_Code_Verify_PVE_Invalid_Data":              606464,
	"Msg_Ret_Code_Verify_PVE_Error":                     606465,
	"Msg_Ret_Code_Verify_PVE_Failed":                    606466,
	"Msg_Ret_Code_Verify_PVE_Box_Failed":                606467,
	"Msg_Ret_Code_Verify_PVE_Skill_Failed":              606468,
	"Msg_Ret_Code_Verify_PVE_KillMonster_Failed":        606469,
	"Msg_Ret_Code_Not_Exist_Make_Id":                    610560,
}

func (x E_MSG_RET_CODE) Enum() *E_MSG_RET_CODE {
	p := new(E_MSG_RET_CODE)
	*p = x
	return p
}

func (x E_MSG_RET_CODE) String() string {
	return proto.EnumName(E_MSG_RET_CODE_name, int32(x))
}

func (x *E_MSG_RET_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MSG_RET_CODE_value, data, "E_MSG_RET_CODE")
	if err != nil {
		return err
	}
	*x = E_MSG_RET_CODE(value)
	return nil
}

func (E_MSG_RET_CODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{19}
}

// 聊天类型
type E_CHAT_TYPE int32

const (
	E_CHAT_TYPE_ECT_SCENE E_CHAT_TYPE = 0
	E_CHAT_TYPE_ECT_GROUP E_CHAT_TYPE = 1
	E_CHAT_TYPE_ECT_O2O   E_CHAT_TYPE = 2
	E_CHAT_TYPE_ECT_WORLD E_CHAT_TYPE = 3
)

var E_CHAT_TYPE_name = map[int32]string{
	0: "ECT_SCENE",
	1: "ECT_GROUP",
	2: "ECT_O2O",
	3: "ECT_WORLD",
}

var E_CHAT_TYPE_value = map[string]int32{
	"ECT_SCENE": 0,
	"ECT_GROUP": 1,
	"ECT_O2O":   2,
	"ECT_WORLD": 3,
}

func (x E_CHAT_TYPE) Enum() *E_CHAT_TYPE {
	p := new(E_CHAT_TYPE)
	*p = x
	return p
}

func (x E_CHAT_TYPE) String() string {
	return proto.EnumName(E_CHAT_TYPE_name, int32(x))
}

func (x *E_CHAT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_CHAT_TYPE_value, data, "E_CHAT_TYPE")
	if err != nil {
		return err
	}
	*x = E_CHAT_TYPE(value)
	return nil
}

func (E_CHAT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{20}
}

// 七天登录标识类型
type E_SEVEN_DAY_TYPE int32

const (
	E_SEVEN_DAY_TYPE_ESDT_UNBALE E_SEVEN_DAY_TYPE = 0
	E_SEVEN_DAY_TYPE_ESDT_ABLE   E_SEVEN_DAY_TYPE = 1
	E_SEVEN_DAY_TYPE_ESDT_OK     E_SEVEN_DAY_TYPE = 2
)

var E_SEVEN_DAY_TYPE_name = map[int32]string{
	0: "ESDT_UNBALE",
	1: "ESDT_ABLE",
	2: "ESDT_OK",
}

var E_SEVEN_DAY_TYPE_value = map[string]int32{
	"ESDT_UNBALE": 0,
	"ESDT_ABLE":   1,
	"ESDT_OK":     2,
}

func (x E_SEVEN_DAY_TYPE) Enum() *E_SEVEN_DAY_TYPE {
	p := new(E_SEVEN_DAY_TYPE)
	*p = x
	return p
}

func (x E_SEVEN_DAY_TYPE) String() string {
	return proto.EnumName(E_SEVEN_DAY_TYPE_name, int32(x))
}

func (x *E_SEVEN_DAY_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_SEVEN_DAY_TYPE_value, data, "E_SEVEN_DAY_TYPE")
	if err != nil {
		return err
	}
	*x = E_SEVEN_DAY_TYPE(value)
	return nil
}

func (E_SEVEN_DAY_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{21}
}

// 表情商店类型枚举
type FACE_SHOP_TYPE int32

const (
	FACE_SHOP_TYPE_FST_NORMAL   FACE_SHOP_TYPE = 1
	FACE_SHOP_TYPE_FST_DISCOUNT FACE_SHOP_TYPE = 2
)

var FACE_SHOP_TYPE_name = map[int32]string{
	1: "FST_NORMAL",
	2: "FST_DISCOUNT",
}

var FACE_SHOP_TYPE_value = map[string]int32{
	"FST_NORMAL":   1,
	"FST_DISCOUNT": 2,
}

func (x FACE_SHOP_TYPE) Enum() *FACE_SHOP_TYPE {
	p := new(FACE_SHOP_TYPE)
	*p = x
	return p
}

func (x FACE_SHOP_TYPE) String() string {
	return proto.EnumName(FACE_SHOP_TYPE_name, int32(x))
}

func (x *FACE_SHOP_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FACE_SHOP_TYPE_value, data, "FACE_SHOP_TYPE")
	if err != nil {
		return err
	}
	*x = FACE_SHOP_TYPE(value)
	return nil
}

func (FACE_SHOP_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{22}
}

// 请求好友的操作类型(删除与添加)
type E_REQ_FRIEND_TYPE int32

const (
	E_REQ_FRIEND_TYPE_E_MNG_FRIEND_DEL E_REQ_FRIEND_TYPE = 0
	E_REQ_FRIEND_TYPE_E_MNG_FRIEND_ADD E_REQ_FRIEND_TYPE = 1
)

var E_REQ_FRIEND_TYPE_name = map[int32]string{
	0: "E_MNG_FRIEND_DEL",
	1: "E_MNG_FRIEND_ADD",
}

var E_REQ_FRIEND_TYPE_value = map[string]int32{
	"E_MNG_FRIEND_DEL": 0,
	"E_MNG_FRIEND_ADD": 1,
}

func (x E_REQ_FRIEND_TYPE) Enum() *E_REQ_FRIEND_TYPE {
	p := new(E_REQ_FRIEND_TYPE)
	*p = x
	return p
}

func (x E_REQ_FRIEND_TYPE) String() string {
	return proto.EnumName(E_REQ_FRIEND_TYPE_name, int32(x))
}

func (x *E_REQ_FRIEND_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_REQ_FRIEND_TYPE_value, data, "E_REQ_FRIEND_TYPE")
	if err != nil {
		return err
	}
	*x = E_REQ_FRIEND_TYPE(value)
	return nil
}

func (E_REQ_FRIEND_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{23}
}

// 山神时间类型
type E_MountainGodEvent_TYPE int32

const (
	E_MountainGodEvent_TYPE_EMGET_INVALID E_MountainGodEvent_TYPE = 0
	E_MountainGodEvent_TYPE_EMGET_RIGHT_1 E_MountainGodEvent_TYPE = 1
	E_MountainGodEvent_TYPE_EMGET_RIGHT_2 E_MountainGodEvent_TYPE = 2
	E_MountainGodEvent_TYPE_EMGET_LEFT_1  E_MountainGodEvent_TYPE = 3
	E_MountainGodEvent_TYPE_EMGET_LEFT_2  E_MountainGodEvent_TYPE = 4
	E_MountainGodEvent_TYPE_EMGET_LEFT_3  E_MountainGodEvent_TYPE = 5
	E_MountainGodEvent_TYPE_EMGET_BOTH_1  E_MountainGodEvent_TYPE = 6
	E_MountainGodEvent_TYPE_EMGET_BOTH_2  E_MountainGodEvent_TYPE = 7
	E_MountainGodEvent_TYPE_EMGET_BOTH_3  E_MountainGodEvent_TYPE = 8
	E_MountainGodEvent_TYPE_EMGET_BOTH_4  E_MountainGodEvent_TYPE = 9
)

var E_MountainGodEvent_TYPE_name = map[int32]string{
	0: "EMGET_INVALID",
	1: "EMGET_RIGHT_1",
	2: "EMGET_RIGHT_2",
	3: "EMGET_LEFT_1",
	4: "EMGET_LEFT_2",
	5: "EMGET_LEFT_3",
	6: "EMGET_BOTH_1",
	7: "EMGET_BOTH_2",
	8: "EMGET_BOTH_3",
	9: "EMGET_BOTH_4",
}

var E_MountainGodEvent_TYPE_value = map[string]int32{
	"EMGET_INVALID": 0,
	"EMGET_RIGHT_1": 1,
	"EMGET_RIGHT_2": 2,
	"EMGET_LEFT_1":  3,
	"EMGET_LEFT_2":  4,
	"EMGET_LEFT_3":  5,
	"EMGET_BOTH_1":  6,
	"EMGET_BOTH_2":  7,
	"EMGET_BOTH_3":  8,
	"EMGET_BOTH_4":  9,
}

func (x E_MountainGodEvent_TYPE) Enum() *E_MountainGodEvent_TYPE {
	p := new(E_MountainGodEvent_TYPE)
	*p = x
	return p
}

func (x E_MountainGodEvent_TYPE) String() string {
	return proto.EnumName(E_MountainGodEvent_TYPE_name, int32(x))
}

func (x *E_MountainGodEvent_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_MountainGodEvent_TYPE_value, data, "E_MountainGodEvent_TYPE")
	if err != nil {
		return err
	}
	*x = E_MountainGodEvent_TYPE(value)
	return nil
}

func (E_MountainGodEvent_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{24}
}

// 山神事件中装备类型
type E_CALIBURN_SELECT_TYPE int32

const (
	E_CALIBURN_SELECT_TYPE_ECS_LEFT_HAND    E_CALIBURN_SELECT_TYPE = 1
	E_CALIBURN_SELECT_TYPE_ECS_RIGHT_HAND   E_CALIBURN_SELECT_TYPE = 2
	E_CALIBURN_SELECT_TYPE_ECS_BOTH_NOT     E_CALIBURN_SELECT_TYPE = 3
	E_CALIBURN_SELECT_TYPE_ECS_FIRST_SELECT E_CALIBURN_SELECT_TYPE = 4
)

var E_CALIBURN_SELECT_TYPE_name = map[int32]string{
	1: "ECS_LEFT_HAND",
	2: "ECS_RIGHT_HAND",
	3: "ECS_BOTH_NOT",
	4: "ECS_FIRST_SELECT",
}

var E_CALIBURN_SELECT_TYPE_value = map[string]int32{
	"ECS_LEFT_HAND":    1,
	"ECS_RIGHT_HAND":   2,
	"ECS_BOTH_NOT":     3,
	"ECS_FIRST_SELECT": 4,
}

func (x E_CALIBURN_SELECT_TYPE) Enum() *E_CALIBURN_SELECT_TYPE {
	p := new(E_CALIBURN_SELECT_TYPE)
	*p = x
	return p
}

func (x E_CALIBURN_SELECT_TYPE) String() string {
	return proto.EnumName(E_CALIBURN_SELECT_TYPE_name, int32(x))
}

func (x *E_CALIBURN_SELECT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_CALIBURN_SELECT_TYPE_value, data, "E_CALIBURN_SELECT_TYPE")
	if err != nil {
		return err
	}
	*x = E_CALIBURN_SELECT_TYPE(value)
	return nil
}

func (E_CALIBURN_SELECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{25}
}

// 山神事件结果类型
type E_CALIBURN_RESULT_TYPE int32

const (
	E_CALIBURN_RESULT_TYPE_ECR_LEFT_HAND    E_CALIBURN_RESULT_TYPE = 1
	E_CALIBURN_RESULT_TYPE_ECR_RIGHT_HAND   E_CALIBURN_RESULT_TYPE = 2
	E_CALIBURN_RESULT_TYPE_ECR_BOTH         E_CALIBURN_RESULT_TYPE = 3
	E_CALIBURN_RESULT_TYPE_ECR_FIRST_SELECT E_CALIBURN_RESULT_TYPE = 4
	E_CALIBURN_RESULT_TYPE_ECR_BOTH_NOT     E_CALIBURN_RESULT_TYPE = 5
)

var E_CALIBURN_RESULT_TYPE_name = map[int32]string{
	1: "ECR_LEFT_HAND",
	2: "ECR_RIGHT_HAND",
	3: "ECR_BOTH",
	4: "ECR_FIRST_SELECT",
	5: "ECR_BOTH_NOT",
}

var E_CALIBURN_RESULT_TYPE_value = map[string]int32{
	"ECR_LEFT_HAND":    1,
	"ECR_RIGHT_HAND":   2,
	"ECR_BOTH":         3,
	"ECR_FIRST_SELECT": 4,
	"ECR_BOTH_NOT":     5,
}

func (x E_CALIBURN_RESULT_TYPE) Enum() *E_CALIBURN_RESULT_TYPE {
	p := new(E_CALIBURN_RESULT_TYPE)
	*p = x
	return p
}

func (x E_CALIBURN_RESULT_TYPE) String() string {
	return proto.EnumName(E_CALIBURN_RESULT_TYPE_name, int32(x))
}

func (x *E_CALIBURN_RESULT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_CALIBURN_RESULT_TYPE_value, data, "E_CALIBURN_RESULT_TYPE")
	if err != nil {
		return err
	}
	*x = E_CALIBURN_RESULT_TYPE(value)
	return nil
}

func (E_CALIBURN_RESULT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{26}
}

// 日常任务子类型
type E_DAILY_TASK_TYPE int32

const (
	E_DAILY_TASK_TYPE_EDTT_TYPE_1  E_DAILY_TASK_TYPE = 1
	E_DAILY_TASK_TYPE_EDTT_TYPE_2  E_DAILY_TASK_TYPE = 2
	E_DAILY_TASK_TYPE_EDTT_TYPE_3  E_DAILY_TASK_TYPE = 3
	E_DAILY_TASK_TYPE_EDTT_TYPE_4  E_DAILY_TASK_TYPE = 4
	E_DAILY_TASK_TYPE_EDTT_TYPE_5  E_DAILY_TASK_TYPE = 5
	E_DAILY_TASK_TYPE_EDTT_TYPE_6  E_DAILY_TASK_TYPE = 6
	E_DAILY_TASK_TYPE_EDTT_TYPE_7  E_DAILY_TASK_TYPE = 7
	E_DAILY_TASK_TYPE_EDTT_TYPE_8  E_DAILY_TASK_TYPE = 8
	E_DAILY_TASK_TYPE_EDTT_TYPE_9  E_DAILY_TASK_TYPE = 9
	E_DAILY_TASK_TYPE_EDTT_TYPE_10 E_DAILY_TASK_TYPE = 10
	E_DAILY_TASK_TYPE_EDTT_TYPE_11 E_DAILY_TASK_TYPE = 11
	E_DAILY_TASK_TYPE_EDTT_TYPE_12 E_DAILY_TASK_TYPE = 12
	E_DAILY_TASK_TYPE_EDTT_TYPE_13 E_DAILY_TASK_TYPE = 13
	E_DAILY_TASK_TYPE_EDTT_TYPE_14 E_DAILY_TASK_TYPE = 14
	E_DAILY_TASK_TYPE_EDTT_TYPE_15 E_DAILY_TASK_TYPE = 15
	E_DAILY_TASK_TYPE_EDTT_TYPE_16 E_DAILY_TASK_TYPE = 16
	E_DAILY_TASK_TYPE_EDTT_TYPE_17 E_DAILY_TASK_TYPE = 17
	E_DAILY_TASK_TYPE_EDTT_TYPE_18 E_DAILY_TASK_TYPE = 18
	E_DAILY_TASK_TYPE_EDTT_TYPE_19 E_DAILY_TASK_TYPE = 19
	E_DAILY_TASK_TYPE_EDTT_TYPE_20 E_DAILY_TASK_TYPE = 20
	E_DAILY_TASK_TYPE_EDTT_TYPE_21 E_DAILY_TASK_TYPE = 21
	E_DAILY_TASK_TYPE_EDTT_TYPE_22 E_DAILY_TASK_TYPE = 22
	E_DAILY_TASK_TYPE_EDTT_TYPE_23 E_DAILY_TASK_TYPE = 23
	E_DAILY_TASK_TYPE_EDTT_TYPE_24 E_DAILY_TASK_TYPE = 24
	E_DAILY_TASK_TYPE_EDTT_TYPE_25 E_DAILY_TASK_TYPE = 25
	E_DAILY_TASK_TYPE_EDTT_TYPE_26 E_DAILY_TASK_TYPE = 26
	E_DAILY_TASK_TYPE_EDTT_TYPE_27 E_DAILY_TASK_TYPE = 27
	E_DAILY_TASK_TYPE_EDTT_TYPE_28 E_DAILY_TASK_TYPE = 28
	E_DAILY_TASK_TYPE_EDTT_TYPE_29 E_DAILY_TASK_TYPE = 29
	E_DAILY_TASK_TYPE_EDTT_TYPE_30 E_DAILY_TASK_TYPE = 30
	E_DAILY_TASK_TYPE_EDTT_TYPE_31 E_DAILY_TASK_TYPE = 31
)

var E_DAILY_TASK_TYPE_name = map[int32]string{
	1:  "EDTT_TYPE_1",
	2:  "EDTT_TYPE_2",
	3:  "EDTT_TYPE_3",
	4:  "EDTT_TYPE_4",
	5:  "EDTT_TYPE_5",
	6:  "EDTT_TYPE_6",
	7:  "EDTT_TYPE_7",
	8:  "EDTT_TYPE_8",
	9:  "EDTT_TYPE_9",
	10: "EDTT_TYPE_10",
	11: "EDTT_TYPE_11",
	12: "EDTT_TYPE_12",
	13: "EDTT_TYPE_13",
	14: "EDTT_TYPE_14",
	15: "EDTT_TYPE_15",
	16: "EDTT_TYPE_16",
	17: "EDTT_TYPE_17",
	18: "EDTT_TYPE_18",
	19: "EDTT_TYPE_19",
	20: "EDTT_TYPE_20",
	21: "EDTT_TYPE_21",
	22: "EDTT_TYPE_22",
	23: "EDTT_TYPE_23",
	24: "EDTT_TYPE_24",
	25: "EDTT_TYPE_25",
	26: "EDTT_TYPE_26",
	27: "EDTT_TYPE_27",
	28: "EDTT_TYPE_28",
	29: "EDTT_TYPE_29",
	30: "EDTT_TYPE_30",
	31: "EDTT_TYPE_31",
}

var E_DAILY_TASK_TYPE_value = map[string]int32{
	"EDTT_TYPE_1":  1,
	"EDTT_TYPE_2":  2,
	"EDTT_TYPE_3":  3,
	"EDTT_TYPE_4":  4,
	"EDTT_TYPE_5":  5,
	"EDTT_TYPE_6":  6,
	"EDTT_TYPE_7":  7,
	"EDTT_TYPE_8":  8,
	"EDTT_TYPE_9":  9,
	"EDTT_TYPE_10": 10,
	"EDTT_TYPE_11": 11,
	"EDTT_TYPE_12": 12,
	"EDTT_TYPE_13": 13,
	"EDTT_TYPE_14": 14,
	"EDTT_TYPE_15": 15,
	"EDTT_TYPE_16": 16,
	"EDTT_TYPE_17": 17,
	"EDTT_TYPE_18": 18,
	"EDTT_TYPE_19": 19,
	"EDTT_TYPE_20": 20,
	"EDTT_TYPE_21": 21,
	"EDTT_TYPE_22": 22,
	"EDTT_TYPE_23": 23,
	"EDTT_TYPE_24": 24,
	"EDTT_TYPE_25": 25,
	"EDTT_TYPE_26": 26,
	"EDTT_TYPE_27": 27,
	"EDTT_TYPE_28": 28,
	"EDTT_TYPE_29": 29,
	"EDTT_TYPE_30": 30,
	"EDTT_TYPE_31": 31,
}

func (x E_DAILY_TASK_TYPE) Enum() *E_DAILY_TASK_TYPE {
	p := new(E_DAILY_TASK_TYPE)
	*p = x
	return p
}

func (x E_DAILY_TASK_TYPE) String() string {
	return proto.EnumName(E_DAILY_TASK_TYPE_name, int32(x))
}

func (x *E_DAILY_TASK_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_DAILY_TASK_TYPE_value, data, "E_DAILY_TASK_TYPE")
	if err != nil {
		return err
	}
	*x = E_DAILY_TASK_TYPE(value)
	return nil
}

func (E_DAILY_TASK_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{27}
}

// 日常活跃度类型
type E_DAILY_ACTIVITY_LEVEL int32

const (
	E_DAILY_ACTIVITY_LEVEL_EDDAT_LEVEL_1 E_DAILY_ACTIVITY_LEVEL = 1
	E_DAILY_ACTIVITY_LEVEL_EDDAT_LEVEL_2 E_DAILY_ACTIVITY_LEVEL = 2
	E_DAILY_ACTIVITY_LEVEL_EDDAT_LEVEL_3 E_DAILY_ACTIVITY_LEVEL = 3
	E_DAILY_ACTIVITY_LEVEL_EDDAT_LEVEL_4 E_DAILY_ACTIVITY_LEVEL = 4
	E_DAILY_ACTIVITY_LEVEL_EDDAT_LEVEL_5 E_DAILY_ACTIVITY_LEVEL = 5
)

var E_DAILY_ACTIVITY_LEVEL_name = map[int32]string{
	1: "EDDAT_LEVEL_1",
	2: "EDDAT_LEVEL_2",
	3: "EDDAT_LEVEL_3",
	4: "EDDAT_LEVEL_4",
	5: "EDDAT_LEVEL_5",
}

var E_DAILY_ACTIVITY_LEVEL_value = map[string]int32{
	"EDDAT_LEVEL_1": 1,
	"EDDAT_LEVEL_2": 2,
	"EDDAT_LEVEL_3": 3,
	"EDDAT_LEVEL_4": 4,
	"EDDAT_LEVEL_5": 5,
}

func (x E_DAILY_ACTIVITY_LEVEL) Enum() *E_DAILY_ACTIVITY_LEVEL {
	p := new(E_DAILY_ACTIVITY_LEVEL)
	*p = x
	return p
}

func (x E_DAILY_ACTIVITY_LEVEL) String() string {
	return proto.EnumName(E_DAILY_ACTIVITY_LEVEL_name, int32(x))
}

func (x *E_DAILY_ACTIVITY_LEVEL) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_DAILY_ACTIVITY_LEVEL_value, data, "E_DAILY_ACTIVITY_LEVEL")
	if err != nil {
		return err
	}
	*x = E_DAILY_ACTIVITY_LEVEL(value)
	return nil
}

func (E_DAILY_ACTIVITY_LEVEL) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{28}
}

// 套装商店id
type E_SUIT_FACE_SHOP_ID int32

const (
	E_SUIT_FACE_SHOP_ID_ESFSI_FACE E_SUIT_FACE_SHOP_ID = 1
	E_SUIT_FACE_SHOP_ID_ESFSI_SUIT E_SUIT_FACE_SHOP_ID = 2
)

var E_SUIT_FACE_SHOP_ID_name = map[int32]string{
	1: "ESFSI_FACE",
	2: "ESFSI_SUIT",
}

var E_SUIT_FACE_SHOP_ID_value = map[string]int32{
	"ESFSI_FACE": 1,
	"ESFSI_SUIT": 2,
}

func (x E_SUIT_FACE_SHOP_ID) Enum() *E_SUIT_FACE_SHOP_ID {
	p := new(E_SUIT_FACE_SHOP_ID)
	*p = x
	return p
}

func (x E_SUIT_FACE_SHOP_ID) String() string {
	return proto.EnumName(E_SUIT_FACE_SHOP_ID_name, int32(x))
}

func (x *E_SUIT_FACE_SHOP_ID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_SUIT_FACE_SHOP_ID_value, data, "E_SUIT_FACE_SHOP_ID")
	if err != nil {
		return err
	}
	*x = E_SUIT_FACE_SHOP_ID(value)
	return nil
}

func (E_SUIT_FACE_SHOP_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{29}
}

// 家园
// 装饰类型
type E_ROOM_DECORATE_TYPE int32

const (
	E_ROOM_DECORATE_TYPE_ERDT_FLOOR_TILE     E_ROOM_DECORATE_TYPE = 1
	E_ROOM_DECORATE_TYPE_ERDT_FLOOR_DECORATE E_ROOM_DECORATE_TYPE = 2
	E_ROOM_DECORATE_TYPE_ERDT_WALL_PAPER     E_ROOM_DECORATE_TYPE = 3
	E_ROOM_DECORATE_TYPE_ERDT_WALL_DECORATE  E_ROOM_DECORATE_TYPE = 4
)

var E_ROOM_DECORATE_TYPE_name = map[int32]string{
	1: "ERDT_FLOOR_TILE",
	2: "ERDT_FLOOR_DECORATE",
	3: "ERDT_WALL_PAPER",
	4: "ERDT_WALL_DECORATE",
}

var E_ROOM_DECORATE_TYPE_value = map[string]int32{
	"ERDT_FLOOR_TILE":     1,
	"ERDT_FLOOR_DECORATE": 2,
	"ERDT_WALL_PAPER":     3,
	"ERDT_WALL_DECORATE":  4,
}

func (x E_ROOM_DECORATE_TYPE) Enum() *E_ROOM_DECORATE_TYPE {
	p := new(E_ROOM_DECORATE_TYPE)
	*p = x
	return p
}

func (x E_ROOM_DECORATE_TYPE) String() string {
	return proto.EnumName(E_ROOM_DECORATE_TYPE_name, int32(x))
}

func (x *E_ROOM_DECORATE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ROOM_DECORATE_TYPE_value, data, "E_ROOM_DECORATE_TYPE")
	if err != nil {
		return err
	}
	*x = E_ROOM_DECORATE_TYPE(value)
	return nil
}

func (E_ROOM_DECORATE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{30}
}

// 方向
type E_ROOM_DECORATE_DIRECTION int32

const (
	E_ROOM_DECORATE_DIRECTION_ERDD_RIGHT E_ROOM_DECORATE_DIRECTION = 1
	E_ROOM_DECORATE_DIRECTION_ERDD_LEFT  E_ROOM_DECORATE_DIRECTION = 2
	E_ROOM_DECORATE_DIRECTION_ERDD_UP    E_ROOM_DECORATE_DIRECTION = 3
	E_ROOM_DECORATE_DIRECTION_ERDD_DOWN  E_ROOM_DECORATE_DIRECTION = 4
)

var E_ROOM_DECORATE_DIRECTION_name = map[int32]string{
	1: "ERDD_RIGHT",
	2: "ERDD_LEFT",
	3: "ERDD_UP",
	4: "ERDD_DOWN",
}

var E_ROOM_DECORATE_DIRECTION_value = map[string]int32{
	"ERDD_RIGHT": 1,
	"ERDD_LEFT":  2,
	"ERDD_UP":    3,
	"ERDD_DOWN":  4,
}

func (x E_ROOM_DECORATE_DIRECTION) Enum() *E_ROOM_DECORATE_DIRECTION {
	p := new(E_ROOM_DECORATE_DIRECTION)
	*p = x
	return p
}

func (x E_ROOM_DECORATE_DIRECTION) String() string {
	return proto.EnumName(E_ROOM_DECORATE_DIRECTION_name, int32(x))
}

func (x *E_ROOM_DECORATE_DIRECTION) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ROOM_DECORATE_DIRECTION_value, data, "E_ROOM_DECORATE_DIRECTION")
	if err != nil {
		return err
	}
	*x = E_ROOM_DECORATE_DIRECTION(value)
	return nil
}

func (E_ROOM_DECORATE_DIRECTION) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{31}
}

// 任务类型
type MAIN_TASK_TYPE int32

const (
	MAIN_TASK_TYPE_EMTT_MONSTER_NUM           MAIN_TASK_TYPE = 1
	MAIN_TASK_TYPE_EMTT_INTERACT_NUM          MAIN_TASK_TYPE = 2
	MAIN_TASK_TYPE_EMTT_INTERACTED_NUM        MAIN_TASK_TYPE = 3
	MAIN_TASK_TYPE_EMTT_PASS_RISK             MAIN_TASK_TYPE = 4
	MAIN_TASK_TYPE_EMTT_ONLINE_TIME_TOTAL     MAIN_TASK_TYPE = 5
	MAIN_TASK_TYPE_EMTT_MINIGAME_SCORE        MAIN_TASK_TYPE = 6
	MAIN_TASK_TYPE_EMTT_TALK_NPC              MAIN_TASK_TYPE = 7
	MAIN_TASK_TYPE_EMTT_ARENA_KILL_LIST       MAIN_TASK_TYPE = 8
	MAIN_TASK_TYPE_EMTT_MINIGAME_TIME         MAIN_TASK_TYPE = 9
	MAIN_TASK_TYPE_EMTT_SWORD_TIME            MAIN_TASK_TYPE = 10
	MAIN_TASK_TYPE_EMTT_SWORD_SUCCESS_TIME    MAIN_TASK_TYPE = 11
	MAIN_TASK_TYPE_EMTT_ARENA_TIME            MAIN_TASK_TYPE = 12
	MAIN_TASK_TYPE_EMTT_ARENA_SUCCESS_TIME    MAIN_TASK_TYPE = 13
	MAIN_TASK_TYPE_EMTT_EQUIP_STRENGTHEN      MAIN_TASK_TYPE = 14
	MAIN_TASK_TYPE_EMTT_EQUIP_RESOLVE         MAIN_TASK_TYPE = 15
	MAIN_TASK_TYPE_EMTT_AUTO_COMPLETE         MAIN_TASK_TYPE = 16
	MAIN_TASK_TYPE_EMTT_SEND_DANMAKU_TIME     MAIN_TASK_TYPE = 17
	MAIN_TASK_TYPE_EMTT_EQUIP_RESOLVE_NUM     MAIN_TASK_TYPE = 18
	MAIN_TASK_TYPE_EMTT_EASTER_EGG_TOUCH_TIME MAIN_TASK_TYPE = 19
	MAIN_TASK_TYPE_EMTT_DRESS_SKILL           MAIN_TASK_TYPE = 20
	MAIN_TASK_TYPE_EMTT_BUY_FACE_TIME         MAIN_TASK_TYPE = 21
	MAIN_TASK_TYPE_EMTT_USE_FAST_TRANSFER     MAIN_TASK_TYPE = 22
	MAIN_TASK_TYPE_EMTT_USE_ITEM_TIME         MAIN_TASK_TYPE = 23
	MAIN_TASK_TYPE_EMTT_BATH_INTERACT_TIME    MAIN_TASK_TYPE = 24
	MAIN_TASK_TYPE_EMTT_COST_SOME_ITEM_NUM    MAIN_TASK_TYPE = 25
	MAIN_TASK_TYPE_EMTT_SAVE_MONERY_ONCE      MAIN_TASK_TYPE = 26
	MAIN_TASK_TYPE_EMTT_MAKE_FRIENDS_NUM      MAIN_TASK_TYPE = 27
	MAIN_TASK_TYPE_EMTT_REPAIR_EQUIP_NUM      MAIN_TASK_TYPE = 28
	MAIN_TASK_TYPE_EMTT_PLAY_FACILITY_NUM     MAIN_TASK_TYPE = 29
	MAIN_TASK_TYPE_EMTT_SHOPPING_TIME_IN_SHOP MAIN_TASK_TYPE = 30
	MAIN_TASK_TYPE_EMTT_COLLECT_SOME_ITEMS    MAIN_TASK_TYPE = 31
	MAIN_TASK_TYPE_EMTT_HISTORY_SAVE_MONERY   MAIN_TASK_TYPE = 32
	MAIN_TASK_TYPE_EMTT_ENTER_SCENE           MAIN_TASK_TYPE = 33
	MAIN_TASK_TYPE_EMTT_LEVEL_REACH           MAIN_TASK_TYPE = 34
	MAIN_TASK_TYPE_EMTT_FIGHT_VALUE_REACH     MAIN_TASK_TYPE = 35
	MAIN_TASK_TYPE_EMTT_PLAY_NIUDAN           MAIN_TASK_TYPE = 36
	MAIN_TASK_TYPE_EMTT_EQUIP_MAKE            MAIN_TASK_TYPE = 37
	MAIN_TASK_TYPE_EMTT_SWORD_GOD_TIME        MAIN_TASK_TYPE = 999
)

var MAIN_TASK_TYPE_name = map[int32]string{
	1:   "EMTT_MONSTER_NUM",
	2:   "EMTT_INTERACT_NUM",
	3:   "EMTT_INTERACTED_NUM",
	4:   "EMTT_PASS_RISK",
	5:   "EMTT_ONLINE_TIME_TOTAL",
	6:   "EMTT_MINIGAME_SCORE",
	7:   "EMTT_TALK_NPC",
	8:   "EMTT_ARENA_KILL_LIST",
	9:   "EMTT_MINIGAME_TIME",
	10:  "EMTT_SWORD_TIME",
	11:  "EMTT_SWORD_SUCCESS_TIME",
	12:  "EMTT_ARENA_TIME",
	13:  "EMTT_ARENA_SUCCESS_TIME",
	14:  "EMTT_EQUIP_STRENGTHEN",
	15:  "EMTT_EQUIP_RESOLVE",
	16:  "EMTT_AUTO_COMPLETE",
	17:  "EMTT_SEND_DANMAKU_TIME",
	18:  "EMTT_EQUIP_RESOLVE_NUM",
	19:  "EMTT_EASTER_EGG_TOUCH_TIME",
	20:  "EMTT_DRESS_SKILL",
	21:  "EMTT_BUY_FACE_TIME",
	22:  "EMTT_USE_FAST_TRANSFER",
	23:  "EMTT_USE_ITEM_TIME",
	24:  "EMTT_BATH_INTERACT_TIME",
	25:  "EMTT_COST_SOME_ITEM_NUM",
	26:  "EMTT_SAVE_MONERY_ONCE",
	27:  "EMTT_MAKE_FRIENDS_NUM",
	28:  "EMTT_REPAIR_EQUIP_NUM",
	29:  "EMTT_PLAY_FACILITY_NUM",
	30:  "EMTT_SHOPPING_TIME_IN_SHOP",
	31:  "EMTT_COLLECT_SOME_ITEMS",
	32:  "EMTT_HISTORY_SAVE_MONERY",
	33:  "EMTT_ENTER_SCENE",
	34:  "EMTT_LEVEL_REACH",
	35:  "EMTT_FIGHT_VALUE_REACH",
	36:  "EMTT_PLAY_NIUDAN",
	37:  "EMTT_EQUIP_MAKE",
	999: "EMTT_SWORD_GOD_TIME",
}

var MAIN_TASK_TYPE_value = map[string]int32{
	"EMTT_MONSTER_NUM":           1,
	"EMTT_INTERACT_NUM":          2,
	"EMTT_INTERACTED_NUM":        3,
	"EMTT_PASS_RISK":             4,
	"EMTT_ONLINE_TIME_TOTAL":     5,
	"EMTT_MINIGAME_SCORE":        6,
	"EMTT_TALK_NPC":              7,
	"EMTT_ARENA_KILL_LIST":       8,
	"EMTT_MINIGAME_TIME":         9,
	"EMTT_SWORD_TIME":            10,
	"EMTT_SWORD_SUCCESS_TIME":    11,
	"EMTT_ARENA_TIME":            12,
	"EMTT_ARENA_SUCCESS_TIME":    13,
	"EMTT_EQUIP_STRENGTHEN":      14,
	"EMTT_EQUIP_RESOLVE":         15,
	"EMTT_AUTO_COMPLETE":         16,
	"EMTT_SEND_DANMAKU_TIME":     17,
	"EMTT_EQUIP_RESOLVE_NUM":     18,
	"EMTT_EASTER_EGG_TOUCH_TIME": 19,
	"EMTT_DRESS_SKILL":           20,
	"EMTT_BUY_FACE_TIME":         21,
	"EMTT_USE_FAST_TRANSFER":     22,
	"EMTT_USE_ITEM_TIME":         23,
	"EMTT_BATH_INTERACT_TIME":    24,
	"EMTT_COST_SOME_ITEM_NUM":    25,
	"EMTT_SAVE_MONERY_ONCE":      26,
	"EMTT_MAKE_FRIENDS_NUM":      27,
	"EMTT_REPAIR_EQUIP_NUM":      28,
	"EMTT_PLAY_FACILITY_NUM":     29,
	"EMTT_SHOPPING_TIME_IN_SHOP": 30,
	"EMTT_COLLECT_SOME_ITEMS":    31,
	"EMTT_HISTORY_SAVE_MONERY":   32,
	"EMTT_ENTER_SCENE":           33,
	"EMTT_LEVEL_REACH":           34,
	"EMTT_FIGHT_VALUE_REACH":     35,
	"EMTT_PLAY_NIUDAN":           36,
	"EMTT_EQUIP_MAKE":            37,
	"EMTT_SWORD_GOD_TIME":        999,
}

func (x MAIN_TASK_TYPE) Enum() *MAIN_TASK_TYPE {
	p := new(MAIN_TASK_TYPE)
	*p = x
	return p
}

func (x MAIN_TASK_TYPE) String() string {
	return proto.EnumName(MAIN_TASK_TYPE_name, int32(x))
}

func (x *MAIN_TASK_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MAIN_TASK_TYPE_value, data, "MAIN_TASK_TYPE")
	if err != nil {
		return err
	}
	*x = MAIN_TASK_TYPE(value)
	return nil
}

func (MAIN_TASK_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{32}
}

//  抢车位定义
type E_PARK_LOT_STATUS int32

const (
	E_PARK_LOT_STATUS_EPLS_NO_PARK E_PARK_LOT_STATUS = 0
	E_PARK_LOT_STATUS_EPLS_PARKED  E_PARK_LOT_STATUS = 1
)

var E_PARK_LOT_STATUS_name = map[int32]string{
	0: "EPLS_NO_PARK",
	1: "EPLS_PARKED",
}

var E_PARK_LOT_STATUS_value = map[string]int32{
	"EPLS_NO_PARK": 0,
	"EPLS_PARKED":  1,
}

func (x E_PARK_LOT_STATUS) Enum() *E_PARK_LOT_STATUS {
	p := new(E_PARK_LOT_STATUS)
	*p = x
	return p
}

func (x E_PARK_LOT_STATUS) String() string {
	return proto.EnumName(E_PARK_LOT_STATUS_name, int32(x))
}

func (x *E_PARK_LOT_STATUS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PARK_LOT_STATUS_value, data, "E_PARK_LOT_STATUS")
	if err != nil {
		return err
	}
	*x = E_PARK_LOT_STATUS(value)
	return nil
}

func (E_PARK_LOT_STATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{33}
}

type E_CAR_STATUS int32

const (
	E_CAR_STATUS_ECS_NORMAL E_CAR_STATUS = 1
	E_CAR_STATUS_ECS_PARK   E_CAR_STATUS = 2
	E_CAR_STATUS_ECS_REPAIR E_CAR_STATUS = 3
)

var E_CAR_STATUS_name = map[int32]string{
	1: "ECS_NORMAL",
	2: "ECS_PARK",
	3: "ECS_REPAIR",
}

var E_CAR_STATUS_value = map[string]int32{
	"ECS_NORMAL": 1,
	"ECS_PARK":   2,
	"ECS_REPAIR": 3,
}

func (x E_CAR_STATUS) Enum() *E_CAR_STATUS {
	p := new(E_CAR_STATUS)
	*p = x
	return p
}

func (x E_CAR_STATUS) String() string {
	return proto.EnumName(E_CAR_STATUS_name, int32(x))
}

func (x *E_CAR_STATUS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_CAR_STATUS_value, data, "E_CAR_STATUS")
	if err != nil {
		return err
	}
	*x = E_CAR_STATUS(value)
	return nil
}

func (E_CAR_STATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{34}
}

type E_PARK_LOT_EVENT int32

const (
	E_PARK_LOT_EVENT_EPLE_POLICE       E_PARK_LOT_EVENT = 1
	E_PARK_LOT_EVENT_EPLE_BEAR_KID     E_PARK_LOT_EVENT = 2
	E_PARK_LOT_EVENT_EPLE_BLACK_SOCITE E_PARK_LOT_EVENT = 3
)

var E_PARK_LOT_EVENT_name = map[int32]string{
	1: "EPLE_POLICE",
	2: "EPLE_BEAR_KID",
	3: "EPLE_BLACK_SOCITE",
}

var E_PARK_LOT_EVENT_value = map[string]int32{
	"EPLE_POLICE":       1,
	"EPLE_BEAR_KID":     2,
	"EPLE_BLACK_SOCITE": 3,
}

func (x E_PARK_LOT_EVENT) Enum() *E_PARK_LOT_EVENT {
	p := new(E_PARK_LOT_EVENT)
	*p = x
	return p
}

func (x E_PARK_LOT_EVENT) String() string {
	return proto.EnumName(E_PARK_LOT_EVENT_name, int32(x))
}

func (x *E_PARK_LOT_EVENT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PARK_LOT_EVENT_value, data, "E_PARK_LOT_EVENT")
	if err != nil {
		return err
	}
	*x = E_PARK_LOT_EVENT(value)
	return nil
}

func (E_PARK_LOT_EVENT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{35}
}

type E_ACT_CAR_TYPE int32

const (
	E_ACT_CAR_TYPE_EACT_DESTORY E_ACT_CAR_TYPE = 1
	E_ACT_CAR_TYPE_EACT_SAY_YES E_ACT_CAR_TYPE = 2
)

var E_ACT_CAR_TYPE_name = map[int32]string{
	1: "EACT_DESTORY",
	2: "EACT_SAY_YES",
}

var E_ACT_CAR_TYPE_value = map[string]int32{
	"EACT_DESTORY": 1,
	"EACT_SAY_YES": 2,
}

func (x E_ACT_CAR_TYPE) Enum() *E_ACT_CAR_TYPE {
	p := new(E_ACT_CAR_TYPE)
	*p = x
	return p
}

func (x E_ACT_CAR_TYPE) String() string {
	return proto.EnumName(E_ACT_CAR_TYPE_name, int32(x))
}

func (x *E_ACT_CAR_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ACT_CAR_TYPE_value, data, "E_ACT_CAR_TYPE")
	if err != nil {
		return err
	}
	*x = E_ACT_CAR_TYPE(value)
	return nil
}

func (E_ACT_CAR_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{36}
}

type E_PARK_EFFECT_TYPE int32

const (
	E_PARK_EFFECT_TYPE_EPET_RECOVERY_AT_ONCE E_PARK_EFFECT_TYPE = 1
	E_PARK_EFFECT_TYPE_EACT_EXTRA_ARMOR      E_PARK_EFFECT_TYPE = 2
	E_PARK_EFFECT_TYPE_EACT_OUTPUT_ADD       E_PARK_EFFECT_TYPE = 3
	E_PARK_EFFECT_TYPE_EACT_DESTORY_FAIL     E_PARK_EFFECT_TYPE = 4
	E_PARK_EFFECT_TYPE_EACT_PROTECT          E_PARK_EFFECT_TYPE = 5
	E_PARK_EFFECT_TYPE_EACT_ADD_BOTH         E_PARK_EFFECT_TYPE = 6
)

var E_PARK_EFFECT_TYPE_name = map[int32]string{
	1: "EPET_RECOVERY_AT_ONCE",
	2: "EACT_EXTRA_ARMOR",
	3: "EACT_OUTPUT_ADD",
	4: "EACT_DESTORY_FAIL",
	5: "EACT_PROTECT",
	6: "EACT_ADD_BOTH",
}

var E_PARK_EFFECT_TYPE_value = map[string]int32{
	"EPET_RECOVERY_AT_ONCE": 1,
	"EACT_EXTRA_ARMOR":      2,
	"EACT_OUTPUT_ADD":       3,
	"EACT_DESTORY_FAIL":     4,
	"EACT_PROTECT":          5,
	"EACT_ADD_BOTH":         6,
}

func (x E_PARK_EFFECT_TYPE) Enum() *E_PARK_EFFECT_TYPE {
	p := new(E_PARK_EFFECT_TYPE)
	*p = x
	return p
}

func (x E_PARK_EFFECT_TYPE) String() string {
	return proto.EnumName(E_PARK_EFFECT_TYPE_name, int32(x))
}

func (x *E_PARK_EFFECT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PARK_EFFECT_TYPE_value, data, "E_PARK_EFFECT_TYPE")
	if err != nil {
		return err
	}
	*x = E_PARK_EFFECT_TYPE(value)
	return nil
}

func (E_PARK_EFFECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{37}
}

type E_PARK_TICK_EVENT int32

const (
	E_PARK_TICK_EVENT_EPTE_TIMEOUT E_PARK_TICK_EVENT = 1
	E_PARK_TICK_EVENT_EPTE_BROKEN  E_PARK_TICK_EVENT = 2
	E_PARK_TICK_EVENT_EPTE_POLICE  E_PARK_TICK_EVENT = 3
)

var E_PARK_TICK_EVENT_name = map[int32]string{
	1: "EPTE_TIMEOUT",
	2: "EPTE_BROKEN",
	3: "EPTE_POLICE",
}

var E_PARK_TICK_EVENT_value = map[string]int32{
	"EPTE_TIMEOUT": 1,
	"EPTE_BROKEN":  2,
	"EPTE_POLICE":  3,
}

func (x E_PARK_TICK_EVENT) Enum() *E_PARK_TICK_EVENT {
	p := new(E_PARK_TICK_EVENT)
	*p = x
	return p
}

func (x E_PARK_TICK_EVENT) String() string {
	return proto.EnumName(E_PARK_TICK_EVENT_name, int32(x))
}

func (x *E_PARK_TICK_EVENT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PARK_TICK_EVENT_value, data, "E_PARK_TICK_EVENT")
	if err != nil {
		return err
	}
	*x = E_PARK_TICK_EVENT(value)
	return nil
}

func (E_PARK_TICK_EVENT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{38}
}

type E_PARK_REFRESH_EVENT int32

const (
	E_PARK_REFRESH_EVENT_EPRE_MOVE      E_PARK_REFRESH_EVENT = 1
	E_PARK_REFRESH_EVENT_EPRE_DATA_SYNC E_PARK_REFRESH_EVENT = 2
	E_PARK_REFRESH_EVENT_EPRE_NOTHING   E_PARK_REFRESH_EVENT = 3
)

var E_PARK_REFRESH_EVENT_name = map[int32]string{
	1: "EPRE_MOVE",
	2: "EPRE_DATA_SYNC",
	3: "EPRE_NOTHING",
}

var E_PARK_REFRESH_EVENT_value = map[string]int32{
	"EPRE_MOVE":      1,
	"EPRE_DATA_SYNC": 2,
	"EPRE_NOTHING":   3,
}

func (x E_PARK_REFRESH_EVENT) Enum() *E_PARK_REFRESH_EVENT {
	p := new(E_PARK_REFRESH_EVENT)
	*p = x
	return p
}

func (x E_PARK_REFRESH_EVENT) String() string {
	return proto.EnumName(E_PARK_REFRESH_EVENT_name, int32(x))
}

func (x *E_PARK_REFRESH_EVENT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PARK_REFRESH_EVENT_value, data, "E_PARK_REFRESH_EVENT")
	if err != nil {
		return err
	}
	*x = E_PARK_REFRESH_EVENT(value)
	return nil
}

func (E_PARK_REFRESH_EVENT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{39}
}

// 多人游戏类型
type MG_TYPE int32

const (
	MG_TYPE_MGT_TEST_GAME MG_TYPE = 1
)

var MG_TYPE_name = map[int32]string{
	1: "MGT_TEST_GAME",
}

var MG_TYPE_value = map[string]int32{
	"MGT_TEST_GAME": 1,
}

func (x MG_TYPE) Enum() *MG_TYPE {
	p := new(MG_TYPE)
	*p = x
	return p
}

func (x MG_TYPE) String() string {
	return proto.EnumName(MG_TYPE_name, int32(x))
}

func (x *MG_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MG_TYPE_value, data, "MG_TYPE")
	if err != nil {
		return err
	}
	*x = MG_TYPE(value)
	return nil
}

func (MG_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{40}
}

// 多人游戏房间类型
type MG_ROOM_TYPE int32

const (
	MG_ROOM_TYPE_MGRT_PUBLIC  MG_ROOM_TYPE = 1
	MG_ROOM_TYPE_MGRT_PRIVATE MG_ROOM_TYPE = 2
)

var MG_ROOM_TYPE_name = map[int32]string{
	1: "MGRT_PUBLIC",
	2: "MGRT_PRIVATE",
}

var MG_ROOM_TYPE_value = map[string]int32{
	"MGRT_PUBLIC":  1,
	"MGRT_PRIVATE": 2,
}

func (x MG_ROOM_TYPE) Enum() *MG_ROOM_TYPE {
	p := new(MG_ROOM_TYPE)
	*p = x
	return p
}

func (x MG_ROOM_TYPE) String() string {
	return proto.EnumName(MG_ROOM_TYPE_name, int32(x))
}

func (x *MG_ROOM_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MG_ROOM_TYPE_value, data, "MG_ROOM_TYPE")
	if err != nil {
		return err
	}
	*x = MG_ROOM_TYPE(value)
	return nil
}

func (MG_ROOM_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{41}
}

// 弹幕挂机状态
type E_DANMAKU_HANGUP int32

const (
	E_DANMAKU_HANGUP_EDH_INIT    E_DANMAKU_HANGUP = 0
	E_DANMAKU_HANGUP_EDH_HANGING E_DANMAKU_HANGUP = 1
	E_DANMAKU_HANGUP_EDH_STOP    E_DANMAKU_HANGUP = 2
)

var E_DANMAKU_HANGUP_name = map[int32]string{
	0: "EDH_INIT",
	1: "EDH_HANGING",
	2: "EDH_STOP",
}

var E_DANMAKU_HANGUP_value = map[string]int32{
	"EDH_INIT":    0,
	"EDH_HANGING": 1,
	"EDH_STOP":    2,
}

func (x E_DANMAKU_HANGUP) Enum() *E_DANMAKU_HANGUP {
	p := new(E_DANMAKU_HANGUP)
	*p = x
	return p
}

func (x E_DANMAKU_HANGUP) String() string {
	return proto.EnumName(E_DANMAKU_HANGUP_name, int32(x))
}

func (x *E_DANMAKU_HANGUP) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_DANMAKU_HANGUP_value, data, "E_DANMAKU_HANGUP")
	if err != nil {
		return err
	}
	*x = E_DANMAKU_HANGUP(value)
	return nil
}

func (E_DANMAKU_HANGUP) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{42}
}

// 交互动作解锁条件类型
type E_INTERACT_UNLOCK_CONDITION_TYPE int32

const (
	E_INTERACT_UNLOCK_CONDITION_TYPE_EIUCT_ACT_NUM    E_INTERACT_UNLOCK_CONDITION_TYPE = 1
	E_INTERACT_UNLOCK_CONDITION_TYPE_EIUCT_ITEM       E_INTERACT_UNLOCK_CONDITION_TYPE = 2
	E_INTERACT_UNLOCK_CONDITION_TYPE_EIUCT_ROLE_LEVEL E_INTERACT_UNLOCK_CONDITION_TYPE = 3
)

var E_INTERACT_UNLOCK_CONDITION_TYPE_name = map[int32]string{
	1: "EIUCT_ACT_NUM",
	2: "EIUCT_ITEM",
	3: "EIUCT_ROLE_LEVEL",
}

var E_INTERACT_UNLOCK_CONDITION_TYPE_value = map[string]int32{
	"EIUCT_ACT_NUM":    1,
	"EIUCT_ITEM":       2,
	"EIUCT_ROLE_LEVEL": 3,
}

func (x E_INTERACT_UNLOCK_CONDITION_TYPE) Enum() *E_INTERACT_UNLOCK_CONDITION_TYPE {
	p := new(E_INTERACT_UNLOCK_CONDITION_TYPE)
	*p = x
	return p
}

func (x E_INTERACT_UNLOCK_CONDITION_TYPE) String() string {
	return proto.EnumName(E_INTERACT_UNLOCK_CONDITION_TYPE_name, int32(x))
}

func (x *E_INTERACT_UNLOCK_CONDITION_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_INTERACT_UNLOCK_CONDITION_TYPE_value, data, "E_INTERACT_UNLOCK_CONDITION_TYPE")
	if err != nil {
		return err
	}
	*x = E_INTERACT_UNLOCK_CONDITION_TYPE(value)
	return nil
}

func (E_INTERACT_UNLOCK_CONDITION_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{43}
}

// 交互动作的主被动类型
type E_INTERACT_ACTIVE_TYPE int32

const (
	E_INTERACT_ACTIVE_TYPE_EIAT_ACTIVE E_INTERACT_ACTIVE_TYPE = 1
	E_INTERACT_ACTIVE_TYPE_EIAT_AUTO   E_INTERACT_ACTIVE_TYPE = 2
)

var E_INTERACT_ACTIVE_TYPE_name = map[int32]string{
	1: "EIAT_ACTIVE",
	2: "EIAT_AUTO",
}

var E_INTERACT_ACTIVE_TYPE_value = map[string]int32{
	"EIAT_ACTIVE": 1,
	"EIAT_AUTO":   2,
}

func (x E_INTERACT_ACTIVE_TYPE) Enum() *E_INTERACT_ACTIVE_TYPE {
	p := new(E_INTERACT_ACTIVE_TYPE)
	*p = x
	return p
}

func (x E_INTERACT_ACTIVE_TYPE) String() string {
	return proto.EnumName(E_INTERACT_ACTIVE_TYPE_name, int32(x))
}

func (x *E_INTERACT_ACTIVE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_INTERACT_ACTIVE_TYPE_value, data, "E_INTERACT_ACTIVE_TYPE")
	if err != nil {
		return err
	}
	*x = E_INTERACT_ACTIVE_TYPE(value)
	return nil
}

func (E_INTERACT_ACTIVE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{44}
}

// 小面板提示更新枚举
type E_LITTLE_TIPS_TYPE int32

const (
	E_LITTLE_TIPS_TYPE_ELTT_LEVEL         E_LITTLE_TIPS_TYPE = 1
	E_LITTLE_TIPS_TYPE_ELTT_ACCEPT_TASK   E_LITTLE_TIPS_TYPE = 2
	E_LITTLE_TIPS_TYPE_ELTT_COMPLETE_TASK E_LITTLE_TIPS_TYPE = 3
	E_LITTLE_TIPS_TYPE_ELTT_RISK          E_LITTLE_TIPS_TYPE = 4
)

var E_LITTLE_TIPS_TYPE_name = map[int32]string{
	1: "ELTT_LEVEL",
	2: "ELTT_ACCEPT_TASK",
	3: "ELTT_COMPLETE_TASK",
	4: "ELTT_RISK",
}

var E_LITTLE_TIPS_TYPE_value = map[string]int32{
	"ELTT_LEVEL":         1,
	"ELTT_ACCEPT_TASK":   2,
	"ELTT_COMPLETE_TASK": 3,
	"ELTT_RISK":          4,
}

func (x E_LITTLE_TIPS_TYPE) Enum() *E_LITTLE_TIPS_TYPE {
	p := new(E_LITTLE_TIPS_TYPE)
	*p = x
	return p
}

func (x E_LITTLE_TIPS_TYPE) String() string {
	return proto.EnumName(E_LITTLE_TIPS_TYPE_name, int32(x))
}

func (x *E_LITTLE_TIPS_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_LITTLE_TIPS_TYPE_value, data, "E_LITTLE_TIPS_TYPE")
	if err != nil {
		return err
	}
	*x = E_LITTLE_TIPS_TYPE(value)
	return nil
}

func (E_LITTLE_TIPS_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{45}
}

// PHP返回错误码
type E_PHP_ERROR_CODE int32

const (
	E_PHP_ERROR_CODE_EPEC_OK               E_PHP_ERROR_CODE = 0
	E_PHP_ERROR_CODE_EPEC_NO_FOUND_PLAYER  E_PHP_ERROR_CODE = 1
	E_PHP_ERROR_CODE_EPEC_MAIL_SEND_FAILED E_PHP_ERROR_CODE = 2
)

var E_PHP_ERROR_CODE_name = map[int32]string{
	0: "EPEC_OK",
	1: "EPEC_NO_FOUND_PLAYER",
	2: "EPEC_MAIL_SEND_FAILED",
}

var E_PHP_ERROR_CODE_value = map[string]int32{
	"EPEC_OK":               0,
	"EPEC_NO_FOUND_PLAYER":  1,
	"EPEC_MAIL_SEND_FAILED": 2,
}

func (x E_PHP_ERROR_CODE) Enum() *E_PHP_ERROR_CODE {
	p := new(E_PHP_ERROR_CODE)
	*p = x
	return p
}

func (x E_PHP_ERROR_CODE) String() string {
	return proto.EnumName(E_PHP_ERROR_CODE_name, int32(x))
}

func (x *E_PHP_ERROR_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PHP_ERROR_CODE_value, data, "E_PHP_ERROR_CODE")
	if err != nil {
		return err
	}
	*x = E_PHP_ERROR_CODE(value)
	return nil
}

func (E_PHP_ERROR_CODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{46}
}

type E_PET_PILL_TYPE int32

const (
	E_PET_PILL_TYPE_EPPT_EXP E_PET_PILL_TYPE = 1
	E_PET_PILL_TYPE_EPPT_ATK E_PET_PILL_TYPE = 2
	E_PET_PILL_TYPE_EPPT_DEF E_PET_PILL_TYPE = 3
	E_PET_PILL_TYPE_EPPT_HP  E_PET_PILL_TYPE = 4
)

var E_PET_PILL_TYPE_name = map[int32]string{
	1: "EPPT_EXP",
	2: "EPPT_ATK",
	3: "EPPT_DEF",
	4: "EPPT_HP",
}

var E_PET_PILL_TYPE_value = map[string]int32{
	"EPPT_EXP": 1,
	"EPPT_ATK": 2,
	"EPPT_DEF": 3,
	"EPPT_HP":  4,
}

func (x E_PET_PILL_TYPE) Enum() *E_PET_PILL_TYPE {
	p := new(E_PET_PILL_TYPE)
	*p = x
	return p
}

func (x E_PET_PILL_TYPE) String() string {
	return proto.EnumName(E_PET_PILL_TYPE_name, int32(x))
}

func (x *E_PET_PILL_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PET_PILL_TYPE_value, data, "E_PET_PILL_TYPE")
	if err != nil {
		return err
	}
	*x = E_PET_PILL_TYPE(value)
	return nil
}

func (E_PET_PILL_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{47}
}

type E_DEFINE_FACE_TYPE int32

const (
	E_DEFINE_FACE_TYPE_EDFT_INIT      E_DEFINE_FACE_TYPE = 0
	E_DEFINE_FACE_TYPE_EDFT_UNCONFIRM E_DEFINE_FACE_TYPE = 1
	E_DEFINE_FACE_TYPE_EDFT_OK        E_DEFINE_FACE_TYPE = 2
	E_DEFINE_FACE_TYPE_EDFT_FAIL      E_DEFINE_FACE_TYPE = 3
)

var E_DEFINE_FACE_TYPE_name = map[int32]string{
	0: "EDFT_INIT",
	1: "EDFT_UNCONFIRM",
	2: "EDFT_OK",
	3: "EDFT_FAIL",
}

var E_DEFINE_FACE_TYPE_value = map[string]int32{
	"EDFT_INIT":      0,
	"EDFT_UNCONFIRM": 1,
	"EDFT_OK":        2,
	"EDFT_FAIL":      3,
}

func (x E_DEFINE_FACE_TYPE) Enum() *E_DEFINE_FACE_TYPE {
	p := new(E_DEFINE_FACE_TYPE)
	*p = x
	return p
}

func (x E_DEFINE_FACE_TYPE) String() string {
	return proto.EnumName(E_DEFINE_FACE_TYPE_name, int32(x))
}

func (x *E_DEFINE_FACE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_DEFINE_FACE_TYPE_value, data, "E_DEFINE_FACE_TYPE")
	if err != nil {
		return err
	}
	*x = E_DEFINE_FACE_TYPE(value)
	return nil
}

func (E_DEFINE_FACE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{48}
}

type E_DEFINE_FACE_USE_TYPE int32

const (
	E_DEFINE_FACE_USE_TYPE_EDFUT_NONE   E_DEFINE_FACE_USE_TYPE = 0
	E_DEFINE_FACE_USE_TYPE_EDFUT_MINOS  E_DEFINE_FACE_USE_TYPE = 1
	E_DEFINE_FACE_USE_TYPE_EDFUT_CUSTOM E_DEFINE_FACE_USE_TYPE = 2
)

var E_DEFINE_FACE_USE_TYPE_name = map[int32]string{
	0: "EDFUT_NONE",
	1: "EDFUT_MINOS",
	2: "EDFUT_CUSTOM",
}

var E_DEFINE_FACE_USE_TYPE_value = map[string]int32{
	"EDFUT_NONE":   0,
	"EDFUT_MINOS":  1,
	"EDFUT_CUSTOM": 2,
}

func (x E_DEFINE_FACE_USE_TYPE) Enum() *E_DEFINE_FACE_USE_TYPE {
	p := new(E_DEFINE_FACE_USE_TYPE)
	*p = x
	return p
}

func (x E_DEFINE_FACE_USE_TYPE) String() string {
	return proto.EnumName(E_DEFINE_FACE_USE_TYPE_name, int32(x))
}

func (x *E_DEFINE_FACE_USE_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_DEFINE_FACE_USE_TYPE_value, data, "E_DEFINE_FACE_USE_TYPE")
	if err != nil {
		return err
	}
	*x = E_DEFINE_FACE_USE_TYPE(value)
	return nil
}

func (E_DEFINE_FACE_USE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{49}
}

type E_PET_REFRESH_STATUS int32

const (
	E_PET_REFRESH_STATUS_EPRS_NONE   E_PET_REFRESH_STATUS = 0
	E_PET_REFRESH_STATUS_EPRS_ACTIVE E_PET_REFRESH_STATUS = 1
	E_PET_REFRESH_STATUS_EPRS_GOT    E_PET_REFRESH_STATUS = 2
)

var E_PET_REFRESH_STATUS_name = map[int32]string{
	0: "EPRS_NONE",
	1: "EPRS_ACTIVE",
	2: "EPRS_GOT",
}

var E_PET_REFRESH_STATUS_value = map[string]int32{
	"EPRS_NONE":   0,
	"EPRS_ACTIVE": 1,
	"EPRS_GOT":    2,
}

func (x E_PET_REFRESH_STATUS) Enum() *E_PET_REFRESH_STATUS {
	p := new(E_PET_REFRESH_STATUS)
	*p = x
	return p
}

func (x E_PET_REFRESH_STATUS) String() string {
	return proto.EnumName(E_PET_REFRESH_STATUS_name, int32(x))
}

func (x *E_PET_REFRESH_STATUS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PET_REFRESH_STATUS_value, data, "E_PET_REFRESH_STATUS")
	if err != nil {
		return err
	}
	*x = E_PET_REFRESH_STATUS(value)
	return nil
}

func (E_PET_REFRESH_STATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{50}
}

type E_PARK_DESTORY_EFFECT int32

const (
	E_PARK_DESTORY_EFFECT_EPDE_SUCCESS E_PARK_DESTORY_EFFECT = 1
	E_PARK_DESTORY_EFFECT_EPDE_PROTECT E_PARK_DESTORY_EFFECT = 2
)

var E_PARK_DESTORY_EFFECT_name = map[int32]string{
	1: "EPDE_SUCCESS",
	2: "EPDE_PROTECT",
}

var E_PARK_DESTORY_EFFECT_value = map[string]int32{
	"EPDE_SUCCESS": 1,
	"EPDE_PROTECT": 2,
}

func (x E_PARK_DESTORY_EFFECT) Enum() *E_PARK_DESTORY_EFFECT {
	p := new(E_PARK_DESTORY_EFFECT)
	*p = x
	return p
}

func (x E_PARK_DESTORY_EFFECT) String() string {
	return proto.EnumName(E_PARK_DESTORY_EFFECT_name, int32(x))
}

func (x *E_PARK_DESTORY_EFFECT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_PARK_DESTORY_EFFECT_value, data, "E_PARK_DESTORY_EFFECT")
	if err != nil {
		return err
	}
	*x = E_PARK_DESTORY_EFFECT(value)
	return nil
}

func (E_PARK_DESTORY_EFFECT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{51}
}

type E_HORSE_LIGHT_TYPE int32

const (
	E_HORSE_LIGHT_TYPE_EHLT_CALIBURN_WEAPON_COLOR E_HORSE_LIGHT_TYPE = 1
	E_HORSE_LIGHT_TYPE_EHLT_ARENA_RANK_CHANGER    E_HORSE_LIGHT_TYPE = 2
	E_HORSE_LIGHT_TYPE_EHLT_MINIGAME_RANK_CHANGER E_HORSE_LIGHT_TYPE = 3
	E_HORSE_LIGHT_TYPE_EHLT_VEHICLE_COMPOSE_COLOR E_HORSE_LIGHT_TYPE = 4
	E_HORSE_LIGHT_TYPE_EHLT_CYKJ_OPEN             E_HORSE_LIGHT_TYPE = 5
	E_HORSE_LIGHT_TYPE_EHLT_NIUDAN_GET            E_HORSE_LIGHT_TYPE = 6
	E_HORSE_LIGHT_TYPE_EHLT_EQUIP_BIG_MAKE        E_HORSE_LIGHT_TYPE = 7
)

var E_HORSE_LIGHT_TYPE_name = map[int32]string{
	1: "EHLT_CALIBURN_WEAPON_COLOR",
	2: "EHLT_ARENA_RANK_CHANGER",
	3: "EHLT_MINIGAME_RANK_CHANGER",
	4: "EHLT_VEHICLE_COMPOSE_COLOR",
	5: "EHLT_CYKJ_OPEN",
	6: "EHLT_NIUDAN_GET",
	7: "EHLT_EQUIP_BIG_MAKE",
}

var E_HORSE_LIGHT_TYPE_value = map[string]int32{
	"EHLT_CALIBURN_WEAPON_COLOR": 1,
	"EHLT_ARENA_RANK_CHANGER":    2,
	"EHLT_MINIGAME_RANK_CHANGER": 3,
	"EHLT_VEHICLE_COMPOSE_COLOR": 4,
	"EHLT_CYKJ_OPEN":             5,
	"EHLT_NIUDAN_GET":            6,
	"EHLT_EQUIP_BIG_MAKE":        7,
}

func (x E_HORSE_LIGHT_TYPE) Enum() *E_HORSE_LIGHT_TYPE {
	p := new(E_HORSE_LIGHT_TYPE)
	*p = x
	return p
}

func (x E_HORSE_LIGHT_TYPE) String() string {
	return proto.EnumName(E_HORSE_LIGHT_TYPE_name, int32(x))
}

func (x *E_HORSE_LIGHT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_HORSE_LIGHT_TYPE_value, data, "E_HORSE_LIGHT_TYPE")
	if err != nil {
		return err
	}
	*x = E_HORSE_LIGHT_TYPE(value)
	return nil
}

func (E_HORSE_LIGHT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{52}
}

type E_TEMPLETE_MAIL_ID int32

const (
	E_TEMPLETE_MAIL_ID_ETMI_GIVEBACK_DEFINE_FACE E_TEMPLETE_MAIL_ID = 1
	E_TEMPLETE_MAIL_ID_ETMI_PASS_DEFINE_FACE     E_TEMPLETE_MAIL_ID = 2
)

var E_TEMPLETE_MAIL_ID_name = map[int32]string{
	1: "ETMI_GIVEBACK_DEFINE_FACE",
	2: "ETMI_PASS_DEFINE_FACE",
}

var E_TEMPLETE_MAIL_ID_value = map[string]int32{
	"ETMI_GIVEBACK_DEFINE_FACE": 1,
	"ETMI_PASS_DEFINE_FACE":     2,
}

func (x E_TEMPLETE_MAIL_ID) Enum() *E_TEMPLETE_MAIL_ID {
	p := new(E_TEMPLETE_MAIL_ID)
	*p = x
	return p
}

func (x E_TEMPLETE_MAIL_ID) String() string {
	return proto.EnumName(E_TEMPLETE_MAIL_ID_name, int32(x))
}

func (x *E_TEMPLETE_MAIL_ID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_TEMPLETE_MAIL_ID_value, data, "E_TEMPLETE_MAIL_ID")
	if err != nil {
		return err
	}
	*x = E_TEMPLETE_MAIL_ID(value)
	return nil
}

func (E_TEMPLETE_MAIL_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{53}
}

// 成就类型
type E_SUCCESS_TYPE int32

const (
	E_SUCCESS_TYPE_EST_GOLD_MAN          E_SUCCESS_TYPE = 1
	E_SUCCESS_TYPE_EST_SAVE_MONERY_TOTAL E_SUCCESS_TYPE = 2
	E_SUCCESS_TYPE_EST_REACH_LEVEL_MAN   E_SUCCESS_TYPE = 3
	E_SUCCESS_TYPE_EST_ARENA_WIN_COUNT   E_SUCCESS_TYPE = 4
	E_SUCCESS_TYPE_EST_MANY_FRIENDS      E_SUCCESS_TYPE = 5
	E_SUCCESS_TYPE_EST_PRANK_OTHERS      E_SUCCESS_TYPE = 6
	E_SUCCESS_TYPE_EST_RESEARCH_INTERACT E_SUCCESS_TYPE = 7
	E_SUCCESS_TYPE_EST_RESEARCH_SELF_HI  E_SUCCESS_TYPE = 8
	E_SUCCESS_TYPE_EST_FIGHT_VALUE       E_SUCCESS_TYPE = 9
	E_SUCCESS_TYPE_EST_STUDY_SKILL       E_SUCCESS_TYPE = 10
	E_SUCCESS_TYPE_EST_KILL_MAN          E_SUCCESS_TYPE = 11
	E_SUCCESS_TYPE_EST_HAVE_HATS         E_SUCCESS_TYPE = 12
	E_SUCCESS_TYPE_EST_HAVE_CLOTHES      E_SUCCESS_TYPE = 13
	E_SUCCESS_TYPE_EST_HAVE_SHOES        E_SUCCESS_TYPE = 14
	E_SUCCESS_TYPE_EST_HAVE_WEAPONS      E_SUCCESS_TYPE = 15
	E_SUCCESS_TYPE_EST_HAVE_WINGS        E_SUCCESS_TYPE = 16
	E_SUCCESS_TYPE_EST_HAVE_BIKE         E_SUCCESS_TYPE = 17
	E_SUCCESS_TYPE_EST_CALIBURN_RED      E_SUCCESS_TYPE = 18
	E_SUCCESS_TYPE_EST_SEND_DANMAKU      E_SUCCESS_TYPE = 19
	E_SUCCESS_TYPE_EST_PLAY_MINIGAME     E_SUCCESS_TYPE = 20
	E_SUCCESS_TYPE_EST_USE_POINTGOLD     E_SUCCESS_TYPE = 21
	E_SUCCESS_TYPE_EST_TESHUFUWU         E_SUCCESS_TYPE = 22
	E_SUCCESS_TYPE_EST_GET_SEVEN_DAY     E_SUCCESS_TYPE = 23
	E_SUCCESS_TYPE_EST_USE_DEFINE_FACE   E_SUCCESS_TYPE = 24
	E_SUCCESS_TYPE_EST_WEAPON_STAR_UP    E_SUCCESS_TYPE = 25
	E_SUCCESS_TYPE_EST_WEAPON_RESLOVE    E_SUCCESS_TYPE = 26
	E_SUCCESS_TYPE_EST_WEAPON_FIX        E_SUCCESS_TYPE = 27
	E_SUCCESS_TYPE_EST_COLLECT_FACES     E_SUCCESS_TYPE = 28
)

var E_SUCCESS_TYPE_name = map[int32]string{
	1:  "EST_GOLD_MAN",
	2:  "EST_SAVE_MONERY_TOTAL",
	3:  "EST_REACH_LEVEL_MAN",
	4:  "EST_ARENA_WIN_COUNT",
	5:  "EST_MANY_FRIENDS",
	6:  "EST_PRANK_OTHERS",
	7:  "EST_RESEARCH_INTERACT",
	8:  "EST_RESEARCH_SELF_HI",
	9:  "EST_FIGHT_VALUE",
	10: "EST_STUDY_SKILL",
	11: "EST_KILL_MAN",
	12: "EST_HAVE_HATS",
	13: "EST_HAVE_CLOTHES",
	14: "EST_HAVE_SHOES",
	15: "EST_HAVE_WEAPONS",
	16: "EST_HAVE_WINGS",
	17: "EST_HAVE_BIKE",
	18: "EST_CALIBURN_RED",
	19: "EST_SEND_DANMAKU",
	20: "EST_PLAY_MINIGAME",
	21: "EST_USE_POINTGOLD",
	22: "EST_TESHUFUWU",
	23: "EST_GET_SEVEN_DAY",
	24: "EST_USE_DEFINE_FACE",
	25: "EST_WEAPON_STAR_UP",
	26: "EST_WEAPON_RESLOVE",
	27: "EST_WEAPON_FIX",
	28: "EST_COLLECT_FACES",
}

var E_SUCCESS_TYPE_value = map[string]int32{
	"EST_GOLD_MAN":          1,
	"EST_SAVE_MONERY_TOTAL": 2,
	"EST_REACH_LEVEL_MAN":   3,
	"EST_ARENA_WIN_COUNT":   4,
	"EST_MANY_FRIENDS":      5,
	"EST_PRANK_OTHERS":      6,
	"EST_RESEARCH_INTERACT": 7,
	"EST_RESEARCH_SELF_HI":  8,
	"EST_FIGHT_VALUE":       9,
	"EST_STUDY_SKILL":       10,
	"EST_KILL_MAN":          11,
	"EST_HAVE_HATS":         12,
	"EST_HAVE_CLOTHES":      13,
	"EST_HAVE_SHOES":        14,
	"EST_HAVE_WEAPONS":      15,
	"EST_HAVE_WINGS":        16,
	"EST_HAVE_BIKE":         17,
	"EST_CALIBURN_RED":      18,
	"EST_SEND_DANMAKU":      19,
	"EST_PLAY_MINIGAME":     20,
	"EST_USE_POINTGOLD":     21,
	"EST_TESHUFUWU":         22,
	"EST_GET_SEVEN_DAY":     23,
	"EST_USE_DEFINE_FACE":   24,
	"EST_WEAPON_STAR_UP":    25,
	"EST_WEAPON_RESLOVE":    26,
	"EST_WEAPON_FIX":        27,
	"EST_COLLECT_FACES":     28,
}

func (x E_SUCCESS_TYPE) Enum() *E_SUCCESS_TYPE {
	p := new(E_SUCCESS_TYPE)
	*p = x
	return p
}

func (x E_SUCCESS_TYPE) String() string {
	return proto.EnumName(E_SUCCESS_TYPE_name, int32(x))
}

func (x *E_SUCCESS_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_SUCCESS_TYPE_value, data, "E_SUCCESS_TYPE")
	if err != nil {
		return err
	}
	*x = E_SUCCESS_TYPE(value)
	return nil
}

func (E_SUCCESS_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{54}
}

// 澡堂交互id
type E_BATH_ACT_ID int32

const (
	E_BATH_ACT_ID_EBAI_CUOZAO E_BATH_ACT_ID = 916
	E_BATH_ACT_ID_EBAI_LINYU  E_BATH_ACT_ID = 917
)

var E_BATH_ACT_ID_name = map[int32]string{
	916: "EBAI_CUOZAO",
	917: "EBAI_LINYU",
}

var E_BATH_ACT_ID_value = map[string]int32{
	"EBAI_CUOZAO": 916,
	"EBAI_LINYU":  917,
}

func (x E_BATH_ACT_ID) Enum() *E_BATH_ACT_ID {
	p := new(E_BATH_ACT_ID)
	*p = x
	return p
}

func (x E_BATH_ACT_ID) String() string {
	return proto.EnumName(E_BATH_ACT_ID_name, int32(x))
}

func (x *E_BATH_ACT_ID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_BATH_ACT_ID_value, data, "E_BATH_ACT_ID")
	if err != nil {
		return err
	}
	*x = E_BATH_ACT_ID(value)
	return nil
}

func (E_BATH_ACT_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{55}
}

// 装备品质与颜色对应
type E_EQUIP_QUALITY_COLOR int32

const (
	E_EQUIP_QUALITY_COLOR_EEQC_GREEN  E_EQUIP_QUALITY_COLOR = 1
	E_EQUIP_QUALITY_COLOR_EEQC_BLUE   E_EQUIP_QUALITY_COLOR = 2
	E_EQUIP_QUALITY_COLOR_EEQC_PURPLE E_EQUIP_QUALITY_COLOR = 3
	E_EQUIP_QUALITY_COLOR_EEQC_ORANGE E_EQUIP_QUALITY_COLOR = 4
	E_EQUIP_QUALITY_COLOR_EEQC_RED    E_EQUIP_QUALITY_COLOR = 5
)

var E_EQUIP_QUALITY_COLOR_name = map[int32]string{
	1: "EEQC_GREEN",
	2: "EEQC_BLUE",
	3: "EEQC_PURPLE",
	4: "EEQC_ORANGE",
	5: "EEQC_RED",
}

var E_EQUIP_QUALITY_COLOR_value = map[string]int32{
	"EEQC_GREEN":  1,
	"EEQC_BLUE":   2,
	"EEQC_PURPLE": 3,
	"EEQC_ORANGE": 4,
	"EEQC_RED":    5,
}

func (x E_EQUIP_QUALITY_COLOR) Enum() *E_EQUIP_QUALITY_COLOR {
	p := new(E_EQUIP_QUALITY_COLOR)
	*p = x
	return p
}

func (x E_EQUIP_QUALITY_COLOR) String() string {
	return proto.EnumName(E_EQUIP_QUALITY_COLOR_name, int32(x))
}

func (x *E_EQUIP_QUALITY_COLOR) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_EQUIP_QUALITY_COLOR_value, data, "E_EQUIP_QUALITY_COLOR")
	if err != nil {
		return err
	}
	*x = E_EQUIP_QUALITY_COLOR(value)
	return nil
}

func (E_EQUIP_QUALITY_COLOR) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{56}
}

// 兑换码帐号类型
type E_REDEEM_ACCOUNT_TYPE int32

const (
	E_REDEEM_ACCOUNT_TYPE_ERAT_MULTIPLE E_REDEEM_ACCOUNT_TYPE = 1
	E_REDEEM_ACCOUNT_TYPE_ERAT_SINGLE   E_REDEEM_ACCOUNT_TYPE = 2
)

var E_REDEEM_ACCOUNT_TYPE_name = map[int32]string{
	1: "ERAT_MULTIPLE",
	2: "ERAT_SINGLE",
}

var E_REDEEM_ACCOUNT_TYPE_value = map[string]int32{
	"ERAT_MULTIPLE": 1,
	"ERAT_SINGLE":   2,
}

func (x E_REDEEM_ACCOUNT_TYPE) Enum() *E_REDEEM_ACCOUNT_TYPE {
	p := new(E_REDEEM_ACCOUNT_TYPE)
	*p = x
	return p
}

func (x E_REDEEM_ACCOUNT_TYPE) String() string {
	return proto.EnumName(E_REDEEM_ACCOUNT_TYPE_name, int32(x))
}

func (x *E_REDEEM_ACCOUNT_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_REDEEM_ACCOUNT_TYPE_value, data, "E_REDEEM_ACCOUNT_TYPE")
	if err != nil {
		return err
	}
	*x = E_REDEEM_ACCOUNT_TYPE(value)
	return nil
}

func (E_REDEEM_ACCOUNT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{57}
}

// 兑换码服务器规则
type E_REDEEM_SERVER_RULE int32

const (
	E_REDEEM_SERVER_RULE_ERSR_ANY_ALL  E_REDEEM_SERVER_RULE = 1
	E_REDEEM_SERVER_RULE_ERSR_ONLY_ONE E_REDEEM_SERVER_RULE = 2
	E_REDEEM_SERVER_RULE_ERSR_ANY_ONE  E_REDEEM_SERVER_RULE = 3
)

var E_REDEEM_SERVER_RULE_name = map[int32]string{
	1: "ERSR_ANY_ALL",
	2: "ERSR_ONLY_ONE",
	3: "ERSR_ANY_ONE",
}

var E_REDEEM_SERVER_RULE_value = map[string]int32{
	"ERSR_ANY_ALL":  1,
	"ERSR_ONLY_ONE": 2,
	"ERSR_ANY_ONE":  3,
}

func (x E_REDEEM_SERVER_RULE) Enum() *E_REDEEM_SERVER_RULE {
	p := new(E_REDEEM_SERVER_RULE)
	*p = x
	return p
}

func (x E_REDEEM_SERVER_RULE) String() string {
	return proto.EnumName(E_REDEEM_SERVER_RULE_name, int32(x))
}

func (x *E_REDEEM_SERVER_RULE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_REDEEM_SERVER_RULE_value, data, "E_REDEEM_SERVER_RULE")
	if err != nil {
		return err
	}
	*x = E_REDEEM_SERVER_RULE(value)
	return nil
}

func (E_REDEEM_SERVER_RULE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{58}
}

// 首充标识
type E_FIRST_SAVE_FLAG int32

const (
	E_FIRST_SAVE_FLAG_EFSF_NONE E_FIRST_SAVE_FLAG = 0
	E_FIRST_SAVE_FLAG_EFSF_CAN  E_FIRST_SAVE_FLAG = 1
	E_FIRST_SAVE_FLAG_EFSF_GOT  E_FIRST_SAVE_FLAG = 2
)

var E_FIRST_SAVE_FLAG_name = map[int32]string{
	0: "EFSF_NONE",
	1: "EFSF_CAN",
	2: "EFSF_GOT",
}

var E_FIRST_SAVE_FLAG_value = map[string]int32{
	"EFSF_NONE": 0,
	"EFSF_CAN":  1,
	"EFSF_GOT":  2,
}

func (x E_FIRST_SAVE_FLAG) Enum() *E_FIRST_SAVE_FLAG {
	p := new(E_FIRST_SAVE_FLAG)
	*p = x
	return p
}

func (x E_FIRST_SAVE_FLAG) String() string {
	return proto.EnumName(E_FIRST_SAVE_FLAG_name, int32(x))
}

func (x *E_FIRST_SAVE_FLAG) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_FIRST_SAVE_FLAG_value, data, "E_FIRST_SAVE_FLAG")
	if err != nil {
		return err
	}
	*x = E_FIRST_SAVE_FLAG(value)
	return nil
}

func (E_FIRST_SAVE_FLAG) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{59}
}

// 排行榜id
type E_RANK_INDEX_ID int32

const (
	E_RANK_INDEX_ID_ERII_DOWNSTAIRS_MAN E_RANK_INDEX_ID = 1
	E_RANK_INDEX_ID_ERII_WALKON_SWORD   E_RANK_INDEX_ID = 2
	E_RANK_INDEX_ID_ERII_FIGHT_TOWN     E_RANK_INDEX_ID = 3
	E_RANK_INDEX_ID_ERII_FIGHT_SNAKE    E_RANK_INDEX_ID = 4
	E_RANK_INDEX_ID_ERII_LEVEL_RANK     E_RANK_INDEX_ID = 101
	E_RANK_INDEX_ID_ERII_KILL_RANK      E_RANK_INDEX_ID = 102
	E_RANK_INDEX_ID_ERII_DIAMOND        E_RANK_INDEX_ID = 103
	E_RANK_INDEX_ID_ERII_ARENA          E_RANK_INDEX_ID = 104
)

var E_RANK_INDEX_ID_name = map[int32]string{
	1:   "ERII_DOWNSTAIRS_MAN",
	2:   "ERII_WALKON_SWORD",
	3:   "ERII_FIGHT_TOWN",
	4:   "ERII_FIGHT_SNAKE",
	101: "ERII_LEVEL_RANK",
	102: "ERII_KILL_RANK",
	103: "ERII_DIAMOND",
	104: "ERII_ARENA",
}

var E_RANK_INDEX_ID_value = map[string]int32{
	"ERII_DOWNSTAIRS_MAN": 1,
	"ERII_WALKON_SWORD":   2,
	"ERII_FIGHT_TOWN":     3,
	"ERII_FIGHT_SNAKE":    4,
	"ERII_LEVEL_RANK":     101,
	"ERII_KILL_RANK":      102,
	"ERII_DIAMOND":        103,
	"ERII_ARENA":          104,
}

func (x E_RANK_INDEX_ID) Enum() *E_RANK_INDEX_ID {
	p := new(E_RANK_INDEX_ID)
	*p = x
	return p
}

func (x E_RANK_INDEX_ID) String() string {
	return proto.EnumName(E_RANK_INDEX_ID_name, int32(x))
}

func (x *E_RANK_INDEX_ID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_RANK_INDEX_ID_value, data, "E_RANK_INDEX_ID")
	if err != nil {
		return err
	}
	*x = E_RANK_INDEX_ID(value)
	return nil
}

func (E_RANK_INDEX_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{60}
}

type E_BOSS_ENTER_TYPE int32

const (
	E_BOSS_ENTER_TYPE_JUMP_ENTER E_BOSS_ENTER_TYPE = 1
	E_BOSS_ENTER_TYPE_RUN_ENTER  E_BOSS_ENTER_TYPE = 2
)

var E_BOSS_ENTER_TYPE_name = map[int32]string{
	1: "JUMP_ENTER",
	2: "RUN_ENTER",
}

var E_BOSS_ENTER_TYPE_value = map[string]int32{
	"JUMP_ENTER": 1,
	"RUN_ENTER":  2,
}

func (x E_BOSS_ENTER_TYPE) Enum() *E_BOSS_ENTER_TYPE {
	p := new(E_BOSS_ENTER_TYPE)
	*p = x
	return p
}

func (x E_BOSS_ENTER_TYPE) String() string {
	return proto.EnumName(E_BOSS_ENTER_TYPE_name, int32(x))
}

func (x *E_BOSS_ENTER_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_BOSS_ENTER_TYPE_value, data, "E_BOSS_ENTER_TYPE")
	if err != nil {
		return err
	}
	*x = E_BOSS_ENTER_TYPE(value)
	return nil
}

func (E_BOSS_ENTER_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{61}
}

// 活动类型
type E_ACTIVITY_TYPE int32

const (
	E_ACTIVITY_TYPE_FIRST_SAVE           E_ACTIVITY_TYPE = 1
	E_ACTIVITY_TYPE_DAY_SINGLE_SAVE      E_ACTIVITY_TYPE = 2
	E_ACTIVITY_TYPE_DAY_TOTAL_SAVE       E_ACTIVITY_TYPE = 3
	E_ACTIVITY_TYPE_MULTI_DAY_TOTAL_SAVE E_ACTIVITY_TYPE = 4
	E_ACTIVITY_TYPE_DAY_TOTAL_COST       E_ACTIVITY_TYPE = 5
	E_ACTIVITY_TYPE_MULTI_DAY_TOTAL_COST E_ACTIVITY_TYPE = 6
	E_ACTIVITY_TYPE_RED_RANK_LIST        E_ACTIVITY_TYPE = 7
	E_ACTIVITY_TYPE_LEVEL_TOP            E_ACTIVITY_TYPE = 8
	E_ACTIVITY_TYPE_TASK_AIM             E_ACTIVITY_TYPE = 9
	E_ACTIVITY_TYPE_MINIGAME_RED_LIST    E_ACTIVITY_TYPE = 10
	E_ACTIVITY_TYPE_DAY_TOTAL_INTERACT   E_ACTIVITY_TYPE = 11
)

var E_ACTIVITY_TYPE_name = map[int32]string{
	1:  "FIRST_SAVE",
	2:  "DAY_SINGLE_SAVE",
	3:  "DAY_TOTAL_SAVE",
	4:  "MULTI_DAY_TOTAL_SAVE",
	5:  "DAY_TOTAL_COST",
	6:  "MULTI_DAY_TOTAL_COST",
	7:  "RED_RANK_LIST",
	8:  "LEVEL_TOP",
	9:  "TASK_AIM",
	10: "MINIGAME_RED_LIST",
	11: "DAY_TOTAL_INTERACT",
}

var E_ACTIVITY_TYPE_value = map[string]int32{
	"FIRST_SAVE":           1,
	"DAY_SINGLE_SAVE":      2,
	"DAY_TOTAL_SAVE":       3,
	"MULTI_DAY_TOTAL_SAVE": 4,
	"DAY_TOTAL_COST":       5,
	"MULTI_DAY_TOTAL_COST": 6,
	"RED_RANK_LIST":        7,
	"LEVEL_TOP":            8,
	"TASK_AIM":             9,
	"MINIGAME_RED_LIST":    10,
	"DAY_TOTAL_INTERACT":   11,
}

func (x E_ACTIVITY_TYPE) Enum() *E_ACTIVITY_TYPE {
	p := new(E_ACTIVITY_TYPE)
	*p = x
	return p
}

func (x E_ACTIVITY_TYPE) String() string {
	return proto.EnumName(E_ACTIVITY_TYPE_name, int32(x))
}

func (x *E_ACTIVITY_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ACTIVITY_TYPE_value, data, "E_ACTIVITY_TYPE")
	if err != nil {
		return err
	}
	*x = E_ACTIVITY_TYPE(value)
	return nil
}

func (E_ACTIVITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{62}
}

// 活动子类型
type E_ACTIVITY_SUB_TYPE int32

const (
	E_ACTIVITY_SUB_TYPE_PASS_RISK       E_ACTIVITY_SUB_TYPE = 1
	E_ACTIVITY_SUB_TYPE_ARENA_RANK      E_ACTIVITY_SUB_TYPE = 2
	E_ACTIVITY_SUB_TYPE_PLAY_MINIGAME   E_ACTIVITY_SUB_TYPE = 3
	E_ACTIVITY_SUB_TYPE_JOIN_CALIBURN   E_ACTIVITY_SUB_TYPE = 4
	E_ACTIVITY_SUB_TYPE_SKILL_UP_COUNT  E_ACTIVITY_SUB_TYPE = 5
	E_ACTIVITY_SUB_TYPE_FRIEND_NUM      E_ACTIVITY_SUB_TYPE = 6
	E_ACTIVITY_SUB_TYPE_GOOD_EQUIP_NUM  E_ACTIVITY_SUB_TYPE = 7
	E_ACTIVITY_SUB_TYPE_HAVE_FACE       E_ACTIVITY_SUB_TYPE = 8
	E_ACTIVITY_SUB_TYPE_PLAY_NIUDAN     E_ACTIVITY_SUB_TYPE = 9
	E_ACTIVITY_SUB_TYPE_INTERACT_PLAYER E_ACTIVITY_SUB_TYPE = 10
)

var E_ACTIVITY_SUB_TYPE_name = map[int32]string{
	1:  "PASS_RISK",
	2:  "ARENA_RANK",
	3:  "PLAY_MINIGAME",
	4:  "JOIN_CALIBURN",
	5:  "SKILL_UP_COUNT",
	6:  "FRIEND_NUM",
	7:  "GOOD_EQUIP_NUM",
	8:  "HAVE_FACE",
	9:  "PLAY_NIUDAN",
	10: "INTERACT_PLAYER",
}

var E_ACTIVITY_SUB_TYPE_value = map[string]int32{
	"PASS_RISK":       1,
	"ARENA_RANK":      2,
	"PLAY_MINIGAME":   3,
	"JOIN_CALIBURN":   4,
	"SKILL_UP_COUNT":  5,
	"FRIEND_NUM":      6,
	"GOOD_EQUIP_NUM":  7,
	"HAVE_FACE":       8,
	"PLAY_NIUDAN":     9,
	"INTERACT_PLAYER": 10,
}

func (x E_ACTIVITY_SUB_TYPE) Enum() *E_ACTIVITY_SUB_TYPE {
	p := new(E_ACTIVITY_SUB_TYPE)
	*p = x
	return p
}

func (x E_ACTIVITY_SUB_TYPE) String() string {
	return proto.EnumName(E_ACTIVITY_SUB_TYPE_name, int32(x))
}

func (x *E_ACTIVITY_SUB_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(E_ACTIVITY_SUB_TYPE_value, data, "E_ACTIVITY_SUB_TYPE")
	if err != nil {
		return err
	}
	*x = E_ACTIVITY_SUB_TYPE(value)
	return nil
}

func (E_ACTIVITY_SUB_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c39b0a74f53b4752, []int{63}
}

func init() {
	proto.RegisterEnum("pbd.E_MSG_VERSION", E_MSG_VERSION_name, E_MSG_VERSION_value)
	proto.RegisterEnum("pbd.E_ONLINE_UNIT_RET", E_ONLINE_UNIT_RET_name, E_ONLINE_UNIT_RET_value)
	proto.RegisterEnum("pbd.E_CHAPTER_GIFT_TAKE_FALG", E_CHAPTER_GIFT_TAKE_FALG_name, E_CHAPTER_GIFT_TAKE_FALG_value)
	proto.RegisterEnum("pbd.E_GMAE_DATA_TYPE", E_GMAE_DATA_TYPE_name, E_GMAE_DATA_TYPE_value)
	proto.RegisterEnum("pbd.E_GMAE_ONLINE_NUM_TYPE", E_GMAE_ONLINE_NUM_TYPE_name, E_GMAE_ONLINE_NUM_TYPE_value)
	proto.RegisterEnum("pbd.E_GMAE_ONLINE_TYPE", E_GMAE_ONLINE_TYPE_name, E_GMAE_ONLINE_TYPE_value)
	proto.RegisterEnum("pbd.E_BATH_STATUS_TYPE", E_BATH_STATUS_TYPE_name, E_BATH_STATUS_TYPE_value)
	proto.RegisterEnum("pbd.E_BATH_STATUS_ID", E_BATH_STATUS_ID_name, E_BATH_STATUS_ID_value)
	proto.RegisterEnum("pbd.E_INTERACT_TOOL_TYPE", E_INTERACT_TOOL_TYPE_name, E_INTERACT_TOOL_TYPE_value)
	proto.RegisterEnum("pbd.E_ITEM_DEF", E_ITEM_DEF_name, E_ITEM_DEF_value)
	proto.RegisterEnum("pbd.E_GOODS_TYPE", E_GOODS_TYPE_name, E_GOODS_TYPE_value)
	proto.RegisterEnum("pbd.E_EQUIP_SITE_TYPE", E_EQUIP_SITE_TYPE_name, E_EQUIP_SITE_TYPE_value)
	proto.RegisterEnum("pbd.E_ROLE_SHOW_SITE", E_ROLE_SHOW_SITE_name, E_ROLE_SHOW_SITE_value)
	proto.RegisterEnum("pbd.E_SKILL_TYPE", E_SKILL_TYPE_name, E_SKILL_TYPE_value)
	proto.RegisterEnum("pbd.E_ITEM_TYPE", E_ITEM_TYPE_name, E_ITEM_TYPE_value)
	proto.RegisterEnum("pbd.E_SCENE_TYPE", E_SCENE_TYPE_name, E_SCENE_TYPE_value)
	proto.RegisterEnum("pbd.E_MINIGAME_TYPE", E_MINIGAME_TYPE_name, E_MINIGAME_TYPE_value)
	proto.RegisterEnum("pbd.E_COMMON_SHOP_ID", E_COMMON_SHOP_ID_name, E_COMMON_SHOP_ID_value)
	proto.RegisterEnum("pbd.E_FUNCTION_OPEN_ID", E_FUNCTION_OPEN_ID_name, E_FUNCTION_OPEN_ID_value)
	proto.RegisterEnum("pbd.E_MSG_RET_CODE", E_MSG_RET_CODE_name, E_MSG_RET_CODE_value)
	proto.RegisterEnum("pbd.E_CHAT_TYPE", E_CHAT_TYPE_name, E_CHAT_TYPE_value)
	proto.RegisterEnum("pbd.E_SEVEN_DAY_TYPE", E_SEVEN_DAY_TYPE_name, E_SEVEN_DAY_TYPE_value)
	proto.RegisterEnum("pbd.FACE_SHOP_TYPE", FACE_SHOP_TYPE_name, FACE_SHOP_TYPE_value)
	proto.RegisterEnum("pbd.E_REQ_FRIEND_TYPE", E_REQ_FRIEND_TYPE_name, E_REQ_FRIEND_TYPE_value)
	proto.RegisterEnum("pbd.E_MountainGodEvent_TYPE", E_MountainGodEvent_TYPE_name, E_MountainGodEvent_TYPE_value)
	proto.RegisterEnum("pbd.E_CALIBURN_SELECT_TYPE", E_CALIBURN_SELECT_TYPE_name, E_CALIBURN_SELECT_TYPE_value)
	proto.RegisterEnum("pbd.E_CALIBURN_RESULT_TYPE", E_CALIBURN_RESULT_TYPE_name, E_CALIBURN_RESULT_TYPE_value)
	proto.RegisterEnum("pbd.E_DAILY_TASK_TYPE", E_DAILY_TASK_TYPE_name, E_DAILY_TASK_TYPE_value)
	proto.RegisterEnum("pbd.E_DAILY_ACTIVITY_LEVEL", E_DAILY_ACTIVITY_LEVEL_name, E_DAILY_ACTIVITY_LEVEL_value)
	proto.RegisterEnum("pbd.E_SUIT_FACE_SHOP_ID", E_SUIT_FACE_SHOP_ID_name, E_SUIT_FACE_SHOP_ID_value)
	proto.RegisterEnum("pbd.E_ROOM_DECORATE_TYPE", E_ROOM_DECORATE_TYPE_name, E_ROOM_DECORATE_TYPE_value)
	proto.RegisterEnum("pbd.E_ROOM_DECORATE_DIRECTION", E_ROOM_DECORATE_DIRECTION_name, E_ROOM_DECORATE_DIRECTION_value)
	proto.RegisterEnum("pbd.MAIN_TASK_TYPE", MAIN_TASK_TYPE_name, MAIN_TASK_TYPE_value)
	proto.RegisterEnum("pbd.E_PARK_LOT_STATUS", E_PARK_LOT_STATUS_name, E_PARK_LOT_STATUS_value)
	proto.RegisterEnum("pbd.E_CAR_STATUS", E_CAR_STATUS_name, E_CAR_STATUS_value)
	proto.RegisterEnum("pbd.E_PARK_LOT_EVENT", E_PARK_LOT_EVENT_name, E_PARK_LOT_EVENT_value)
	proto.RegisterEnum("pbd.E_ACT_CAR_TYPE", E_ACT_CAR_TYPE_name, E_ACT_CAR_TYPE_value)
	proto.RegisterEnum("pbd.E_PARK_EFFECT_TYPE", E_PARK_EFFECT_TYPE_name, E_PARK_EFFECT_TYPE_value)
	proto.RegisterEnum("pbd.E_PARK_TICK_EVENT", E_PARK_TICK_EVENT_name, E_PARK_TICK_EVENT_value)
	proto.RegisterEnum("pbd.E_PARK_REFRESH_EVENT", E_PARK_REFRESH_EVENT_name, E_PARK_REFRESH_EVENT_value)
	proto.RegisterEnum("pbd.MG_TYPE", MG_TYPE_name, MG_TYPE_value)
	proto.RegisterEnum("pbd.MG_ROOM_TYPE", MG_ROOM_TYPE_name, MG_ROOM_TYPE_value)
	proto.RegisterEnum("pbd.E_DANMAKU_HANGUP", E_DANMAKU_HANGUP_name, E_DANMAKU_HANGUP_value)
	proto.RegisterEnum("pbd.E_INTERACT_UNLOCK_CONDITION_TYPE", E_INTERACT_UNLOCK_CONDITION_TYPE_name, E_INTERACT_UNLOCK_CONDITION_TYPE_value)
	proto.RegisterEnum("pbd.E_INTERACT_ACTIVE_TYPE", E_INTERACT_ACTIVE_TYPE_name, E_INTERACT_ACTIVE_TYPE_value)
	proto.RegisterEnum("pbd.E_LITTLE_TIPS_TYPE", E_LITTLE_TIPS_TYPE_name, E_LITTLE_TIPS_TYPE_value)
	proto.RegisterEnum("pbd.E_PHP_ERROR_CODE", E_PHP_ERROR_CODE_name, E_PHP_ERROR_CODE_value)
	proto.RegisterEnum("pbd.E_PET_PILL_TYPE", E_PET_PILL_TYPE_name, E_PET_PILL_TYPE_value)
	proto.RegisterEnum("pbd.E_DEFINE_FACE_TYPE", E_DEFINE_FACE_TYPE_name, E_DEFINE_FACE_TYPE_value)
	proto.RegisterEnum("pbd.E_DEFINE_FACE_USE_TYPE", E_DEFINE_FACE_USE_TYPE_name, E_DEFINE_FACE_USE_TYPE_value)
	proto.RegisterEnum("pbd.E_PET_REFRESH_STATUS", E_PET_REFRESH_STATUS_name, E_PET_REFRESH_STATUS_value)
	proto.RegisterEnum("pbd.E_PARK_DESTORY_EFFECT", E_PARK_DESTORY_EFFECT_name, E_PARK_DESTORY_EFFECT_value)
	proto.RegisterEnum("pbd.E_HORSE_LIGHT_TYPE", E_HORSE_LIGHT_TYPE_name, E_HORSE_LIGHT_TYPE_value)
	proto.RegisterEnum("pbd.E_TEMPLETE_MAIL_ID", E_TEMPLETE_MAIL_ID_name, E_TEMPLETE_MAIL_ID_value)
	proto.RegisterEnum("pbd.E_SUCCESS_TYPE", E_SUCCESS_TYPE_name, E_SUCCESS_TYPE_value)
	proto.RegisterEnum("pbd.E_BATH_ACT_ID", E_BATH_ACT_ID_name, E_BATH_ACT_ID_value)
	proto.RegisterEnum("pbd.E_EQUIP_QUALITY_COLOR", E_EQUIP_QUALITY_COLOR_name, E_EQUIP_QUALITY_COLOR_value)
	proto.RegisterEnum("pbd.E_REDEEM_ACCOUNT_TYPE", E_REDEEM_ACCOUNT_TYPE_name, E_REDEEM_ACCOUNT_TYPE_value)
	proto.RegisterEnum("pbd.E_REDEEM_SERVER_RULE", E_REDEEM_SERVER_RULE_name, E_REDEEM_SERVER_RULE_value)
	proto.RegisterEnum("pbd.E_FIRST_SAVE_FLAG", E_FIRST_SAVE_FLAG_name, E_FIRST_SAVE_FLAG_value)
	proto.RegisterEnum("pbd.E_RANK_INDEX_ID", E_RANK_INDEX_ID_name, E_RANK_INDEX_ID_value)
	proto.RegisterEnum("pbd.E_BOSS_ENTER_TYPE", E_BOSS_ENTER_TYPE_name, E_BOSS_ENTER_TYPE_value)
	proto.RegisterEnum("pbd.E_ACTIVITY_TYPE", E_ACTIVITY_TYPE_name, E_ACTIVITY_TYPE_value)
	proto.RegisterEnum("pbd.E_ACTIVITY_SUB_TYPE", E_ACTIVITY_SUB_TYPE_name, E_ACTIVITY_SUB_TYPE_value)
}

func init() { proto.RegisterFile("EnumDef.proto", fileDescriptor_c39b0a74f53b4752) }

var fileDescriptor_c39b0a74f53b4752 = []byte{
	// 7041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x7c, 0x4b, 0x90, 0x1c, 0xc7,
	0x99, 0x1e, 0xa6, 0xe7, 0x5d, 0x18, 0x00, 0x89, 0xc2, 0x6b, 0x08, 0x82, 0x20, 0x48, 0x0e, 0xf4,
	0x68, 0x3d, 0x4c, 0x80, 0x4f, 0x85, 0x1d, 0x96, 0xab, 0xab, 0xb2, 0xbb, 0x8b, 0x53, 0x2f, 0x56,
	0x65, 0xcd, 0x60, 0xe4, 0x70, 0xa4, 0x5b, 0xd3, 0x85, 0x99, 0x12, 0x7a, 0xba, 0x87, 0xdd, 0x3d,
	0x20, 0xe0, 0x83, 0xa3, 0xa7, 0x31, 0x04, 0x29, 0x85, 0x2d, 0x83, 0x94, 0x48, 0x49, 0x61, 0x47,
	0x68, 0x28, 0x85, 0x2c, 0xfb, 0x64, 0xbd, 0xc2, 0xd6, 0xcd, 0x70, 0xf8, 0x20, 0xfb, 0xb2, 0xcb,
	0x88, 0x8d, 0xd8, 0xc3, 0xc6, 0x46, 0x2c, 0x96, 0x7b, 0xd8, 0x5d, 0xed, 0x2a, 0x62, 0xb5, 0xb1,
	0x17, 0x5d, 0xb4, 0x1b, 0xff, 0x9f, 0x59, 0x8f, 0xee, 0x6a, 0x0c, 0x79, 0x60, 0x74, 0xfe, 0xf9,
	0x65, 0xe6, 0x9f, 0x7f, 0xfe, 0xaf, 0x2c, 0xe4, 0x3f, 0xca, 0x09, 0xda, 0xde, 0xdb, 0x31, 0xa2,
	0x9b, 0x5f, 0xdc, 0xed, 0x76, 0xfa, 0x1d, 0x75, 0x7a, 0xf7, 0xab, 0xcd, 0xf2, 0x73, 0xca, 0x09,
	0xca, 0xed, 0xa0, 0xc6, 0xd7, 0xa8, 0x1f, 0x98, 0xae, 0xa3, 0xaa, 0xca, 0x49, 0xbb, 0xb7, 0xc5,
	0xd7, 0xa2, 0x6e, 0x2f, 0xee, 0xb4, 0xb9, 0xd9, 0x24, 0xa5, 0xf2, 0x37, 0xa6, 0x94, 0xd3, 0x94,
	0xbb, 0x8e, 0x65, 0x3a, 0x94, 0x87, 0x8e, 0xc9, 0xb8, 0x4f, 0x99, 0x7a, 0x5c, 0x99, 0xa7, 0x6e,
	0xe8, 0x73, 0x77, 0x95, 0x1c, 0x53, 0x4f, 0x29, 0xc7, 0xb1, 0x51, 0xd5, 0x4c, 0x8b, 0x1a, 0x64,
	0x0a, 0xe6, 0x41, 0x82, 0xe3, 0x32, 0x4e, 0x6f, 0x98, 0x01, 0x23, 0x25, 0xf5, 0xa4, 0xa2, 0x20,
	0x4d, 0xb4, 0xa7, 0xd5, 0xb3, 0x0a, 0xc1, 0xb6, 0xee, 0x86, 0x0e, 0xe3, 0x96, 0x69, 0x9b, 0x8c,
	0xcc, 0xa8, 0x4f, 0x29, 0x4f, 0x08, 0x2a, 0x75, 0x18, 0xf5, 0xb9, 0xae, 0x39, 0x38, 0x89, 0x4f,
	0x35, 0xbd, 0x4e, 0x66, 0xcb, 0xff, 0x56, 0x59, 0xa6, 0x5c, 0xaf, 0x6b, 0x1e, 0x74, 0xd6, 0xcc,
	0x2a, 0xe3, 0x4c, 0x5b, 0xa5, 0xbc, 0xaa, 0x59, 0x35, 0xf5, 0x8c, 0x72, 0x8a, 0xea, 0x35, 0x56,
	0x85, 0x01, 0x9e, 0x16, 0x04, 0xd4, 0x20, 0xc7, 0xd4, 0x65, 0xe5, 0xac, 0x20, 0x0a, 0x0a, 0xf4,
	0xc1, 0x08, 0x32, 0xa5, 0x9e, 0x53, 0x4e, 0x8f, 0xf4, 0x20, 0xb9, 0x54, 0xfe, 0x87, 0x19, 0x85,
	0x50, 0x5e, 0xb3, 0x35, 0xca, 0x0d, 0x8d, 0x69, 0x9c, 0x6d, 0x78, 0x54, 0xbd, 0xa4, 0x2c, 0xd3,
	0x9a, 0xc1, 0x78, 0xb0, 0x6a, 0x5a, 0x16, 0xaf, 0xb8, 0xee, 0x2a, 0x0f, 0xea, 0xae, 0xc7, 0x2b,
	0xe1, 0x06, 0x99, 0x52, 0xaf, 0x28, 0x97, 0x26, 0xf6, 0xfa, 0xb4, 0xea, 0xd3, 0xa0, 0x4e, 0x4a,
	0xea, 0xd3, 0xca, 0x93, 0x88, 0xb0, 0x4d, 0xc7, 0xe4, 0x35, 0xcd, 0xa6, 0xa3, 0x80, 0x69, 0x64,
	0x13, 0x00, 0x9a, 0x4f, 0x1d, 0x4d, 0x8a, 0x04, 0x26, 0x9f, 0x51, 0x2f, 0x28, 0x67, 0xf2, 0x3d,
	0x16, 0xd5, 0x1c, 0xae, 0x1b, 0x64, 0x56, 0x7d, 0x42, 0x39, 0x27, 0x56, 0x35, 0x6b, 0x0e, 0x1c,
	0x89, 0xef, 0x6a, 0x3a, 0x33, 0xd7, 0x28, 0x99, 0x53, 0x2f, 0x2a, 0xe7, 0xb1, 0xcb, 0xd3, 0xfc,
	0x55, 0xae, 0x6b, 0x7e, 0xc6, 0xec, 0xbc, 0x7a, 0x59, 0xb9, 0x38, 0xa1, 0x2f, 0xe1, 0x64, 0xa1,
	0xd8, 0x5f, 0x35, 0x6f, 0x64, 0xcb, 0x2e, 0xa6, 0x9c, 0xa6, 0xfd, 0xf4, 0x06, 0xa3, 0x8e, 0x41,
	0x14, 0xf5, 0xbc, 0xa2, 0x62, 0x4f, 0x55, 0xd3, 0x69, 0xb6, 0xe2, 0xf1, 0x94, 0x9b, 0x8c, 0x9e,
	0xac, 0xb6, 0x94, 0x8e, 0x09, 0x42, 0x93, 0x65, 0x63, 0x4e, 0xe0, 0x59, 0xa2, 0xc0, 0x5c, 0x87,
	0xfa, 0x1b, 0x48, 0x3c, 0x89, 0x5a, 0x95, 0x89, 0x02, 0x68, 0xa7, 0x52, 0xf1, 0xd0, 0xd7, 0x43,
	0xd3, 0xe3, 0x55, 0x2d, 0x60, 0xc0, 0x30, 0x21, 0x78, 0xbc, 0x38, 0x73, 0x5d, 0xf3, 0x29, 0x5f,
	0xa7, 0xe6, 0x0d, 0xd3, 0x21, 0xa7, 0xd3, 0xed, 0x09, 0xae, 0xe5, 0xb0, 0x8a, 0x56, 0xe3, 0x81,
	0xf9, 0x15, 0x4a, 0x54, 0x95, 0x28, 0xc7, 0xb1, 0xdf, 0x31, 0x43, 0x43, 0x73, 0xc8, 0x5f, 0xcd,
	0xab, 0x67, 0xe4, 0xaa, 0x01, 0x5d, 0xa3, 0x0e, 0x37, 0xb4, 0x0d, 0xf2, 0xd7, 0xf3, 0xea, 0x49,
	0x65, 0x51, 0x10, 0x5d, 0xcb, 0x20, 0xbf, 0xce, 0x83, 0xac, 0x2a, 0x6e, 0x94, 0xfc, 0xcd, 0xbc,
	0x7a, 0x4e, 0x21, 0x48, 0xac, 0x84, 0x1b, 0x3c, 0x60, 0xd4, 0x36, 0x1d, 0x8d, 0xfc, 0x6d, 0x86,
	0xf5, 0x5c, 0xd3, 0x61, 0xbc, 0xe6, 0x1a, 0xe4, 0x37, 0xf3, 0xe5, 0x2d, 0xe5, 0xbc, 0xd4, 0x3a,
	0x69, 0x69, 0x4e, 0x68, 0x0b, 0xdd, 0xc3, 0x73, 0x06, 0x13, 0x70, 0xad, 0xb4, 0x93, 0x99, 0x36,
	0xa8, 0x70, 0xd2, 0x95, 0x50, 0x5d, 0xa6, 0x59, 0x30, 0x90, 0x94, 0x84, 0x5c, 0xf2, 0x5d, 0x1e,
	0x76, 0x4c, 0x97, 0x5f, 0x51, 0xd4, 0xd1, 0x85, 0x70, 0x11, 0xb0, 0xe0, 0x0c, 0x4e, 0xa6, 0x54,
	0xa2, 0x2c, 0x09, 0x42, 0xb5, 0x8a, 0x94, 0x63, 0xe5, 0x6b, 0x30, 0xb0, 0xa2, 0xb1, 0x3a, 0x0f,
	0x98, 0xc6, 0xc2, 0x40, 0x0c, 0x3c, 0xa1, 0x2c, 0xd2, 0x4a, 0xc0, 0x12, 0x8e, 0x96, 0x94, 0x05,
	0x6c, 0x22, 0x13, 0xe5, 0x7f, 0x03, 0xa6, 0x94, 0x1f, 0x62, 0x1a, 0x68, 0xf6, 0x95, 0xc0, 0xe4,
	0x75, 0xcd, 0xa9, 0x85, 0x1e, 0xb7, 0x34, 0x07, 0x1c, 0x06, 0xac, 0x0f, 0xd4, 0xa0, 0xee, 0xae,
	0x53, 0x9f, 0x94, 0xe4, 0x44, 0x26, 0xf7, 0xc3, 0x8a, 0xf4, 0x15, 0xb9, 0x41, 0x9e, 0xeb, 0x5a,
	0x64, 0xa6, 0x1c, 0x2b, 0x67, 0x29, 0x37, 0xc1, 0x4f, 0x68, 0x3a, 0xe3, 0xcc, 0x75, 0x2d, 0xc1,
	0x13, 0x28, 0x8f, 0xc9, 0x18, 0x5f, 0xd7, 0xc0, 0x4b, 0x54, 0x34, 0xcb, 0x92, 0x2e, 0x29, 0x23,
	0xd6, 0x42, 0x87, 0x94, 0x72, 0xb4, 0xa0, 0x5e, 0xd1, 0x02, 0xd3, 0x91, 0x4b, 0xa5, 0xb8, 0xc0,
	0xd3, 0xac, 0xa0, 0x4e, 0x66, 0xca, 0x7f, 0x32, 0xab, 0x28, 0x94, 0x9b, 0x8c, 0xda, 0xdc, 0xa0,
	0x55, 0xf0, 0x7e, 0x35, 0xd7, 0x32, 0xb8, 0x69, 0x48, 0x51, 0x39, 0x46, 0xe8, 0x6b, 0x8e, 0x4e,
	0x81, 0x52, 0x02, 0x06, 0x0c, 0x53, 0xb3, 0x5d, 0xc7, 0xe0, 0xba, 0x6b, 0x3a, 0x40, 0x9c, 0x56,
	0x15, 0x65, 0x8e, 0xde, 0xf0, 0xe0, 0xf7, 0x8c, 0x7a, 0x5a, 0x39, 0x21, 0x9c, 0x85, 0x27, 0xbb,
	0x67, 0x81, 0x84, 0x7a, 0x1d, 0xe8, 0xbe, 0x8b, 0xd3, 0xcc, 0x01, 0x7b, 0x79, 0x7f, 0x60, 0x1a,
	0x64, 0x1e, 0x68, 0xc1, 0xba, 0xeb, 0x1b, 0x19, 0x6d, 0x01, 0x3c, 0xeb, 0x9a, 0xe9, 0x71, 0x39,
	0xfb, 0x22, 0x08, 0xd3, 0x34, 0x78, 0xe8, 0xac, 0x3a, 0xee, 0xba, 0xf3, 0x02, 0x51, 0x46, 0x09,
	0x2f, 0x92, 0xe3, 0xa3, 0x84, 0x97, 0xc8, 0x12, 0xe8, 0xa4, 0xa7, 0xe9, 0xab, 0x5a, 0x8d, 0x82,
	0x8f, 0x82, 0x69, 0xde, 0x75, 0xd4, 0xb3, 0x39, 0xa2, 0x76, 0x03, 0x88, 0xdf, 0xff, 0x2f, 0x53,
	0xea, 0x69, 0xe5, 0xb8, 0xe7, 0xbb, 0x5e, 0x82, 0xfb, 0x30, 0x4f, 0x12, 0xa8, 0x1f, 0xff, 0x5f,
	0xf0, 0xae, 0xa7, 0x6c, 0x90, 0xa0, 0xa9, 0x59, 0x09, 0xf2, 0xbf, 0x8d, 0x93, 0x05, 0xfa, 0x7f,
	0xfc, 0x1a, 0x27, 0xd0, 0x35, 0xdf, 0x48, 0x90, 0x3f, 0xcd, 0x93, 0x04, 0xea, 0x3b, 0x7f, 0x0f,
	0x82, 0x56, 0x3c, 0xca, 0x12, 0xd0, 0xf7, 0x72, 0x14, 0x81, 0xf9, 0xc7, 0xdf, 0xc1, 0x31, 0x2f,
	0x09, 0x9b, 0x96, 0xa8, 0xff, 0xf3, 0xcb, 0x52, 0x8e, 0x26, 0x70, 0x7f, 0x78, 0x7f, 0x1a, 0xa6,
	0x47, 0x7f, 0x24, 0x61, 0xfb, 0xbf, 0x9d, 0xc9, 0x48, 0x02, 0xf5, 0x9f, 0xfe, 0x37, 0x1c, 0xca,
	0x71, 0xf4, 0x4c, 0x89, 0x4c, 0xf2, 0x24, 0x81, 0xfa, 0xb3, 0x3f, 0x98, 0x05, 0x2e, 0xc0, 0x11,
	0x4a, 0xd0, 0x9f, 0xe7, 0x28, 0x02, 0xf3, 0xab, 0x3f, 0x9e, 0x55, 0xcf, 0x2b, 0xa4, 0x1a, 0xfa,
	0x8e, 0xc9, 0x42, 0x3f, 0x5d, 0xf4, 0xff, 0x17, 0xe8, 0x72, 0x1f, 0xbf, 0x99, 0x55, 0x2f, 0x2a,
	0x67, 0x53, 0xcd, 0xae, 0x68, 0x41, 0x3a, 0xe6, 0xf0, 0x3f, 0xce, 0x4d, 0xe8, 0x13, 0xe3, 0xde,
	0x7e, 0x7f, 0x4e, 0x5d, 0x56, 0xd4, 0xb4, 0x8f, 0xde, 0x48, 0x46, 0xbd, 0x33, 0xa1, 0x47, 0x9e,
	0xd5, 0x2f, 0xe6, 0xca, 0xbf, 0x2b, 0x29, 0x4b, 0x94, 0xd7, 0x5c, 0xd7, 0x90, 0x46, 0xbd, 0x0c,
	0xde, 0x80, 0x71, 0xd3, 0x59, 0xd3, 0x2c, 0xe0, 0x27, 0xf9, 0x4f, 0xd8, 0x77, 0x0d, 0x9c, 0x96,
	0x05, 0x9a, 0x7f, 0x5a, 0x39, 0x01, 0xad, 0x54, 0xfb, 0x49, 0x09, 0xcd, 0xa7, 0xc6, 0x78, 0x5e,
	0xfd, 0xc9, 0x34, 0x66, 0x0b, 0x00, 0xbc, 0xe1, 0x91, 0x19, 0xe1, 0xdb, 0x93, 0x68, 0x89, 0x4e,
	0x90, 0xcc, 0x0a, 0xdf, 0x2e, 0x5d, 0x3b, 0x9a, 0x00, 0x99, 0x4b, 0x80, 0x39, 0x1b, 0x20, 0xf3,
	0xe9, 0xe8, 0xcc, 0x08, 0xc8, 0x82, 0x70, 0x5f, 0x8c, 0x4b, 0x2b, 0x20, 0x8b, 0x09, 0x9f, 0xa0,
	0x41, 0xe4, 0xba, 0x70, 0x66, 0x70, 0x64, 0x42, 0xf3, 0x48, 0x33, 0x19, 0x20, 0xd5, 0x9b, 0x44,
	0xc9, 0x00, 0x50, 0x63, 0x72, 0x13, 0xbd, 0x5a, 0x4d, 0x06, 0x15, 0xb2, 0x95, 0xb0, 0xef, 0x51,
	0x46, 0xb6, 0x13, 0x24, 0x3a, 0xf9, 0x38, 0x69, 0x81, 0x4a, 0x90, 0xaf, 0x25, 0x40, 0x5d, 0xf3,
	0xc9, 0xad, 0x44, 0x3a, 0xe9, 0xf1, 0x92, 0x56, 0xc2, 0x48, 0x72, 0x0e, 0x64, 0xa7, 0xfc, 0xef,
	0x21, 0xb9, 0x12, 0xda, 0x19, 0x98, 0x2c, 0xe7, 0x8d, 0x69, 0xc0, 0x78, 0x9d, 0x5a, 0x36, 0x65,
	0xd2, 0xc5, 0x00, 0x41, 0xb7, 0x5c, 0x56, 0xa7, 0x81, 0xcc, 0xa6, 0x80, 0x12, 0xd4, 0x5d, 0x1a,
	0x90, 0x69, 0x94, 0x1f, 0xb4, 0x5d, 0xdf, 0xd1, 0x6c, 0xea, 0xb0, 0x80, 0xcc, 0xa4, 0xa3, 0xd6,
	0xa9, 0xe6, 0xb9, 0x4e, 0x40, 0x66, 0x53, 0xca, 0x1a, 0xad, 0x9b, 0xba, 0x45, 0xc9, 0x5c, 0xf9,
	0x3f, 0x4f, 0x81, 0x8f, 0xc6, 0xd8, 0x02, 0xbe, 0x17, 0x99, 0xc0, 0xf5, 0xfd, 0x20, 0x18, 0x5d,
	0x1f, 0x08, 0xa3, 0xeb, 0x03, 0x25, 0xbf, 0x3e, 0xb4, 0xc7, 0xd7, 0x07, 0xda, 0xe8, 0xfa, 0x40,
	0x49, 0xd7, 0x47, 0x49, 0x03, 0x05, 0xc5, 0xa9, 0xa4, 0x4d, 0x94, 0xe7, 0xf1, 0x72, 0x0b, 0x14,
	0x53, 0x28, 0x0a, 0x0a, 0xe6, 0xb2, 0x72, 0x1a, 0xd8, 0x97, 0x8a, 0x29, 0x7a, 0xf2, 0xea, 0x09,
	0xda, 0x07, 0xc1, 0x48, 0xb3, 0xa8, 0x23, 0x35, 0x4c, 0xba, 0xfe, 0x80, 0xc9, 0xc4, 0x0c, 0x69,
	0xa5, 0x84, 0x26, 0xf2, 0x0e, 0xa4, 0x4d, 0x97, 0x43, 0xe5, 0xb8, 0xf4, 0xf1, 0xa9, 0x15, 0xb0,
	0x89, 0x56, 0x70, 0x4a, 0xf4, 0x80, 0xeb, 0xa1, 0xb5, 0x1a, 0x99, 0x55, 0x9f, 0x54, 0x2e, 0x00,
	0x81, 0x49, 0x69, 0xfb, 0xdc, 0x32, 0x81, 0x8d, 0x0d, 0x8f, 0x92, 0x66, 0xf9, 0x83, 0x29, 0xdc,
	0x85, 0x4e, 0x93, 0x60, 0x0b, 0x3a, 0x03, 0x87, 0x69, 0xb2, 0x0d, 0x19, 0x32, 0xa1, 0xb5, 0xb1,
	0xfa, 0x1a, 0x29, 0xa1, 0xd2, 0x00, 0xaf, 0x1a, 0xab, 0xd7, 0xdd, 0x30, 0xa0, 0x64, 0x3a, 0x01,
	0xd8, 0x37, 0xaa, 0x15, 0x32, 0x83, 0x12, 0x82, 0x16, 0x64, 0x91, 0x64, 0x36, 0x69, 0xa2, 0x8d,
	0x90, 0xb9, 0x04, 0x0b, 0xc9, 0x19, 0x99, 0x47, 0x3e, 0x03, 0xc6, 0x0d, 0xcd, 0xb1, 0xc3, 0x55,
	0x8d, 0x2c, 0x24, 0xdd, 0xeb, 0xa6, 0x65, 0x90, 0xc5, 0x72, 0xac, 0x9c, 0x42, 0xbf, 0x62, 0x62,
	0x46, 0x8a, 0xac, 0x41, 0x3e, 0x66, 0x33, 0x6e, 0xb8, 0xeb, 0x4e, 0xc0, 0x34, 0xd3, 0x0f, 0xb8,
	0xad, 0x39, 0x44, 0x08, 0xd6, 0x86, 0xa0, 0x68, 0xad, 0xba, 0x8e, 0x30, 0x3e, 0x29, 0x44, 0x1b,
	0x12, 0xae, 0x5a, 0x1d, 0xe2, 0xef, 0x7a, 0x12, 0x3f, 0x6d, 0xc6, 0x6b, 0x3e, 0xa5, 0xc6, 0x06,
	0x0f, 0x1c, 0xc8, 0xaa, 0x67, 0xca, 0xff, 0x15, 0xd5, 0x4c, 0x77, 0x6d, 0x1b, 0x86, 0x43, 0x9e,
	0x67, 0x1a, 0x22, 0x61, 0x87, 0xa0, 0x9f, 0xe6, 0xcd, 0xa4, 0x89, 0x73, 0x02, 0x31, 0x4d, 0x95,
	0x49, 0x94, 0xd2, 0x30, 0xe7, 0x84, 0xd1, 0xe4, 0x66, 0x3a, 0x58, 0x78, 0x07, 0x24, 0x6e, 0xa5,
	0xc4, 0x8a, 0xa5, 0xe9, 0x12, 0xb9, 0x2d, 0x12, 0xfd, 0xc0, 0xe4, 0x46, 0x2c, 0x7c, 0x12, 0x92,
	0x63, 0x64, 0x14, 0xc8, 0x22, 0xd3, 0x13, 0xd4, 0xaf, 0x95, 0x7f, 0x5f, 0x82, 0x34, 0xa7, 0x1a,
	0x3a, 0x3a, 0x33, 0x5d, 0x87, 0xbb, 0x1e, 0x05, 0x07, 0x8a, 0x62, 0xae, 0xba, 0x26, 0xf7, 0xcd,
	0x60, 0x55, 0xa6, 0x2b, 0xd0, 0x14, 0x8a, 0x46, 0x4a, 0x29, 0xa1, 0xea, 0x9b, 0x90, 0x0c, 0x4f,
	0xa7, 0x03, 0xf4, 0xba, 0xc6, 0x44, 0xc0, 0xc7, 0x66, 0x22, 0x6d, 0x32, 0x8b, 0xa2, 0xce, 0x93,
	0x04, 0x07, 0x73, 0xc8, 0x2e, 0x8e, 0x14, 0xb6, 0x26, 0x2c, 0x03, 0x03, 0xbf, 0x58, 0x21, 0xc9,
	0xa2, 0x45, 0xe0, 0x47, 0x9a, 0x38, 0xfd, 0xc5, 0x94, 0x0b, 0x4b, 0x73, 0x6a, 0x1b, 0x1a, 0x51,
	0xd2, 0x41, 0x99, 0x3a, 0x1d, 0x47, 0x19, 0x01, 0xcd, 0xd0, 0x4c, 0x6b, 0x83, 0x33, 0x2d, 0x58,
	0x25, 0x4b, 0x29, 0x7f, 0xba, 0x66, 0x99, 0x95, 0xd0, 0x77, 0xc8, 0x89, 0x02, 0x1f, 0x68, 0x92,
	0x27, 0xd3, 0x29, 0xd3, 0x8c, 0x9d, 0x9c, 0xc2, 0x3b, 0x01, 0xd2, 0x46, 0x2f, 0x40, 0x84, 0xa4,
	0x1c, 0xd5, 0x5c, 0xa7, 0x56, 0x0d, 0xc9, 0x69, 0xf4, 0x00, 0xb9, 0x59, 0x89, 0x9a, 0x49, 0x0a,
	0x0c, 0xe0, 0x4c, 0xf9, 0xfb, 0x5f, 0x56, 0x4e, 0x8a, 0x4b, 0xa9, 0x4f, 0x19, 0xd7, 0x5d, 0x83,
	0x42, 0x2e, 0x0b, 0xb7, 0x52, 0x3f, 0xea, 0x73, 0xbd, 0xd3, 0x8c, 0x78, 0xd8, 0xbe, 0xd5, 0xee,
	0xbc, 0x49, 0x8e, 0xc1, 0x56, 0x46, 0x3a, 0x5c, 0x38, 0x9b, 0x67, 0x95, 0xcb, 0xa3, 0xe8, 0x5e,
	0xd4, 0x6d, 0x37, 0x76, 0x22, 0xce, 0x3a, 0x3c, 0xd8, 0xee, 0x74, 0xfb, 0xa4, 0xa4, 0x3e, 0xa3,
	0x3c, 0xf5, 0x58, 0x8c, 0xd5, 0x69, 0x6f, 0x91, 0x69, 0xb8, 0xb2, 0x4d, 0x86, 0xd0, 0x3b, 0x71,
	0xaf, 0x2f, 0x6e, 0xaa, 0x23, 0x00, 0xab, 0xb3, 0x15, 0xb7, 0x79, 0xb5, 0x11, 0xb7, 0xa2, 0x26,
	0x99, 0x2d, 0x8c, 0x77, 0xe2, 0xcd, 0x5b, 0xb9, 0xf1, 0x73, 0x05, 0x3e, 0xf5, 0x6e, 0xd4, 0xe8,
	0x47, 0x7e, 0xa7, 0x15, 0x25, 0x93, 0xcc, 0x17, 0x30, 0xb4, 0xdd, 0x8f, 0xba, 0xc1, 0x66, 0xd4,
	0x4e, 0x31, 0x0b, 0x70, 0x37, 0x1d, 0x67, 0x94, 0x9b, 0xfd, 0x68, 0x87, 0xbb, 0xb7, 0xc8, 0x22,
	0xdc, 0x4d, 0x27, 0xf7, 0xca, 0xf1, 0x8a, 0xfa, 0x9c, 0xf2, 0xf4, 0x08, 0xc2, 0xe8, 0x46, 0xbd,
	0x1e, 0xa7, 0x6f, 0xec, 0xc5, 0xbb, 0x09, 0x68, 0x49, 0xbd, 0xaa, 0x3c, 0x33, 0x02, 0x62, 0x8d,
	0x5b, 0x91, 0x7b, 0xf3, 0xe6, 0x28, 0xec, 0x64, 0x41, 0xae, 0x95, 0xbd, 0xbb, 0xc1, 0x5e, 0xdc,
	0x37, 0xdb, 0xc1, 0x76, 0x67, 0x17, 0x18, 0x22, 0xea, 0x4b, 0xca, 0xb5, 0x23, 0x20, 0x28, 0x1c,
	0xee, 0x45, 0xdd, 0x9d, 0x46, 0x3b, 0x6a, 0xf7, 0x93, 0x99, 0x4f, 0xab, 0x9f, 0x53, 0x3e, 0xfd,
	0x89, 0xc3, 0x24, 0x58, 0x55, 0x3f, 0xaf, 0x7c, 0xe6, 0x08, 0xb0, 0x50, 0x9f, 0x04, 0x7d, 0x56,
	0xfd, 0xa2, 0x52, 0x3e, 0x02, 0xad, 0x35, 0x9b, 0x1c, 0x9a, 0x09, 0xfe, 0xd9, 0x4f, 0x60, 0x05,
	0xff, 0xc7, 0xe2, 0x9d, 0xc8, 0xdd, 0xeb, 0x93, 0xe7, 0x0a, 0x12, 0x41, 0xe9, 0xe6, 0xe7, 0x5b,
	0x29, 0x1c, 0x80, 0x94, 0x6d, 0x1e, 0x74, 0x75, 0x92, 0x64, 0xab, 0x8d, 0xcd, 0x28, 0x93, 0xec,
	0xbf, 0x9a, 0x24, 0xd9, 0x1c, 0xe4, 0x31, 0x92, 0xd5, 0x26, 0x6d, 0xa7, 0x30, 0x4c, 0x82, 0x2b,
	0x93, 0x24, 0x9b, 0x03, 0x8f, 0x4a, 0xd6, 0x50, 0x3f, 0xa5, 0x3c, 0x3b, 0x82, 0x06, 0x28, 0x0f,
	0xdb, 0x9b, 0x9d, 0xf6, 0xcd, 0xb8, 0x9b, 0xaa, 0x20, 0x55, 0xbf, 0xa0, 0x7c, 0xb6, 0x88, 0x5b,
	0x8b, 0x77, 0xad, 0xe8, 0x76, 0xd4, 0xe2, 0x66, 0xfb, 0x76, 0xa3, 0x15, 0x37, 0x13, 0x78, 0x75,
	0xd2, 0x81, 0xe5, 0x98, 0x80, 0x03, 0xc3, 0x09, 0x24, 0xde, 0xff, 0x84, 0x1d, 0x8e, 0x1c, 0x58,
	0x30, 0xf9, 0xc0, 0xf2, 0xf3, 0xb1, 0xc7, 0x1d, 0x58, 0x1e, 0x14, 0xaa, 0x9f, 0x51, 0x56, 0x46,
	0x40, 0x76, 0xa3, 0xbd, 0xd7, 0x68, 0x85, 0xbb, 0xcd, 0x46, 0x3f, 0xca, 0x23, 0xd7, 0x0a, 0xbb,
	0x2f, 0x20, 0xf5, 0xce, 0x5e, 0xbb, 0xcf, 0xad, 0x78, 0x27, 0xee, 0x93, 0x75, 0xf5, 0xd3, 0x63,
	0x42, 0xf5, 0xa3, 0x46, 0xf3, 0x6e, 0xe6, 0x18, 0xe4, 0xb4, 0x83, 0xd2, 0x11, 0x40, 0x3f, 0xee,
	0xdd, 0x4a, 0xd6, 0x7f, 0x50, 0x52, 0x57, 0xc6, 0xf6, 0xa3, 0x6f, 0x37, 0x76, 0xfb, 0x51, 0xb7,
	0xd2, 0xb9, 0x63, 0xf6, 0xdc, 0xdd, 0xa8, 0x1d, 0x35, 0xc9, 0xbb, 0x25, 0xf5, 0xca, 0xb8, 0x43,
	0xeb, 0xf4, 0xbd, 0x46, 0xaf, 0x27, 0xc1, 0xe4, 0xbd, 0x92, 0x7a, 0x79, 0xcc, 0x23, 0x42, 0xf7,
	0x9b, 0x4d, 0x4e, 0xbb, 0xdd, 0x4e, 0x97, 0x7c, 0xab, 0xb8, 0x4e, 0xea, 0x52, 0x9d, 0x4e, 0x5f,
	0xba, 0xc5, 0x6f, 0x97, 0xd4, 0xab, 0xca, 0x95, 0xc9, 0x28, 0xb3, 0x97, 0xa8, 0x02, 0x79, 0xbf,
	0xa4, 0x7e, 0x76, 0x4c, 0xbe, 0xd5, 0x4e, 0xf7, 0xab, 0x71, 0xb3, 0x19, 0xb5, 0x13, 0x47, 0xdc,
	0xe9, 0x46, 0xb7, 0xa3, 0x2e, 0xf9, 0xa0, 0xa4, 0x7e, 0x4e, 0xf9, 0xd4, 0x91, 0x50, 0x16, 0xed,
	0xec, 0x76, 0xba, 0x8d, 0xee, 0x5d, 0xf2, 0x9d, 0xa3, 0xe6, 0x0d, 0x76, 0xa3, 0xc6, 0xad, 0x74,
	0xde, 0xef, 0x1e, 0x35, 0xaf, 0x80, 0x66, 0xf3, 0x7e, 0xaf, 0xa4, 0x3e, 0x37, 0xa6, 0x57, 0xb8,
	0xe7, 0x76, 0x67, 0x6f, 0x6b, 0x9b, 0xdb, 0x9d, 0x76, 0x74, 0x97, 0x0c, 0x06, 0x33, 0xea, 0xd5,
	0x31, 0x09, 0xe5, 0x40, 0x46, 0xdc, 0xd8, 0xe9, 0xb4, 0x9b, 0x64, 0xff, 0x68, 0x58, 0xd0, 0x8f,
	0x77, 0xe2, 0x76, 0x83, 0x0c, 0x07, 0x33, 0xea, 0x33, 0xc5, 0x13, 0x4b, 0x60, 0xf4, 0xce, 0x2e,
	0xb9, 0x37, 0x98, 0x51, 0x3f, 0x35, 0x26, 0xec, 0x3c, 0x57, 0x8d, 0x7e, 0xd4, 0x8d, 0x1b, 0x2d,
	0x72, 0xf0, 0xb8, 0xa9, 0x84, 0x47, 0xe9, 0x76, 0x76, 0xc9, 0x5b, 0x83, 0x19, 0xf5, 0xd9, 0xb1,
	0x48, 0x93, 0x41, 0x30, 0x48, 0x90, 0xfb, 0x13, 0x30, 0x7a, 0xa3, 0xdd, 0xee, 0xf4, 0xd3, 0xa0,
	0x44, 0xde, 0x3e, 0x72, 0x29, 0x30, 0x06, 0xf2, 0xce, 0x60, 0x46, 0xbd, 0xa2, 0x5c, 0x2c, 0x40,
	0x82, 0xa8, 0xd5, 0x42, 0x9d, 0x26, 0x5f, 0x1f, 0xcc, 0xa8, 0x9f, 0x55, 0x9e, 0x7b, 0xdc, 0xbe,
	0xb4, 0x6e, 0xd4, 0x6e, 0xf0, 0x60, 0xb3, 0xd3, 0x8d, 0xc8, 0x83, 0xc1, 0x8c, 0xfa, 0xe9, 0xb1,
	0xd0, 0x96, 0x83, 0x56, 0xf7, 0xba, 0xed, 0xb8, 0xbf, 0xd7, 0x8d, 0xc8, 0xbb, 0x03, 0x08, 0xf8,
	0x17, 0xc6, 0x80, 0x89, 0xa5, 0x90, 0xfd, 0xc1, 0x82, 0xfa, 0xa4, 0x72, 0x6e, 0xbc, 0x1b, 0xfd,
	0x17, 0x19, 0x0e, 0x16, 0x8a, 0x63, 0xa3, 0xa8, 0x29, 0xbb, 0xef, 0x0d, 0x16, 0xd4, 0xa7, 0xc7,
	0x2c, 0x07, 0xbb, 0xc1, 0x7c, 0x8c, 0xbd, 0x5d, 0x72, 0x30, 0x58, 0x50, 0x3f, 0x33, 0x66, 0xcb,
	0x08, 0xb0, 0x3b, 0xdd, 0x88, 0x57, 0xe3, 0xad, 0xed, 0xbe, 0x70, 0x11, 0xe4, 0xad, 0xc1, 0x42,
	0xf1, 0x44, 0x01, 0xb9, 0x1a, 0xb7, 0x5a, 0x5a, 0xab, 0x65, 0x77, 0xda, 0x3d, 0x64, 0x77, 0x78,
	0x04, 0x8e, 0x6d, 0x47, 0x09, 0x6e, 0x38, 0x5c, 0x28, 0xe8, 0x5a, 0x35, 0x6e, 0x37, 0xab, 0xdd,
	0x38, 0x6a, 0x37, 0xb9, 0xd3, 0x11, 0x46, 0xbb, 0x7f, 0xb8, 0xa0, 0xae, 0x8c, 0x65, 0x2a, 0x5a,
	0x73, 0x1c, 0x35, 0x3c, 0x2c, 0x4e, 0x96, 0xa1, 0xcc, 0x9e, 0xf8, 0x41, 0xee, 0x1d, 0x2e, 0x14,
	0x54, 0x20, 0x83, 0xad, 0x37, 0xe2, 0x3e, 0x39, 0x38, 0x5c, 0x50, 0x3f, 0x3f, 0x66, 0x7b, 0x19,
	0x24, 0x88, 0x5a, 0x37, 0xc5, 0xcf, 0x5e, 0x75, 0xaf, 0xd5, 0x22, 0x6f, 0x1d, 0x2e, 0xa8, 0x9f,
	0x53, 0xae, 0x3e, 0x06, 0xcd, 0x1a, 0xdd, 0x3c, 0xf8, 0xfe, 0xe1, 0x82, 0xfa, 0x85, 0xb1, 0x70,
	0x91, 0x81, 0xfd, 0xe8, 0x8d, 0xbd, 0xa8, 0xd7, 0x7f, 0x7d, 0x2f, 0xda, 0x8b, 0x10, 0xfe, 0xf6,
	0x61, 0x51, 0x90, 0x23, 0x73, 0xfb, 0xd1, 0xcd, 0xbd, 0x5e, 0x44, 0xde, 0x39, 0x2c, 0x1e, 0xa1,
	0x1f, 0xed, 0x74, 0x6e, 0x47, 0x7c, 0x4c, 0x4a, 0x5f, 0x3f, 0x72, 0x46, 0xb3, 0xe7, 0xde, 0xbc,
	0x69, 0xc5, 0xed, 0x88, 0x3c, 0x38, 0x72, 0x57, 0x5a, 0xab, 0x0b, 0xce, 0x5e, 0xf2, 0x4b, 0xde,
	0x3d, 0x5c, 0x50, 0xcb, 0xe3, 0x7e, 0x0d, 0x91, 0x42, 0x7b, 0xcc, 0x9e, 0xd3, 0xe9, 0x4b, 0xf9,
	0xbf, 0x37, 0xe1, 0x98, 0x82, 0x5b, 0x71, 0xab, 0xc5, 0x83, 0xfe, 0x5e, 0xf3, 0x6e, 0x12, 0x36,
	0xf6, 0x1f, 0x2e, 0x14, 0x2c, 0x47, 0xc0, 0x50, 0xab, 0xc3, 0x34, 0x29, 0x1c, 0x3e, 0x2c, 0x32,
	0x2a, 0x80, 0x18, 0x59, 0x59, 0xa3, 0x95, 0xcb, 0x46, 0xee, 0x3d, 0x2c, 0x8a, 0x5f, 0x80, 0x65,
	0x8c, 0x1d, 0x85, 0x1f, 0x3c, 0x5c, 0x28, 0x58, 0x7a, 0x6e, 0xee, 0x4a, 0xa7, 0x93, 0x86, 0xb9,
	0xb7, 0x1e, 0xcb, 0x86, 0x9c, 0x39, 0x0f, 0xbe, 0xff, 0xb0, 0xa8, 0x60, 0x52, 0x06, 0x71, 0x3f,
	0x1a, 0x4f, 0x48, 0xde, 0x7e, 0x2c, 0xd3, 0x88, 0x5e, 0x8b, 0x77, 0xd1, 0xa7, 0xf8, 0x51, 0x63,
	0x73, 0x3b, 0x6a, 0x92, 0x77, 0x1e, 0x16, 0x75, 0x41, 0xe4, 0xdc, 0x7a, 0xa3, 0xdb, 0xe4, 0xde,
	0x1a, 0x4d, 0x65, 0xfc, 0xa8, 0x78, 0x6c, 0x49, 0xe2, 0x3d, 0x8e, 0x1d, 0x3e, 0xfa, 0x84, 0x59,
	0xbd, 0x54, 0xc6, 0x9f, 0x3c, 0x6b, 0x8a, 0x3d, 0x78, 0x54, 0xb4, 0xec, 0x5a, 0xc7, 0x8e, 0xdb,
	0x71, 0x0d, 0x22, 0x72, 0xc2, 0xe7, 0x60, 0xb1, 0x68, 0xff, 0xe0, 0x65, 0x85, 0x76, 0x25, 0xa8,
	0xc3, 0xc5, 0x02, 0x87, 0x39, 0x94, 0xb3, 0x97, 0x26, 0x84, 0xc3, 0xc3, 0xc5, 0x82, 0x6e, 0xe5,
	0x90, 0x7a, 0x2a, 0xf9, 0x7b, 0x87, 0x8b, 0x05, 0xd7, 0x89, 0x17, 0xa8, 0xc4, 0x9a, 0x0e, 0x0e,
	0x17, 0x0b, 0x0a, 0x92, 0x9b, 0x69, 0x2d, 0xea, 0xc6, 0x37, 0x85, 0x4a, 0x93, 0xb7, 0x26, 0x40,
	0x83, 0xce, 0x4e, 0xd4, 0x69, 0x27, 0x3e, 0x76, 0x3d, 0xee, 0x6f, 0xf3, 0x8d, 0xce, 0x1e, 0xb9,
	0x3f, 0x61, 0xd9, 0xe0, 0xcd, 0x4e, 0xb7, 0x99, 0x19, 0xc7, 0x62, 0x21, 0xde, 0x0b, 0x40, 0x7e,
	0x97, 0x0f, 0x17, 0x0b, 0x6a, 0x63, 0x34, 0xe2, 0xd6, 0x5d, 0xce, 0x1a, 0xbd, 0x5b, 0x5c, 0xef,
	0xb4, 0x9b, 0xfd, 0xb8, 0xd3, 0xce, 0x94, 0x61, 0xf1, 0xa8, 0x50, 0x55, 0xd9, 0xbb, 0x2b, 0x83,
	0xc0, 0xfe, 0x40, 0x29, 0x78, 0x10, 0xe9, 0x08, 0x46, 0x52, 0xdd, 0xfd, 0x43, 0x45, 0xfd, 0xe2,
	0x58, 0x3a, 0x8f, 0x6a, 0x0b, 0x96, 0x80, 0x48, 0x98, 0x1e, 0xf2, 0x3f, 0x1c, 0x42, 0x86, 0x87,
	0x4a, 0x81, 0x5f, 0x39, 0x2f, 0xaf, 0x75, 0x3a, 0xcd, 0x1e, 0x24, 0x68, 0x59, 0x26, 0x77, 0xef,
	0x50, 0x51, 0x9f, 0x1f, 0x4b, 0xd4, 0x0b, 0x70, 0xe9, 0xa7, 0x78, 0xd0, 0x69, 0x35, 0xc9, 0xc1,
	0x04, 0x86, 0xaa, 0x9d, 0xee, 0x66, 0xe4, 0x47, 0x37, 0xbb, 0x51, 0x6f, 0x1b, 0x85, 0x97, 0x6d,
	0x99, 0xbc, 0x75, 0xa8, 0x14, 0xd4, 0xce, 0x6b, 0x35, 0xee, 0x46, 0x5d, 0xbe, 0xde, 0xe8, 0x71,
	0xb7, 0x8d, 0x8e, 0x72, 0x7f, 0xb0, 0x54, 0x88, 0x27, 0x76, 0x23, 0x6e, 0xe5, 0x58, 0xdd, 0x1f,
	0x90, 0x02, 0x24, 0x88, 0xb7, 0xda, 0xf2, 0x3a, 0x0f, 0xf1, 0x7f, 0x30, 0x3c, 0x5b, 0x48, 0x5e,
	0x24, 0xc4, 0x8f, 0x76, 0xe1, 0xe2, 0xde, 0x24, 0xfb, 0xc3, 0xb3, 0xea, 0x3f, 0x1b, 0xcb, 0xe5,
	0x25, 0x46, 0x6b, 0x36, 0x63, 0x38, 0xcc, 0x46, 0x2b, 0xbf, 0x81, 0xe1, 0xf0, 0x6c, 0xc1, 0x12,
	0x6b, 0x51, 0x1f, 0x4e, 0x1e, 0xd1, 0x79, 0xec, 0x60, 0xb8, 0x5c, 0x14, 0xce, 0x5e, 0x7b, 0x13,
	0x70, 0x78, 0x46, 0xd9, 0x28, 0x54, 0xe7, 0xc1, 0xc1, 0x72, 0xc1, 0xdf, 0xe5, 0x6f, 0xf6, 0xe2,
	0x6a, 0x95, 0xdc, 0x01, 0x0e, 0x96, 0xd5, 0xcb, 0x63, 0x9f, 0x11, 0x8c, 0x46, 0xbf, 0x91, 0xf4,
	0x1f, 0x1e, 0x2c, 0x17, 0x62, 0x82, 0x98, 0xc6, 0xec, 0x71, 0xd6, 0x91, 0xb3, 0x91, 0x1f, 0x4d,
	0x80, 0x55, 0xe3, 0x3b, 0xbc, 0xd2, 0xd8, 0xe2, 0xc1, 0x2e, 0xde, 0x79, 0x20, 0x68, 0xfe, 0xe4,
	0x60, 0xb9, 0x60, 0x1d, 0x32, 0x11, 0x04, 0xb4, 0xc8, 0x16, 0x7f, 0x7a, 0xb0, 0x5c, 0x10, 0x78,
	0xba, 0x64, 0x35, 0xbe, 0x13, 0xb7, 0xb7, 0xc8, 0xcf, 0x0e, 0x96, 0x0b, 0xf2, 0x13, 0x18, 0xda,
	0x6e, 0xee, 0x75, 0x1b, 0xed, 0x4d, 0xbc, 0x34, 0x7c, 0x25, 0xea, 0x76, 0xc8, 0xcf, 0x0f, 0x96,
	0x0b, 0xde, 0x47, 0x60, 0xe5, 0xd2, 0x7e, 0xd4, 0xeb, 0xb4, 0x6e, 0x47, 0x4d, 0xf2, 0x8b, 0x83,
	0xe5, 0xa2, 0x37, 0xdb, 0xdc, 0x8c, 0x76, 0xfb, 0x68, 0x97, 0xa9, 0xcf, 0xbb, 0x54, 0x4c, 0x14,
	0x32, 0x14, 0xa8, 0x6a, 0xb8, 0xbb, 0x1b, 0x75, 0xe5, 0xb5, 0xed, 0xdd, 0xc1, 0xa5, 0x82, 0x8a,
	0x09, 0x60, 0xaa, 0x85, 0xef, 0x0d, 0x2e, 0x15, 0xec, 0x56, 0xef, 0xec, 0xec, 0xb6, 0xa2, 0x7e,
	0x94, 0x5f, 0xf9, 0x70, 0x70, 0x69, 0x82, 0xff, 0xee, 0xdd, 0x82, 0xad, 0x26, 0xf8, 0x04, 0xfb,
	0xe1, 0x04, 0x2e, 0x11, 0x6b, 0x37, 0xfa, 0x90, 0xdb, 0x73, 0x3b, 0xee, 0xf5, 0xa2, 0xd4, 0x6f,
	0xfd, 0x60, 0x70, 0xa9, 0x60, 0xb3, 0x29, 0x97, 0x5e, 0xd4, 0xdd, 0x89, 0xfb, 0xbc, 0x16, 0xdf,
	0x8e, 0xb2, 0xe8, 0xfe, 0xc3, 0x09, 0x4c, 0xd3, 0x3b, 0x9b, 0xdb, 0x8d, 0xf6, 0x56, 0x94, 0x77,
	0x76, 0x3f, 0x19, 0x5c, 0x2a, 0x64, 0xed, 0x7a, 0x13, 0xfc, 0x4a, 0x82, 0x78, 0x38, 0xb8, 0x54,
	0x38, 0x70, 0xaf, 0x15, 0x35, 0x7a, 0x91, 0xc8, 0x73, 0x59, 0xf7, 0x2e, 0xf9, 0x68, 0x02, 0xc6,
	0x88, 0x7b, 0x7d, 0x3c, 0xe9, 0x9b, 0x62, 0x9e, 0x47, 0x83, 0x4b, 0x05, 0xe7, 0x5c, 0xeb, 0xf4,
	0x79, 0xe5, 0x2e, 0x77, 0xfb, 0xdb, 0x51, 0x97, 0xfc, 0xdd, 0x28, 0xc0, 0xef, 0x74, 0x76, 0xc4,
	0xa7, 0xb7, 0xd4, 0x1a, 0x06, 0x57, 0xf2, 0xf9, 0x3a, 0x00, 0x5e, 0xeb, 0x64, 0x9f, 0xf6, 0x0e,
	0x07, 0x57, 0xf2, 0x47, 0x09, 0xdd, 0xd5, 0x46, 0xaf, 0x9f, 0x87, 0xfc, 0x64, 0x70, 0x25, 0x6f,
	0x4f, 0x00, 0xb1, 0xa2, 0xc6, 0xed, 0xdc, 0x5e, 0x0b, 0xfd, 0x78, 0x39, 0x4f, 0xfa, 0x3f, 0x1a,
	0x5c, 0xc9, 0x1b, 0x92, 0xdd, 0x80, 0x6c, 0x7c, 0x35, 0xde, 0xbc, 0x25, 0xdd, 0x5b, 0x35, 0xd9,
	0xea, 0x95, 0x11, 0x71, 0x34, 0xba, 0x23, 0x97, 0x25, 0xf1, 0x1d, 0x60, 0xb0, 0x52, 0x50, 0xbc,
	0x9c, 0xb1, 0xe9, 0x8d, 0x2e, 0x79, 0x30, 0x11, 0xd2, 0xcd, 0x9b, 0xec, 0xb7, 0x1e, 0x03, 0x81,
	0xe5, 0x2a, 0xdd, 0xce, 0xad, 0xa8, 0x4d, 0xde, 0x1f, 0xac, 0x14, 0xe4, 0x9e, 0x40, 0xc0, 0xdf,
	0x93, 0xef, 0x0d, 0x56, 0x0a, 0xde, 0x41, 0x6f, 0x74, 0x77, 0x3b, 0x5d, 0x48, 0x40, 0xe1, 0x1e,
	0xd9, 0x8f, 0x36, 0xfb, 0xe4, 0xc3, 0xc1, 0x4a, 0x41, 0xbd, 0x35, 0x74, 0x73, 0xf2, 0x3b, 0x48,
	0xce, 0x29, 0xfe, 0x70, 0xb0, 0x52, 0x4c, 0x4f, 0xa4, 0x24, 0x58, 0xa7, 0xc3, 0x69, 0xa3, 0xdb,
	0xba, 0x4b, 0x7e, 0x34, 0x01, 0xe5, 0x35, 0xba, 0xb7, 0x52, 0x98, 0xbd, 0xb7, 0xb9, 0x4d, 0x7e,
	0x3c, 0x58, 0x29, 0xc4, 0x57, 0x77, 0xaf, 0x9f, 0x44, 0x14, 0xd0, 0x65, 0x1f, 0xb4, 0x9a, 0xfc,
	0xf7, 0x09, 0x40, 0x7b, 0x0f, 0xa3, 0x1a, 0xdc, 0xfb, 0x37, 0xc1, 0xac, 0x30, 0xf2, 0xfc, 0x74,
	0xc2, 0x86, 0x83, 0xbb, 0xbd, 0x7e, 0xb4, 0xc3, 0xf5, 0x4e, 0xab, 0x15, 0x6d, 0x22, 0xa3, 0xe4,
	0xe7, 0x47, 0xc8, 0xc5, 0xe8, 0xc6, 0xed, 0x5b, 0xdc, 0x6b, 0xdf, 0xde, 0x23, 0xbf, 0x98, 0x20,
	0x17, 0xfc, 0xe0, 0x63, 0xb6, 0x9b, 0xd1, 0x1d, 0x90, 0x60, 0x90, 0xa4, 0x64, 0xe4, 0x7f, 0x4e,
	0x60, 0xb1, 0xde, 0x68, 0x6f, 0xed, 0xed, 0xe2, 0x7e, 0x41, 0x5d, 0x65, 0x94, 0x18, 0xae, 0x14,
	0xcc, 0x37, 0x01, 0x82, 0x6d, 0xfa, 0x7b, 0x6d, 0x8e, 0xb9, 0xc2, 0xb0, 0xb8, 0xb8, 0xd9, 0xee,
	0x47, 0xdd, 0xc6, 0x66, 0x7f, 0x4c, 0xe7, 0xc8, 0x83, 0xa3, 0xb0, 0x10, 0x98, 0x73, 0xd8, 0x77,
	0x8f, 0xc2, 0x86, 0xbd, 0xe4, 0xd3, 0x17, 0x62, 0xdf, 0x1f, 0xae, 0x14, 0x22, 0x5a, 0x8a, 0xf5,
	0xa3, 0x37, 0x21, 0x75, 0x05, 0x43, 0x47, 0xf0, 0x07, 0xc3, 0x95, 0x82, 0xe3, 0x4b, 0xc1, 0xb4,
	0x1d, 0x75, 0xb7, 0xee, 0xe6, 0xe7, 0xfe, 0xce, 0x70, 0xa5, 0x10, 0x1d, 0xde, 0xd8, 0x6b, 0xb4,
	0xe2, 0xfe, 0x5d, 0xf1, 0x71, 0x21, 0x15, 0xed, 0xe1, 0x70, 0xa5, 0x90, 0x26, 0x26, 0xc8, 0x34,
	0x12, 0x0a, 0xe8, 0x87, 0x13, 0xa0, 0xe0, 0xa0, 0x3b, 0x3d, 0x91, 0xa5, 0xb6, 0x32, 0xe8, 0x0f,
	0x86, 0x2b, 0x13, 0x3f, 0x10, 0x99, 0x6d, 0x50, 0x3a, 0xe1, 0xfa, 0xc9, 0xcf, 0x86, 0x2b, 0x85,
	0x5b, 0x89, 0xb3, 0xbb, 0x99, 0x93, 0x6d, 0xdc, 0xe7, 0x5a, 0x72, 0x49, 0x7e, 0x38, 0x5c, 0x29,
	0x78, 0x5c, 0x2f, 0xca, 0x9d, 0x16, 0x19, 0x1c, 0x14, 0x05, 0x0a, 0x08, 0xb1, 0x05, 0xbb, 0x71,
	0x47, 0xc4, 0x2e, 0xb1, 0xf8, 0xfe, 0x41, 0x51, 0xa5, 0x70, 0xba, 0x28, 0x6a, 0x72, 0x7a, 0x1b,
	0x42, 0xa7, 0x00, 0x0e, 0x1f, 0x03, 0xd4, 0xfa, 0xfd, 0x6e, 0x92, 0x2e, 0x20, 0xf0, 0xde, 0x41,
	0x71, 0xcf, 0x00, 0x04, 0x15, 0x71, 0x1a, 0x5f, 0x15, 0xa0, 0x83, 0x83, 0xa2, 0x82, 0x02, 0x88,
	0x6e, 0x6d, 0xa1, 0xa5, 0x3b, 0x9d, 0xfe, 0x36, 0xa4, 0x02, 0x6f, 0x1d, 0x14, 0x0f, 0x30, 0x88,
	0xfa, 0x32, 0x73, 0x87, 0x11, 0xc9, 0xa7, 0xc3, 0xfb, 0x07, 0x45, 0xcd, 0xc8, 0x76, 0x8d, 0x97,
	0x34, 0x71, 0x87, 0x10, 0x39, 0xcd, 0xdb, 0x13, 0xb8, 0x0c, 0xe2, 0x7f, 0x87, 0x89, 0x05, 0x88,
	0x08, 0x7e, 0x93, 0xc1, 0xfd, 0xa2, 0x87, 0x31, 0xe2, 0x66, 0x96, 0x40, 0xd7, 0x3b, 0x3b, 0x11,
	0xd9, 0xbf, 0x5f, 0xe4, 0x11, 0x3a, 0xe4, 0xd2, 0xf9, 0xc4, 0xf0, 0x7e, 0xd1, 0xdd, 0x06, 0x51,
	0xf7, 0x76, 0x84, 0x12, 0x44, 0x8f, 0x3c, 0x78, 0x67, 0xa5, 0x98, 0x0f, 0x8a, 0xcb, 0x7f, 0x76,
	0x9f, 0xca, 0x4d, 0xb9, 0xff, 0x8d, 0x95, 0x09, 0x77, 0xaa, 0xcd, 0xed, 0x38, 0xba, 0x1d, 0x8d,
	0x5c, 0x4f, 0xf7, 0xff, 0x43, 0x51, 0x3e, 0xb9, 0x7b, 0x46, 0x6d, 0xaf, 0xd1, 0xec, 0x36, 0xfa,
	0xf1, 0x66, 0x72, 0xdb, 0xf8, 0xe6, 0xca, 0x51, 0x1f, 0x11, 0x13, 0xe5, 0x24, 0xc3, 0x6f, 0x16,
	0x95, 0x0d, 0x43, 0x43, 0x3a, 0x1f, 0x7e, 0x99, 0x16, 0x57, 0x8d, 0x7b, 0xdf, 0x2c, 0x0a, 0xdd,
	0x8f, 0x9a, 0x51, 0xb4, 0x93, 0xcf, 0xda, 0x1f, 0x14, 0x15, 0x5c, 0x82, 0xe8, 0x9d, 0xdd, 0xb8,
	0x1b, 0x91, 0xe1, 0x83, 0xe2, 0xb1, 0x48, 0x84, 0xd6, 0xc2, 0x78, 0x5b, 0x8b, 0xfa, 0xe4, 0xde,
	0x83, 0x95, 0x09, 0xdf, 0x66, 0x10, 0x25, 0x64, 0x6e, 0x26, 0x9f, 0xb0, 0x0f, 0x1e, 0xac, 0x14,
	0x2f, 0x01, 0x7d, 0xb8, 0x20, 0x66, 0x5c, 0x1d, 0x3e, 0x28, 0xca, 0xa3, 0x1a, 0x77, 0x7b, 0x7d,
	0xfc, 0xca, 0xdb, 0x15, 0xee, 0xc4, 0x5d, 0x25, 0x83, 0xf7, 0x8a, 0x9e, 0x6f, 0x04, 0x97, 0xe3,
	0x70, 0xff, 0xbd, 0x15, 0xf5, 0x82, 0x72, 0x7a, 0x04, 0x0b, 0xd9, 0x00, 0xd9, 0x3f, 0x5c, 0x29,
	0xe4, 0xed, 0xe2, 0x93, 0xb6, 0xb6, 0xd5, 0x88, 0xdb, 0x64, 0x78, 0x58, 0x14, 0x80, 0x48, 0x7a,
	0x21, 0x25, 0x4f, 0x55, 0xe9, 0xe1, 0xca, 0x63, 0xd2, 0x68, 0x40, 0x09, 0x8b, 0x08, 0x77, 0x5b,
	0x98, 0xc7, 0xee, 0x3f, 0x2c, 0x6a, 0x47, 0x86, 0x85, 0xe9, 0xb8, 0xd9, 0xee, 0x45, 0xdd, 0x3e,
	0xde, 0xb1, 0xc8, 0xf0, 0x61, 0x31, 0xb6, 0x41, 0x30, 0xbf, 0x9d, 0x38, 0x56, 0xe9, 0x89, 0x1e,
	0xad, 0xa8, 0xd7, 0x95, 0xcf, 0x4f, 0x86, 0x25, 0xae, 0x3d, 0xea, 0x8f, 0xfc, 0x43, 0xc8, 0xfe,
	0xa3, 0xa2, 0x77, 0x4d, 0xc7, 0x68, 0xf1, 0x4e, 0xa6, 0xd4, 0x64, 0xf8, 0x68, 0x42, 0x02, 0x10,
	0x37, 0xda, 0x1d, 0xf4, 0x35, 0x10, 0xe0, 0xc1, 0x85, 0x0c, 0x3e, 0x2e, 0x8a, 0x41, 0x7e, 0x20,
	0xf0, 0xd6, 0x68, 0xfa, 0xd1, 0x07, 0xee, 0x45, 0x64, 0x30, 0xbc, 0x5a, 0x50, 0xd0, 0x1c, 0x56,
	0xa8, 0xcb, 0xfe, 0xf0, 0x6a, 0x61, 0xd9, 0x1c, 0x28, 0xf9, 0x0c, 0x30, 0xbc, 0x5a, 0x50, 0xbf,
	0x1c, 0xaa, 0xd2, 0xb9, 0x93, 0x7e, 0xed, 0x18, 0x5e, 0x3d, 0x8a, 0x41, 0xf1, 0xc9, 0x29, 0xf9,
	0x70, 0x33, 0xbc, 0x5a, 0xc8, 0xe4, 0x73, 0xd8, 0xd5, 0x38, 0xfd, 0x18, 0x9c, 0x7e, 0x20, 0x9b,
	0xc0, 0x6d, 0x16, 0xd9, 0xed, 0xc6, 0xad, 0x88, 0x9b, 0x4d, 0x32, 0xf8, 0xc1, 0xd5, 0x72, 0x4d,
	0x39, 0x8e, 0x6f, 0xb0, 0x59, 0xf6, 0x02, 0x54, 0x67, 0xe2, 0x7d, 0x0b, 0x39, 0x96, 0x34, 0x6b,
	0xbe, 0x1b, 0x7a, 0x64, 0x0a, 0x5f, 0x44, 0xe9, 0x8c, 0xbb, 0xd7, 0x5d, 0x52, 0x4a, 0xfa, 0xd6,
	0x5d, 0xdf, 0x32, 0xc8, 0x74, 0xf9, 0xcb, 0x0a, 0xa1, 0xd9, 0xb3, 0xda, 0xec, 0xe9, 0x53, 0x60,
	0x30, 0x1e, 0x3a, 0x15, 0xcd, 0x4a, 0xe6, 0x03, 0x82, 0x56, 0xb1, 0xa8, 0x9c, 0x0f, 0x9a, 0xee,
	0x2a, 0x29, 0x95, 0xaf, 0x2b, 0x27, 0xb3, 0x47, 0xc5, 0x38, 0xfc, 0xa4, 0xa2, 0x54, 0x03, 0xc6,
	0x1d, 0xd7, 0xb7, 0x35, 0x4b, 0x3c, 0x5c, 0x82, 0xb6, 0x61, 0x06, 0xe2, 0xa9, 0x58, 0xa9, 0xfc,
	0x65, 0xe5, 0x34, 0xe5, 0x3e, 0x7d, 0x5d, 0x3e, 0xd5, 0x10, 0xc3, 0xce, 0x02, 0x27, 0xb6, 0x53,
	0x4b, 0x88, 0x06, 0xb5, 0xc8, 0xb1, 0x02, 0x55, 0x33, 0x0c, 0x32, 0x55, 0xfe, 0x68, 0x4a, 0xb9,
	0x40, 0xb9, 0x0d, 0xaa, 0xd8, 0x88, 0xdb, 0xb5, 0x4e, 0x93, 0xde, 0x8e, 0xda, 0x7d, 0x31, 0xcf,
	0x69, 0xe5, 0x04, 0xb5, 0x6b, 0x34, 0x7b, 0x34, 0x74, 0x2c, 0x23, 0xf9, 0xf8, 0x4a, 0xe6, 0x9a,
	0x7c, 0x36, 0x97, 0x23, 0x5d, 0x27, 0x25, 0x7c, 0x16, 0x81, 0x24, 0x8b, 0x56, 0x01, 0x34, 0x3d,
	0x46, 0xb9, 0x2e, 0x9f, 0x53, 0x65, 0x94, 0x17, 0xe4, 0x73, 0x2a, 0xa4, 0x54, 0x5c, 0x56, 0xe7,
	0xd7, 0xc8, 0xdc, 0x18, 0xe5, 0x3a, 0x99, 0x1f, 0xa3, 0xbc, 0x40, 0x16, 0xc6, 0x28, 0x2f, 0x92,
	0x45, 0xf1, 0xf8, 0x38, 0x79, 0xfa, 0xc1, 0x03, 0x6a, 0xc1, 0x29, 0xa5, 0x1b, 0xd2, 0x03, 0xb1,
	0x62, 0x5d, 0x3c, 0xd5, 0x15, 0x8f, 0x71, 0x24, 0xef, 0x48, 0x13, 0xec, 0xeb, 0x81, 0x98, 0xd0,
	0x71, 0x93, 0xd7, 0xfd, 0x7a, 0xc0, 0xab, 0xa6, 0x1f, 0x30, 0x39, 0x23, 0x99, 0x29, 0xef, 0x8d,
	0x2c, 0xe4, 0xd3, 0x20, 0xb4, 0xf2, 0x0b, 0xf9, 0xc5, 0x85, 0xfc, 0xd1, 0x85, 0x96, 0x94, 0x05,
	0xa0, 0xc1, 0x42, 0xc9, 0x22, 0xfe, 0xd8, 0x22, 0x82, 0x19, 0x3f, 0x63, 0x66, 0xb6, 0xfc, 0xcb,
	0x19, 0x38, 0xf4, 0xec, 0xc1, 0x4b, 0xa6, 0x6a, 0x06, 0x13, 0xeb, 0xe3, 0xb9, 0x8c, 0x10, 0xae,
	0xcb, 0x57, 0x3d, 0x29, 0xe1, 0x05, 0x32, 0x3d, 0x4a, 0x78, 0x91, 0xcc, 0x8c, 0x12, 0x5e, 0x22,
	0xb3, 0xa3, 0x84, 0x97, 0xc9, 0xdc, 0x28, 0xe1, 0x15, 0xf9, 0x28, 0x2b, 0x25, 0xbc, 0x2a, 0x1f,
	0x2f, 0xa6, 0x84, 0x2f, 0x91, 0x45, 0xdc, 0x40, 0xc6, 0xd8, 0xf3, 0x44, 0x19, 0xa3, 0x5c, 0x23,
	0xc7, 0xc7, 0x28, 0xd7, 0xc9, 0xd2, 0x18, 0xe5, 0x05, 0x72, 0x62, 0x8c, 0xf2, 0x22, 0x39, 0x39,
	0x46, 0x79, 0x89, 0x9c, 0x1a, 0xa3, 0xbc, 0x4c, 0xc8, 0x18, 0xe5, 0x15, 0xf9, 0x66, 0x27, 0xa3,
	0xbc, 0x8a, 0xaf, 0xe4, 0xf3, 0x94, 0x2f, 0x91, 0x33, 0xa3, 0x94, 0xeb, 0xcf, 0x93, 0xb3, 0x63,
	0x94, 0x6b, 0xe4, 0xdc, 0x18, 0xe5, 0x3a, 0x39, 0x3f, 0x46, 0x79, 0x81, 0x5c, 0x18, 0xa3, 0xbc,
	0x48, 0x96, 0xc7, 0x28, 0x2f, 0x91, 0x27, 0xc6, 0x28, 0x2f, 0x93, 0x8b, 0x63, 0x94, 0x57, 0xc8,
	0x93, 0x63, 0x94, 0x57, 0xc9, 0xa5, 0x31, 0xca, 0x97, 0xc8, 0x53, 0xa3, 0x94, 0x17, 0x9e, 0x27,
	0x97, 0xc7, 0x28, 0xd7, 0xc8, 0xd3, 0xe5, 0x37, 0x41, 0x63, 0x85, 0xe6, 0x60, 0x79, 0x85, 0xc9,
	0x36, 0xb8, 0x45, 0xd7, 0xa8, 0x85, 0x1a, 0x6b, 0x18, 0x1a, 0x13, 0xcd, 0xd4, 0xb0, 0x73, 0xa4,
	0xeb, 0xf2, 0x3d, 0x5f, 0x8e, 0x04, 0x4a, 0x34, 0x46, 0x7a, 0x51, 0x3e, 0x0f, 0xcb, 0x91, 0x5e,
	0x22, 0xb3, 0xe5, 0x97, 0x94, 0x33, 0x54, 0x3c, 0xb2, 0xca, 0x5c, 0x9c, 0x69, 0xe0, 0x93, 0xaf,
	0xa0, 0x1a, 0x88, 0x77, 0x60, 0x64, 0x2a, 0x6b, 0xe3, 0xf3, 0xac, 0x52, 0xf9, 0x0d, 0xe5, 0x2c,
	0xe5, 0xbe, 0xeb, 0xda, 0xdc, 0xa0, 0xba, 0xeb, 0x6b, 0xc9, 0x93, 0xd2, 0x33, 0xca, 0x29, 0xea,
	0x1b, 0x8c, 0x57, 0x2d, 0xd7, 0xf5, 0x39, 0x33, 0xd1, 0x99, 0x5e, 0x50, 0xce, 0xe4, 0x88, 0xc9,
	0x00, 0xf1, 0x80, 0x1d, 0x3b, 0xd6, 0x35, 0xcb, 0xe2, 0x9e, 0xe6, 0x51, 0x9f, 0x4c, 0xe3, 0x83,
	0xb5, 0x94, 0x98, 0x82, 0x67, 0xca, 0x6b, 0xca, 0x13, 0xe3, 0x4b, 0x1a, 0xa6, 0x4f, 0xf1, 0x01,
	0x9d, 0x78, 0x27, 0x6a, 0x18, 0xc2, 0x8a, 0xc9, 0x94, 0x78, 0xe0, 0x69, 0x18, 0x68, 0xe8, 0xa4,
	0x84, 0xee, 0x1c, 0x9a, 0xa1, 0x27, 0xdf, 0xcc, 0x41, 0xc3, 0x70, 0xd7, 0x1d, 0x32, 0x53, 0xfe,
	0xd3, 0x79, 0xe5, 0xa4, 0xad, 0x99, 0x4e, 0xce, 0x64, 0xc5, 0xe3, 0x42, 0x2c, 0x0b, 0x09, 0x18,
	0xf5, 0xb1, 0xcc, 0x40, 0x54, 0xf2, 0xd8, 0x2c, 0x7b, 0x56, 0x9b, 0x2b, 0x81, 0xc8, 0x93, 0xa9,
	0x21, 0x4a, 0x20, 0xe4, 0xb3, 0x45, 0x86, 0x85, 0x3f, 0xe2, 0x45, 0xdf, 0x0c, 0x16, 0xa9, 0x00,
	0x2d, 0x57, 0x60, 0x21, 0xea, 0x29, 0xc8, 0x6c, 0x3a, 0x51, 0xf6, 0x52, 0x4f, 0x77, 0x7d, 0x4a,
	0xe6, 0x84, 0x23, 0x67, 0xf8, 0xde, 0x74, 0x95, 0x3b, 0x9e, 0x4e, 0xe6, 0xf1, 0x29, 0x1c, 0x90,
	0xc4, 0xb3, 0x44, 0x7c, 0x0f, 0x67, 0x99, 0x01, 0x23, 0x0b, 0xf2, 0x69, 0x65, 0x6e, 0x16, 0x2c,
	0x99, 0x58, 0x44, 0x59, 0x03, 0x5d, 0xbc, 0x68, 0x46, 0xa2, 0x82, 0x0f, 0x4a, 0x33, 0x62, 0x10,
	0xea, 0x3a, 0x0d, 0x02, 0xd1, 0x79, 0x3c, 0x1d, 0x21, 0xd6, 0x40, 0xe2, 0x52, 0x3a, 0x42, 0xbe,
	0x87, 0xcc, 0x8f, 0x38, 0x81, 0x85, 0x22, 0xd0, 0x29, 0x1f, 0x1a, 0x33, 0x9f, 0x3a, 0x35, 0x56,
	0xa7, 0x0e, 0x39, 0x99, 0xb2, 0x25, 0xba, 0x7c, 0x1a, 0xb8, 0xd6, 0x1a, 0x25, 0xa7, 0x52, 0xba,
	0x16, 0x32, 0x97, 0xeb, 0xae, 0xed, 0x59, 0x94, 0x51, 0x42, 0x52, 0x41, 0x05, 0x18, 0x27, 0x35,
	0xc7, 0xd6, 0x56, 0x43, 0xb1, 0xcc, 0xe9, 0xb4, 0x6f, 0x64, 0x2e, 0x14, 0xba, 0x8a, 0x85, 0x37,
	0xd8, 0xa7, 0xe1, 0xc9, 0xd1, 0x5a, 0x8d, 0x33, 0x37, 0xd4, 0xeb, 0x62, 0xec, 0x99, 0xf4, 0x68,
	0x0d, 0x1f, 0xf8, 0x16, 0x4f, 0x72, 0xcf, 0xa6, 0x5c, 0x54, 0xc2, 0x0d, 0x61, 0x07, 0x88, 0x3e,
	0x97, 0xae, 0x14, 0x06, 0x54, 0x14, 0xfd, 0x30, 0x5f, 0x73, 0x82, 0x2a, 0xf5, 0xc9, 0xf9, 0x74,
	0x0c, 0xf4, 0x89, 0xd7, 0xbc, 0x30, 0xe6, 0x42, 0x2a, 0x21, 0x2c, 0x48, 0xc9, 0xca, 0x46, 0xa0,
	0x73, 0x39, 0xed, 0xd4, 0x5d, 0x08, 0x25, 0xae, 0x2d, 0x87, 0x02, 0xef, 0x4f, 0xa4, 0xe2, 0x0b,
	0xb4, 0x35, 0x9a, 0x94, 0x24, 0xb9, 0x8e, 0x4e, 0xc9, 0xc5, 0xb4, 0xcb, 0xc6, 0x32, 0x34, 0xcc,
	0x13, 0x02, 0x1c, 0xf5, 0x64, 0xda, 0xe5, 0x53, 0x4f, 0x33, 0x7d, 0x29, 0x14, 0xe8, 0xba, 0x94,
	0xb2, 0xef, 0x59, 0x1a, 0xee, 0xcb, 0xb4, 0xc0, 0xaf, 0x40, 0xdf, 0x53, 0xa9, 0xa0, 0xc0, 0xe2,
	0x3d, 0xd3, 0xa9, 0x09, 0x5d, 0x34, 0xe5, 0x0b, 0xd5, 0xcb, 0x39, 0x4e, 0x2d, 0x8c, 0xd3, 0x29,
	0xb3, 0x01, 0x79, 0x1a, 0x0b, 0xd5, 0xa0, 0xb3, 0x6e, 0x06, 0xcc, 0xf5, 0x37, 0xf2, 0x1c, 0x93,
	0x2b, 0xa9, 0x8c, 0x45, 0x6d, 0x9d, 0xc8, 0xd8, 0x9e, 0x49, 0xa9, 0xc2, 0xf7, 0x88, 0x4a, 0xbb,
	0x67, 0x53, 0x16, 0xc5, 0xe3, 0xde, 0x35, 0xcd, 0x0a, 0xa9, 0xec, 0x7b, 0x2e, 0x1d, 0x81, 0xec,
	0xcb, 0x4a, 0xa9, 0x95, 0x54, 0x2d, 0x93, 0x5a, 0x8b, 0x55, 0x4a, 0xae, 0xaa, 0xcb, 0xd2, 0x76,
	0x84, 0x22, 0xd7, 0x5c, 0xa9, 0xe1, 0x7f, 0x39, 0x5f, 0x7e, 0x19, 0x62, 0x32, 0xbe, 0xe8, 0xb5,
	0x5c, 0x26, 0x0b, 0x84, 0xd0, 0x01, 0x7b, 0x56, 0xc0, 0x1d, 0x57, 0xbc, 0x61, 0x16, 0xb5, 0x85,
	0x40, 0x81, 0x26, 0x85, 0xfc, 0xeb, 0x5f, 0x28, 0x4b, 0x54, 0x14, 0xae, 0x89, 0x21, 0xe0, 0x61,
	0xf4, 0x20, 0x4b, 0xf9, 0x30, 0x45, 0x10, 0x78, 0xf9, 0x4e, 0x1d, 0xb2, 0x15, 0x3c, 0x03, 0x32,
	0x5d, 0xb6, 0x21, 0xa7, 0x4b, 0x57, 0x85, 0xdc, 0x93, 0xc9, 0x25, 0x28, 0xf7, 0x5c, 0xcb, 0x44,
	0xa7, 0x0a, 0x76, 0x0d, 0x84, 0x0a, 0xd5, 0x7c, 0xbe, 0x8a, 0x25, 0x3d, 0xe0, 0x63, 0x90, 0x24,
	0x5e, 0x16, 0xbb, 0xba, 0xc9, 0x28, 0x99, 0x2e, 0xbf, 0xa8, 0x9c, 0xa4, 0x10, 0x18, 0x90, 0x21,
	0x74, 0x51, 0xb0, 0x03, 0x20, 0x18, 0x14, 0x4f, 0x40, 0x3e, 0x9e, 0x07, 0x4a, 0xa0, 0x6d, 0xf0,
	0x0d, 0x1a, 0x90, 0x52, 0xf9, 0x83, 0x29, 0x45, 0x95, 0x5c, 0xd0, 0x6a, 0x35, 0x4d, 0xb6, 0x40,
	0x61, 0x3c, 0x48, 0x0b, 0xa9, 0xee, 0xae, 0x81, 0x8e, 0x69, 0x4c, 0xa8, 0x99, 0x78, 0x7f, 0x2d,
	0x0a, 0x37, 0x98, 0xaf, 0x71, 0xcd, 0xb7, 0x5d, 0x5f, 0xba, 0x69, 0xa0, 0xba, 0x21, 0xf3, 0x42,
	0x86, 0xf9, 0xe9, 0x34, 0x72, 0x9a, 0x63, 0x00, 0x8b, 0x32, 0x65, 0x56, 0x04, 0x64, 0xcf, 0x77,
	0x19, 0xe4, 0x49, 0x58, 0x71, 0x84, 0x14, 0xcd, 0x30, 0x44, 0x42, 0x35, 0x57, 0xae, 0xa5, 0x67,
	0xc2, 0x4c, 0x7d, 0x55, 0x8a, 0x07, 0xcf, 0x84, 0x09, 0xd3, 0x73, 0x43, 0x26, 0x13, 0x25, 0xa0,
	0x54, 0x7c, 0x77, 0x95, 0x3a, 0x32, 0x51, 0x02, 0x82, 0x94, 0xe0, 0x74, 0x79, 0x15, 0xc2, 0x10,
	0x4e, 0x24, 0x6b, 0xfd, 0xe4, 0x5c, 0xe0, 0xe2, 0x3d, 0x1f, 0x54, 0x72, 0x8d, 0xca, 0x14, 0x0f,
	0x9a, 0x58, 0x69, 0x19, 0x6c, 0x38, 0xba, 0xcc, 0x25, 0x81, 0xe6, 0xb8, 0xac, 0x6e, 0x3a, 0x35,
	0x32, 0x5d, 0xbe, 0xa4, 0xcc, 0xdb, 0xb5, 0x34, 0x4d, 0xb4, 0x6b, 0xf2, 0xa1, 0x3d, 0xbe, 0xa3,
	0x9e, 0x2a, 0x5f, 0x53, 0x96, 0xec, 0x9a, 0x88, 0x3f, 0x49, 0x5a, 0x67, 0xd7, 0x7c, 0xc6, 0xbd,
	0xb0, 0x62, 0x99, 0xba, 0x90, 0xbf, 0x20, 0xf8, 0xe6, 0x1a, 0x86, 0x37, 0x71, 0xf1, 0x48, 0x7c,
	0x97, 0xa8, 0x29, 0x43, 0xb5, 0x31, 0xc0, 0x2f, 0x98, 0x4c, 0x6a, 0x9d, 0x51, 0xc7, 0x3e, 0xe0,
	0x61, 0x2a, 0xe9, 0x0e, 0x98, 0xeb, 0x91, 0x52, 0xf9, 0x5f, 0x2b, 0x57, 0x72, 0x95, 0x67, 0xa1,
	0x63, 0xb9, 0xfa, 0x2a, 0xd7, 0x5d, 0xc7, 0x30, 0xf1, 0xd5, 0x78, 0x9a, 0xd1, 0x9a, 0x21, 0xc8,
	0x57, 0x46, 0x24, 0x11, 0xac, 0x91, 0x04, 0xe6, 0x2a, 0x8b, 0x65, 0xb0, 0x8d, 0xf5, 0x17, 0x68,
	0x7f, 0x64, 0xba, 0xfc, 0x2a, 0xa4, 0x1c, 0xe9, 0xe4, 0xa2, 0xa8, 0x33, 0xcb, 0x58, 0x4d, 0x2d,
	0xa1, 0xc9, 0x68, 0x8a, 0x84, 0x90, 0xb9, 0xa4, 0x54, 0x6e, 0x80, 0x5a, 0x59, 0x26, 0x63, 0x16,
	0x9c, 0x96, 0x17, 0xa4, 0x77, 0x22, 0x6a, 0x25, 0xf6, 0x2d, 0x75, 0x09, 0xda, 0x9a, 0xae, 0x53,
	0x8f, 0x89, 0x17, 0xe0, 0x25, 0xf4, 0x9a, 0x16, 0xba, 0x15, 0xe1, 0xea, 0x05, 0x5d, 0x04, 0x65,
	0xa0, 0x8b, 0x38, 0x59, 0x66, 0x68, 0x3f, 0x75, 0x8f, 0x53, 0xdf, 0x77, 0x7d, 0xf1, 0x3e, 0x1b,
	0x82, 0xb8, 0x47, 0x75, 0x51, 0x0b, 0x0c, 0x01, 0x10, 0x1a, 0x8e, 0xcb, 0xab, 0x6e, 0xe8, 0x18,
	0xe8, 0x24, 0xa8, 0x2f, 0xab, 0x15, 0xa1, 0xc7, 0xd6, 0x4c, 0x4b, 0x84, 0x0f, 0x59, 0x2f, 0x5c,
	0x2a, 0xd7, 0x95, 0x53, 0x14, 0xcb, 0x29, 0xbc, 0xb4, 0xd4, 0x03, 0x04, 0xee, 0x79, 0xa2, 0x66,
	0x68, 0x2a, 0x6d, 0x69, 0x6c, 0x55, 0xde, 0x02, 0xa0, 0x65, 0xd0, 0xaa, 0x2c, 0x2e, 0x82, 0x56,
	0xdd, 0x23, 0x33, 0xe5, 0x00, 0x44, 0x60, 0xd0, 0x2a, 0x04, 0x71, 0x11, 0x30, 0x92, 0x3b, 0xaa,
	0x51, 0x65, 0xc9, 0xe9, 0x82, 0xda, 0x41, 0x33, 0x74, 0x74, 0xd7, 0xa9, 0x9a, 0xbe, 0x2d, 0x2f,
	0x96, 0x40, 0x83, 0x8b, 0x65, 0x8a, 0x47, 0xdb, 0x01, 0x6d, 0x3e, 0x3f, 0x3a, 0x29, 0x84, 0x96,
	0x54, 0xb6, 0x46, 0x35, 0x84, 0x1b, 0x27, 0xde, 0x7e, 0x51, 0x6f, 0xa0, 0x6d, 0x9b, 0x8e, 0x1b,
	0x48, 0xe3, 0x47, 0x82, 0x1e, 0x06, 0xcc, 0xb5, 0x49, 0xa9, 0x6c, 0xa0, 0x69, 0xa0, 0x99, 0x0b,
	0xcb, 0x90, 0x7e, 0x4c, 0x98, 0x46, 0x90, 0x9f, 0x09, 0x9a, 0xe9, 0x59, 0xe3, 0xa6, 0xfd, 0x80,
	0xd7, 0x5c, 0xc8, 0xf3, 0xfe, 0xb9, 0x72, 0x4e, 0x1a, 0x58, 0x62, 0xe7, 0xc2, 0x93, 0x08, 0xf3,
	0x31, 0x68, 0x92, 0x01, 0x48, 0x16, 0x80, 0x92, 0x58, 0x7e, 0xa9, 0xfc, 0x47, 0xe8, 0x7f, 0xea,
	0xae, 0x1f, 0x80, 0xba, 0x60, 0xf1, 0x86, 0xa8, 0xae, 0xb9, 0x48, 0xeb, 0x16, 0xcb, 0x2e, 0x68,
	0xa2, 0x70, 0x07, 0x22, 0x8d, 0x0b, 0x07, 0x08, 0x91, 0x07, 0xfa, 0x45, 0x8a, 0xe1, 0x6b, 0xce,
	0x2a, 0xd7, 0xc1, 0x42, 0xb0, 0x60, 0x33, 0x19, 0x9c, 0xa6, 0x37, 0x23, 0xfd, 0xd3, 0x69, 0xbf,
	0x2c, 0xfd, 0x41, 0x3d, 0x73, 0x03, 0x2a, 0x27, 0x9f, 0xc1, 0x33, 0xc1, 0xc5, 0x37, 0x56, 0x5f,
	0xc3, 0xb2, 0x0b, 0x32, 0x8b, 0xfe, 0x0d, 0x68, 0xb2, 0x44, 0xa3, 0x46, 0x19, 0x99, 0xc3, 0x6c,
	0x0c, 0x88, 0xb2, 0x74, 0xd7, 0xac, 0x89, 0x50, 0x33, 0x5f, 0x76, 0x60, 0x53, 0x8c, 0x4a, 0xf5,
	0x45, 0x2d, 0x33, 0x0d, 0x2c, 0x28, 0x67, 0xb6, 0xc9, 0x6b, 0xe6, 0x1a, 0xad, 0x80, 0xef, 0xce,
	0x9d, 0xa3, 0x54, 0x4a, 0xe8, 0xc6, 0x5c, 0x30, 0xdf, 0x55, 0x2a, 0xff, 0x7e, 0x06, 0x9c, 0x7b,
	0x9a, 0x49, 0x25, 0xce, 0x3d, 0x10, 0xe5, 0x6f, 0xb2, 0x30, 0x06, 0xc6, 0x07, 0xa3, 0x99, 0x81,
	0x48, 0x1b, 0x45, 0xfe, 0x19, 0xc8, 0xd2, 0x75, 0x19, 0x5c, 0x61, 0xcc, 0x74, 0xd2, 0x21, 0xc4,
	0xb8, 0x6e, 0x3a, 0xb2, 0x8c, 0x6d, 0x26, 0x29, 0x5f, 0xb2, 0x35, 0x67, 0x23, 0xc9, 0x25, 0xc8,
	0x6c, 0x42, 0xf5, 0x50, 0xa0, 0x2e, 0xab, 0x53, 0x3f, 0x20, 0x73, 0xc9, 0xc2, 0x3e, 0x0d, 0xa8,
	0xe6, 0xeb, 0x59, 0x42, 0x23, 0x73, 0xd0, 0x7c, 0x17, 0x16, 0x25, 0xd7, 0x4d, 0xb2, 0x80, 0x02,
	0x0d, 0x46, 0x62, 0xba, 0x4c, 0x40, 0x61, 0x0b, 0x2c, 0x34, 0x36, 0x64, 0xe2, 0xa5, 0x24, 0x3b,
	0xc5, 0x04, 0x16, 0xb8, 0x3e, 0x9e, 0x54, 0x26, 0xd5, 0x61, 0xa7, 0x75, 0x8d, 0x05, 0x64, 0x29,
	0xe1, 0x0c, 0x49, 0x49, 0x41, 0xc7, 0x89, 0xa4, 0xb4, 0x0a, 0xa9, 0xa2, 0x3c, 0xec, 0xe4, 0x08,
	0x32, 0x29, 0x07, 0x3b, 0x35, 0x82, 0x5c, 0x37, 0x9d, 0x5a, 0x40, 0xc8, 0xc8, 0x32, 0x15, 0x73,
	0x15, 0xd2, 0x4a, 0x39, 0x38, 0xf7, 0xdd, 0xc0, 0x20, 0x6a, 0x42, 0xcd, 0xe7, 0xa1, 0xe4, 0x0c,
	0x46, 0xbf, 0x40, 0x66, 0x26, 0x69, 0xb1, 0xcd, 0xd9, 0x84, 0x0c, 0x76, 0x8b, 0x15, 0x87, 0x58,
	0xc0, 0x78, 0x2e, 0x59, 0x8c, 0xd1, 0xa0, 0x1e, 0x56, 0xc3, 0xf5, 0x90, 0x9c, 0x4f, 0x90, 0x35,
	0x9a, 0xaf, 0xf8, 0xbe, 0x90, 0x9c, 0x19, 0x4c, 0x90, 0xd7, 0x92, 0x65, 0xf4, 0x9b, 0x69, 0x8d,
	0x1d, 0xd8, 0xb2, 0x0f, 0x97, 0x99, 0x27, 0xc6, 0xe8, 0x3e, 0x0d, 0x2c, 0x08, 0x79, 0x17, 0x93,
	0x3d, 0x4b, 0x7a, 0xd5, 0xbc, 0x41, 0x9e, 0x4c, 0xd6, 0x4c, 0x32, 0x3a, 0x98, 0x39, 0x20, 0x97,
	0xca, 0xd7, 0x95, 0x13, 0xb2, 0x7c, 0x1a, 0x02, 0x81, 0x69, 0x60, 0x71, 0x7a, 0x45, 0x33, 0xb9,
	0x1e, 0xba, 0x5f, 0xd1, 0x5c, 0xf2, 0xed, 0x79, 0xf5, 0x94, 0xa2, 0x20, 0xc5, 0x32, 0x9d, 0x8d,
	0x90, 0xbc, 0x3f, 0x5f, 0xbe, 0x09, 0x7e, 0x41, 0x98, 0xc6, 0xeb, 0xa1, 0x86, 0x69, 0x25, 0x5a,
	0x98, 0x28, 0x18, 0x7c, 0x5d, 0xc7, 0xc2, 0x2c, 0x47, 0x86, 0x0e, 0x68, 0x57, 0x40, 0x09, 0x44,
	0x04, 0x87, 0xa6, 0x17, 0xfa, 0x9e, 0x45, 0xe5, 0xa7, 0x0e, 0x20, 0xb8, 0x3e, 0x58, 0x30, 0x99,
	0x41, 0xff, 0x03, 0x04, 0x90, 0xfe, 0xac, 0xf0, 0x3f, 0x3e, 0x35, 0x28, 0xb5, 0x21, 0x90, 0x60,
	0x31, 0x72, 0x1a, 0xf6, 0x7c, 0x8d, 0x71, 0x3b, 0xb4, 0x98, 0xe9, 0xe1, 0x35, 0x13, 0xcb, 0x09,
	0x35, 0xc6, 0x03, 0xd3, 0xa9, 0x59, 0x60, 0x59, 0x36, 0x5e, 0x52, 0xc5, 0xe0, 0x80, 0xfa, 0x6b,
	0xd4, 0xe7, 0x7e, 0x68, 0x51, 0x59, 0x1e, 0xe8, 0x73, 0xd0, 0x7f, 0x51, 0xb5, 0x8d, 0xb3, 0x05,
	0x3e, 0x5c, 0xcb, 0x20, 0xe5, 0xa6, 0x32, 0x3f, 0x48, 0x40, 0x40, 0x99, 0x2e, 0xff, 0x4b, 0xc8,
	0x5a, 0xe4, 0x47, 0x20, 0x50, 0x9b, 0xaa, 0xa5, 0xd5, 0x44, 0x59, 0x51, 0x50, 0x4d, 0xdc, 0x29,
	0x70, 0x0f, 0x4d, 0x1d, 0xad, 0x36, 0x69, 0x09, 0x5f, 0xfa, 0xbf, 0xa6, 0x20, 0xfc, 0xa0, 0x79,
	0x99, 0x8e, 0x41, 0x6f, 0x80, 0xa8, 0xf1, 0x6a, 0x6c, 0x9a, 0xc5, 0x4a, 0x38, 0x38, 0x2b, 0xe8,
	0x18, 0x2b, 0x85, 0xc3, 0x1b, 0xb3, 0x69, 0x16, 0x6b, 0xe1, 0x32, 0xa2, 0xac, 0x85, 0x4b, 0xa1,
	0x32, 0xdf, 0xd6, 0x9c, 0x55, 0x59, 0xe2, 0x06, 0x44, 0x34, 0x38, 0xa4, 0xdd, 0x14, 0x3b, 0x05,
	0x1e, 0x44, 0x31, 0x2d, 0xd9, 0x12, 0xb7, 0x69, 0x33, 0x29, 0xf8, 0xda, 0x2e, 0x5f, 0x87, 0x9d,
	0x57, 0xdc, 0x20, 0x90, 0x29, 0x7d, 0x12, 0x93, 0x5e, 0x0b, 0x6d, 0x4f, 0x90, 0xc4, 0x49, 0xfb,
	0xa1, 0x23, 0x9b, 0xa5, 0xf2, 0x6f, 0x71, 0xb7, 0xe9, 0xc7, 0x8c, 0xf4, 0xb3, 0x69, 0x2a, 0x3f,
	0x32, 0x85, 0x05, 0xec, 0xda, 0x86, 0x3c, 0x30, 0x41, 0xc4, 0x6a, 0x3f, 0xfc, 0x4c, 0x8b, 0x7f,
	0x65, 0x00, 0x69, 0xf8, 0x77, 0x2b, 0xf0, 0xa0, 0xf9, 0x58, 0xcf, 0xcc, 0x28, 0x1a, 0x6e, 0x55,
	0x64, 0x76, 0x12, 0x1a, 0x7b, 0xf0, 0x26, 0xed, 0x53, 0x43, 0x9c, 0x01, 0xde, 0x97, 0xe7, 0x81,
	0x6d, 0x21, 0x21, 0x86, 0xb5, 0x6e, 0x4b, 0xca, 0x02, 0x7e, 0x07, 0xd0, 0x4c, 0x9b, 0x2c, 0xc2,
	0x29, 0x64, 0x81, 0x86, 0x1a, 0x62, 0x0c, 0xfe, 0x09, 0x8a, 0x6c, 0xea, 0xd4, 0x23, 0x1e, 0x2f,
	0xff, 0x6a, 0x4a, 0x39, 0x93, 0xdb, 0x73, 0x10, 0x56, 0xd2, 0xbc, 0x20, 0xfb, 0x08, 0x80, 0xf9,
	0x59, 0x16, 0xdb, 0xc4, 0xc7, 0x9b, 0x51, 0x47, 0x82, 0x1f, 0x6f, 0x5e, 0x73, 0xc1, 0x65, 0x27,
	0x85, 0x72, 0xb8, 0x53, 0x51, 0xf8, 0x16, 0x7a, 0xd2, 0x93, 0xcf, 0xa2, 0x40, 0xc5, 0x47, 0x63,
	0xc8, 0xfc, 0xb0, 0x94, 0xbf, 0xe6, 0xba, 0x46, 0xee, 0x12, 0x88, 0x1b, 0x44, 0x2f, 0x87, 0x8e,
	0x04, 0x3f, 0x03, 0xe6, 0xef, 0x53, 0xe8, 0x97, 0xd3, 0x2c, 0x50, 0x26, 0x51, 0x4a, 0x85, 0xfc,
	0xbf, 0x8f, 0x2f, 0x4f, 0x7d, 0xf4, 0xf1, 0xe5, 0xa9, 0x47, 0x1f, 0x5f, 0x9e, 0xfa, 0xee, 0x5f,
	0x5c, 0x3e, 0xf6, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59, 0x7c, 0x3a, 0xf9, 0xd9, 0x45, 0x00,
	0x00,
}
